!function(t){var e={};function n(r){if(e[r])return e[r].exports;var a=e[r]={i:r,l:!1,exports:{}};return t[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)n.d(r,a,function(e){return t[e]}.bind(null,a));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=6)}([function(t,e){},function(t,e,n){var r=n(2);"string"==typeof r&&(r=[[t.i,r,""]]);var a={hmr:!0,transform:void 0,insertInto:void 0};n(4)(r,a);r.locals&&(t.exports=r.locals)},function(t,e,n){(e=n(3)(!1)).push([t.i,"/* Icons for bootstrap 4 */\r\n\r\n.mdi::before {\r\n    font-size: 24px;\r\n    line-height: 14px;\r\n}\r\n\r\n.btn .mdi::before {\r\n    position: relative;\r\n    top: 4px;\r\n}\r\n\r\n.btn-xs .mdi::before {\r\n    font-size: 18px;\r\n    top: 3px;\r\n}\r\n\r\n.btn-sm .mdi::before {\r\n    font-size: 18px;\r\n    top: 3px;\r\n}\r\n\r\n.dropdown-menu .mdi {\r\n    width: 18px;\r\n}\r\n\r\n.dropdown-menu .mdi::before {\r\n    position: relative;\r\n    top: 4px;\r\n    left: -8px;\r\n}\r\n\r\n.nav .mdi::before {\r\n    position: relative;\r\n    top: 4px;\r\n}\r\n\r\n.navbar .navbar-toggle .mdi::before {\r\n    position: relative;\r\n    top: 4px;\r\n    color: #FFF;\r\n}\r\n\r\n.breadcrumb .mdi::before {\r\n    position: relative;\r\n    top: 4px;\r\n}\r\n\r\n.breadcrumb a:hover {\r\n    text-decoration: none;\r\n}\r\n\r\n.breadcrumb a:hover span {\r\n    text-decoration: underline;\r\n}\r\n\r\n.alert .mdi::before {\r\n    position: relative;\r\n    top: 4px;\r\n    margin-right: 2px;\r\n}\r\n\r\n.input-group-addon .mdi::before {\r\n    position: relative;\r\n    top: 3px;\r\n}\r\n\r\n.navbar-brand .mdi::before {\r\n    position: relative;\r\n    top: 2px;\r\n    margin-right: 2px;\r\n}\r\n\r\n.list-group-item .mdi::before {\r\n    position: relative;\r\n    top: 3px;\r\n    left: -3px\r\n}\r\n\r\n/* SVG elements and text */\r\n\r\n#main-vis {\r\n    margin-bottom: 10px;\r\n}\r\n\r\n.svg-container {\r\n    display: inline-block;\r\n    position: relative;\r\n    width: 100%;\r\n    /* aspect ratio */\r\n    vertical-align: top;\r\n    overflow: visible;\r\n}\r\n\r\n.svg-content {\r\n    display: inline-block;\r\n    position: absolute;\r\n    border: 1px solid #000;\r\n}\r\n\r\n#main-vis-legend-div {\r\n    display: none;\r\n}\r\n\r\n#hierarchy-legend-div {\r\n    display: none;\r\n}\r\n\r\n#main-vis-legend {\r\n    float: right;\r\n    display: inline-block;\r\n    position: relative;\r\n    overflow: visible;\r\n    top: 10px;\r\n    left: 10px;\r\n}\r\n\r\n#hierarchy-legend {\r\n    float: left;\r\n    display: inline-block;\r\n    position: relative;\r\n    overflow: visible;\r\n    top: 10px;\r\n    left: 10px;\r\n}\r\n\r\n.svg-content-dendrogram {\r\n    display: inline-block;\r\n    border: 1px solid #000;\r\n}\r\n\r\n.svg-line-chart-container {\r\n    display: inline-block;\r\n    position: relative;\r\n    width: 100%;\r\n    height: auto;\r\n    /* depends on svg ratio */\r\n    padding-bottom: 17%;\r\n    /* aspect ratio */\r\n    vertical-align: top;\r\n    overflow: visible;\r\n}\r\n\r\n.svg-dendrogram-container {\r\n    display: inline-block;\r\n    position: relative;\r\n    height: auto;\r\n    vertical-align: top;\r\n    overflow: visible;\r\n}\r\n\r\n.axis path {\r\n    display: none;\r\n}\r\n\r\n.axis line {\r\n    stroke-opacity: 0.3;\r\n    shape-rendering: crispEdges;\r\n}\r\n\r\n.x {\r\n    font-size: 1em;\r\n}\r\n\r\n.y {\r\n    font-size: 1em;\r\n}\r\n\r\n.axis-line-chart path line {\r\n    fill: none;\r\n    stroke: #000;\r\n    shape-rendering: crispEdges;\r\n}\r\n\r\n.line {\r\n    fill: none;\r\n    stroke-width: 5px;\r\n}\r\n\r\n/* Time  */\r\n\r\n.frame-text {\r\n    margin-top: 0;\r\n    margin-bottom: 0;\r\n    font-size: 2em;\r\n    color: inherit;\r\n    font-weight: 500;\r\n    line-height: 1.1;\r\n}\r\n\r\n/* Slider ticks  */\r\n\r\n.ui-slider-tick {\r\n    display: inline-block;\r\n    width: 3px;\r\n    background: #337ab7;\r\n    height: 0.8em;\r\n    position: absolute;\r\n}\r\n\r\n/* Laoding gif   */\r\n\r\n#loading {\r\n    display: block;\r\n    text-align: center;\r\n}\r\n\r\n/* Color legend    */\r\n\r\n.legend {\r\n    font-size: 12px;\r\n    stroke: #000;\r\n}\r\n\r\n.legend-text {\r\n    font-size: 1.2em;\r\n    color: inherit;\r\n    line-height: 1.1;\r\n}\r\n\r\n.line-chart-legend-text {\r\n    font-size: 2em;\r\n    color: inherit;\r\n    line-height: 1.1;\r\n}\r\n\r\n.time-line {\r\n    fill: none;\r\n    stroke-width: 5px;\r\n    stroke: #000;\r\n}\r\n\r\n/*swarm features */\r\n\r\n.centroid {\r\n    fill-opacity: 0;\r\n    stroke: #e7298a;\r\n    stroke-width: 3px;\r\n}\r\n\r\n.medoid {\r\n    fill: #e7298a !important;\r\n    stroke: #e7298a !important;\r\n}\r\n\r\n.hull-path {\r\n    fill: #fff;\r\n    fill-opacity: 0;\r\n    stroke-width: 3;\r\n    stroke: #252525;\r\n    stroke-opacity: 0.5;\r\n}\r\n\r\n.hierarchy-group {\r\n    stroke-width: 10;\r\n    stroke-linejoin: round;\r\n    opacity: 0.2;\r\n}\r\n\r\n.delaunay-triangulation {\r\n    fill-opacity: 0;\r\n    stroke-width: 2;\r\n    stroke: #000;\r\n    stroke-opacity: 0.4;\r\n}\r\n\r\n/* Color brewer picker div */\r\n\r\n.palette {\r\n    cursor: pointer;\r\n    display: table;\r\n    vertical-align: bottom;\r\n    margin: 4px 0 4px 4px;\r\n    background: #fff;\r\n    border: solid 1px #aaa;\r\n}\r\n\r\n.swatch {\r\n    display: inline-block;\r\n    vertical-align: middle;\r\n    width: 22px;\r\n    height: 22px;\r\n}\r\n\r\n.voronoi {\r\n    fill-opacity: 0;\r\n    stroke-width: 3;\r\n    stroke: #000;\r\n    stroke-opacity: 0.2;\r\n}\r\n\r\n/* Tooltip */\r\n\r\ndiv.tooltip {\r\n    pointer-events: none;\r\n    opacity: 0;\r\n    background: rgb(255, 255, 255) !important;\r\n    border-left-color: #1b809e !important;\r\n    border: 1px solid #eee;\r\n    border-left-width: 5px;\r\n    border-radius: 3px;\r\n    position: absolute;\r\n}\r\n\r\ndiv.tooltip table td:nth-child(2) {\r\n    text-align: center;\r\n    font-weight: bold;\r\n}\r\n\r\n.tooltip-span {\r\n    display: block;\r\n    width: 150px;\r\n    word-wrap: break-word;\r\n    font-size: 1.5em;\r\n}\r\n\r\n.upper-outer-area, .lower-outer-area {\r\n    stroke-width: 1;\r\n    fill: #74a9cf;\r\n    stroke: #3690c0;\r\n}\r\n\r\n.upper-inner-area, .lower-inner-area {\r\n    stroke-width: 1;\r\n    fill: #045a8d;\r\n    stroke: #023858;\r\n}\r\n\r\n.median-line {\r\n    fill: none;\r\n    stroke: #525252;\r\n    stroke-width: 5;\r\n}\r\n\r\n.selected {\r\n    background: #999;\r\n    border: 4px solid #4d4d4d;\r\n    -moz-border-radius: 5px;\r\n    -webkit-border-radius: 5px;\r\n    box-shadow: 1px 2px 4px rgba(0, 0, 0, .4);\r\n}\r\n\r\n.zoom {\r\n    fill: none;\r\n    pointer-events: all;\r\n}\r\n\r\n.x.axis-line-chart>g>text {\r\n    font-size: 3em;\r\n    color: inherit;\r\n    line-height: 1.1;\r\n}\r\n\r\n.arrow {\r\n    stroke-width: 1;\r\n}\r\n\r\n#centroid-line {\r\n    stroke-width: 1;\r\n    stroke: #e7298a;\r\n}\r\n\r\n#centroid-arrow {\r\n    fill: #e7298a;\r\n}\r\n\r\n.metadata-swatch {\r\n    width: 30px;\r\n    height: 30px;\r\n    border-radius: 3px;\r\n    border: 2px solid #666;\r\n}\r\n\r\n.metadata-swatch-clickable:hover {\r\n    border: 2px solid #000;\r\n    cursor: pointer;\r\n}\r\n\r\n.dropdown-menu {\r\n    min-width: 40px;\r\n    padding: 5px;\r\n}\r\n\r\n.metadata-legend {\r\n    list-style: none;\r\n    margin-top: 10px;\r\n}\r\n\r\n.metadata-legend li {\r\n    float: left;\r\n    margin-right: 10px;\r\n}\r\n\r\n.metadata-legend span {\r\n    border: 2px solid #666;\r\n    float: left;\r\n    width: 30px;\r\n    height: 30px;\r\n}\r\n\r\n.metadata-legend .bl-avg {\r\n    background-color: #7fc97f;\r\n}\r\n\r\n.metadata-legend .avg {\r\n    background-color: #fdc086;\r\n}\r\n\r\n.metadata-legend .ab-avg {\r\n    background-color: #386cb0;\r\n}\r\n\r\n.network-edges {\r\n    fill-opacity: 0;\r\n    stroke-width: 2;\r\n}\r\n\r\n.network-background-edges {\r\n    fill-opacity: 0;\r\n    stroke-opacity: 0.25;\r\n    stroke: #737373;\r\n}\r\n\r\n.node text {\r\n    font: 12px sans-serif;\r\n}\r\n\r\n.node--internal text {\r\n    text-shadow: 0 1px 0 #fff, 0 -1px 0 #fff, 1px 0 0 #fff, -1px 0 0 #fff;\r\n}\r\n\r\n.link {\r\n    fill: none;\r\n    stroke: #636363;\r\n    stroke-width: 5px;\r\n}\r\n\r\n#active-network-name {\r\n    font-weight: bold;\r\n    color: #296292;\r\n}\r\n\r\n.active-level {\r\n    fill: #386cb0;\r\n}\r\n\r\n#dendrogram-panel {\r\n    position: initial;\r\n}\r\n\r\n#dendrogram-panel {\r\n    display: none\r\n}\r\n\r\n.show-dendrogram {\r\n    float: right;\r\n    border-radius: 3px;\r\n    border: 1px solid #D1D3D4;\r\n    font-weight: normal;\r\n}\r\n\r\n.show-dendrogram:hover {\r\n    background: #D1D3D4;\r\n}\r\n\r\n.dendrogram-text {\r\n    font-size: 10em !important;\r\n}\r\n\r\n.highlight-hierarchy {\r\n    fill: #252525;\r\n    stroke: #252525;\r\n    stroke-width: 10;\r\n    stroke-linejoin: round;\r\n    opacity: 0.3;\r\n}\r\n\r\n.animal-highlight {\r\n    fill: #c51b7d !important;\r\n}\r\n\r\n#dendrogram-buttons-div .btn span.glyphicon {\r\n    opacity: 0;\r\n}\r\n\r\n#dendrogram-buttons-div .btn.active span.glyphicon {\r\n    opacity: 1;\r\n}\r\n\r\n#dendrogram-buttons-div {\r\n    border: 2px solid #D1D3D4;\r\n    border-radius: 5px;\r\n}\r\n\r\n#dendrogram-legend {\r\n    margin-left: 20px;\r\n}\r\n\r\n.intersection {\r\n    fill: url(#striped) !important;\r\n    stroke: #67000d;\r\n}\r\n\r\n.sym-difference {\r\n    fill: url(#striped) !important;\r\n    stroke: #67000d;\r\n}\r\n\r\n.modal-lg {\r\n    max-width: 80%;\r\n}\r\n\r\n.background-image {\r\n    background: #fff;\r\n}",""]),t.exports=e},function(t,e,n){"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=function(t,e){var n=t[1]||"",r=t[3];if(!r)return n;if(e&&"function"==typeof btoa){var a=(o=r,l=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(l),"/*# ".concat(s," */")),i=r.sources.map((function(t){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(t," */")}));return[n].concat(i).concat([a]).join("\n")}var o,l,s;return[n].join("\n")}(e,t);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,r){"string"==typeof t&&(t=[[null,t,""]]);var a={};if(r)for(var i=0;i<this.length;i++){var o=this[i][0];null!=o&&(a[o]=!0)}for(var l=0;l<t.length;l++){var s=[].concat(t[l]);r&&a[s[0]]||(n&&(s[2]?s[2]="".concat(n," and ").concat(s[2]):s[2]=n),e.push(s))}},e}},function(t,e,n){var r,a,i={},o=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===a&&(a=r.apply(this,arguments)),a}),l=function(t){return document.querySelector(t)},s=function(t){var e={};return function(t){if("function"==typeof t)return t();if(void 0===e[t]){var n=l.call(this,t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}}(),d=null,c=0,p=[],u=n(5);function h(t,e){for(var n=0;n<t.length;n++){var r=t[n],a=i[r.id];if(a){a.refs++;for(var o=0;o<a.parts.length;o++)a.parts[o](r.parts[o]);for(;o<r.parts.length;o++)a.parts.push(y(r.parts[o],e))}else{var l=[];for(o=0;o<r.parts.length;o++)l.push(y(r.parts[o],e));i[r.id]={id:r.id,refs:1,parts:l}}}}function f(t,e){for(var n=[],r={},a=0;a<t.length;a++){var i=t[a],o=e.base?i[0]+e.base:i[0],l={css:i[1],media:i[2],sourceMap:i[3]};r[o]?r[o].parts.push(l):n.push(r[o]={id:o,parts:[l]})}return n}function m(t,e){var n=s(t.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=p[p.length-1];if("top"===t.insertAt)r?r.nextSibling?n.insertBefore(e,r.nextSibling):n.appendChild(e):n.insertBefore(e,n.firstChild),p.push(e);else if("bottom"===t.insertAt)n.appendChild(e);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var a=s(t.insertInto+" "+t.insertAt.before);n.insertBefore(e,a)}}function g(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var e=p.indexOf(t);e>=0&&p.splice(e,1)}function v(t){var e=document.createElement("style");return void 0===t.attrs.type&&(t.attrs.type="text/css"),b(e,t.attrs),m(t,e),e}function b(t,e){Object.keys(e).forEach((function(n){t.setAttribute(n,e[n])}))}function y(t,e){var n,r,a,i;if(e.transform&&t.css){if(!(i=e.transform(t.css)))return function(){};t.css=i}if(e.singleton){var o=c++;n=d||(d=v(e)),r=k.bind(null,n,o,!1),a=k.bind(null,n,o,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(t){var e=document.createElement("link");return void 0===t.attrs.type&&(t.attrs.type="text/css"),t.attrs.rel="stylesheet",b(e,t.attrs),m(t,e),e}(e),r=C.bind(null,n,e),a=function(){g(n),n.href&&URL.revokeObjectURL(n.href)}):(n=v(e),r=$.bind(null,n),a=function(){g(n)});return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else a()}}t.exports=function(t,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=o()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var n=f(t,e);return h(n,e),function(t){for(var r=[],a=0;a<n.length;a++){var o=n[a];(l=i[o.id]).refs--,r.push(l)}t&&h(f(t,e),e);for(a=0;a<r.length;a++){var l;if(0===(l=r[a]).refs){for(var s=0;s<l.parts.length;s++)l.parts[s]();delete i[l.id]}}}};var x,w=(x=[],function(t,e){return x[t]=e,x.filter(Boolean).join("\n")});function k(t,e,n,r){var a=n?"":r.css;if(t.styleSheet)t.styleSheet.cssText=w(e,a);else{var i=document.createTextNode(a),o=t.childNodes;o[e]&&t.removeChild(o[e]),o.length?t.insertBefore(i,o[e]):t.appendChild(i)}}function $(t,e){var n=e.css,r=e.media;if(r&&t.setAttribute("media",r),t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}function C(t,e,n){var r=n.css,a=n.sourceMap,i=void 0===e.convertToAbsoluteUrls&&a;(e.convertToAbsoluteUrls||i)&&(r=u(r)),a&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */");var o=new Blob([r],{type:"text/css"}),l=t.href;t.href=URL.createObjectURL(o),l&&URL.revokeObjectURL(l)}},function(t,e){t.exports=function(t){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var n=e.protocol+"//"+e.host,r=n+e.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,(function(t,e){var a,i=e.trim().replace(/^"(.*)"$/,(function(t,e){return e})).replace(/^'(.*)'$/,(function(t,e){return e}));return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?t:(a=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(a)+")")}))}},function(t,e,n){"use strict";let r,a;function i(){let t=D,e=Y;for(var n=d3.event.selection,r=0;r<It.length;r++){var a=[t[r].p[0],t[r].p[1]];n[0][0]<=a[0]&&a[0]<=n[1][0]&&n[0][1]<=a[1]&&a[1]<=n[1][1]&&e.push(t[r].a)}K(e),$("#play-button").hasClass("active")||(q(),V()),$("#brushing-button").removeClass("active"),$(".brush").remove()}n.r(e),n.d(e,"dataset",(function(){return Bt})),n.d(e,"datasetMetadata",(function(){return Ut})),n.d(e,"swarmData",(function(){return Rt})),n.d(e,"dataSetPercentile",(function(){return Nt})),n.d(e,"networkData",(function(){return Wt})),n.d(e,"networkHierarchy",(function(){return Pt})),n.d(e,"animalIds",(function(){return It})),n.d(e,"addToDataset",(function(){return Gt})),n.d(e,"setDataSetPercentile",(function(){return Ht})),n.d(e,"setMetaData",(function(){return Yt})),n.d(e,"setSwarmData",(function(){return Ft})),n.d(e,"setDatasetFeature",(function(){return Vt})),n.d(e,"setNetworkData",(function(){return Zt})),n.d(e,"setHierarchyData",(function(){return qt})),n.d(e,"setAnimalIds",(function(){return Jt}));let o,l={type:"Linear",color:colorbrewer.BuYlBu};function s(){return"Linear"===l.type?d3.scaleLinear().domain(Nt[G]).range(l.color):"Threshold"===l.type?d3.scaleThreshold().domain(Nt[G]).range(l.color):void 0}function d(){let t,e;if($("#main-vis-legend-div").show(),"black"!==G){var n=s();t=o.selectAll("rect.legend").data(n.range()),e=o.selectAll("text.legend-text").data(n.domain())}else t=o.selectAll("rect.legend").data([]),e=o.selectAll("text.legend-text").data([]),$("#main-vis-legend-div").hide();t.style("fill",(function(t){return t})),t.enter().append("rect").attr("class","legend").attr("width",50).attr("height",20).attr("y",0).attr("x",(function(t,e){return 50+50*e+"px"})).style("fill",(function(t){return t})),t.exit().remove(),e.text((function(t){return Math.ceil(2*t)/2})),e.enter().append("text").attr("class","legend-text").attr("y",40).attr("x",(function(t,e){return 50+50*e+5+"px"})).text((function(t){return Math.ceil(2*t)/2})),e.exit().remove()}let c={};function p(){u();let t=$("#group-metadata .btn.btn-default.active input").attr("value"),e=$("#bl-avg").val(),n=$("#ab-avg").val(),r=["#7fc97f","#fdc086","#386cb0"];for(let a=0;a<Ut.length;a++)Ut[a][t]<e?c[Ut[a].animal_id]=r[0]:Ut[a][t]>n?c[Ut[a].animal_id]=r[2]:c[Ut[a].animal_id]=r[1]}function u(){c={},$(".dropdown #preview").css("background-color","rgb(255, 255, 255)")}var h=n(0);let f,m,g=!0;function v(){$("#play-button").click((function(){!0===$("#play-button").hasClass("active")?(g=!1,$(".mdi-pause").hide(),$(".mdi-play").show()):(g=!0,$(".mdi-play").hide(),$(".mdi-pause").show(),Z(r.slider("value")),$(".brush").remove(),V())})),$("#next-frame-button").click((function(){!0===$("#play-button").hasClass("active")&&(g=!1),$("#play-button").removeClass("active"),V()})),$("#brushing-button").click((function(){g=!1,$("#play-button").removeClass("active"),$("#brushing-button").hasClass("active")?$(".brush").remove():(f=d3.brush().extent([[0,0],[E,S]]).on("end",i),d3.select("#main-vis-svg").append("g").attr("class","brush").call(f))})),$("#remove-active-selected-button").click((function(){$("#remove-active-selected-button").is(":disabled")||($("#remove-active-selected-button").prop("disabled",!0),K([]),Object(h.resetTrackedData)(),$("#visual-parameter-button").prop("disabled",!0).removeClass("active"),$("#play-button").hasClass("active")||(q(),V()))})),$("#visual-parameter-button").click((function(){!0===$("#visual-parameter-button").hasClass("active")?Object(h.setTrackingBoolean)(!1):Object(h.setTrackingBoolean)(!0)})),$("#calculate-parameter-button").click((function(){$("#calculate-parameter-button").hasClass("active")||(Object(h.setTrackingBoolean)(!1),Object(h.sendTrackedData)(),$("#calculate-parameter-button").prop("disabled",!0),$("#calculate-parameter-button").removeClass("active"),$("#visual-parameter-button").removeClass("active"))})),$("#background-color").change((function(){let t=$('input[type="radio"].group-background:checked').val();$("#main-vis-svg").css("background-color",t)})),$("#draw-axis").on("change",(function(){this.checked?($("#main-vis g.x.axis").show(),$("#main-vis g.y.axis").show()):($("#main-vis g.x.axis").hide(),$("#main-vis g.y.axis").hide())})),$("#draw-time").on("change",(function(){this.checked?$("#main-vis .frame-text").show():$("#main-vis .frame-text").hide()})),$("#network-background").on("change",(function(){this.checked?At(!0):At(!1)})),$("#network-background-limit").val(1),$("#network-background-limit").on("change",(function(){let t=$(this).val();$.isNumeric(t)&&t>0?kt=t:$(this).val(1)})),$("#color-scale-radio-form input").on("change",(function(){l.type=$("input[name=color-scale-radio]:checked","#color-scale-radio-form").val(),$("#play-button").hasClass("active")||(q(),V())})),$("#draw-direction").click((function(){$("#draw-direction").is(":checked")?("direction"in Bt[0]||(y(),Dt("direction")),$(".arrow").show()):$(".arrow").hide(),$("#play-button").hasClass("active")||(q(),V())})),$("#draw-medoid").click((function(){$("#draw-medoid").is(":checked")?("medoid"in Rt[0]||zt("medoid"),X(Rt[I].medoid),d3.selectAll("#animal-"+H).classed("medoid",!0)):(d3.selectAll("#animal-"+H).classed("medoid",!1),X(-1))})),$("#draw-centroid").click((function(){$("#draw-centroid").is(":checked")?("centroid"in Rt[0]||zt("centroid"),$("#g-centroid").show()):$("#g-centroid").hide()})),$("#draw-convex-hull").click((function(){$("#draw-convex-hull").is(":checked")&&("hull"in Rt[0]||zt("convex_hull"))})),$("#draw-triangulation").click((function(){$("#draw-triangulation").is(":checked")&&("triangulation"in Rt[0]||zt("triangulation"),$("#play-button").hasClass("active")||(q(),V()))})),$("#draw-voronoi").click((function(){$("#draw-voronoi").is(":checked")&&("voronoi"in Rt[0]||zt("voronoi"),$("#play-button").hasClass("active")||(q(),V()))})),$("#draw-speed").click((function(){$(".draw-details").hide().find("input:checkbox").prop("checked",!0).click(),$("#draw-speed").is(":checked")?("speed"in Bt[0]||(y(),Dt("speed")),$("#draw-speed-details").show(),$("#draw-acceleration").prop("checked",!1),$("#draw-distance_centroid").prop("checked",!1),$("#draw-midline_offset").prop("checked",!1),J("speed")):($("#draw-speed-details").hide(),J("black")),d3.selectAll(".colorLegend *").remove(),d(),$("#play-button").hasClass("active")||(q(),V())})),$("#draw-acceleration").click((function(){$(".draw-details").hide().find("input:checkbox").prop("checked",!0).click(),$("#draw-acceleration").is(":checked")?("acceleration"in Bt[0]||(y(),Dt("acceleration")),$("#draw-acceleration-details").show(),$("#draw-speed").prop("checked",!1),$("#draw-distance_centroid").prop("checked",!1),$("#draw-midline_offset").prop("checked",!1),J("acceleration")):($("#draw-acceleration-details").hide(),J("black")),$(".draw-details.active").click(),d3.selectAll(".colorLegend *").remove(),d(),$("#play-button").hasClass("active")||(q(),V())})),$("#draw-distance_centroid").click((function(){$(".draw-details").hide().find("input:checkbox").prop("checked",!0).click(),$("#draw-distance_centroid").is(":checked")?("distance_centroid"in Bt[0]||(y(),Dt("distance_centroid")),$("#draw-distance_centroid-details").show(),$("#draw-speed").prop("checked",!1),$("#draw-acceleration").prop("checked",!1),$("#draw-midline_offset").prop("checked",!1),J("distance_centroid")):($("#draw-distance_centroid-details").hide(),J("black")),$(".draw-details.active").click(),d3.selectAll(".colorLegend *").remove(),d(),$("#play-button").hasClass("active")||(q(),V())})),$("#draw-midline_offset").click((function(){$(".draw-details").hide().find("input:checkbox").prop("checked",!0).click(),$("#draw-midline_offset").is(":checked")?("draw-midline_offset"in Bt[0]||(y(),Dt("midline_offset")),$("#draw-midline_offset-details").show(),$("#draw-speed").prop("checked",!1),$("#draw-acceleration").prop("checked",!1),$("#draw-distance_centroid").prop("checked",!1),J("midline_offset")):J("black"),$(".draw-details.active").click(),d3.selectAll(".colorLegend *").remove(),d(),$("#play-button").hasClass("active")||(q(),V())})),$(".metadata-swatch.metadata-swatch-clickable").click((function(){let t=$(this).attr("value"),e=$(this).css("background-color");$("#metadata-row-"+t+" #preview").css("background-color",e),"rgb(255, 255, 255)"===e?c[t]&&delete c[t]:c[t]=e})),$("#group-metadata :input").change((function(){u();let t=$(this).attr("value"),e=[];if("sex"===t){$("#metadata-div").modal("toggle");for(let n=0;n<Ut.length;n++)e.push(Ut[n][t].toLowerCase());e=Array.from(new Set(e));let n=["#7fc97f","#386cb0"];for(let r=0;r<Ut.length;r++)for(let a=0;a<e.length;a++)Ut[r][t].toLowerCase()===e[a]&&(c[Ut[r].animal_id]=n[a]);$("#metadata-input").hide()}else{$("#metadata-input").show();for(let n=0;n<Ut.length;n++)e.push(Ut[n][t]);let n=d3.quantile(e,.25),r=d3.quantile(e,.75);$("#bl-avg").val(n),$("#ab-avg").val(r),p()}})),$(".number-spinner button").click((function(){let t=$(this),e=t.closest(".number-spinner").find("input").val().trim(),n=0;n="up"==t.attr("data-dir")?parseFloat(e)+.1:e>0?parseFloat(e)-.1:0,n=Math.round(100*n)/100,t.closest(".number-spinner").find("input").val(n),p()})),$(".number-spinner input").on("input",(function(){p()})),$("#metadata-reset").click((function(){$("#metadata-input").hide(),u()})),$("#networks-modal-body button").click((function(){let t=$(this).attr("data");$("#active-network-name").text($(this).attr("name")),y(),function(t){$.ajax({url:"/api/dataset/network/"+parameters.id+"/"+t,dataType:"json",type:"GET",contentType:"application/json; charset=utf-8",headers:{Accept:Mt},success:function(t){t.length&&Zt(JSON.parse(t[0].data)),x()}}),Tt(t)}(t),_t(t),$("#network-div").modal("toggle")})),$("#network-remove").click((function(){Zt({}),Tt(-1),_t(-1),$("#active-network-name").text("")})),$("#network-auto-suggest").click((function(){if($("#network-auto-suggest").hasClass("active")){$("#network-limit-p").show(),$("#network-slider").show(),Ct(!1);let t=$("#network-slider").slider("value");Lt(t),$("#network-limit").val(t)}else $("#network-limit-p").hide(),$("#network-slider").hide(),Ct(!0)})),$(".hiearchy-checkbox").on("change",(function(){let t=$(this),e=t.attr("data"),n=t.attr("name"),r=t.prop("checked");if(console.log(r),r&&$(".show-dendrogram").length<rt)y(),a=e,$.ajax({url:"/api/dataset/network/hierarchy/"+parameters.id+"/"+a,dataType:"json",type:"GET",contentType:"application/json; charset=utf-8",headers:{Accept:Mt},success:function(t){t.length&&qt(JSON.parse(t[0].hierarchy),a),x()}}),function(t,e){$(".show-dendrogram").length<rt&&($("#dendrogram-buttons-div").append('<button type="button" id="show-dendrogram-'+t+'" data='+t+" name="+e+' class="show-dendrogram btn btn-block" data-toggle="button" aria-pressed="false" autocomplete="off"> <span class="btn-label" id="btn-left"> <i class="mdi mdi-arrow-collapse-left"></i>&nbsp&nbsp Show '+e+'</span><span class="btn-label" id="btn-right"> <i class="mdi mdi-arrow-collapse-right"></i>&nbsp&nbsp Hide '+e+" </span></button> <br>"),$("#show-dendrogram-"+t).find("#btn-right").hide())}(e,n),function(t){$("#show-dendrogram-"+t).click((function(){let t=$(this).attr("id");$(".show-dendrogram").each((function(e,n){$(n).attr("id")===t&&!1===$(n).hasClass("btn-primary")?($(n).addClass("btn-primary"),$(n).find("#btn-left").hide(),$(n).find("#btn-right").show()):($(n).removeClass("btn-primary"),$(n).find("#btn-left").show(),$(n).find("#btn-right").hide())})),$(".show-dendrogram.btn-primary").length?$("#dendrogram-panel").show():$("#dendrogram-panel").hide(),$("#play-button").hasClass("active")||(q(),V(),st())}))}(e),$("#dendrogram-buttons-div").show();else{let t=$("#show-dendrogram-"+e).hasClass("btn-primary");qt({},e),function(t){$("#show-dendrogram-"+t).next().remove(),$("#show-dendrogram-"+t).remove()}(e),d3.select("g.h"+e).remove(),!0===t&&$("#dendrogram-panel").hide(),0===$(".show-dendrogram").length&&$("#dendrogram-buttons-div").hide()}var a;$(".show-dendrogram").length?($("#main-vis-div").removeClass("col-md-12"),$("#main-vis-div").addClass("col-md-8")):($("#main-vis-div").removeClass("col-md-8"),$("#main-vis-div").addClass("col-md-12"))})),$(".network-hierarchy-checkbox").on("change",(function(){let t=$(this);$(".network-hierarchy-checkbox").prop("checked",!1),t.prop("checked",!0),t.prop("checked")?jt(t.attr("data")):jt(void 0)})),$(".set-button").click((function(){let t=$(this).find("input").attr("data");et=t,$("#play-button").hasClass("active")||(q(),V(),st())}))}function b(t){g="boolean"==typeof t&&t}function y(){b(!1),$("#play-button").removeClass("active"),$("#play-button").prop("disabled",!0),$("#play-icons").hide(),$("#play-loading").show()}function x(){b(!0),$("#play-button").addClass("active"),$("#play-button").prop("disabled",!1),$("#play-loading").hide(),$("#play-icons").show(),V()}function w(t){let e=[.05,.25,.5,.75,.95],n=[];if(0===t.length)return 0;t.sort((function(t,e){return t-e}));for(let r=0;r<e.length;r++){let a=(t.length-1)*e[r],i=Math.floor(a),o=i+1,l=a%1;o>=t.length?n.push(t[i]):n.push(t[i]*(1-l)+t[o]*l)}return n}function k(){$(".draw-details").click((function(){$(this).find("input:checkbox").prop("checked")?new O(this,Rt).disableLineChart():($(".trendChartData").hide(),$("#trendChartLegend").hide(),$("#lineChartLegend").show(),$(".lineChartButton").prop("checked",!0).prop("disabled",!1),$(".line-chart-check-box").attr("disabled",!1),$(".lineChartLine").attr("visibility","visible"))}))}String.prototype.hashCode=function(){var t,e=0;if(0===this.length)return e;for(t=0;t<this.length;t++)e=(e<<5)-e+this.charCodeAt(t),e|=0;return e},d3.selection.prototype.moveToBack=function(){return this.each((function(){var t=this.parentNode.firstChild;t&&this.parentNode.insertBefore(this,t)}))};let C,L,j,T={},_=1;class A{constructor(t){this.swarmData=t,this.swarm_features=Object.keys(this.swarmData[0]),this.lineChartWidth=5e3,this.trendChartsElem=["lower-outer-area","lower-inner-area","median-line","upper-inner-area","upper-outer-area"]}}class M extends A{constructor(t){super(t),this.lineChart()}lineChart(){_=Math.ceil(this.swarmData.length/this.lineChartWidth);let t=100,e=10,n=this.swarm_features,r=n.indexOf("time");n.splice(r,1);let a=[];if(this.swarmData.length>this.lineChartWidth){let t=new Array(n.length).fill(0);for(let e=0;e<this.swarmData.length;e++){for(let r=0;r<n.length;r++)t[r]+=this.swarmData[e][n[r]];if(e%_==0){let r={time:e/_};for(let e=0;e<n.length;e++)t[e]=t[e]/_,r[n[e]]=t[e];a.push(r),t=new Array(n.length).fill(0)}}}else a=this.swarmData;m=d3.scaleLinear().domain([0,a.length]).range([0,this.lineChartWidth]),L=d3.scaleLinear().domain([0,a.length]).range([0,this.lineChartWidth]);let i=d3.scaleLinear().domain([0,a.length]).range([0,this.lineChartWidth]),o=d3.axisBottom(L).ticks(10).tickSize(10).tickPadding(5).tickFormat((function(t){return Math.floor(t*_/1500)%60+":"+Math.floor(t*_/parameters.fps)%60+"::"+t*_%parameters.fps}));j=d3.scaleLinear().domain([0,100]).range([500,0]);let l=d3.axisLeft(j).ticks(0).tickSize(10).tickPadding(5),s=function(){let t=d3.mouse(this);if(t[0]<e||t[0]>this.lineChartWidth||t[1]<0||t[1]>500)return;let n=d3.scaleLinear().domain(m.range()).range(m.domain());Z(Math.floor(n(t[0]-e)*_))},d=d3.zoom().scaleExtent([1,20]).translateExtent([[0,0],[this.lineChartWidth,500]]).extent([[0,0],[this.lineChartWidth,500]]).on("zoom",(function(){let t=d3.event.transform;m=L.domain(t.rescaleX(i).domain());for(let t in h)h.hasOwnProperty(t)&&C.select("#"+t+"Line").attr("d",h[t]);for(let t in T)if(T.hasOwnProperty(t))for(let e=0;e<this.trendChartsElem.length;e++)C.select("#"+t+"TrendChart ."+this.trendChartsElem[e]).attr("d",T[t][this.trendChartsElem[e]]);p.call(o)})),c=d3.select("#swarm-vis").classed("svg-line-chart-container",!0).append("svg").attr("preserveAspectRatio","xMinYMin meet").attr("viewBox","0 0 "+this.lineChartWidth+" "+(500+t)).classed("svg-content",!0);C=c.append("svg:g").attr("id","lineChartZoom").attr("transform","translate("+e+",0)");let p=C.append("g").attr("class","x axis-line-chart").attr("transform","translate(0,500)").call(o);C.append("g").attr("class","y axis-line-chart").call(l),C.append("line").attr("class","time-line").attr("id","lineChartTimeLine").attr("x1",0).attr("y1",0).attr("x2",0).attr("y2",500);let u=d3.scaleOrdinal(d3.schemeCategory10),h={};for(let t=0;t<n.length;t++){let e=d3.min(a,(function(e){return e[n[t]]})),r=d3.max(a,(function(e){return e[n[t]]})),i=d3.scaleLinear().domain([e,r]).range([0,100]),o=d3.line().x((function(t){return L(t.time)})).y((function(e){return j(i(e[n[t]]))}));h[n[t]]=o,C.append("path").data([a]).attr("id",n[t]+"Line").attr("class","line lineChartLine").style("stroke",u(t)).attr("d",o).attr("name",n[t])}$("#lineChartTimeLine").appendTo("#lineChartZoom"),C.append("rect").attr("class","zoom").attr("width",this.lineChartWidth).attr("height",500).call(d).on("click",s).call(d3.drag().on("drag",s));let f=d3.selectAll(".line");c.append("g").attr("id","lineChartLegend").attr("transform","translate("+t+",550)").selectAll("rect.legend").data(f._groups[0]).enter().each((function(t,e){d3.select(this).append("rect").attr("class","legend").attr("width",100).attr("height",50).attr("x",600*e+"px").style("fill",t.style.stroke),d3.select(this).append("text").attr("id",t.attributes.id.value+"LegendTitle").attr("class","line-chart-legend-text").attr("y",40).attr("x",600*e+100+10+"px").text(t.attributes.name.value+": "),d3.select(this).append("text").attr("id",t.attributes.id.value+"Value").attr("class","line-chart-legend-text").attr("y",40).attr("x",600*e+100+d3.select("#"+t.attributes.id.value+"LegendTitle").node().getComputedTextLength()+10+"px").text("0.0")})),c.append("g").attr("id","trendChartLegend").attr("transform","translate("+t+",550)").selectAll("rect.legend").data(["5% - 95%","25% - 75%","Median"]).enter().each((function(t,e){d3.select(this).append("rect").attr("class","legend").attr("width",100).attr("height",50).attr("x",800*e+"px").style("fill",(function(){return 0===e?"#74a9cf":1===e?"#045a8d":"#525252"})),d3.select(this).append("text").attr("class","line-chart-legend-text").attr("y",40).attr("x",800*e+100+10+"px").text(t)})),$("#trendChartLegend").hide(),this.initLineChartButtons()}initLineChartButtons(){for(let t=0;t<this.swarm_features.length;t++){let e=this.swarm_features[t].split("_").join(" ");e=e.charAt(0).toUpperCase()+e.slice(1),$("#line-chart-feature-checkboxes").append('<tr><th> <div class="pretty p-switch p-fill p-bigger"><input type="checkbox" class="line-chart-check-box" id="draw-'+this.swarm_features[t]+'" data="#'+this.swarm_features[t]+'Line" /><div class="state"><label>'+e+"</label></div></div></th></tr>")}$(".line-chart-check-box").change((function(){let t=$(this);t.prop("checked")?$(t.attr("data")).show():$(t.attr("data")).hide()}))}}class O extends A{constructor(t,e){super(e),this.elem=t,this.trendchart()}disableLineChart(){$(".lineChartButton").prop("checked",!1).prop("disabled",!0),$(".line-chart-check-box").attr("disabled",!0),$(".lineChartLine").attr("visibility","hidden")}trendchart(){let t="";if(this.elem.id.toLowerCase().includes("speed"))t="speed";else if(this.elem.id.toLowerCase().includes("acceleration"))t="acceleration";else if(this.elem.id.toLowerCase().includes("distance_centroid"))t="distance_centroid";else{if(!this.elem.id.toLowerCase().includes("midline_offset"))return;t="midline_offset"}if($("#lineChartLegend").hide(),$("#trendChartLegend").show(),$("#"+t+"TrendChart").length)$("#"+t+"TrendChart").show();else{let e=[],n=It.length;for(let r=0;r<Rt.length;r++){let a=[];for(let e=0;e<n;e++)Bt[r*n+e]&&a.push(Bt[r*n+e][t]);e.push(w(a))}if(e.length>this.lineChartWidth){let t=[],n=[0,0,0,0,0];for(let r=0;r<e.length;r++){for(let t=0;t<n.length;t++)n[t]+=e[r][t];if(r%_==0){for(let t=0;t<n.length;t++)n[t]+=n[t]/_;t.push(n),n=[0,0,0,0,0]}}e=t}let r=d3.min(e,(function(t){return t[0]})),a=d3.max(e,(function(t){return t[4]})),i=d3.scaleLinear().domain([r,a]).range([0,100]),o=C.append("g").attr("id",t+"TrendChart").attr("class","trendChartData");$(".zoom").appendTo("#lineChartZoom"),$("#lineChartTimeLine").appendTo("#lineChartZoom"),T[t]={};for(let n=0;n<this.trendChartsElem.length;n++){let r;n<2?r=d3.area().x((function(t,e){return L(e)})).y0((function(t){return j(i(t[n+1]))})).y1((function(t){return j(i(t[n]))})):2===n?r=d3.line().x((function(t,e){return L(e)})).y((function(t){return j(i(t[n]))})):n>2&&(r=d3.area().x((function(t,e){return L(e)})).y0((function(t){return j(i(t[n]))})).y1((function(t){return j(i(t[n-1]))}))),T[t][this.trendChartsElem[n]]=r,o.append("path").data([e]).attr("class",this.trendChartsElem[n]).attr("d",r)}}}}let E,S,D,z,B,U,R,N,W,P,I=0,G="black",H=-1,Y=[];function F(){let t=parameters.min.geometry.coordinates,e=parameters.max.geometry.coordinates;E=1.02*(e[0]-t[0]),S=1.02*(e[1]-t[1]);let n,i=d3.scaleLinear().domain([t[0],e[0]]).range([t[0],e[0]]),s=d3.axisBottom(i).ticks(10).tickSize(10).tickPadding(5),c=d3.scaleLinear().domain([t[1],e[1]]).range([t[1],e[1]]),p=d3.axisRight(c).ticks(7).tickSize(10).tickPadding(5),u=d3.zoom().scaleExtent([1,6]).on("zoom",(function(){d3.event.transform.x=Math.min(0,E*(d3.event.transform.k-1),Math.max(E*(1-d3.event.transform.k),d3.event.transform.x)),d3.event.transform.y=Math.min(0,S*(d3.event.transform.k-1),Math.max(S*(1-d3.event.transform.k),d3.event.transform.y)),n.attr("transform",d3.event.transform),f.call(s.scale(d3.event.transform.rescaleX(i))),m.call(p.scale(d3.event.transform.rescaleY(c)))}));z=d3.select("#main-vis").classed("svg-container",!0).append("svg").attr("preserveAspectRatio","xMinYMin meet").attr("viewBox","0 0 "+E+" "+S).classed("svg-content",!0).attr("id","main-vis-svg").call(u);let h=Math.ceil(S/E*100);$("#main-vis").append($("<style>#main-vis::after {padding-top: "+h+'%;display: block;content: "";}</style> ')),n=z.append("svg:g"),parameters.background_image&&n.append("image").attr("xlink:href","/"+parameters.background_image).attr("class","background-image").attr("height",S).attr("width",E).attr("x","0").attr("y","0"),B=n.append("svg:g").attr("class","tank").attr("transform",(function(){return"scale("+(parameters.inverted_x?-1:1)+","+(parameters.inverted_y?-1:1)+")"})),B.append("g").attr("id","g-centroid").append("circle").attr("class","centroid").attr("r",6).attr("cx",0).attr("cy",0),B.select("#g-centroid").append("svg:defs").append("svg:marker").attr("id","centroid-arrow").attr("refX",2).attr("refY",6).attr("markerWidth",13).attr("markerHeight",13).attr("orient","auto").append("svg:path").attr("d","M2,2 L2,11 L10,6 L2,2"),B.select("#g-centroid").append("line").attr("id","centroid-line").attr("marker-end","url(#centroid-arrow)"),B.append("g").attr("id","network-group"),B.append("g").attr("id","delaunay-triangulation-group"),B.append("g").attr("id","vornoi-group"),z.append("text").attr("class","frame-text").attr("x",30).attr("y",30).text("-- : -- : -- ");let f=z.append("g").attr("class","x axis").call(s),m=z.append("g").attr("class","y axis").call(p);a=d3.select("div.tooltip").style("left","0px").style("top","0px").on("mouseover",(function(){a.style("opacity",1)})),function(){r=$("#slider").slider({min:0,max:Rt.length,step:25,slide:function(t,e){Z(e.value),$("#play-button").hasClass("active")||V()}}),$("#network-slider").slider({range:"max",min:0,max:1,step:.01,value:.5,slide:function(t,e){Lt(e.value),$("#network-limit").val(e.value)}}),$("#network-limit").val(.5);let t=r.slider("option","max"),e=100/t;for(let n=0;n<t;n+=1500)$('<span class="ui-slider-tick"></span>').css("left",e*n+"%").appendTo(r)}(),o=d3.select("#main-vis-legend-div").append("svg").attr("id","main-vis-legend").attr("width",550).attr("height",60),d3.select(".colors-body").selectAll(".palette").data(d3.entries(colorbrewer)).enter().append("span").attr("class","palette").attr("title",(function(t){return t.key})).on("click",(function(t){$(".palette").removeClass("selected"),$('.palette[title="'+t.key+'"]').addClass("selected"),l.color=colorbrewer[t.key],d(),$("#play-button").hasClass("active")||(q(),V())})).selectAll(".swatch").data((function(t){return t.value})).enter().append("span").attr("class","swatch").style("background-color",(function(t){return t})),$('.palette[title="BuYlBu"]').addClass("selected");var g,b;new M(Rt);v(),function(){let t=d3.zoom().scaleExtent([1,10]).on("zoom",(function(){d3.event.transform.x=Math.min(0,5e3*(d3.event.transform.k-1),Math.max(5e3*(1-d3.event.transform.k),d3.event.transform.x)),d3.event.transform.y=Math.min(0,5e3*(d3.event.transform.k-1),Math.max(5e3*(1-d3.event.transform.k),d3.event.transform.y)),U.attr("transform",d3.event.transform)})),e=d3.select("#dendrogram-panel").classed("svg-dendrogram-container",!0).append("svg").attr("preserveAspectRatio","xMinYMin meet").attr("viewBox","0 0 5000 5000").classed("svg-content-dendrogram",!0).call(t);(function(){let t,e,n=d3.select("#dendrogram-panel").append("svg").attr("id","dendrogram-legend").attr("width",550).attr("height",60);$("#dendrogram-legend").hide();let r=nt.range();t=n.selectAll("rect.legend").data(r),e=n.selectAll("text.legend-text").data(["low","","","","","","","","high"]),t.enter().append("rect").attr("class","legend").attr("width",50).attr("height",20).attr("y",0).attr("x",(function(t,e){return 50*e+"px"})).style("fill",(function(t){return t})),e.enter().append("text").attr("class","legend-text").attr("y",40).attr("x",(function(t,e){return 50*e+"px"})).text((function(t){return t}))})(),U=e.append("g").attr("transform","translate(20,20)").append("svg:g"),R=d3.tree().size([4800,4800]),W=d3.select(".tank"),$("#dendrogram-panel-level-slider").slider({range:"max",min:2,max:2,step:1,value:tt.h0,slide:function(t,e){ft($(".show-dendrogram.btn-primary").attr("data"),e.value),function(){let t=$(".show-dendrogram.btn-primary").attr("data"),e=$(".show-dendrogram.btn-primary").attr("name");$("#dendrogram-panel-name").text(e),$("#dendrogram-panel-level-slider").val(tt["h"+t]),$("#dendrogram-panel-level-text").text(tt["h"+t])}(),$("#play-button").hasClass("active")||(q(),V(),st())}}),N=d3.select("#dendrogram-tooltip").style("left","0px").style("top","0px").on("mouseover",(function(){N.style("opacity",1)}));let n=100*rt;P=d3.select("#hierarchy-legend-div").append("svg").attr("id","hierarchy-legend").attr("width",n).attr("height",60),W.append("defs").append("svg:pattern").attr("id","striped").attr("patternUnits","userSpaceOnUse").attr("width","20").attr("height","5").attr("patternTransform","rotate(60)").append("rect").attr("width",5).attr("height",10).attr("transform","translate(0,0)").style("fill","#67000d")}(),g=S,b=E,$((function(){$("#main-vis").draggable({containment:"parent"}).resizable({aspectRatio:!0,maxWidth:$("#main-vis-div").width()}).height(.6*g).width(.6*b)})),$("input[type=checkbox]").prop("checked",!1),$("#color-scale-linear").prop("checked",!0),$("#group-size-m").prop("checked",!0),$("#background-white").prop("checked",!0),$("#settings-div input[type=checkbox]").prop("checked",!0),$("#loading").hide(),$("#play-loading").hide(),$(".mdi-play").hide(),$("#metadata-input").hide(),$("#dendrogram-buttons-div").hide(),$("#g-centroid").hide(),$("#line-chart-feature-checkboxes input[type=checkbox]").prop("checked",!0),V()}function V(){let t=$('input[type="radio"].group-playback-rate:checked').val(),e=$('input[type="radio"].group-size:checked').val();D=Bt.filter((function(t){return t.t===I})),setTimeout((function(){var t;st(),z.select(".frame-text").text(Math.floor(I/1500)%60+":"+Math.floor(I/parameters.fps)%60+"::"+I%parameters.fps),I%parameters.fps==0&&(t=I,r.slider("value",t));let n,i=B.selectAll("g.animal").data(D);if(I in Wt){let t=Wt[I];if(ot={},t=t.map((function(t){let e=D.filter((function(e){return e.a===t.s}))[0],n=D.filter((function(e){return e.a===t.e}))[0];return{node1:e.a,node2:n.a,start:e.p,end:n.p,val:t.v}})),t.forEach((function(t){$("#mc-"+t.node1+"-"+t.node2).css("fill",$t(t.val)),$("#mc-"+t.node2+"-"+t.node1).css("fill",$t(t.val))})),bt){let e=[];for(let n=0;n<t.length;n++)e.push(t[n].val);Lt(function(t){if(0===t.length)return 0;t.sort((function(t,e){return t-e}));let e=.05*(t.length-1),n=Math.floor(e),r=n+1,a=e%1;return r>=t.length?1-t[n]:1-(t[n]*(1-a)+t[r]*a)}(e))}t=t.filter((function(t){return t.val<=1-yt})),n=B.select("#network-group").selectAll("line.network-edges").data(t),n.attr("x1",(function(t){return t.start[0]})).attr("y1",(function(t){return-t.start[1]})).attr("x2",(function(t){return t.end[0]})).attr("y2",(function(t){return-t.end[1]})).attr("stroke",(function(t){return $t(1-t.val)})).attr("stroke-opacity",(function(t){return 1-t.val})),n.enter().append("line").attr("class","network-edges").attr("x1",(function(t){return t.start[0]})).attr("y1",(function(t){return-t.start[1]})).attr("x2",(function(t){return t.end[0]})).attr("y2",(function(t){return-t.end[1]})).attr("stroke",(function(t){return $t(t.val)})).attr("stroke-opacity",(function(t){return t.val}))}else n=B.selectAll("line.network-edges").data([]);var o,l;n.exit().remove(),$("#draw-triangulation").is(":checked")?((o=B.select("#delaunay-triangulation-group").selectAll("path.delaunay-triangulation").data([Rt[I].triangulation])).attr("d",(function(t){return t})),o.enter().append("path").attr("class","delaunay-triangulation").attr("d",(function(t){return t}))):o=B.selectAll("path.delaunay-triangulation").data([]),o.exit().remove(),$("#draw-voronoi").is(":checked")?((l=B.select("#vornoi-group").selectAll("path.voronoi").data(Rt[I].voronoi.split(";"))).attr("d",(function(t){return t})),l.enter().append("path").attr("class","voronoi").attr("d",(function(t){return t}))):l=B.select("#vornoi-group").selectAll("path.voronoi").data([]),l.exit().remove();let d=i.enter().append("g").attr("class","animal").attr("id",(function(t){return"animal-"+t.a}));if(d.append("circle").attr("r",1.5*e).attr("cx",(function(t){return t.p[0]})).attr("cy",(function(t){return-t.p[1]})).on("mouseover",(function(t){!function(t){for(let e=0;e<Ut.length;e++)t.a===Ut[e].animal_id&&(a.style("left",d3.event.pageX+5+"px").style("top",d3.event.pageY-100+"px").style("opacity",1),a.select("#tooltip-animal-id").html(Ut[e].animal_id),a.select("#tooltip-species").html(Ut[e].species),a.select("#tooltip-sex").html(Ut[e].sex),a.select("#tooltip-size").html(Ut[e].size),a.select("#tooltip-weight").html(Ut[e].weight))}(t)})).on("mouseout",(function(){a.transition().duration(500).style("opacity",0)})).on("click",(function(t){Y.includes(t.a)?Y=Y.filter(e=>e!==t.a):Y.push(t.a),$("#play-button").hasClass("active")||(I--,V())})),i.select("circle").attr("cx",(function(t){return t.p[0]})).attr("cy",(function(t){return-t.p[1]})).attr("r",e),d.append("svg:defs").append("svg:marker").attr("id",(function(t){return"arrow-marker-"+t.a})).attr("refX",2).attr("refY",6).attr("markerWidth",13).attr("markerHeight",13).attr("orient","auto").append("svg:path").attr("d","M2,2 L2,11 L10,6 L2,2"),d.append("line").attr("class","arrow").attr("marker-end",(function(t){return"url(#arrow-marker-"+t.a+")"})),$("#draw-direction").is(":checked")?i.select("line").attr("x1",(function(t){return t.p[0]})).attr("y1",(function(t){return-t.p[1]})).attr("x2",(function(t){return t.p[0]+2*e})).attr("y2",(function(t){return-t.p[1]})).attr("transform",(function(t){return"rotate("+-t.direction+" "+t.p[0]+" "+-t.p[1]+")"})):$(".arrow").hide(),i.exit().remove(),$("#draw-convex-hull").is(":checked")){var p=B.selectAll("path.hull-path").data([Rt[I].convex_hull]);p.attr("d",(function(t){return t})),p.enter().append("path").attr("class","hull-path").attr("d",(function(t){return t}))}else p=B.select("path.hull-path").data([]);if(p.exit().remove(),"black"!==G){var u=s();i.transition().duration(10).style("fill",(function(t){return u(t[G])})).attr("stroke",(function(t){return u(t[G])}))}else i.style("fill","#000").attr("stroke","#000"),$.isEmptyObject(c)||Object.keys(c).forEach((function(t){d3.select("#animal-"+t).style("fill",c[t]).attr("stroke",c[t])}));Y.length?(i.style("opacity",(function(t){return Y.includes(t.a)?1:.25})),$("#remove-active-selected-button").is(":disabled")&&($("#remove-active-selected-button").prop("disabled",!1),$("#visual-parameter-button").prop("disabled",!1)),h.trackingBoolean&&Object(h.addTrackedData)(D[0].t,Y)):($("#remove-active-selected-button").is(":disabled")||($("#remove-active-selected-button").prop("disabled",!0),$("#visual-parameter-button").prop("disabled",!0)),i.style("opacity",1)),d3.select(".centroid").attr("cx",(function(){return"centroid"in Rt[0]?Rt[I].centroid[0]:0})).attr("cy",(function(){return"centroid"in Rt[0]?-Rt[I].centroid[1]:0})),$("#draw-direction").is(":checked")&&Rt[I].centroid&&$("#draw-centroid").is(":checked")?(d3.select("#centroid-line").classed("hidden",!1),d3.select("#centroid-line").attr("x1",(function(){return Rt[I].centroid[0]})).attr("y1",(function(){return-Rt[I].centroid[1]})).attr("x2",(function(){return Rt[I].centroid[0]+2*e})).attr("y2",(function(){return-Rt[I].centroid[1]})).attr("transform",(function(){return"rotate("+-Rt[I].direction+" "+Rt[I].centroid[0]+" "+-Rt[I].centroid[1]+")"}))):d3.select("#centroid-line").attr("class","hidden"),-1!==H&&(d3.selectAll("#animal-"+H).classed("medoid",!1),H=Rt[I].medoid,d3.selectAll("#animal-"+H).classed("medoid",!0)),I++,function(){if(d3.select("#lineChartTimeLine")&&Rt[Math.ceil(I/_)]){let t=Math.ceil(I/_);I%25==0&&(d3.select("#convex_hull_areaLineValue").text(Rt[t].convex_hull_area+"mm²"),d3.select("#speedLineValue").text(Rt[t].speed+"mm/s"),d3.select("#accelerationLineValue").text(Rt[t].acceleration+"mm/s²"),d3.select("#distance_centroidLineValue").text(Rt[t].distance_centroid+"mm"),d3.select("#directionLineValue").text(Rt[t].direction+"°"),d3.select("#polarisationLineValue").text(Rt[t].polarisation)),d3.select("#lineChartTimeLine").attr("transform","translate("+m(t)+",0)")}}(),I>=Rt.length?(I=0,V()):g&&V()}),t)}function Z(t){I="number"==typeof t&&I<=Rt.length?t:0}function q(){I-=1}function J(t){G=t}function X(t){H=t}function K(t){Y=t}let Q,tt={},et="union",nt=d3.scaleThreshold().domain([0,.1,.2,.3,.4,.5,.6,.7,.8,.9,1]).range(["#f7fbff","#deebf7","#c6dbef","#9ecae1","#6baed6","#4292c6","#2171b5","#08519c","#08306b"]);const rt=4;let at=[],it={},ot={},lt=["#7fc97f","#386cb0","#e7298a","#ff9900"];function st(){if(Q=$(".show-dendrogram.btn-primary").attr("data"),!$.isEmptyObject(Pt)&&Q){let e=Pt["h"+Q][I],n=d3.hierarchy(e,(function(t){return t.children}));if(n=n.children[0],n.children.forEach(dt),n=R(n),$(".show-dendrogram.btn-primary").length){$("#dendrogram-panel-level-slider").slider("option","max",n.height-1).slider("value",tt["h"+Q]);let e=U.selectAll("path.link").data(n.descendants().slice(1));e.enter().append("path").attr("class","link").attr("d",ct),e.attr("d",ct),e.exit().remove();let r=U.selectAll(".node").data(n.descendants());var t=r.enter().append("g").attr("class",(function(t){return"node"+(t.children?" node--internal":" node--leaf")})).attr("transform",(function(t){return"translate("+t.x+","+t.y+")"}));t.append("circle").attr("r",(function(t){return t.depth===tt["h"+Q]?40+t.data.name.length:20+t.data.name.length})).attr("class",(function(t){if(t.depth===tt["h"+Q])return"active-level"})).attr("id",(function(t){return"h"+t.data.name.toString().hashCode()})).on("click",pt).on("mouseover",(function(t){N.style("left",d3.event.pageX+5+"px").style("top",d3.event.pageY+5+"px").style("opacity",1),N.select(".tooltip-span").html(t.data.name.toString()),function(t){let e=[];for(let n=0;n<t.length;n++){let r=W.select("#animal-"+t[n]),a=r.data()[0].p;e.push([a[0],-a[1]]),r.classed("animal-highlight",!0)}W.append("path").attr("class","highlight-hierarchy").attr("d","M"+d3.polygonHull(e).join("L")+"Z")}(t.data.name)})).on("mouseout",(function(){N.transition().duration(500).style("opacity",0),d3.selectAll(".animal").classed("animal-highlight",!1),d3.selectAll(".highlight-hierarchy").remove()})),t.append("text").attr("class","dendrogram-text").attr("x",150).attr("y",-150).text((function(t){return t.data.name.length})),t.attr("transform",(function(t){return"translate("+t.x+","+t.y+")"})),r.attr("transform",(function(t){return"translate("+t.x+","+t.y+")"})).select("circle").attr("r",(function(t){return t.depth===tt["h"+Q]?40+t.data.name.length:20+t.data.name.length})).attr("class",(function(t){return t.depth===tt["h"+Q]?"active-level":""})).attr("id",(function(t){return"h"+t.data.name.toString().hashCode()})),r.select("text").text((function(t){return t.data.name.length})),r.exit().remove(),Object.keys(ot).length?("none"==$("#dendrogram-legend").css("display")&&$("#dendrogram-legend").show(),setTimeout((function(){r.select("circle").style("fill",(function(t){return"h"+t.data.name.toString().hashCode()in ot?nt(function(t){if(t instanceof Array){let e=t.reduce((function(t,e){return t+e}),0)/t.length,n=t.map((function(t){return Math.pow(t-e,2)}));return Math.sqrt(n.reduce((function(t,e){return t+e}),0)/n.length)}}(ot["h"+t.data.name.toString().hashCode()])):t.depth!==tt["h"+Q]?"":"#000"}))}),250)):"none"!==$("#dendrogram-legend").css("display")&&$("#dendrogram-legend").hide()}}$.isEmptyObject(Pt)||function(){let t=Object.keys(Pt).map((function(t){return t.replace("h","")})),e=[];for(let n=0;n<t.length;n++){let r=Pt["h"+t[n]][I],a=d3.hierarchy(r,(function(t){return t.children}));a=R(a);let i=a.children[0];gt===t[n]&&(at=ut(i,t[n])),e.push(ht(ut(i,t[n])))}e.length;let n=W.selectAll("g.hierarchy-group").data(e);n.enter().append("g").attr("class",(function(e,n){return"intersection"===et?"hierarchy-group intersection":"sym-difference"===et?"hierarchy-group sym-difference":"hierarchy-group h"+t[n]})).style("fill",(function(e,n){return it["h"+t[n]]})).attr("stroke",(function(e,n){return it["h"+t[n]]})).moveToBack(),n.attr("class",(function(e,n){return"intersection"===et?"hierarchy-group intersection":"sym-difference"===et?"hierarchy-group sym-difference":"hierarchy-group h"+t[n]})),n.exit().remove();let r=n.selectAll("path.hierarchy-hull-path").data((function(t){return t}));r.enter().append("path").attr("class","hierarchy-hull-path").attr("d",(function(t){return"M"+t.join("L")+"Z"})),r.attr("d",(function(t){return"M"+t.join("L")+"Z"})),r.exit().remove()}()}function dt(t){t.children&&t.depth<=tt["h"+Q]?(t._children=t.children,t._children.forEach(dt)):t.children=null}function ct(t){return"M"+t.x+","+t.y+"V"+t.parent.y+"H"+t.parent.x}function pt(t){K(t.data.name),$("#play-button").hasClass("active")||(q(),V())}function ut(t,e){let n=[],r=tt["h"+e],a=t.children;for(let e=1;e<t.height;e++){if(a[0]&&a[0].depth===r){a.forEach((function(t){void 0!==t.data.name&&n.push(t.data.name)}));break}let t=[];a.forEach((function(e){void 0!==e.children&&(t=t.concat(e.children))})),a=t}return n}function ht(t){let e=[];return t.forEach((function(t){let n=[];for(let e=0;e<t.length;e++){let r=D.find(n=>n.a===t[e]);r&&n.push([r.p[0],-r.p[1]])}n.length>=3&&e.push(d3.polygonHull(n))})),e}function ft(t,e){tt["h"+t]=e}function mt(){let t,e;0!==Object.keys(it).length||0!==Object.keys(xt).length?$("#hierarchy-legend-div").show():$("#hierarchy-legend-div").hide();let n=[],r=[];if($(".show-dendrogram").each((function(t,e){null!=it["h"+$(e).attr("data")]&&null!=$(e).attr("name")&&(n.push(it["h"+$(e).attr("data")]),r.push($(e).attr("name")))})),0!==Object.keys(xt).length)for(let t in xt)-1===n.indexOf(xt[t])&&(n.push(xt[t]),r.push("Network"));t=P.selectAll("rect.legend").data(n),e=P.selectAll("text.legend-text").data(r),t.style("fill",(function(t){return t})),t.enter().append("rect").attr("class","legend").attr("width",50).attr("height",20).attr("y",0).attr("x",(function(t,e){return 50+2.5*e*50+"px"})).style("fill",(function(t){return t})),t.exit().remove(),e.text((function(t){return t})),e.enter().append("text").attr("class","legend-text").attr("y",40).attr("x",(function(t,e){return 50+2.5*e*50+"px"})).text((function(t){return t})),e.exit().remove()}let gt,vt,bt=!1,yt=.5,xt={},wt=!0,kt=1,$t=d3.scaleThreshold().domain([0,.1,.2,.3,.4,.5,.6,.7,.8,.9,1]).range(["#f7fbff","#deebf7","#c6dbef","#9ecae1","#6baed6","#4292c6","#2171b5","#08519c","#08306b"]);function Ct(t){bt=t}function Lt(t){yt=t}function jt(t){gt=t}function Tt(t){vt=t}function _t(t){t>=0?xt["h"+t]="#08306b":xt={},mt()}function At(t){wt=t}let Mt="application/vnd.api+json";var Ot;function Et(){let t=[];$.ajax({url:"/api/percentile/"+parameters.id,dataType:"json",type:"GET",contentType:"application/json; charset=utf-8",headers:{Accept:Mt},success:function(e){for(let n=0;n<e.length;n++)t[e[n].feature]=[e[n].min,e[n].p1,e[n].p2,e[n].p3,e[n].p5,e[n].p7,e[n].p8,e[n].p9,e[n].max];Ht(t),function(t){for(var e in t)if(t.hasOwnProperty(e)){let t=e.split("_").join(" ");t=t.charAt(0).toUpperCase()+t.slice(1),$("#absolute-feature-checkboxes").append('<tr><th> <div class="pretty p-switch p-fill p-bigger"><input type="checkbox" id="draw-'+e+'"/><div class="state"><label>'+t+'</label></div></div><div class="float-right draw-details" id="draw-'+e+'-details"><div class="pretty p-icon p-toggle p-plain"><input type="checkbox" id="draw-'+e+'-input" /><div class="state p-success-o p-on"><i class="mdi mdi-image-area"></i><label></label></div><div class="state p-off"><i class="mdi mdi-image-off"></i><label></label></div></div></div></th></tr>')}$(".draw-details").hide(),k()}(t)}})}function St(){$.ajax({url:"/api/dataset/networks/"+parameters.id,dataType:"json",type:"GET",contentType:"application/json; charset=utf-8",headers:{Accept:Mt},success:function(t){!function(t){if(t.length)for(let e=0;e<t.length;e++)t[e].finished&&$("#networks-hierarchies-table tbody").append("<tr><td>"+t[e].name+'</td> <td> <button type="button" class="btn btn-default" data='+t[e].network_id+" name="+t[e].name+'><span class="mdi mdi-graphql" aria-hidden="true"></span></button></td> <td><div class="pretty p-switch p-fill"><input type="checkbox" class="hiearchy-checkbox" data="'+t[e].network_id+'" name="'+t[e].name+'"><div class="state p-success"><label></label></div></div></td><td>---</td>');else $("#networks-hierarchies-table").append("There is no network data for this dataset")}(t)}})}function Dt(t){$.ajax({url:"/api/dataset/"+parameters.id+"/"+t,dataType:"json",type:"GET",contentType:"application/json; charset=utf-8",headers:{Accept:Mt},success:function(e){Vt(e,t),x()}})}function zt(t){y(),$.ajax({url:"/api/dataset/"+parameters.id+"/"+t,dataType:"json",type:"GET",contentType:"application/json; charset=utf-8",headers:{Accept:Mt},success:function(e){Ft(e,t),x()}})}n(1);let Bt=[],Ut=[],Rt=[],Nt={},Wt={},Pt={},It={};function Gt(t){Bt=Bt.concat(t)}function Ht(t){Nt=t}function Yt(t){Ut=t,function(){let t=["#fff","#e41a1c","#377eb8","#4daf4a","#984ea3","#ff7f00","#ffff33","#a65628"];if(Ut.length)for(let e=0;e<Ut.length;e++)$("#metadata-table").find("tbody").append($('<tr id="metadata-row-'+Ut[e].animal_id+'">').append($("<td>").append(Ut[e].animal_id)).append($("<td>").append(Ut[e].species)).append($("<td>").append(Ut[e].sex)).append($("<td>").append(Ut[e].size)).append($("<td>").append(Ut[e].weight)).append($("<td>").append('<div class="dropdown">\n                                              <a class="dropdown-toggle btn btn-default btn-color" data-toggle="dropdown" href="#">\n                                              <div id="preview" class="metadata-swatch" style="background-color:#fff"></div>\n                                              <input class="color-field" value="White" style="display:none;">\n                                              </a>\n                                              <ul class="dropdown-menu" role="menu" aria-labelledby="dLabel"> '+function(e){let n="";for(let r=0;r<t.length;r++)n+='<div class="metadata-swatch metadata-swatch-clickable" style="background-color:'+t[r]+'" value="'+e+'"></div>';return n}(Ut[e].animal_id)+"</ul></div>")));else $("#metadata-table").find("tbody").append("There is no metadata for this dataset")}()}function Ft(t,e){for(let n=0;n<t.length;n++)void 0===Rt[n]&&Rt.push({}),t[n]&&!isNaN(t[n])?Rt[n][e]=+t[n]:Rt[n][e]=t[n]}function Vt(t,e){for(let n=0;n<t.length;n++)void 0===Bt[n]&&Bt.push({}),Bt[n][e]=+t[n]}function Zt(t){Wt=t}function qt(t,e){0===Object.keys(t).length&&t.constructor===Object?(delete Pt["h"+e],delete tt["h"+e],function(t){delete it["h"+t]}(e)):(Pt["h"+e]=t,ft(e,2),function(t){for(let e in xt)if(e==="h"+t)return void(it["h"+t]=xt[e]);for(let e=0;e<lt.length;e++){let n=!0;for(let t in it)it.hasOwnProperty(t)&&it[t]===lt[e]&&(n=!1);if(n){if(0===Object.keys(xt).length)return void(it["h"+t]=lt[e]);for(let n in xt)if(xt[n]!==lt[e])return void(it["h"+t]=lt[e])}}}(e)),mt()}function Jt(t){It=t}$(document).ready((function(){console.log(parameters),window.EventSource?((Ot=new EventSource("/api/movement_only/"+parameters.id)).onmessage=function(t){"close"===t.data?(Ot.close(),window.setTimeout((function t(){$.active>0?window.setTimeout(t,100):F()}),100)):Gt(JSON.parse(t.data))},Ot.addEventListener("error",(function(t){t.readyState==EventSource.CLOSED&&alert("Streaming error")}),!1)):alert("Webbrowser does not support streaming"),Et(),$.ajax({url:"/api/dataset/"+parameters.id+"/animal_ids",dataType:"json",type:"GET",contentType:"application/json; charset=utf-8",headers:{Accept:Mt},success:function(t){Jt(t)}}),function(){const t=["swarm_time","swarm_speed","swarm_acceleration","swarm_convex_hull_area","swarm_distance_centroid","swarm_direction","swarm_polarisation"];for(let e=0;e<t.length;e++)$.ajax({url:"/api/dataset/"+parameters.id+"/"+t[e],dataType:"json",type:"GET",contentType:"application/json; charset=utf-8",headers:{Accept:Mt},success:function(n){Ft(n,t[e].replace("swarm_",""))}})}(),$.ajax({url:"/api/metadata/"+parameters.id,dataType:"json",type:"GET",contentType:"application/json; charset=utf-8",headers:{Accept:Mt},success:function(t){Yt(t)}}),St()}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vZXhwbG9yZS9leHBsb3JlLmNzcz9lNzJlIiwid2VicGFjazovLy8uL2V4cGxvcmUvZXhwbG9yZS5jc3MiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvdXJscy5qcyIsIndlYnBhY2s6Ly8vLi9leHBsb3JlL3NwYXRpYWxfdmlldy9pbnRlcmFjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9leHBsb3JlL3NwYXRpYWxfdmlldy9jb2xvcl9waWNrZXIuanMiLCJ3ZWJwYWNrOi8vLy4vZXhwbG9yZS9zcGF0aWFsX3ZpZXcvbGVnZW5kLmpzIiwid2VicGFjazovLy8uL2V4cGxvcmUvbWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vZXhwbG9yZS9saXN0ZW5lci5qcyIsIndlYnBhY2s6Ly8vLi9leHBsb3JlL2xpbmVfY2hhcnQuanMiLCJ3ZWJwYWNrOi8vLy4vZXhwbG9yZS9uZXR3b3JrLmpzIiwid2VicGFjazovLy8uL2V4cGxvcmUvYWpheF9xdWVyaWVzLmpzIiwid2VicGFjazovLy8uL2V4cGxvcmUvaGllcmFyY2h5LmpzIiwid2VicGFjazovLy8uL2V4cGxvcmUvaGVscGVycy5qcyIsIndlYnBhY2s6Ly8vLi9leHBsb3JlL3NwYXRpYWxfdmlldy9zcGF0aWFsX3ZpZXcuanMiLCJ3ZWJwYWNrOi8vLy4vZXhwbG9yZS9leHBsb3JlLmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiY29udGVudCIsIm9wdGlvbnMiLCJ0cmFuc2Zvcm0iLCJ1bmRlZmluZWQiLCJsb2NhbHMiLCJfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18iLCJwdXNoIiwidXNlU291cmNlTWFwIiwibGlzdCIsInRvU3RyaW5nIiwidGhpcyIsIm1hcCIsIml0ZW0iLCJjc3NNYXBwaW5nIiwiYnRvYSIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VNYXAiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwiY29uY2F0Iiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2UiLCJzb3VyY2VSb290Iiwiam9pbiIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJtZWRpYVF1ZXJ5IiwiZGVkdXBlIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImxlbmd0aCIsImlkIiwiX2kiLCJmbiIsIm1lbW8iLCJzdHlsZXNJbkRvbSIsImlzT2xkSUUiLCJ3aW5kb3ciLCJkb2N1bWVudCIsImFsbCIsImF0b2IiLCJhcHBseSIsImFyZ3VtZW50cyIsImdldFRhcmdldCIsInRhcmdldCIsInF1ZXJ5U2VsZWN0b3IiLCJnZXRFbGVtZW50Iiwic3R5bGVUYXJnZXQiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwic2luZ2xldG9uIiwic2luZ2xldG9uQ291bnRlciIsInN0eWxlc0luc2VydGVkQXRUb3AiLCJmaXhVcmxzIiwiYWRkU3R5bGVzVG9Eb20iLCJzdHlsZXMiLCJkb21TdHlsZSIsInJlZnMiLCJqIiwicGFydHMiLCJhZGRTdHlsZSIsImxpc3RUb1N0eWxlcyIsIm5ld1N0eWxlcyIsImJhc2UiLCJwYXJ0IiwiY3NzIiwibWVkaWEiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZSIsImluc2VydEludG8iLCJFcnJvciIsImxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wIiwiaW5zZXJ0QXQiLCJuZXh0U2libGluZyIsImluc2VydEJlZm9yZSIsImFwcGVuZENoaWxkIiwiZmlyc3RDaGlsZCIsImJlZm9yZSIsInJlbW92ZVN0eWxlRWxlbWVudCIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsImlkeCIsImluZGV4T2YiLCJzcGxpY2UiLCJjcmVhdGVTdHlsZUVsZW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiYXR0cnMiLCJ0eXBlIiwiYWRkQXR0cnMiLCJlbCIsImtleXMiLCJmb3JFYWNoIiwic2V0QXR0cmlidXRlIiwib2JqIiwidXBkYXRlIiwicmVtb3ZlIiwicmVzdWx0Iiwic3R5bGVJbmRleCIsImFwcGx5VG9TaW5nbGV0b25UYWciLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJyZXZva2VPYmplY3RVUkwiLCJCbG9iIiwibGluayIsInJlbCIsImNyZWF0ZUxpbmtFbGVtZW50IiwidXBkYXRlTGluayIsImhyZWYiLCJhcHBseVRvVGFnIiwibmV3T2JqIiwiREVCVUciLCJuZXdMaXN0IiwibWF5UmVtb3ZlIiwidGV4dFN0b3JlIiwicmVwbGFjZVRleHQiLCJpbmRleCIsInJlcGxhY2VtZW50IiwiZmlsdGVyIiwiQm9vbGVhbiIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiY3NzTm9kZSIsImNyZWF0ZVRleHROb2RlIiwiY2hpbGROb2RlcyIsImF1dG9GaXhVcmxzIiwiY29udmVydFRvQWJzb2x1dGVVcmxzIiwiYmxvYiIsIm9sZFNyYyIsImxvY2F0aW9uIiwiYmFzZVVybCIsInByb3RvY29sIiwiaG9zdCIsImN1cnJlbnREaXIiLCJwYXRobmFtZSIsInJlcGxhY2UiLCJmdWxsTWF0Y2giLCJvcmlnVXJsIiwibmV3VXJsIiwidW5xdW90ZWRPcmlnVXJsIiwidHJpbSIsIiQxIiwidGVzdCIsInNsaWRlciIsInRvb2x0aXAiLCJicnVzaGVuZCIsImFycmF5QW5pbWFscyIsImFjdGl2ZUFuaW1hbHMiLCJyZWN0IiwiZDMiLCJldmVudCIsInNlbGVjdGlvbiIsImFuaW1hbElkcyIsInBvaW50IiwiJCIsImhhc0NsYXNzIiwicmVtb3ZlQ2xhc3MiLCJzdmdMZWdlbmQiLCJjb2xvclNjYWxlIiwiY29sb3IiLCJjb2xvcmJyZXdlciIsIkJ1WWxCdSIsInJldHVybkNvbG9yU2NhbGUiLCJzY2FsZUxpbmVhciIsImRvbWFpbiIsInJhbmdlIiwic2NhbGVUaHJlc2hvbGQiLCJjaGFuZ2VMZWdlbmQiLCJsZWdlbmQiLCJsZWdlbmRUZXh0Iiwic2hvdyIsImFjdGl2ZVNjYWxlIiwidG1wU2NhbGUiLCJzZWxlY3RBbGwiLCJoaWRlIiwiZW50ZXIiLCJhcHBlbmQiLCJhdHRyIiwiZXhpdCIsInRleHQiLCJNYXRoIiwiY2VpbCIsIm1ldGFkYXRhQ29sb3IiLCJjb2xvck1ldGFkYXRhIiwicmVzZXRJbmRpdmlkdWFsTWV0YWRhdGEiLCJibEF2ZyIsInZhbCIsImFiQXZnIiwiY29sb3JzIiwiZGF0YXNldE1ldGFkYXRhIiwiYnJ1c2giLCJ6b29tRnVuY3Rpb24iLCJwbGF5Qm9vbGVhbiIsImluaXRMaXN0ZW5lcnMiLCJjbGljayIsImV4dGVudCIsIm9uIiwic2VsZWN0IiwiaXMiLCJwcm9wIiwiY2hhbmdlIiwiY2hlY2tlZCIsInNldE5ldHdvcmtCYWNrZ3JvdW5kIiwiaXNOdW1lcmljIiwibmV0d29ya0JhY2tncm91bmRMaW1pdCIsImRhdGFzZXQiLCJkaXNhYmxlUGxheUJ1dHRvbiIsImdldERhdGFzZXRGZWF0dXJlIiwic3dhcm1EYXRhIiwiZ2V0U3dhcm1EYXRhc2V0RmVhdHVyZSIsImNsYXNzZWQiLCJmaW5kIiwiY29sb3JSR0IiLCJ0bXAiLCJtb2RhbCIsInRvTG93ZXJDYXNlIiwiQXJyYXkiLCJmcm9tIiwiU2V0IiwicXVhbnRpbGUiLCJidG4iLCJvbGRWYWx1ZSIsImNsb3Nlc3QiLCJuZXdWYWwiLCJwYXJzZUZsb2F0Iiwicm91bmQiLCJuZXR3b3JrX2lkIiwiYWpheCIsInVybCIsInBhcmFtZXRlcnMiLCJkYXRhVHlwZSIsImNvbnRlbnRUeXBlIiwiaGVhZGVycyIsIkpTT05BUElfTUlNRVRZUEUiLCJzdWNjZXNzIiwic2V0TmV0d29ya0RhdGEiLCJwYXJzZSIsImVuYWJsZVBsYXlCdXR0b24iLCJzZXROZXR3b3JrSUQiLCJnZXROZXR3b3JrRGF0YSIsInNldG5ldHdvcmtDb2xvciIsInNldE5ldHdvcmtBdXRvIiwibGltaXQiLCJzZXROZXR3b3JMaW1pdCIsImNoZWNrYm94IiwiY29uc29sZSIsImxvZyIsIm1heE51bWJlckhpZXJhcmNoaWVzIiwic2V0SGllcmFyY2h5RGF0YSIsImFkZEhpZXJhcmNoeUJ1dHRvbiIsImNsaWNrZWRCdXR0b25JRCIsImVhY2giLCJidXR0b24iLCJhZGRDbGFzcyIsImRyYXdEZW5kcm9ncmFtIiwiaW5pdFNob3dEZW5kcm9ncmFtTGlzdGVuZXIiLCJ0bXBBY3RpdmUiLCJuZXh0IiwicmVtb3ZlSGllcmFyY2h5QnV0dG9uIiwic2V0TmV0d29ya0hpZXJhcmNoeSIsInNldE9wZXJhdGlvbiIsInNldFBsYXlCb29sZWFuIiwiZHJhdyIsInBlcmNlbnRpbGVzTGluZUNoYXJ0IiwiYXJyIiwic29ydCIsImEiLCJiIiwibG93ZXIiLCJmbG9vciIsInVwcGVyIiwid2VpZ2h0IiwiaW5pdFRyZW5kQ2hhcnRMaXN0ZW5lciIsImRpc2FibGVMaW5lQ2hhcnQiLCJTdHJpbmciLCJoYXNoQ29kZSIsImhhc2giLCJjaGFyQ29kZUF0IiwibW92ZVRvQmFjayIsInRyZW5kQ2hhcnRzWm9vbSIsInJhdGlvIiwiQ2hhcnQiLCJzd2FybV9mZWF0dXJlcyIsImxpbmVDaGFydFdpZHRoIiwidHJlbmRDaGFydHNFbGVtIiwic3VwZXIiLCJsaW5lQ2hhcnQiLCJtYXJnaW4iLCJsaW5lQ2hhcnREYXRhIiwiZmlsbCIsInRtcF9vYmplY3QiLCJ4MiIsInhBeGlzIiwiYXhpc0JvdHRvbSIsInRpY2tzIiwidGlja1NpemUiLCJ0aWNrUGFkZGluZyIsInRpY2tGb3JtYXQiLCJ5QXhpcyIsImF4aXNMZWZ0IiwiZHJhZ2dlZCIsImNvb3JkcyIsIm1vdXNlIiwic2V0SW5kZXhUaW1lIiwiem9vbSIsInNjYWxlRXh0ZW50IiwidHJhbnNsYXRlRXh0ZW50IiwicmVzY2FsZVgiLCJsaW5lcyIsImdYYXhpcyIsInN3YXJtTGluZUNoYXJ0IiwibGluZV9jb2xvcnMiLCJzY2FsZU9yZGluYWwiLCJzY2hlbWVDYXRlZ29yeTEwIiwibWluIiwibWF4Iiwibm9ybWFsaXphdGlvblNjYWxlIiwibGluZSIsIngiLCJ5IiwiYXBwZW5kVG8iLCJkcmFnIiwiY2hhcnRMaW5lcyIsIl9ncm91cHMiLCJzdHJva2UiLCJhdHRyaWJ1dGVzIiwibm9kZSIsImdldENvbXB1dGVkVGV4dExlbmd0aCIsImluaXRMaW5lQ2hhcnRCdXR0b25zIiwiY2FwaXRhbGl6ZWRfZmVhdHVyZV9zdHJpbmciLCJzcGxpdCIsImNoYXJBdCIsInRvVXBwZXJDYXNlIiwic2xpY2UiLCJlbGVtIiwidHJlbmRjaGFydCIsImZlYXR1cmUiLCJpbmNsdWRlcyIsInRyZW5kQ2hhcnREYXRhIiwibnVtX2FuaW1hbHMiLCJ0bXBUcmVuZENoYXJ0RGF0YSIsInRyZW5kQ2hhcnQiLCJ0ZW1wIiwiYXJlYSIsInkwIiwieTEiLCJ0YW5rV2lkdGgiLCJ0YW5rSGVpZ2h0Iiwic3ZnQ29udGFpbmVyIiwidGFuayIsInRyZWVtYXAiLCJ0b29sdGlwRGl2Iiwic3BhdGlhbFZpZXciLCJpbmRleFRpbWUiLCJtZWRvaWRBbmltYWwiLCJzcGF0aWFsVmlld0luaXQiLCJtaW5Qb2ludCIsIm1heFBvaW50Iiwiem9vbUdyb3VwIiwiYXhpc1JpZ2h0IiwiayIsInNjYWxlIiwiZ1lheGlzIiwicmVzY2FsZVkiLCJwZXJjZW50YWdlIiwiYmFja2dyb3VuZF9pbWFnZSIsImludmVydGVkX3giLCJpbnZlcnRlZF95Iiwic3RlcCIsInNsaWRlIiwidWkiLCJzcGFjZSIsImluaXRTbGlkZXJzIiwiZW50cmllcyIsImhlaWdodCIsIndpZHRoIiwic3ZnIiwiZGVuZHJvZ3JhbUxlZ2VuZCIsImxlZ2VuZERhdGEiLCJzdGFuZGFyZERldmlhdGlvbkNvbG9yU2NhbGUiLCJpbml0RGVuZHJvZ3JhbUxlZ2VuZCIsInRyZWUiLCJzaXplIiwiaGllcmFyY2h5TGV2ZWxzIiwic2V0SGllcmFyY2h5TGV2ZWwiLCJ1cGRhdGVEZW5kcm9ncmFtIiwiZGVjSW5kZXhUaW1lIiwibGVnZW5kV2lkdGgiLCJpbml0RGVuZHJvZ3JhbSIsImRyYWdnYWJsZSIsImNvbnRhaW5tZW50IiwicmVzaXphYmxlIiwiYXNwZWN0UmF0aW8iLCJtYXhXaWR0aCIsInRpbWVUb1dhaXQiLCJhbmltYWxTY2FsZSIsInNldFRpbWVvdXQiLCJuZXR3b3JrVmlzIiwic3ZnQW5pbWFscyIsIm5ldHdvcmtEYXRhIiwibmV0d29yayIsImhpZXJhcmNoeUdyb3VwU3RkZXYiLCJhbmltYWwxIiwiYW5pbWFsMiIsIm5ldHdvcmtDb2xvclNjYWxlIiwibmV0d29ya0F1dG8iLCJ0bXBBcnJheSIsInBlcmNlbnRpbGVzIiwibmV0d29ya0xpbWl0IiwidHJpYW5ndWxhdGlvbiIsInZvcm9ub2kiLCJhbmltYWxHcm91cGluZ3MiLCJwYWdlWCIsInBhZ2VZIiwiaHRtbCIsInRvb2x0aXBGdW5jdGlvbiIsInRyYW5zaXRpb24iLCJkdXJhdGlvbiIsImh1bGxQYXRoIiwiaXNFbXB0eU9iamVjdCIsImNlbnRyb2lkIiwidXBkYXRlTGluZUNoYXJ0Iiwic2V0QWN0aXZlU2NhbGUiLCJzZXRNZWRvaWRBbmltYWwiLCJzZXRBY3RpdmVBbmltYWxzIiwibmV0d29ya0hpZXJhcmNoeUlkcyIsImhpZXJhcmNoeUNvbG9ycyIsIm5ldHdvcmtIaWVyYXJjaHkiLCJ0cmVlRGF0YSIsIm5vZGVzIiwiaGllcmFyY2h5IiwiY2hpbGRyZW4iLCJjb2xsYXBzZSIsImRlc2NlbmRhbnRzIiwiZGlhZ29uYWxMaW5lcyIsIm5vZGVFbnRlciIsImFuaW1hbHMiLCJ2ZXJ0aWNlcyIsInRtcEFuaW1hbCIsInBvbHlnb25IdWxsIiwiYWRkSGlnaGxpZ2h0U3BhdGlhbFZpZXciLCJtZWFuIiwicmVkdWNlIiwicHYiLCJjdiIsIm51bSIsInBvdyIsInNxcnQiLCJzdGFuZGFyZERldmlhdGlvbiIsImhpZXJhcmNoeUlkcyIsImhpZXJhcmNoeVZlcnRpY2VzIiwicm9vdCIsInNob3dOZXR3b3JrSGllcmFyY2h5IiwiZ2V0SGllcmFyY2h5TGV2ZWwiLCJnZXRIaWVyYXJjaHlWZXJ0aWNlcyIsImhpZXJhcmNoaWVzIiwiaGllcmFyeUh1bGxzIiwiZHJhd0hpZXJhcmNoeSIsImRlcHRoIiwiX2NoaWxkcmVuIiwicGFyZW50IiwibGV2ZWwiLCJ0bXBfbm9kZXMiLCJjbHVzdGVyIiwiZ3JvdXBNZW1iZXIiLCJjaGFuZ2VIaWVyYXJjaHlMZWdlbmQiLCJuZXR3b3JrQ29sb3IiLCJsZWdlbmRUZXh0RGF0YSIsIm5ldHdvcmtJRCIsIm5ldHdvcmtCYWNrZ3JvdW5kIiwiZ2V0UGVyY2VudGlsZSIsImRhdGFTZXRQZXJjZW50aWxlIiwic2V0RGF0YVNldFBlcmNlbnRpbGUiLCJhZGRBYnNvbHV0ZUZlYXR1cmVCdXR0b25zIiwiZ2V0TmV0d29ya0RhdGFCdXR0b24iLCJhZGROZXR3b3JrQnV0dG9ucyIsInNldERhdGFzZXRGZWF0dXJlIiwic2V0U3dhcm1EYXRhIiwiYWRkVG9EYXRhc2V0Iiwic2V0TWV0YURhdGEiLCJyZXN1bHRTdHJpbmciLCJpbml0aWFsaXplTWV0YWRkYXRhIiwiaXNOYU4iLCJjb25zdHJ1Y3RvciIsInJlbW92ZUhpZXJhcmNoeUNvbG9yIiwidG1wX2Jvb2xlYW4iLCJzZXRIaWVyYXJjaHlDb2xvciIsInNldEFuaW1hbElkcyIsInJlYWR5IiwiRXZlbnRTb3VyY2UiLCJvbm1lc3NhZ2UiLCJjbG9zZSIsImNoZWNrUGVuZGluZ1JlcXVlc3QiLCJhY3RpdmUiLCJhZGRFdmVudExpc3RlbmVyIiwicmVhZHlTdGF0ZSIsIkNMT1NFRCIsImFsZXJ0Il0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0QsUUFLZkYsRUFBb0JRLEVBQUlGLEVBR3hCTixFQUFvQlMsRUFBSVYsRUFHeEJDLEVBQW9CVSxFQUFJLFNBQVNSLEVBQVNTLEVBQU1DLEdBQzNDWixFQUFvQmEsRUFBRVgsRUFBU1MsSUFDbENHLE9BQU9DLGVBQWViLEVBQVNTLEVBQU0sQ0FBRUssWUFBWSxFQUFNQyxJQUFLTCxLQUtoRVosRUFBb0JrQixFQUFJLFNBQVNoQixHQUNYLG9CQUFYaUIsUUFBMEJBLE9BQU9DLGFBQzFDTixPQUFPQyxlQUFlYixFQUFTaUIsT0FBT0MsWUFBYSxDQUFFQyxNQUFPLFdBRTdEUCxPQUFPQyxlQUFlYixFQUFTLGFBQWMsQ0FBRW1CLE9BQU8sS0FRdkRyQixFQUFvQnNCLEVBQUksU0FBU0QsRUFBT0UsR0FFdkMsR0FEVSxFQUFQQSxJQUFVRixFQUFRckIsRUFBb0JxQixJQUMvQixFQUFQRSxFQUFVLE9BQU9GLEVBQ3BCLEdBQVcsRUFBUEUsR0FBOEIsaUJBQVZGLEdBQXNCQSxHQUFTQSxFQUFNRyxXQUFZLE9BQU9ILEVBQ2hGLElBQUlJLEVBQUtYLE9BQU9ZLE9BQU8sTUFHdkIsR0FGQTFCLEVBQW9Ca0IsRUFBRU8sR0FDdEJYLE9BQU9DLGVBQWVVLEVBQUksVUFBVyxDQUFFVCxZQUFZLEVBQU1LLE1BQU9BLElBQ3RELEVBQVBFLEdBQTRCLGlCQUFURixF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TUlsRnBCIiwiZmlsZSI6ImV4cGxvcmUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gNik7XG4iLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9leHBsb3JlLmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9leHBsb3JlLmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vZXhwbG9yZS5jc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCIvLyBJbXBvcnRzXG52YXIgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fID0gcmVxdWlyZShcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIik7XG5leHBvcnRzID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLyogSWNvbnMgZm9yIGJvb3RzdHJhcCA0ICovXFxyXFxuXFxyXFxuLm1kaTo6YmVmb3JlIHtcXHJcXG4gICAgZm9udC1zaXplOiAyNHB4O1xcclxcbiAgICBsaW5lLWhlaWdodDogMTRweDtcXHJcXG59XFxyXFxuXFxyXFxuLmJ0biAubWRpOjpiZWZvcmUge1xcclxcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxuICAgIHRvcDogNHB4O1xcclxcbn1cXHJcXG5cXHJcXG4uYnRuLXhzIC5tZGk6OmJlZm9yZSB7XFxyXFxuICAgIGZvbnQtc2l6ZTogMThweDtcXHJcXG4gICAgdG9wOiAzcHg7XFxyXFxufVxcclxcblxcclxcbi5idG4tc20gLm1kaTo6YmVmb3JlIHtcXHJcXG4gICAgZm9udC1zaXplOiAxOHB4O1xcclxcbiAgICB0b3A6IDNweDtcXHJcXG59XFxyXFxuXFxyXFxuLmRyb3Bkb3duLW1lbnUgLm1kaSB7XFxyXFxuICAgIHdpZHRoOiAxOHB4O1xcclxcbn1cXHJcXG5cXHJcXG4uZHJvcGRvd24tbWVudSAubWRpOjpiZWZvcmUge1xcclxcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxuICAgIHRvcDogNHB4O1xcclxcbiAgICBsZWZ0OiAtOHB4O1xcclxcbn1cXHJcXG5cXHJcXG4ubmF2IC5tZGk6OmJlZm9yZSB7XFxyXFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG4gICAgdG9wOiA0cHg7XFxyXFxufVxcclxcblxcclxcbi5uYXZiYXIgLm5hdmJhci10b2dnbGUgLm1kaTo6YmVmb3JlIHtcXHJcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgICB0b3A6IDRweDtcXHJcXG4gICAgY29sb3I6ICNGRkY7XFxyXFxufVxcclxcblxcclxcbi5icmVhZGNydW1iIC5tZGk6OmJlZm9yZSB7XFxyXFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG4gICAgdG9wOiA0cHg7XFxyXFxufVxcclxcblxcclxcbi5icmVhZGNydW1iIGE6aG92ZXIge1xcclxcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxyXFxufVxcclxcblxcclxcbi5icmVhZGNydW1iIGE6aG92ZXIgc3BhbiB7XFxyXFxuICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xcclxcbn1cXHJcXG5cXHJcXG4uYWxlcnQgLm1kaTo6YmVmb3JlIHtcXHJcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgICB0b3A6IDRweDtcXHJcXG4gICAgbWFyZ2luLXJpZ2h0OiAycHg7XFxyXFxufVxcclxcblxcclxcbi5pbnB1dC1ncm91cC1hZGRvbiAubWRpOjpiZWZvcmUge1xcclxcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxuICAgIHRvcDogM3B4O1xcclxcbn1cXHJcXG5cXHJcXG4ubmF2YmFyLWJyYW5kIC5tZGk6OmJlZm9yZSB7XFxyXFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG4gICAgdG9wOiAycHg7XFxyXFxuICAgIG1hcmdpbi1yaWdodDogMnB4O1xcclxcbn1cXHJcXG5cXHJcXG4ubGlzdC1ncm91cC1pdGVtIC5tZGk6OmJlZm9yZSB7XFxyXFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG4gICAgdG9wOiAzcHg7XFxyXFxuICAgIGxlZnQ6IC0zcHhcXHJcXG59XFxyXFxuXFxyXFxuLyogU1ZHIGVsZW1lbnRzIGFuZCB0ZXh0ICovXFxyXFxuXFxyXFxuI21haW4tdmlzIHtcXHJcXG4gICAgbWFyZ2luLWJvdHRvbTogMTBweDtcXHJcXG59XFxyXFxuXFxyXFxuLnN2Zy1jb250YWluZXIge1xcclxcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxyXFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG4gICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgIC8qIGFzcGVjdCByYXRpbyAqL1xcclxcbiAgICB2ZXJ0aWNhbC1hbGlnbjogdG9wO1xcclxcbiAgICBvdmVyZmxvdzogdmlzaWJsZTtcXHJcXG59XFxyXFxuXFxyXFxuLnN2Zy1jb250ZW50IHtcXHJcXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcclxcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICAgIGJvcmRlcjogMXB4IHNvbGlkICMwMDA7XFxyXFxufVxcclxcblxcclxcbiNtYWluLXZpcy1sZWdlbmQtZGl2IHtcXHJcXG4gICAgZGlzcGxheTogbm9uZTtcXHJcXG59XFxyXFxuXFxyXFxuI2hpZXJhcmNoeS1sZWdlbmQtZGl2IHtcXHJcXG4gICAgZGlzcGxheTogbm9uZTtcXHJcXG59XFxyXFxuXFxyXFxuI21haW4tdmlzLWxlZ2VuZCB7XFxyXFxuICAgIGZsb2F0OiByaWdodDtcXHJcXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcclxcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxuICAgIG92ZXJmbG93OiB2aXNpYmxlO1xcclxcbiAgICB0b3A6IDEwcHg7XFxyXFxuICAgIGxlZnQ6IDEwcHg7XFxyXFxufVxcclxcblxcclxcbiNoaWVyYXJjaHktbGVnZW5kIHtcXHJcXG4gICAgZmxvYXQ6IGxlZnQ7XFxyXFxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXHJcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgICBvdmVyZmxvdzogdmlzaWJsZTtcXHJcXG4gICAgdG9wOiAxMHB4O1xcclxcbiAgICBsZWZ0OiAxMHB4O1xcclxcbn1cXHJcXG5cXHJcXG4uc3ZnLWNvbnRlbnQtZGVuZHJvZ3JhbSB7XFxyXFxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXHJcXG4gICAgYm9yZGVyOiAxcHggc29saWQgIzAwMDtcXHJcXG59XFxyXFxuXFxyXFxuLnN2Zy1saW5lLWNoYXJ0LWNvbnRhaW5lciB7XFxyXFxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXHJcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgICB3aWR0aDogMTAwJTtcXHJcXG4gICAgaGVpZ2h0OiBhdXRvO1xcclxcbiAgICAvKiBkZXBlbmRzIG9uIHN2ZyByYXRpbyAqL1xcclxcbiAgICBwYWRkaW5nLWJvdHRvbTogMTclO1xcclxcbiAgICAvKiBhc3BlY3QgcmF0aW8gKi9cXHJcXG4gICAgdmVydGljYWwtYWxpZ246IHRvcDtcXHJcXG4gICAgb3ZlcmZsb3c6IHZpc2libGU7XFxyXFxufVxcclxcblxcclxcbi5zdmctZGVuZHJvZ3JhbS1jb250YWluZXIge1xcclxcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxyXFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG4gICAgaGVpZ2h0OiBhdXRvO1xcclxcbiAgICB2ZXJ0aWNhbC1hbGlnbjogdG9wO1xcclxcbiAgICBvdmVyZmxvdzogdmlzaWJsZTtcXHJcXG59XFxyXFxuXFxyXFxuLmF4aXMgcGF0aCB7XFxyXFxuICAgIGRpc3BsYXk6IG5vbmU7XFxyXFxufVxcclxcblxcclxcbi5heGlzIGxpbmUge1xcclxcbiAgICBzdHJva2Utb3BhY2l0eTogMC4zO1xcclxcbiAgICBzaGFwZS1yZW5kZXJpbmc6IGNyaXNwRWRnZXM7XFxyXFxufVxcclxcblxcclxcbi54IHtcXHJcXG4gICAgZm9udC1zaXplOiAxZW07XFxyXFxufVxcclxcblxcclxcbi55IHtcXHJcXG4gICAgZm9udC1zaXplOiAxZW07XFxyXFxufVxcclxcblxcclxcbi5heGlzLWxpbmUtY2hhcnQgcGF0aCBsaW5lIHtcXHJcXG4gICAgZmlsbDogbm9uZTtcXHJcXG4gICAgc3Ryb2tlOiAjMDAwO1xcclxcbiAgICBzaGFwZS1yZW5kZXJpbmc6IGNyaXNwRWRnZXM7XFxyXFxufVxcclxcblxcclxcbi5saW5lIHtcXHJcXG4gICAgZmlsbDogbm9uZTtcXHJcXG4gICAgc3Ryb2tlLXdpZHRoOiA1cHg7XFxyXFxufVxcclxcblxcclxcbi8qIFRpbWUgICovXFxyXFxuXFxyXFxuLmZyYW1lLXRleHQge1xcclxcbiAgICBtYXJnaW4tdG9wOiAwO1xcclxcbiAgICBtYXJnaW4tYm90dG9tOiAwO1xcclxcbiAgICBmb250LXNpemU6IDJlbTtcXHJcXG4gICAgY29sb3I6IGluaGVyaXQ7XFxyXFxuICAgIGZvbnQtd2VpZ2h0OiA1MDA7XFxyXFxuICAgIGxpbmUtaGVpZ2h0OiAxLjE7XFxyXFxufVxcclxcblxcclxcbi8qIFNsaWRlciB0aWNrcyAgKi9cXHJcXG5cXHJcXG4udWktc2xpZGVyLXRpY2sge1xcclxcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxyXFxuICAgIHdpZHRoOiAzcHg7XFxyXFxuICAgIGJhY2tncm91bmQ6ICMzMzdhYjc7XFxyXFxuICAgIGhlaWdodDogMC44ZW07XFxyXFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG59XFxyXFxuXFxyXFxuLyogTGFvZGluZyBnaWYgICAqL1xcclxcblxcclxcbiNsb2FkaW5nIHtcXHJcXG4gICAgZGlzcGxheTogYmxvY2s7XFxyXFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXHJcXG59XFxyXFxuXFxyXFxuLyogQ29sb3IgbGVnZW5kICAgICovXFxyXFxuXFxyXFxuLmxlZ2VuZCB7XFxyXFxuICAgIGZvbnQtc2l6ZTogMTJweDtcXHJcXG4gICAgc3Ryb2tlOiAjMDAwO1xcclxcbn1cXHJcXG5cXHJcXG4ubGVnZW5kLXRleHQge1xcclxcbiAgICBmb250LXNpemU6IDEuMmVtO1xcclxcbiAgICBjb2xvcjogaW5oZXJpdDtcXHJcXG4gICAgbGluZS1oZWlnaHQ6IDEuMTtcXHJcXG59XFxyXFxuXFxyXFxuLmxpbmUtY2hhcnQtbGVnZW5kLXRleHQge1xcclxcbiAgICBmb250LXNpemU6IDJlbTtcXHJcXG4gICAgY29sb3I6IGluaGVyaXQ7XFxyXFxuICAgIGxpbmUtaGVpZ2h0OiAxLjE7XFxyXFxufVxcclxcblxcclxcbi50aW1lLWxpbmUge1xcclxcbiAgICBmaWxsOiBub25lO1xcclxcbiAgICBzdHJva2Utd2lkdGg6IDVweDtcXHJcXG4gICAgc3Ryb2tlOiAjMDAwO1xcclxcbn1cXHJcXG5cXHJcXG4vKnN3YXJtIGZlYXR1cmVzICovXFxyXFxuXFxyXFxuLmNlbnRyb2lkIHtcXHJcXG4gICAgZmlsbC1vcGFjaXR5OiAwO1xcclxcbiAgICBzdHJva2U6ICNlNzI5OGE7XFxyXFxuICAgIHN0cm9rZS13aWR0aDogM3B4O1xcclxcbn1cXHJcXG5cXHJcXG4ubWVkb2lkIHtcXHJcXG4gICAgZmlsbDogI2U3Mjk4YSAhaW1wb3J0YW50O1xcclxcbiAgICBzdHJva2U6ICNlNzI5OGEgIWltcG9ydGFudDtcXHJcXG59XFxyXFxuXFxyXFxuLmh1bGwtcGF0aCB7XFxyXFxuICAgIGZpbGw6ICNmZmY7XFxyXFxuICAgIGZpbGwtb3BhY2l0eTogMDtcXHJcXG4gICAgc3Ryb2tlLXdpZHRoOiAzO1xcclxcbiAgICBzdHJva2U6ICMyNTI1MjU7XFxyXFxuICAgIHN0cm9rZS1vcGFjaXR5OiAwLjU7XFxyXFxufVxcclxcblxcclxcbi5oaWVyYXJjaHktZ3JvdXAge1xcclxcbiAgICBzdHJva2Utd2lkdGg6IDEwO1xcclxcbiAgICBzdHJva2UtbGluZWpvaW46IHJvdW5kO1xcclxcbiAgICBvcGFjaXR5OiAwLjI7XFxyXFxufVxcclxcblxcclxcbi5kZWxhdW5heS10cmlhbmd1bGF0aW9uIHtcXHJcXG4gICAgZmlsbC1vcGFjaXR5OiAwO1xcclxcbiAgICBzdHJva2Utd2lkdGg6IDI7XFxyXFxuICAgIHN0cm9rZTogIzAwMDtcXHJcXG4gICAgc3Ryb2tlLW9wYWNpdHk6IDAuNDtcXHJcXG59XFxyXFxuXFxyXFxuLyogQ29sb3IgYnJld2VyIHBpY2tlciBkaXYgKi9cXHJcXG5cXHJcXG4ucGFsZXR0ZSB7XFxyXFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXHJcXG4gICAgZGlzcGxheTogdGFibGU7XFxyXFxuICAgIHZlcnRpY2FsLWFsaWduOiBib3R0b207XFxyXFxuICAgIG1hcmdpbjogNHB4IDAgNHB4IDRweDtcXHJcXG4gICAgYmFja2dyb3VuZDogI2ZmZjtcXHJcXG4gICAgYm9yZGVyOiBzb2xpZCAxcHggI2FhYTtcXHJcXG59XFxyXFxuXFxyXFxuLnN3YXRjaCB7XFxyXFxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXHJcXG4gICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcXHJcXG4gICAgd2lkdGg6IDIycHg7XFxyXFxuICAgIGhlaWdodDogMjJweDtcXHJcXG59XFxyXFxuXFxyXFxuLnZvcm9ub2kge1xcclxcbiAgICBmaWxsLW9wYWNpdHk6IDA7XFxyXFxuICAgIHN0cm9rZS13aWR0aDogMztcXHJcXG4gICAgc3Ryb2tlOiAjMDAwO1xcclxcbiAgICBzdHJva2Utb3BhY2l0eTogMC4yO1xcclxcbn1cXHJcXG5cXHJcXG4vKiBUb29sdGlwICovXFxyXFxuXFxyXFxuZGl2LnRvb2x0aXAge1xcclxcbiAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcXHJcXG4gICAgb3BhY2l0eTogMDtcXHJcXG4gICAgYmFja2dyb3VuZDogcmdiKDI1NSwgMjU1LCAyNTUpICFpbXBvcnRhbnQ7XFxyXFxuICAgIGJvcmRlci1sZWZ0LWNvbG9yOiAjMWI4MDllICFpbXBvcnRhbnQ7XFxyXFxuICAgIGJvcmRlcjogMXB4IHNvbGlkICNlZWU7XFxyXFxuICAgIGJvcmRlci1sZWZ0LXdpZHRoOiA1cHg7XFxyXFxuICAgIGJvcmRlci1yYWRpdXM6IDNweDtcXHJcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbn1cXHJcXG5cXHJcXG5kaXYudG9vbHRpcCB0YWJsZSB0ZDpudGgtY2hpbGQoMikge1xcclxcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xcclxcbn1cXHJcXG5cXHJcXG4udG9vbHRpcC1zcGFuIHtcXHJcXG4gICAgZGlzcGxheTogYmxvY2s7XFxyXFxuICAgIHdpZHRoOiAxNTBweDtcXHJcXG4gICAgd29yZC13cmFwOiBicmVhay13b3JkO1xcclxcbiAgICBmb250LXNpemU6IDEuNWVtO1xcclxcbn1cXHJcXG5cXHJcXG4udXBwZXItb3V0ZXItYXJlYSwgLmxvd2VyLW91dGVyLWFyZWEge1xcclxcbiAgICBzdHJva2Utd2lkdGg6IDE7XFxyXFxuICAgIGZpbGw6ICM3NGE5Y2Y7XFxyXFxuICAgIHN0cm9rZTogIzM2OTBjMDtcXHJcXG59XFxyXFxuXFxyXFxuLnVwcGVyLWlubmVyLWFyZWEsIC5sb3dlci1pbm5lci1hcmVhIHtcXHJcXG4gICAgc3Ryb2tlLXdpZHRoOiAxO1xcclxcbiAgICBmaWxsOiAjMDQ1YThkO1xcclxcbiAgICBzdHJva2U6ICMwMjM4NTg7XFxyXFxufVxcclxcblxcclxcbi5tZWRpYW4tbGluZSB7XFxyXFxuICAgIGZpbGw6IG5vbmU7XFxyXFxuICAgIHN0cm9rZTogIzUyNTI1MjtcXHJcXG4gICAgc3Ryb2tlLXdpZHRoOiA1O1xcclxcbn1cXHJcXG5cXHJcXG4uc2VsZWN0ZWQge1xcclxcbiAgICBiYWNrZ3JvdW5kOiAjOTk5O1xcclxcbiAgICBib3JkZXI6IDRweCBzb2xpZCAjNGQ0ZDRkO1xcclxcbiAgICAtbW96LWJvcmRlci1yYWRpdXM6IDVweDtcXHJcXG4gICAgLXdlYmtpdC1ib3JkZXItcmFkaXVzOiA1cHg7XFxyXFxuICAgIGJveC1zaGFkb3c6IDFweCAycHggNHB4IHJnYmEoMCwgMCwgMCwgLjQpO1xcclxcbn1cXHJcXG5cXHJcXG4uem9vbSB7XFxyXFxuICAgIGZpbGw6IG5vbmU7XFxyXFxuICAgIHBvaW50ZXItZXZlbnRzOiBhbGw7XFxyXFxufVxcclxcblxcclxcbi54LmF4aXMtbGluZS1jaGFydD5nPnRleHQge1xcclxcbiAgICBmb250LXNpemU6IDNlbTtcXHJcXG4gICAgY29sb3I6IGluaGVyaXQ7XFxyXFxuICAgIGxpbmUtaGVpZ2h0OiAxLjE7XFxyXFxufVxcclxcblxcclxcbi5hcnJvdyB7XFxyXFxuICAgIHN0cm9rZS13aWR0aDogMTtcXHJcXG59XFxyXFxuXFxyXFxuI2NlbnRyb2lkLWxpbmUge1xcclxcbiAgICBzdHJva2Utd2lkdGg6IDE7XFxyXFxuICAgIHN0cm9rZTogI2U3Mjk4YTtcXHJcXG59XFxyXFxuXFxyXFxuI2NlbnRyb2lkLWFycm93IHtcXHJcXG4gICAgZmlsbDogI2U3Mjk4YTtcXHJcXG59XFxyXFxuXFxyXFxuLm1ldGFkYXRhLXN3YXRjaCB7XFxyXFxuICAgIHdpZHRoOiAzMHB4O1xcclxcbiAgICBoZWlnaHQ6IDMwcHg7XFxyXFxuICAgIGJvcmRlci1yYWRpdXM6IDNweDtcXHJcXG4gICAgYm9yZGVyOiAycHggc29saWQgIzY2NjtcXHJcXG59XFxyXFxuXFxyXFxuLm1ldGFkYXRhLXN3YXRjaC1jbGlja2FibGU6aG92ZXIge1xcclxcbiAgICBib3JkZXI6IDJweCBzb2xpZCAjMDAwO1xcclxcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxufVxcclxcblxcclxcbi5kcm9wZG93bi1tZW51IHtcXHJcXG4gICAgbWluLXdpZHRoOiA0MHB4O1xcclxcbiAgICBwYWRkaW5nOiA1cHg7XFxyXFxufVxcclxcblxcclxcbi5tZXRhZGF0YS1sZWdlbmQge1xcclxcbiAgICBsaXN0LXN0eWxlOiBub25lO1xcclxcbiAgICBtYXJnaW4tdG9wOiAxMHB4O1xcclxcbn1cXHJcXG5cXHJcXG4ubWV0YWRhdGEtbGVnZW5kIGxpIHtcXHJcXG4gICAgZmxvYXQ6IGxlZnQ7XFxyXFxuICAgIG1hcmdpbi1yaWdodDogMTBweDtcXHJcXG59XFxyXFxuXFxyXFxuLm1ldGFkYXRhLWxlZ2VuZCBzcGFuIHtcXHJcXG4gICAgYm9yZGVyOiAycHggc29saWQgIzY2NjtcXHJcXG4gICAgZmxvYXQ6IGxlZnQ7XFxyXFxuICAgIHdpZHRoOiAzMHB4O1xcclxcbiAgICBoZWlnaHQ6IDMwcHg7XFxyXFxufVxcclxcblxcclxcbi5tZXRhZGF0YS1sZWdlbmQgLmJsLWF2ZyB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICM3ZmM5N2Y7XFxyXFxufVxcclxcblxcclxcbi5tZXRhZGF0YS1sZWdlbmQgLmF2ZyB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmZGMwODY7XFxyXFxufVxcclxcblxcclxcbi5tZXRhZGF0YS1sZWdlbmQgLmFiLWF2ZyB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMzODZjYjA7XFxyXFxufVxcclxcblxcclxcbi5uZXR3b3JrLWVkZ2VzIHtcXHJcXG4gICAgZmlsbC1vcGFjaXR5OiAwO1xcclxcbiAgICBzdHJva2Utd2lkdGg6IDI7XFxyXFxufVxcclxcblxcclxcbi5uZXR3b3JrLWJhY2tncm91bmQtZWRnZXMge1xcclxcbiAgICBmaWxsLW9wYWNpdHk6IDA7XFxyXFxuICAgIHN0cm9rZS1vcGFjaXR5OiAwLjI1O1xcclxcbiAgICBzdHJva2U6ICM3MzczNzM7XFxyXFxufVxcclxcblxcclxcbi5ub2RlIHRleHQge1xcclxcbiAgICBmb250OiAxMnB4IHNhbnMtc2VyaWY7XFxyXFxufVxcclxcblxcclxcbi5ub2RlLS1pbnRlcm5hbCB0ZXh0IHtcXHJcXG4gICAgdGV4dC1zaGFkb3c6IDAgMXB4IDAgI2ZmZiwgMCAtMXB4IDAgI2ZmZiwgMXB4IDAgMCAjZmZmLCAtMXB4IDAgMCAjZmZmO1xcclxcbn1cXHJcXG5cXHJcXG4ubGluayB7XFxyXFxuICAgIGZpbGw6IG5vbmU7XFxyXFxuICAgIHN0cm9rZTogIzYzNjM2MztcXHJcXG4gICAgc3Ryb2tlLXdpZHRoOiA1cHg7XFxyXFxufVxcclxcblxcclxcbiNhY3RpdmUtbmV0d29yay1uYW1lIHtcXHJcXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxyXFxuICAgIGNvbG9yOiAjMjk2MjkyO1xcclxcbn1cXHJcXG5cXHJcXG4uYWN0aXZlLWxldmVsIHtcXHJcXG4gICAgZmlsbDogIzM4NmNiMDtcXHJcXG59XFxyXFxuXFxyXFxuI2RlbmRyb2dyYW0tcGFuZWwge1xcclxcbiAgICBwb3NpdGlvbjogaW5pdGlhbDtcXHJcXG59XFxyXFxuXFxyXFxuI2RlbmRyb2dyYW0tcGFuZWwge1xcclxcbiAgICBkaXNwbGF5OiBub25lXFxyXFxufVxcclxcblxcclxcbi5zaG93LWRlbmRyb2dyYW0ge1xcclxcbiAgICBmbG9hdDogcmlnaHQ7XFxyXFxuICAgIGJvcmRlci1yYWRpdXM6IDNweDtcXHJcXG4gICAgYm9yZGVyOiAxcHggc29saWQgI0QxRDNENDtcXHJcXG4gICAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcXHJcXG59XFxyXFxuXFxyXFxuLnNob3ctZGVuZHJvZ3JhbTpob3ZlciB7XFxyXFxuICAgIGJhY2tncm91bmQ6ICNEMUQzRDQ7XFxyXFxufVxcclxcblxcclxcbi5kZW5kcm9ncmFtLXRleHQge1xcclxcbiAgICBmb250LXNpemU6IDEwZW0gIWltcG9ydGFudDtcXHJcXG59XFxyXFxuXFxyXFxuLmhpZ2hsaWdodC1oaWVyYXJjaHkge1xcclxcbiAgICBmaWxsOiAjMjUyNTI1O1xcclxcbiAgICBzdHJva2U6ICMyNTI1MjU7XFxyXFxuICAgIHN0cm9rZS13aWR0aDogMTA7XFxyXFxuICAgIHN0cm9rZS1saW5lam9pbjogcm91bmQ7XFxyXFxuICAgIG9wYWNpdHk6IDAuMztcXHJcXG59XFxyXFxuXFxyXFxuLmFuaW1hbC1oaWdobGlnaHQge1xcclxcbiAgICBmaWxsOiAjYzUxYjdkICFpbXBvcnRhbnQ7XFxyXFxufVxcclxcblxcclxcbiNkZW5kcm9ncmFtLWJ1dHRvbnMtZGl2IC5idG4gc3Bhbi5nbHlwaGljb24ge1xcclxcbiAgICBvcGFjaXR5OiAwO1xcclxcbn1cXHJcXG5cXHJcXG4jZGVuZHJvZ3JhbS1idXR0b25zLWRpdiAuYnRuLmFjdGl2ZSBzcGFuLmdseXBoaWNvbiB7XFxyXFxuICAgIG9wYWNpdHk6IDE7XFxyXFxufVxcclxcblxcclxcbiNkZW5kcm9ncmFtLWJ1dHRvbnMtZGl2IHtcXHJcXG4gICAgYm9yZGVyOiAycHggc29saWQgI0QxRDNENDtcXHJcXG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xcclxcbn1cXHJcXG5cXHJcXG4jZGVuZHJvZ3JhbS1sZWdlbmQge1xcclxcbiAgICBtYXJnaW4tbGVmdDogMjBweDtcXHJcXG59XFxyXFxuXFxyXFxuLmludGVyc2VjdGlvbiB7XFxyXFxuICAgIGZpbGw6IHVybCgjc3RyaXBlZCkgIWltcG9ydGFudDtcXHJcXG4gICAgc3Ryb2tlOiAjNjcwMDBkO1xcclxcbn1cXHJcXG5cXHJcXG4uc3ltLWRpZmZlcmVuY2Uge1xcclxcbiAgICBmaWxsOiB1cmwoI3N0cmlwZWQpICFpbXBvcnRhbnQ7XFxyXFxuICAgIHN0cm9rZTogIzY3MDAwZDtcXHJcXG59XFxyXFxuXFxyXFxuLm1vZGFsLWxnIHtcXHJcXG4gICAgbWF4LXdpZHRoOiA4MCU7XFxyXFxufVxcclxcblxcclxcbi5iYWNrZ3JvdW5kLWltYWdlIHtcXHJcXG4gICAgYmFja2dyb3VuZDogI2ZmZjtcXHJcXG59XCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1c2VTb3VyY2VNYXApIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApO1xuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICByZXR1cm4gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGNvbnRlbnQsIFwifVwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbignJyk7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiAobW9kdWxlcywgbWVkaWFRdWVyeSwgZGVkdXBlKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSAnc3RyaW5nJykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCAnJ11dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG4gICAgICAgIHZhciBpZCA9IHRoaXNbaV1bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbW9kdWxlcy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2ldKTtcblxuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250aW51ZVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1lZGlhUXVlcnkpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhUXVlcnk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsyXSA9IFwiXCIuY29uY2F0KG1lZGlhUXVlcnksIFwiIGFuZCBcIikuY29uY2F0KGl0ZW1bMl0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59O1xuXG5mdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV0gfHwgJyc7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuXG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh1c2VTb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IHRvQ29tbWVudChjc3NNYXBwaW5nKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8ICcnKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKCdcXG4nKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbignXFxuJyk7XG59IC8vIEFkYXB0ZWQgZnJvbSBjb252ZXJ0LXNvdXJjZS1tYXAgKE1JVClcblxuXG5mdW5jdGlvbiB0b0NvbW1lbnQoc291cmNlTWFwKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKTtcbiAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICByZXR1cm4gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xufSIsIi8qXG5cdE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5cbnZhciBzdHlsZXNJbkRvbSA9IHt9O1xuXG52YXJcdG1lbW9pemUgPSBmdW5jdGlvbiAoZm4pIHtcblx0dmFyIG1lbW87XG5cblx0cmV0dXJuIGZ1bmN0aW9uICgpIHtcblx0XHRpZiAodHlwZW9mIG1lbW8gPT09IFwidW5kZWZpbmVkXCIpIG1lbW8gPSBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHRcdHJldHVybiBtZW1vO1xuXHR9O1xufTtcblxudmFyIGlzT2xkSUUgPSBtZW1vaXplKGZ1bmN0aW9uICgpIHtcblx0Ly8gVGVzdCBmb3IgSUUgPD0gOSBhcyBwcm9wb3NlZCBieSBCcm93c2VyaGFja3Ncblx0Ly8gQHNlZSBodHRwOi8vYnJvd3NlcmhhY2tzLmNvbS8jaGFjay1lNzFkODY5MmY2NTMzNDE3M2ZlZTcxNWMyMjJjYjgwNVxuXHQvLyBUZXN0cyBmb3IgZXhpc3RlbmNlIG9mIHN0YW5kYXJkIGdsb2JhbHMgaXMgdG8gYWxsb3cgc3R5bGUtbG9hZGVyXG5cdC8vIHRvIG9wZXJhdGUgY29ycmVjdGx5IGludG8gbm9uLXN0YW5kYXJkIGVudmlyb25tZW50c1xuXHQvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyL2lzc3Vlcy8xNzdcblx0cmV0dXJuIHdpbmRvdyAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5hbGwgJiYgIXdpbmRvdy5hdG9iO1xufSk7XG5cbnZhciBnZXRUYXJnZXQgPSBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7XG59O1xuXG52YXIgZ2V0RWxlbWVudCA9IChmdW5jdGlvbiAoZm4pIHtcblx0dmFyIG1lbW8gPSB7fTtcblxuXHRyZXR1cm4gZnVuY3Rpb24odGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgcGFzc2luZyBmdW5jdGlvbiBpbiBvcHRpb25zLCB0aGVuIHVzZSBpdCBmb3IgcmVzb2x2ZSBcImhlYWRcIiBlbGVtZW50LlxuICAgICAgICAgICAgICAgIC8vIFVzZWZ1bCBmb3IgU2hhZG93IFJvb3Qgc3R5bGUgaS5lXG4gICAgICAgICAgICAgICAgLy8ge1xuICAgICAgICAgICAgICAgIC8vICAgaW5zZXJ0SW50bzogZnVuY3Rpb24gKCkgeyByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNmb29cIikuc2hhZG93Um9vdCB9XG4gICAgICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGFyZ2V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGFyZ2V0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0XHR2YXIgc3R5bGVUYXJnZXQgPSBnZXRUYXJnZXQuY2FsbCh0aGlzLCB0YXJnZXQpO1xuXHRcdFx0Ly8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblx0XHRcdGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHQvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuXHRcdFx0XHRcdC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG5cdFx0XHRcdFx0c3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcblx0XHRcdFx0fSBjYXRjaChlKSB7XG5cdFx0XHRcdFx0c3R5bGVUYXJnZXQgPSBudWxsO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcblx0XHR9XG5cdFx0cmV0dXJuIG1lbW9bdGFyZ2V0XVxuXHR9O1xufSkoKTtcblxudmFyIHNpbmdsZXRvbiA9IG51bGw7XG52YXJcdHNpbmdsZXRvbkNvdW50ZXIgPSAwO1xudmFyXHRzdHlsZXNJbnNlcnRlZEF0VG9wID0gW107XG5cbnZhclx0Zml4VXJscyA9IHJlcXVpcmUoXCIuL3VybHNcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obGlzdCwgb3B0aW9ucykge1xuXHRpZiAodHlwZW9mIERFQlVHICE9PSBcInVuZGVmaW5lZFwiICYmIERFQlVHKSB7XG5cdFx0aWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gXCJvYmplY3RcIikgdGhyb3cgbmV3IEVycm9yKFwiVGhlIHN0eWxlLWxvYWRlciBjYW5ub3QgYmUgdXNlZCBpbiBhIG5vbi1icm93c2VyIGVudmlyb25tZW50XCIpO1xuXHR9XG5cblx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0b3B0aW9ucy5hdHRycyA9IHR5cGVvZiBvcHRpb25zLmF0dHJzID09PSBcIm9iamVjdFwiID8gb3B0aW9ucy5hdHRycyA6IHt9O1xuXG5cdC8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxuXHQvLyB0YWdzIGl0IHdpbGwgYWxsb3cgb24gYSBwYWdlXG5cdGlmICghb3B0aW9ucy5zaW5nbGV0b24gJiYgdHlwZW9mIG9wdGlvbnMuc2luZ2xldG9uICE9PSBcImJvb2xlYW5cIikgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7XG5cblx0Ly8gQnkgZGVmYXVsdCwgYWRkIDxzdHlsZT4gdGFncyB0byB0aGUgPGhlYWQ+IGVsZW1lbnRcbiAgICAgICAgaWYgKCFvcHRpb25zLmluc2VydEludG8pIG9wdGlvbnMuaW5zZXJ0SW50byA9IFwiaGVhZFwiO1xuXG5cdC8vIEJ5IGRlZmF1bHQsIGFkZCA8c3R5bGU+IHRhZ3MgdG8gdGhlIGJvdHRvbSBvZiB0aGUgdGFyZ2V0XG5cdGlmICghb3B0aW9ucy5pbnNlcnRBdCkgb3B0aW9ucy5pbnNlcnRBdCA9IFwiYm90dG9tXCI7XG5cblx0dmFyIHN0eWxlcyA9IGxpc3RUb1N0eWxlcyhsaXN0LCBvcHRpb25zKTtcblxuXHRhZGRTdHlsZXNUb0RvbShzdHlsZXMsIG9wdGlvbnMpO1xuXG5cdHJldHVybiBmdW5jdGlvbiB1cGRhdGUgKG5ld0xpc3QpIHtcblx0XHR2YXIgbWF5UmVtb3ZlID0gW107XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGl0ZW0gPSBzdHlsZXNbaV07XG5cdFx0XHR2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcblxuXHRcdFx0ZG9tU3R5bGUucmVmcy0tO1xuXHRcdFx0bWF5UmVtb3ZlLnB1c2goZG9tU3R5bGUpO1xuXHRcdH1cblxuXHRcdGlmKG5ld0xpc3QpIHtcblx0XHRcdHZhciBuZXdTdHlsZXMgPSBsaXN0VG9TdHlsZXMobmV3TGlzdCwgb3B0aW9ucyk7XG5cdFx0XHRhZGRTdHlsZXNUb0RvbShuZXdTdHlsZXMsIG9wdGlvbnMpO1xuXHRcdH1cblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbWF5UmVtb3ZlLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgZG9tU3R5bGUgPSBtYXlSZW1vdmVbaV07XG5cblx0XHRcdGlmKGRvbVN0eWxlLnJlZnMgPT09IDApIHtcblx0XHRcdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykgZG9tU3R5bGUucGFydHNbal0oKTtcblxuXHRcdFx0XHRkZWxldGUgc3R5bGVzSW5Eb21bZG9tU3R5bGUuaWRdO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn07XG5cbmZ1bmN0aW9uIGFkZFN0eWxlc1RvRG9tIChzdHlsZXMsIG9wdGlvbnMpIHtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgaXRlbSA9IHN0eWxlc1tpXTtcblx0XHR2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcblxuXHRcdGlmKGRvbVN0eWxlKSB7XG5cdFx0XHRkb21TdHlsZS5yZWZzKys7XG5cblx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRkb21TdHlsZS5wYXJ0c1tqXShpdGVtLnBhcnRzW2pdKTtcblx0XHRcdH1cblxuXHRcdFx0Zm9yKDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0ZG9tU3R5bGUucGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciBwYXJ0cyA9IFtdO1xuXG5cdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRwYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcblx0XHRcdH1cblxuXHRcdFx0c3R5bGVzSW5Eb21baXRlbS5pZF0gPSB7aWQ6IGl0ZW0uaWQsIHJlZnM6IDEsIHBhcnRzOiBwYXJ0c307XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGxpc3RUb1N0eWxlcyAobGlzdCwgb3B0aW9ucykge1xuXHR2YXIgc3R5bGVzID0gW107XG5cdHZhciBuZXdTdHlsZXMgPSB7fTtcblxuXHRmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgaXRlbSA9IGxpc3RbaV07XG5cdFx0dmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG5cdFx0dmFyIGNzcyA9IGl0ZW1bMV07XG5cdFx0dmFyIG1lZGlhID0gaXRlbVsyXTtcblx0XHR2YXIgc291cmNlTWFwID0gaXRlbVszXTtcblx0XHR2YXIgcGFydCA9IHtjc3M6IGNzcywgbWVkaWE6IG1lZGlhLCBzb3VyY2VNYXA6IHNvdXJjZU1hcH07XG5cblx0XHRpZighbmV3U3R5bGVzW2lkXSkgc3R5bGVzLnB1c2gobmV3U3R5bGVzW2lkXSA9IHtpZDogaWQsIHBhcnRzOiBbcGFydF19KTtcblx0XHRlbHNlIG5ld1N0eWxlc1tpZF0ucGFydHMucHVzaChwYXJ0KTtcblx0fVxuXG5cdHJldHVybiBzdHlsZXM7XG59XG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudCAob3B0aW9ucywgc3R5bGUpIHtcblx0dmFyIHRhcmdldCA9IGdldEVsZW1lbnQob3B0aW9ucy5pbnNlcnRJbnRvKVxuXG5cdGlmICghdGFyZ2V0KSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnRJbnRvJyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG5cdH1cblxuXHR2YXIgbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AgPSBzdHlsZXNJbnNlcnRlZEF0VG9wW3N0eWxlc0luc2VydGVkQXRUb3AubGVuZ3RoIC0gMV07XG5cblx0aWYgKG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwidG9wXCIpIHtcblx0XHRpZiAoIWxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wKSB7XG5cdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCB0YXJnZXQuZmlyc3RDaGlsZCk7XG5cdFx0fSBlbHNlIGlmIChsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcC5uZXh0U2libGluZykge1xuXHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AubmV4dFNpYmxpbmcpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuXHRcdH1cblx0XHRzdHlsZXNJbnNlcnRlZEF0VG9wLnB1c2goc3R5bGUpO1xuXHR9IGVsc2UgaWYgKG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwiYm90dG9tXCIpIHtcblx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBvcHRpb25zLmluc2VydEF0ID09PSBcIm9iamVjdFwiICYmIG9wdGlvbnMuaW5zZXJ0QXQuYmVmb3JlKSB7XG5cdFx0dmFyIG5leHRTaWJsaW5nID0gZ2V0RWxlbWVudChvcHRpb25zLmluc2VydEludG8gKyBcIiBcIiArIG9wdGlvbnMuaW5zZXJ0QXQuYmVmb3JlKTtcblx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBuZXh0U2libGluZyk7XG5cdH0gZWxzZSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiW1N0eWxlIExvYWRlcl1cXG5cXG4gSW52YWxpZCB2YWx1ZSBmb3IgcGFyYW1ldGVyICdpbnNlcnRBdCcgKCdvcHRpb25zLmluc2VydEF0JykgZm91bmQuXFxuIE11c3QgYmUgJ3RvcCcsICdib3R0b20nLCBvciBPYmplY3QuXFxuIChodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlciNpbnNlcnRhdClcXG5cIik7XG5cdH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50IChzdHlsZSkge1xuXHRpZiAoc3R5bGUucGFyZW50Tm9kZSA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXHRzdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTtcblxuXHR2YXIgaWR4ID0gc3R5bGVzSW5zZXJ0ZWRBdFRvcC5pbmRleE9mKHN0eWxlKTtcblx0aWYoaWR4ID49IDApIHtcblx0XHRzdHlsZXNJbnNlcnRlZEF0VG9wLnNwbGljZShpZHgsIDEpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVN0eWxlRWxlbWVudCAob3B0aW9ucykge1xuXHR2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG5cblx0aWYob3B0aW9ucy5hdHRycy50eXBlID09PSB1bmRlZmluZWQpIHtcblx0XHRvcHRpb25zLmF0dHJzLnR5cGUgPSBcInRleHQvY3NzXCI7XG5cdH1cblxuXHRhZGRBdHRycyhzdHlsZSwgb3B0aW9ucy5hdHRycyk7XG5cdGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zLCBzdHlsZSk7XG5cblx0cmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVMaW5rRWxlbWVudCAob3B0aW9ucykge1xuXHR2YXIgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpO1xuXG5cdGlmKG9wdGlvbnMuYXR0cnMudHlwZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0b3B0aW9ucy5hdHRycy50eXBlID0gXCJ0ZXh0L2Nzc1wiO1xuXHR9XG5cdG9wdGlvbnMuYXR0cnMucmVsID0gXCJzdHlsZXNoZWV0XCI7XG5cblx0YWRkQXR0cnMobGluaywgb3B0aW9ucy5hdHRycyk7XG5cdGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zLCBsaW5rKTtcblxuXHRyZXR1cm4gbGluaztcbn1cblxuZnVuY3Rpb24gYWRkQXR0cnMgKGVsLCBhdHRycykge1xuXHRPYmplY3Qua2V5cyhhdHRycykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG5cdFx0ZWwuc2V0QXR0cmlidXRlKGtleSwgYXR0cnNba2V5XSk7XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBhZGRTdHlsZSAob2JqLCBvcHRpb25zKSB7XG5cdHZhciBzdHlsZSwgdXBkYXRlLCByZW1vdmUsIHJlc3VsdDtcblxuXHQvLyBJZiBhIHRyYW5zZm9ybSBmdW5jdGlvbiB3YXMgZGVmaW5lZCwgcnVuIGl0IG9uIHRoZSBjc3Ncblx0aWYgKG9wdGlvbnMudHJhbnNmb3JtICYmIG9iai5jc3MpIHtcblx0ICAgIHJlc3VsdCA9IG9wdGlvbnMudHJhbnNmb3JtKG9iai5jc3MpO1xuXG5cdCAgICBpZiAocmVzdWx0KSB7XG5cdCAgICBcdC8vIElmIHRyYW5zZm9ybSByZXR1cm5zIGEgdmFsdWUsIHVzZSB0aGF0IGluc3RlYWQgb2YgdGhlIG9yaWdpbmFsIGNzcy5cblx0ICAgIFx0Ly8gVGhpcyBhbGxvd3MgcnVubmluZyBydW50aW1lIHRyYW5zZm9ybWF0aW9ucyBvbiB0aGUgY3NzLlxuXHQgICAgXHRvYmouY3NzID0gcmVzdWx0O1xuXHQgICAgfSBlbHNlIHtcblx0ICAgIFx0Ly8gSWYgdGhlIHRyYW5zZm9ybSBmdW5jdGlvbiByZXR1cm5zIGEgZmFsc3kgdmFsdWUsIGRvbid0IGFkZCB0aGlzIGNzcy5cblx0ICAgIFx0Ly8gVGhpcyBhbGxvd3MgY29uZGl0aW9uYWwgbG9hZGluZyBvZiBjc3Ncblx0ICAgIFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHQgICAgXHRcdC8vIG5vb3Bcblx0ICAgIFx0fTtcblx0ICAgIH1cblx0fVxuXG5cdGlmIChvcHRpb25zLnNpbmdsZXRvbikge1xuXHRcdHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrO1xuXG5cdFx0c3R5bGUgPSBzaW5nbGV0b24gfHwgKHNpbmdsZXRvbiA9IGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKSk7XG5cblx0XHR1cGRhdGUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIGZhbHNlKTtcblx0XHRyZW1vdmUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIHRydWUpO1xuXG5cdH0gZWxzZSBpZiAoXG5cdFx0b2JqLnNvdXJjZU1hcCAmJlxuXHRcdHR5cGVvZiBVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBVUkwuY3JlYXRlT2JqZWN0VVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgVVJMLnJldm9rZU9iamVjdFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIEJsb2IgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCJcblx0KSB7XG5cdFx0c3R5bGUgPSBjcmVhdGVMaW5rRWxlbWVudChvcHRpb25zKTtcblx0XHR1cGRhdGUgPSB1cGRhdGVMaW5rLmJpbmQobnVsbCwgc3R5bGUsIG9wdGlvbnMpO1xuXHRcdHJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG5cblx0XHRcdGlmKHN0eWxlLmhyZWYpIFVSTC5yZXZva2VPYmplY3RVUkwoc3R5bGUuaHJlZik7XG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHRzdHlsZSA9IGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKTtcblx0XHR1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGUpO1xuXHRcdHJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG5cdFx0fTtcblx0fVxuXG5cdHVwZGF0ZShvYmopO1xuXG5cdHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZSAobmV3T2JqKSB7XG5cdFx0aWYgKG5ld09iaikge1xuXHRcdFx0aWYgKFxuXHRcdFx0XHRuZXdPYmouY3NzID09PSBvYmouY3NzICYmXG5cdFx0XHRcdG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmXG5cdFx0XHRcdG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXBcblx0XHRcdCkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHVwZGF0ZShvYmogPSBuZXdPYmopO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZW1vdmUoKTtcblx0XHR9XG5cdH07XG59XG5cbnZhciByZXBsYWNlVGV4dCA9IChmdW5jdGlvbiAoKSB7XG5cdHZhciB0ZXh0U3RvcmUgPSBbXTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gKGluZGV4LCByZXBsYWNlbWVudCkge1xuXHRcdHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudDtcblxuXHRcdHJldHVybiB0ZXh0U3RvcmUuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJ1xcbicpO1xuXHR9O1xufSkoKTtcblxuZnVuY3Rpb24gYXBwbHlUb1NpbmdsZXRvblRhZyAoc3R5bGUsIGluZGV4LCByZW1vdmUsIG9iaikge1xuXHR2YXIgY3NzID0gcmVtb3ZlID8gXCJcIiA6IG9iai5jc3M7XG5cblx0aWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcblx0XHRzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKTtcblx0fSBlbHNlIHtcblx0XHR2YXIgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcyk7XG5cdFx0dmFyIGNoaWxkTm9kZXMgPSBzdHlsZS5jaGlsZE5vZGVzO1xuXG5cdFx0aWYgKGNoaWxkTm9kZXNbaW5kZXhdKSBzdHlsZS5yZW1vdmVDaGlsZChjaGlsZE5vZGVzW2luZGV4XSk7XG5cblx0XHRpZiAoY2hpbGROb2Rlcy5sZW5ndGgpIHtcblx0XHRcdHN0eWxlLmluc2VydEJlZm9yZShjc3NOb2RlLCBjaGlsZE5vZGVzW2luZGV4XSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHN0eWxlLmFwcGVuZENoaWxkKGNzc05vZGUpO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBhcHBseVRvVGFnIChzdHlsZSwgb2JqKSB7XG5cdHZhciBjc3MgPSBvYmouY3NzO1xuXHR2YXIgbWVkaWEgPSBvYmoubWVkaWE7XG5cblx0aWYobWVkaWEpIHtcblx0XHRzdHlsZS5zZXRBdHRyaWJ1dGUoXCJtZWRpYVwiLCBtZWRpYSlcblx0fVxuXG5cdGlmKHN0eWxlLnN0eWxlU2hlZXQpIHtcblx0XHRzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG5cdH0gZWxzZSB7XG5cdFx0d2hpbGUoc3R5bGUuZmlyc3RDaGlsZCkge1xuXHRcdFx0c3R5bGUucmVtb3ZlQ2hpbGQoc3R5bGUuZmlyc3RDaGlsZCk7XG5cdFx0fVxuXG5cdFx0c3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG5cdH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlTGluayAobGluaywgb3B0aW9ucywgb2JqKSB7XG5cdHZhciBjc3MgPSBvYmouY3NzO1xuXHR2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuXHQvKlxuXHRcdElmIGNvbnZlcnRUb0Fic29sdXRlVXJscyBpc24ndCBkZWZpbmVkLCBidXQgc291cmNlbWFwcyBhcmUgZW5hYmxlZFxuXHRcdGFuZCB0aGVyZSBpcyBubyBwdWJsaWNQYXRoIGRlZmluZWQgdGhlbiBsZXRzIHR1cm4gY29udmVydFRvQWJzb2x1dGVVcmxzXG5cdFx0b24gYnkgZGVmYXVsdC4gIE90aGVyd2lzZSBkZWZhdWx0IHRvIHRoZSBjb252ZXJ0VG9BYnNvbHV0ZVVybHMgb3B0aW9uXG5cdFx0ZGlyZWN0bHlcblx0Ki9cblx0dmFyIGF1dG9GaXhVcmxzID0gb3B0aW9ucy5jb252ZXJ0VG9BYnNvbHV0ZVVybHMgPT09IHVuZGVmaW5lZCAmJiBzb3VyY2VNYXA7XG5cblx0aWYgKG9wdGlvbnMuY29udmVydFRvQWJzb2x1dGVVcmxzIHx8IGF1dG9GaXhVcmxzKSB7XG5cdFx0Y3NzID0gZml4VXJscyhjc3MpO1xuXHR9XG5cblx0aWYgKHNvdXJjZU1hcCkge1xuXHRcdC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzI2NjAzODc1XG5cdFx0Y3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIiArIGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSkgKyBcIiAqL1wiO1xuXHR9XG5cblx0dmFyIGJsb2IgPSBuZXcgQmxvYihbY3NzXSwgeyB0eXBlOiBcInRleHQvY3NzXCIgfSk7XG5cblx0dmFyIG9sZFNyYyA9IGxpbmsuaHJlZjtcblxuXHRsaW5rLmhyZWYgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xuXG5cdGlmKG9sZFNyYykgVVJMLnJldm9rZU9iamVjdFVSTChvbGRTcmMpO1xufVxuIiwiXG4vKipcbiAqIFdoZW4gc291cmNlIG1hcHMgYXJlIGVuYWJsZWQsIGBzdHlsZS1sb2FkZXJgIHVzZXMgYSBsaW5rIGVsZW1lbnQgd2l0aCBhIGRhdGEtdXJpIHRvXG4gKiBlbWJlZCB0aGUgY3NzIG9uIHRoZSBwYWdlLiBUaGlzIGJyZWFrcyBhbGwgcmVsYXRpdmUgdXJscyBiZWNhdXNlIG5vdyB0aGV5IGFyZSByZWxhdGl2ZSB0byBhXG4gKiBidW5kbGUgaW5zdGVhZCBvZiB0aGUgY3VycmVudCBwYWdlLlxuICpcbiAqIE9uZSBzb2x1dGlvbiBpcyB0byBvbmx5IHVzZSBmdWxsIHVybHMsIGJ1dCB0aGF0IG1heSBiZSBpbXBvc3NpYmxlLlxuICpcbiAqIEluc3RlYWQsIHRoaXMgZnVuY3Rpb24gXCJmaXhlc1wiIHRoZSByZWxhdGl2ZSB1cmxzIHRvIGJlIGFic29sdXRlIGFjY29yZGluZyB0byB0aGUgY3VycmVudCBwYWdlIGxvY2F0aW9uLlxuICpcbiAqIEEgcnVkaW1lbnRhcnkgdGVzdCBzdWl0ZSBpcyBsb2NhdGVkIGF0IGB0ZXN0L2ZpeFVybHMuanNgIGFuZCBjYW4gYmUgcnVuIHZpYSB0aGUgYG5wbSB0ZXN0YCBjb21tYW5kLlxuICpcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3MpIHtcbiAgLy8gZ2V0IGN1cnJlbnQgbG9jYXRpb25cbiAgdmFyIGxvY2F0aW9uID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB3aW5kb3cubG9jYXRpb247XG5cbiAgaWYgKCFsb2NhdGlvbikge1xuICAgIHRocm93IG5ldyBFcnJvcihcImZpeFVybHMgcmVxdWlyZXMgd2luZG93LmxvY2F0aW9uXCIpO1xuICB9XG5cblx0Ly8gYmxhbmsgb3IgbnVsbD9cblx0aWYgKCFjc3MgfHwgdHlwZW9mIGNzcyAhPT0gXCJzdHJpbmdcIikge1xuXHQgIHJldHVybiBjc3M7XG4gIH1cblxuICB2YXIgYmFzZVVybCA9IGxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICsgbG9jYXRpb24uaG9zdDtcbiAgdmFyIGN1cnJlbnREaXIgPSBiYXNlVXJsICsgbG9jYXRpb24ucGF0aG5hbWUucmVwbGFjZSgvXFwvW15cXC9dKiQvLCBcIi9cIik7XG5cblx0Ly8gY29udmVydCBlYWNoIHVybCguLi4pXG5cdC8qXG5cdFRoaXMgcmVndWxhciBleHByZXNzaW9uIGlzIGp1c3QgYSB3YXkgdG8gcmVjdXJzaXZlbHkgbWF0Y2ggYnJhY2tldHMgd2l0aGluXG5cdGEgc3RyaW5nLlxuXG5cdCAvdXJsXFxzKlxcKCAgPSBNYXRjaCBvbiB0aGUgd29yZCBcInVybFwiIHdpdGggYW55IHdoaXRlc3BhY2UgYWZ0ZXIgaXQgYW5kIHRoZW4gYSBwYXJlbnNcblx0ICAgKCAgPSBTdGFydCBhIGNhcHR1cmluZyBncm91cFxuXHQgICAgICg/OiAgPSBTdGFydCBhIG5vbi1jYXB0dXJpbmcgZ3JvdXBcblx0ICAgICAgICAgW14pKF0gID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgIHwgID0gT1Jcblx0ICAgICAgICAgXFwoICA9IE1hdGNoIGEgc3RhcnQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICg/OiAgPSBTdGFydCBhbm90aGVyIG5vbi1jYXB0dXJpbmcgZ3JvdXBzXG5cdCAgICAgICAgICAgICAgICAgW14pKF0rICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgIHwgID0gT1Jcblx0ICAgICAgICAgICAgICAgICBcXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgICAgICBbXikoXSogID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgXFwpICA9IE1hdGNoIGEgZW5kIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICApICA9IEVuZCBHcm91cFxuICAgICAgICAgICAgICAqXFwpID0gTWF0Y2ggYW55dGhpbmcgYW5kIHRoZW4gYSBjbG9zZSBwYXJlbnNcbiAgICAgICAgICApICA9IENsb3NlIG5vbi1jYXB0dXJpbmcgZ3JvdXBcbiAgICAgICAgICAqICA9IE1hdGNoIGFueXRoaW5nXG4gICAgICAgKSAgPSBDbG9zZSBjYXB0dXJpbmcgZ3JvdXBcblx0IFxcKSAgPSBNYXRjaCBhIGNsb3NlIHBhcmVuc1xuXG5cdCAvZ2kgID0gR2V0IGFsbCBtYXRjaGVzLCBub3QgdGhlIGZpcnN0LiAgQmUgY2FzZSBpbnNlbnNpdGl2ZS5cblx0ICovXG5cdHZhciBmaXhlZENzcyA9IGNzcy5yZXBsYWNlKC91cmxcXHMqXFwoKCg/OlteKShdfFxcKCg/OlteKShdK3xcXChbXikoXSpcXCkpKlxcKSkqKVxcKS9naSwgZnVuY3Rpb24oZnVsbE1hdGNoLCBvcmlnVXJsKSB7XG5cdFx0Ly8gc3RyaXAgcXVvdGVzIChpZiB0aGV5IGV4aXN0KVxuXHRcdHZhciB1bnF1b3RlZE9yaWdVcmwgPSBvcmlnVXJsXG5cdFx0XHQudHJpbSgpXG5cdFx0XHQucmVwbGFjZSgvXlwiKC4qKVwiJC8sIGZ1bmN0aW9uKG8sICQxKXsgcmV0dXJuICQxOyB9KVxuXHRcdFx0LnJlcGxhY2UoL14nKC4qKSckLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pO1xuXG5cdFx0Ly8gYWxyZWFkeSBhIGZ1bGwgdXJsPyBubyBjaGFuZ2Vcblx0XHRpZiAoL14oI3xkYXRhOnxodHRwOlxcL1xcL3xodHRwczpcXC9cXC98ZmlsZTpcXC9cXC9cXC98XFxzKiQpL2kudGVzdCh1bnF1b3RlZE9yaWdVcmwpKSB7XG5cdFx0ICByZXR1cm4gZnVsbE1hdGNoO1xuXHRcdH1cblxuXHRcdC8vIGNvbnZlcnQgdGhlIHVybCB0byBhIGZ1bGwgdXJsXG5cdFx0dmFyIG5ld1VybDtcblxuXHRcdGlmICh1bnF1b3RlZE9yaWdVcmwuaW5kZXhPZihcIi8vXCIpID09PSAwKSB7XG5cdFx0ICBcdC8vVE9ETzogc2hvdWxkIHdlIGFkZCBwcm90b2NvbD9cblx0XHRcdG5ld1VybCA9IHVucXVvdGVkT3JpZ1VybDtcblx0XHR9IGVsc2UgaWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiL1wiKSA9PT0gMCkge1xuXHRcdFx0Ly8gcGF0aCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gdGhlIGJhc2UgdXJsXG5cdFx0XHRuZXdVcmwgPSBiYXNlVXJsICsgdW5xdW90ZWRPcmlnVXJsOyAvLyBhbHJlYWR5IHN0YXJ0cyB3aXRoICcvJ1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZSB0byBjdXJyZW50IGRpcmVjdG9yeVxuXHRcdFx0bmV3VXJsID0gY3VycmVudERpciArIHVucXVvdGVkT3JpZ1VybC5yZXBsYWNlKC9eXFwuXFwvLywgXCJcIik7IC8vIFN0cmlwIGxlYWRpbmcgJy4vJ1xuXHRcdH1cblxuXHRcdC8vIHNlbmQgYmFjayB0aGUgZml4ZWQgdXJsKC4uLilcblx0XHRyZXR1cm4gXCJ1cmwoXCIgKyBKU09OLnN0cmluZ2lmeShuZXdVcmwpICsgXCIpXCI7XG5cdH0pO1xuXG5cdC8vIHNlbmQgYmFjayB0aGUgZml4ZWQgY3NzXG5cdHJldHVybiBmaXhlZENzcztcbn07XG4iLCIvKmVzbGludC1kaXNhYmxlIG5vLXVudXNlZC1sZXRzKi9cclxuLypnbG9iYWwgd2luZG93LCBkMywgJCovXHJcbmltcG9ydCB7XHJcbiAgICBkYXRhc2V0TWV0YWRhdGEsXHJcbiAgICBzd2FybURhdGEsXHJcbiAgICBhbmltYWxJZHNcclxufSBmcm9tICcuLi9leHBsb3JlLmpzJztcclxuXHJcbmltcG9ydCAqIGFzIFNQViBmcm9tICcuL3NwYXRpYWxfdmlldy5qcyc7XHJcblxyXG5pbXBvcnQgKiBhcyBOZXR3b3JrIGZyb20gJy4uL25ldHdvcmsuanMnO1xyXG5cclxuZXhwb3J0IGxldCBzbGlkZXI7IC8vIHRpbWUgc2xpZGVyIG9mIHRoZSBhcHBcclxuZXhwb3J0IGxldCB0b29sdGlwOyAvLyB0b29sdGlwIGZ1bmN0aW9uXHJcblxyXG4vKipcclxuICogQnJ1c2ggZW5kIGZ1bmN0aW9uXHJcbiAqIGFkZCBhY3RpdmUgYW5pbWFscyB0byB0aGUgYXJyYXkgb3IgcmVtb3ZlIHRoZW1cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBicnVzaGVuZCgpIHtcclxuICAgIGxldCBhcnJheUFuaW1hbHMgPSBTUFYuYXJyYXlBbmltYWxzO1xyXG4gICAgbGV0IGFjdGl2ZUFuaW1hbHMgPSBTUFYuYWN0aXZlQW5pbWFscztcclxuICAgIHZhciByZWN0ID0gZDMuZXZlbnQuc2VsZWN0aW9uO1xyXG4gICAgLy9pdGVyYXRlIG92ZXIgdGhlIDE1MSBmaXNoIHRvIGNoZWNrIHdoaWNoIGFyZSBpbiB0aGUgYnJ1c2hcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYW5pbWFsSWRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgdmFyIHBvaW50ID0gW2FycmF5QW5pbWFsc1tpXVsncCddWzBdLCBhcnJheUFuaW1hbHNbaV1bJ3AnXVsxXV07XHJcbiAgICAgICAgLy9jaGVjayB3aGljaCBmaXNoIGFyZSBpbiAgdGhlIGJydXNoZWQgYXJlYVxyXG4gICAgICAgIGlmICgocmVjdFswXVswXSA8PSBwb2ludFswXSkgJiYgKHBvaW50WzBdIDw9IHJlY3RbMV1bMF0pICYmXHJcbiAgICAgICAgICAgIChyZWN0WzBdWzFdIDw9IHBvaW50WzFdKSAmJiAocG9pbnRbMV0gPD0gcmVjdFsxXVsxXSkpIHtcclxuICAgICAgICAgICAgLy8gUG9pbnQgaXMgaW4gdGhlIGJydXNoXHJcbiAgICAgICAgICAgIGFjdGl2ZUFuaW1hbHMucHVzaChhcnJheUFuaW1hbHNbaV1bJ2EnXSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgU1BWLnNldEFjdGl2ZUFuaW1hbHMoYWN0aXZlQW5pbWFscyk7XHJcbiAgICBpZiAoISQoJyNwbGF5LWJ1dHRvbicpXHJcbiAgICAgICAgLmhhc0NsYXNzKCdhY3RpdmUnKSkge1xyXG4gICAgICAgIC8vZ28gYmFjayBvbmUgc2Vjb25kIGFuZCBkcmF3IHRoZSBuZXh0IGZyYW1lXHJcbiAgICAgICAgLy90aGlzIGFwcGx5cyB0aGUgY2hhbmdlc1xyXG4gICAgICAgIFNQVi5kZWNJbmRleFRpbWUoKTtcclxuICAgICAgICBTUFYuZHJhdygpO1xyXG4gICAgfVxyXG4gICAgJCgnI2JydXNoaW5nLWJ1dHRvbicpXHJcbiAgICAgICAgLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcclxuICAgIC8vIHJlbW92ZSB0aGUgYnJ1c2hcclxuICAgICQoJy5icnVzaCcpXHJcbiAgICAgICAgLnJlbW92ZSgpO1xyXG59XHJcblxyXG4vKipcclxuICogSW5pdGlhbGl6ZSB0aGUgdG9vbHRpcFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGluaXRUb29sdGlwKCkge1xyXG4gICAgdG9vbHRpcCA9IGQzLnNlbGVjdCgnZGl2LnRvb2x0aXAnKVxyXG4gICAgICAgIC5zdHlsZSgnbGVmdCcsIDAgKyAncHgnKVxyXG4gICAgICAgIC5zdHlsZSgndG9wJywgMCArICdweCcpXHJcbiAgICAgICAgLm9uKCdtb3VzZW92ZXInLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdG9vbHRpcFxyXG4gICAgICAgICAgICAgICAgLnN0eWxlKCdvcGFjaXR5JywgMSk7XHJcbiAgICAgICAgfSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUb29sdGlwIGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBkIC0gZDMgZGF0YSBvYmplY3Qgd2l0aCB0aGUgbWV0YWRhdGEgaW5mb3JtYXRpb25cclxuICpcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB0b29sdGlwRnVuY3Rpb24oZCkge1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhc2V0TWV0YWRhdGEubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBpZiAoZFsnYSddID09PSBkYXRhc2V0TWV0YWRhdGFbaV1bJ2FuaW1hbF9pZCddKSB7XHJcbiAgICAgICAgICAgIHRvb2x0aXBcclxuICAgICAgICAgICAgICAgIC5zdHlsZSgnbGVmdCcsIChkMy5ldmVudC5wYWdlWCArIDUpICsgJ3B4JylcclxuICAgICAgICAgICAgICAgIC5zdHlsZSgndG9wJywgKGQzLmV2ZW50LnBhZ2VZIC0gMTAwKSArICdweCcpXHJcbiAgICAgICAgICAgICAgICAuc3R5bGUoJ29wYWNpdHknLCAxKTtcclxuICAgICAgICAgICAgLy8gc2V0IHRoZSB2YWx1ZXNcclxuICAgICAgICAgICAgLy8gVE9ETyBtYWtlIHRoaXMgbW9kdWxhclxyXG4gICAgICAgICAgICB0b29sdGlwLnNlbGVjdCgnI3Rvb2x0aXAtYW5pbWFsLWlkJylcclxuICAgICAgICAgICAgICAgIC5odG1sKGRhdGFzZXRNZXRhZGF0YVtpXVsnYW5pbWFsX2lkJ10pO1xyXG4gICAgICAgICAgICB0b29sdGlwLnNlbGVjdCgnI3Rvb2x0aXAtc3BlY2llcycpXHJcbiAgICAgICAgICAgICAgICAuaHRtbChkYXRhc2V0TWV0YWRhdGFbaV1bJ3NwZWNpZXMnXSk7XHJcbiAgICAgICAgICAgIHRvb2x0aXAuc2VsZWN0KCcjdG9vbHRpcC1zZXgnKVxyXG4gICAgICAgICAgICAgICAgLmh0bWwoZGF0YXNldE1ldGFkYXRhW2ldWydzZXgnXSk7XHJcbiAgICAgICAgICAgIHRvb2x0aXAuc2VsZWN0KCcjdG9vbHRpcC1zaXplJylcclxuICAgICAgICAgICAgICAgIC5odG1sKGRhdGFzZXRNZXRhZGF0YVtpXVsnc2l6ZSddKTtcclxuICAgICAgICAgICAgdG9vbHRpcC5zZWxlY3QoJyN0b29sdGlwLXdlaWdodCcpXHJcbiAgICAgICAgICAgICAgICAuaHRtbChkYXRhc2V0TWV0YWRhdGFbaV1bJ3dlaWdodCddKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG4vKipcclxuICogSW5pdGlhbGl6ZSB0aGUgdGltZSBzbGlkZXIgYW5kIHRoZSBkeW5hbWljIG5ldHdvcmsgc2xpZGVyXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaW5pdFNsaWRlcnMoKSB7XHJcbiAgICAvLyB0aW1lIHNsaWRlclxyXG4gICAgc2xpZGVyID0gJCgnI3NsaWRlcicpXHJcbiAgICAgICAgLnNsaWRlcih7XHJcbiAgICAgICAgICAgIG1pbjogMCxcclxuICAgICAgICAgICAgbWF4OiBzd2FybURhdGEubGVuZ3RoLFxyXG4gICAgICAgICAgICBzdGVwOiAyNSxcclxuICAgICAgICAgICAgc2xpZGU6IGZ1bmN0aW9uKGV2ZW50LCB1aSkge1xyXG4gICAgICAgICAgICAgICAgU1BWLnNldEluZGV4VGltZSh1aS52YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAvLyBpZiBwYXVzZWQgYXBwbHkgY2hhbmdlc1xyXG4gICAgICAgICAgICAgICAgaWYgKCEkKCcjcGxheS1idXR0b24nKS5oYXNDbGFzcygnYWN0aXZlJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAvL3RoaXMgYXBwbHlzIHRoZSBjaGFuZ2VzXHJcbiAgICAgICAgICAgICAgICAgICAgU1BWLmRyYXcoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgLy8gaW5pdGlhbGl6ZSB0aGUgTmV0d29yayBzbGlkZXJcclxuICAgICQoJyNuZXR3b3JrLXNsaWRlcicpXHJcbiAgICAgICAgLnNsaWRlcih7XHJcbiAgICAgICAgICAgIHJhbmdlOiAnbWF4JyxcclxuICAgICAgICAgICAgbWluOiAwLFxyXG4gICAgICAgICAgICBtYXg6IDEsXHJcbiAgICAgICAgICAgIHN0ZXA6IDAuMDEsXHJcbiAgICAgICAgICAgIHZhbHVlOiAwLjUsXHJcbiAgICAgICAgICAgIHNsaWRlOiBmdW5jdGlvbihldmVudCwgdWkpIHtcclxuICAgICAgICAgICAgICAgIE5ldHdvcmsuc2V0TmV0d29yTGltaXQodWkudmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgJCgnI25ldHdvcmstbGltaXQnKS52YWwodWkudmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAvLyBzZXQgdGV4dCBmb3IgdGhlIGZpcnN0IGluaXRpYWxpemF0aW9uXHJcbiAgICAkKCcjbmV0d29yay1saW1pdCcpLnZhbCgwLjUpO1xyXG5cclxuICAgIC8vIGdldCB0aGUgbWF4IGZyb20gdGhlIHNsaWRlciB0aGlzIGlzIG5lZWRlZCB0byBjYWxjdWxhdGUgdGhlIHRpY2tzXHJcbiAgICBsZXQgbWF4ID0gc2xpZGVyLnNsaWRlcignb3B0aW9uJywgJ21heCcpO1xyXG4gICAgbGV0IHNwYWNlID0gMTAwIC8gbWF4O1xyXG4gICAgLy9hcHBlbmQgdGhlIG1pbnV0ZSB0aWNrc1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtYXg7IGkgPSBpICsgMTUwMCkge1xyXG4gICAgICAgICQoJzxzcGFuIGNsYXNzPVwidWktc2xpZGVyLXRpY2tcIj48L3NwYW4+JylcclxuICAgICAgICAgICAgLmNzcygnbGVmdCcsIChzcGFjZSAqIGkpICsgJyUnKVxyXG4gICAgICAgICAgICAuYXBwZW5kVG8oc2xpZGVyKTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gICAgU2V0dGVyXHJcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuLyoqXHJcbiAqIFNldCB0aGUgdGltZSBzbGlkZXIgdG8gYSBuZXcgdmFsdWVcclxuICogQHBhcmFtIHtOdW1iZXJ9IHZhbHVlIC0gbmV3IHZhbHVlIGZvciB0aGUgdGltZSBzbGlkZXJcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXRUaW1lU2xpZGVyKHZhbHVlKSB7XHJcbiAgICBzbGlkZXIuc2xpZGVyKCd2YWx1ZScsIHZhbHVlKTtcclxufSIsIi8qZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLWxldHMqL1xyXG4vKmdsb2JhbCB3aW5kb3csIGQzLCAkLCBjb2xvcmJyZXdlciovXHJcbmltcG9ydCAqIGFzIFNQViBmcm9tICcuL3NwYXRpYWxfdmlldy5qcyc7XHJcblxyXG5pbXBvcnQge1xyXG4gICAgY2hhbmdlTGVnZW5kXHJcbn0gZnJvbSAnLi9sZWdlbmQuanMnO1xyXG5cclxuaW1wb3J0IHtcclxuICAgIGRhdGFTZXRQZXJjZW50aWxlXHJcbn0gZnJvbSAnLi4vZXhwbG9yZS5qcyc7XHJcblxyXG5leHBvcnQgbGV0IGNvbG9yU2NhbGUgPSB7XHJcbiAgICB0eXBlOiAnTGluZWFyJyxcclxuICAgIGNvbG9yOiBjb2xvcmJyZXdlci5CdVlsQnVcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBjb2xvciBzY2FsZVxyXG4gKiBAcmV0dXJuIHtjb2xvclNjYWxlfSBhY3RpdmUgY29sb3Igc2NhbGUgaXMgaW4gbGluZWFyIG9yIHRocmVzaG9sZFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHJldHVybkNvbG9yU2NhbGUoKSB7XHJcbiAgICAvL2lmIGxpbmVhciBpcyBjaG9vc2VuXHJcbiAgICBpZiAoY29sb3JTY2FsZVsndHlwZSddID09PSAnTGluZWFyJykge1xyXG4gICAgICAgIHJldHVybiBkMy5zY2FsZUxpbmVhcigpXHJcbiAgICAgICAgICAgIC5kb21haW4oXHJcbiAgICAgICAgICAgICAgICBkYXRhU2V0UGVyY2VudGlsZVtTUFYuYWN0aXZlU2NhbGVdXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICAgICAgLnJhbmdlKGNvbG9yU2NhbGVbJ2NvbG9yJ10pO1xyXG4gICAgfSAvL1RocmVzaG9sZCBjb2xvciBzY2FsZVxyXG4gICAgZWxzZSBpZiAoY29sb3JTY2FsZVsndHlwZSddID09PSAnVGhyZXNob2xkJykge1xyXG4gICAgICAgIHJldHVybiBkMy5zY2FsZVRocmVzaG9sZCgpXHJcbiAgICAgICAgICAgIC5kb21haW4oXHJcbiAgICAgICAgICAgICAgICBkYXRhU2V0UGVyY2VudGlsZVtTUFYuYWN0aXZlU2NhbGVdXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICAgICAgLnJhbmdlKGNvbG9yU2NhbGVbJ2NvbG9yJ10pO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogSW5pdGlhbGl6ZSB0aGUgY29sb3IgcGlja2VyXHJcbiAqIHdpdGggYWxsIGxpc3RlbmVycyBpbmNsdWRlZFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGluaXRDb2xvclBpY2tlcigpIHtcclxuICAgIGQzLnNlbGVjdCgnLmNvbG9ycy1ib2R5JylcclxuICAgICAgICAuc2VsZWN0QWxsKCcucGFsZXR0ZScpXHJcbiAgICAgICAgLmRhdGEoZDMuZW50cmllcyhjb2xvcmJyZXdlcikpXHJcbiAgICAgICAgLmVudGVyKClcclxuICAgICAgICAuYXBwZW5kKCdzcGFuJylcclxuICAgICAgICAuYXR0cignY2xhc3MnLCAncGFsZXR0ZScpXHJcbiAgICAgICAgLmF0dHIoJ3RpdGxlJywgZnVuY3Rpb24oZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZC5rZXk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAub24oJ2NsaWNrJywgZnVuY3Rpb24oZCkge1xyXG4gICAgICAgICAgICAvLyBoaWdodGxpZ2h0IHRoZSByaWdodCBwYWxldHRlXHJcbiAgICAgICAgICAgICQoJy5wYWxldHRlJykucmVtb3ZlQ2xhc3MoJ3NlbGVjdGVkJyk7XHJcbiAgICAgICAgICAgICQoJy5wYWxldHRlW3RpdGxlPVwiJyArIGQua2V5ICsgJ1wiXScpLmFkZENsYXNzKCdzZWxlY3RlZCcpO1xyXG4gICAgICAgICAgICBjb2xvclNjYWxlLmNvbG9yID0gY29sb3JicmV3ZXJbZC5rZXldO1xyXG4gICAgICAgICAgICBjaGFuZ2VMZWdlbmQoKTtcclxuICAgICAgICAgICAgaWYgKCEkKCcjcGxheS1idXR0b24nKVxyXG4gICAgICAgICAgICAgICAgLmhhc0NsYXNzKCdhY3RpdmUnKSkge1xyXG4gICAgICAgICAgICAgICAgLy9nbyBiYWNrIG9uZSBzZWNvbmQgYW5kIGRyYXcgdGhlIG5leHQgZnJhbWVcclxuICAgICAgICAgICAgICAgIC8vdGhpcyBhcHBseXMgdGhlIGNoYW5nZXNcclxuICAgICAgICAgICAgICAgIFNQVi5kZWNJbmRleFRpbWUoKTtcclxuICAgICAgICAgICAgICAgIFNQVi5kcmF3KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICAgIC5zZWxlY3RBbGwoJy5zd2F0Y2gnKVxyXG4gICAgICAgIC5kYXRhKGZ1bmN0aW9uKGQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGQudmFsdWU7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuZW50ZXIoKVxyXG4gICAgICAgIC5hcHBlbmQoJ3NwYW4nKVxyXG4gICAgICAgIC5hdHRyKCdjbGFzcycsICdzd2F0Y2gnKVxyXG4gICAgICAgIC5zdHlsZSgnYmFja2dyb3VuZC1jb2xvcicsIGZ1bmN0aW9uKGQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGQ7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgLy8gaGlnaGxpZ2h0IHRoZSBzZWxlY3RlZCBjb2xvciBzY2hlbWVcclxuICAgICQoJy5wYWxldHRlW3RpdGxlPVwiQnVZbEJ1XCJdJykuYWRkQ2xhc3MoJ3NlbGVjdGVkJyk7XHJcbn1cclxuIiwiLyplc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtbGV0cyovXHJcbi8qZ2xvYmFsIHdpbmRvdywgZDMsICQqL1xyXG5cclxuaW1wb3J0IHtcclxuICAgIGFjdGl2ZVNjYWxlXHJcbn0gZnJvbSAnLi9zcGF0aWFsX3ZpZXcuanMnO1xyXG5cclxuaW1wb3J0IHtcclxuICAgIHJldHVybkNvbG9yU2NhbGVcclxufSBmcm9tICcuL2NvbG9yX3BpY2tlci5qcyc7XHJcblxyXG5sZXQgc3ZnTGVnZW5kOyAvLyBzdmcgY29udGFpbmVyIGZvciB0aGUgbGVnZW5kXHJcblxyXG4vKipcclxuICogQWRkIHRoZSBncm91cCB0byB0aGUgc3ZnIHdoZXJlIHRoZSBsZWdlbmQgZm9yIHRoZSBjb2xvciBsZWdlbmQgaXNcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBhZGRTcGF0aWFsVmlld0dyb3VwKCkge1xyXG4gICAgbGV0IGxlZ2VuZFdpZHRoID0gNTUwO1xyXG4gICAgbGV0IGxlZ2VuZEhlaWdodCA9IDYwO1xyXG5cclxuICAgIHN2Z0xlZ2VuZCA9IGQzLnNlbGVjdCgnI21haW4tdmlzLWxlZ2VuZC1kaXYnKVxyXG4gICAgICAgIC5hcHBlbmQoJ3N2ZycpXHJcbiAgICAgICAgLmF0dHIoJ2lkJywgJ21haW4tdmlzLWxlZ2VuZCcpXHJcbiAgICAgICAgLmF0dHIoJ3dpZHRoJywgbGVnZW5kV2lkdGgpXHJcbiAgICAgICAgLmF0dHIoJ2hlaWdodCcsIGxlZ2VuZEhlaWdodCk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDaGFuZ2UgdGhlIGNvbG9yIGxlZ2VuZFxyXG4gKlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNoYW5nZUxlZ2VuZCgpIHtcclxuICAgIGxldCBsZWdlbmQ7IC8vIHRoZSBjb2xvciBsZWdlbmRcclxuICAgIGxldCBsZWdlbmRUZXh0OyAvLyBjb2xvciBsZWdlbmQgdGV4dFxyXG4gICAgLy8gdmFycyBmb3IgdGhlIGxlZ2VuZFxyXG4gICAgbGV0IGxlZ2VuZFN3YXRjaFdpZHRoID0gNTA7XHJcbiAgICBsZXQgbGVnZW5kU3dhdGNoSGVpZ2h0ID0gMjA7XHJcbiAgICAvLyBsZXQgZGlmZmVyZW50Q29sb3JzID0gMDtcclxuXHJcbiAgICAvLyBTaG93IHRoZSBzdmcgZmlyc3Qgb2YgYWxsXHJcbiAgICAkKCcjbWFpbi12aXMtbGVnZW5kLWRpdicpXHJcbiAgICAgICAgLnNob3coKTtcclxuXHJcbiAgICAvL2NoYW5nZSB0aGUgY29sb3JzIG9mIHRoZSBhbmltYWxzXHJcbiAgICBpZiAoYWN0aXZlU2NhbGUgIT09ICdibGFjaycpIHtcclxuICAgICAgICB2YXIgdG1wU2NhbGUgPSByZXR1cm5Db2xvclNjYWxlKCk7XHJcbiAgICAgICAgLy8gb25jZSB0aGUgZmlsbCBmb3IgdGhlIGhlYWRzIGFuZCB0aGUgc3Ryb2tlIGZvciB0aGUgcGF0aFxyXG4gICAgICAgIGxlZ2VuZCA9IHN2Z0xlZ2VuZC5zZWxlY3RBbGwoJ3JlY3QubGVnZW5kJylcclxuICAgICAgICAgICAgLmRhdGEodG1wU2NhbGUucmFuZ2UoKSk7XHJcblxyXG4gICAgICAgIGxlZ2VuZFRleHQgPSBzdmdMZWdlbmQuc2VsZWN0QWxsKCd0ZXh0LmxlZ2VuZC10ZXh0JylcclxuICAgICAgICAgICAgLmRhdGEodG1wU2NhbGUuZG9tYWluKCkpO1xyXG4gICAgICAgIC8vIGRpZmZlcmVudENvbG9ycyA9IHRtcFNjYWxlLnJhbmdlKClcclxuICAgICAgICAvLyAubGVuZ3RoO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBsZWdlbmQgPSBzdmdMZWdlbmQuc2VsZWN0QWxsKCdyZWN0LmxlZ2VuZCcpXHJcbiAgICAgICAgICAgIC5kYXRhKFtdKTtcclxuICAgICAgICBsZWdlbmRUZXh0ID0gc3ZnTGVnZW5kLnNlbGVjdEFsbCgndGV4dC5sZWdlbmQtdGV4dCcpXHJcbiAgICAgICAgICAgIC5kYXRhKFtdKTtcclxuICAgICAgICAvLyBoaWRlIHRoZSBkaXYgYWdhaW5cclxuICAgICAgICAkKCcjbWFpbi12aXMtbGVnZW5kLWRpdicpXHJcbiAgICAgICAgICAgIC5oaWRlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tIExlZ2VuZCBzd2F0Y2hlcyAgLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgLy8gVVBEQVRFIC0gbGVnZW5kXHJcbiAgICBsZWdlbmQuc3R5bGUoJ2ZpbGwnLCBmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgcmV0dXJuIGQ7XHJcbiAgICB9KTtcclxuICAgIC8vIEVOVEVSIC0gbGVnZW5kXHJcbiAgICBsZWdlbmRcclxuICAgICAgICAuZW50ZXIoKVxyXG4gICAgICAgIC5hcHBlbmQoJ3JlY3QnKVxyXG4gICAgICAgIC5hdHRyKCdjbGFzcycsICdsZWdlbmQnKVxyXG4gICAgICAgIC5hdHRyKCd3aWR0aCcsIGxlZ2VuZFN3YXRjaFdpZHRoKVxyXG4gICAgICAgIC5hdHRyKCdoZWlnaHQnLCBsZWdlbmRTd2F0Y2hIZWlnaHQpXHJcbiAgICAgICAgLmF0dHIoJ3knLCAwKVxyXG4gICAgICAgIC5hdHRyKCd4JywgZnVuY3Rpb24oZCwgaSkge1xyXG4gICAgICAgICAgICByZXR1cm4gKGxlZ2VuZFN3YXRjaFdpZHRoICsgaSAqIGxlZ2VuZFN3YXRjaFdpZHRoKSArICdweCc7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuc3R5bGUoJ2ZpbGwnLCBmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBkO1xyXG4gICAgICAgIH0pO1xyXG4gICAgLy8gRVhJVCAtIGxlZ2VuZFxyXG4gICAgbGVnZW5kLmV4aXQoKVxyXG4gICAgICAgIC5yZW1vdmUoKTtcclxuXHJcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0gVGV4dCAgLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgLy8gVVBEQVRFIC0gbGVnZW5kIHRleHRcclxuICAgIGxlZ2VuZFRleHQudGV4dChmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgcmV0dXJuIE1hdGguY2VpbChkICogMikgLyAyO1xyXG4gICAgfSk7XHJcbiAgICAvLyBFTlRFUiAtIGxlZ2VuZCB0ZXh0XHJcbiAgICBsZWdlbmRUZXh0XHJcbiAgICAgICAgLmVudGVyKClcclxuICAgICAgICAuYXBwZW5kKCd0ZXh0JylcclxuICAgICAgICAuYXR0cignY2xhc3MnLCAnbGVnZW5kLXRleHQnKVxyXG4gICAgICAgIC5hdHRyKCd5JywgMiAqIGxlZ2VuZFN3YXRjaEhlaWdodClcclxuICAgICAgICAuYXR0cigneCcsIGZ1bmN0aW9uKGQsIGkpIHtcclxuICAgICAgICAgICAgLy8gcGx1cyA1IGhhcyB0byBiZSBjaGFuZ2VkXHJcbiAgICAgICAgICAgIHJldHVybiAobGVnZW5kU3dhdGNoV2lkdGggKyBpICogbGVnZW5kU3dhdGNoV2lkdGggKyA1KSArICdweCc7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAudGV4dChmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBNYXRoLmNlaWwoZCAqIDIpIC8gMjtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAvLyBFWElUIC0gbGVnZW5kIHRleHRcclxuICAgIGxlZ2VuZFRleHQuZXhpdCgpXHJcbiAgICAgICAgLnJlbW92ZSgpO1xyXG59IiwiLyplc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtbGV0cyovXHJcbi8qZ2xvYmFsIHdpbmRvdywgJCwgKi9cclxuLy8gaW1wb3J0ICogYXMgc3B2IGZyb20gJy4vc3BhdGlhbF92aWV3LmpzJztcclxuXHJcbmltcG9ydCB7XHJcbiAgICBkYXRhc2V0TWV0YWRhdGFcclxufSBmcm9tICcuL2V4cGxvcmUuanMnO1xyXG5cclxuXHJcbmV4cG9ydCBsZXQgbWV0YWRhdGFDb2xvciA9IHt9OyAvLyBzYXZlIHRoZSBtZXRhZGF0YSBjb2xvcmluZ1xyXG5cclxuLyoqXHJcbiAqIEluaXQgTWV0YWRhdGEgYnV0dG9ucyBcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpbml0aWFsaXplTWV0YWRkYXRhKCkge1xyXG4gICAgbGV0IGNvbG9ycyA9IFsnI2ZmZicsICcjZTQxYTFjJywgJyMzNzdlYjgnLCAnIzRkYWY0YScsICcjOTg0ZWEzJywgJyNmZjdmMDAnLCAnI2ZmZmYzMycsICcjYTY1NjI4J107XHJcbiAgICAvLyBhZGQgdGhlIGRhdGEgdG8gdGhlIG1ldGFkYXRhIG1vZGFsXHJcbiAgICBpZiAoZGF0YXNldE1ldGFkYXRhLmxlbmd0aCkge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YXNldE1ldGFkYXRhLmxlbmd0aDsgaSsrKSB7XHJcblxyXG4gICAgICAgICAgICAkKCcjbWV0YWRhdGEtdGFibGUnKS5maW5kKCd0Ym9keScpXHJcbiAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzx0ciBpZD1cIm1ldGFkYXRhLXJvdy0nICsgZGF0YXNldE1ldGFkYXRhW2ldWydhbmltYWxfaWQnXSArICdcIj4nKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHRkPicpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoZGF0YXNldE1ldGFkYXRhW2ldWydhbmltYWxfaWQnXSkpXHJcbiAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8dGQ+JylcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZChkYXRhc2V0TWV0YWRhdGFbaV1bJ3NwZWNpZXMnXSkpXHJcbiAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8dGQ+JylcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZChkYXRhc2V0TWV0YWRhdGFbaV1bJ3NleCddKSlcclxuICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzx0ZD4nKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKGRhdGFzZXRNZXRhZGF0YVtpXVsnc2l6ZSddKSlcclxuICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzx0ZD4nKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKGRhdGFzZXRNZXRhZGF0YVtpXVsnd2VpZ2h0J10pKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHRkPicpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoYDxkaXYgY2xhc3M9XCJkcm9wZG93blwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XCJkcm9wZG93bi10b2dnbGUgYnRuIGJ0bi1kZWZhdWx0IGJ0bi1jb2xvclwiIGRhdGEtdG9nZ2xlPVwiZHJvcGRvd25cIiBocmVmPVwiI1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD1cInByZXZpZXdcIiBjbGFzcz1cIm1ldGFkYXRhLXN3YXRjaFwiIHN0eWxlPVwiYmFja2dyb3VuZC1jb2xvcjojZmZmXCI+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9XCJjb2xvci1maWVsZFwiIHZhbHVlPVwiV2hpdGVcIiBzdHlsZT1cImRpc3BsYXk6bm9uZTtcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz1cImRyb3Bkb3duLW1lbnVcIiByb2xlPVwibWVudVwiIGFyaWEtbGFiZWxsZWRieT1cImRMYWJlbFwiPiBgICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJlc3VsdFN0cmluZyA9ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29sb3JzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFN0cmluZyArPSAnPGRpdiBjbGFzcz1cIm1ldGFkYXRhLXN3YXRjaCBtZXRhZGF0YS1zd2F0Y2gtY2xpY2thYmxlXCIgc3R5bGU9XCJiYWNrZ3JvdW5kLWNvbG9yOicgKyBjb2xvcnNbaV0gKyAnXCIgdmFsdWU9XCInICsgaWQgKyAnXCI+PC9kaXY+JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdFN0cmluZztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0oZGF0YXNldE1ldGFkYXRhW2ldWydhbmltYWxfaWQnXSkgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzwvdWw+PC9kaXY+JylcclxuICAgICAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgJCgnI21ldGFkYXRhLXRhYmxlJykuZmluZCgndGJvZHknKVxyXG4gICAgICAgICAgICAuYXBwZW5kKCdUaGVyZSBpcyBubyBtZXRhZGF0YSBmb3IgdGhpcyBkYXRhc2V0Jyk7XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG4vKipcclxuICogU2l6ZSBhbmQgd2VpZ2h0IGNvbG9yaW5nIGZvciB0aGUgbWV0YWRhdGFcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjb2xvck1ldGFkYXRhKCkge1xyXG4gICAgcmVzZXRJbmRpdmlkdWFsTWV0YWRhdGEoKTtcclxuICAgIC8vIGdldCB0aGUgaW5wdXQgdmFsdWVzXHJcbiAgICBsZXQgdmFsdWUgPSAkKCcjZ3JvdXAtbWV0YWRhdGEgLmJ0bi5idG4tZGVmYXVsdC5hY3RpdmUgaW5wdXQnKVxyXG4gICAgICAgIC5hdHRyKCd2YWx1ZScpO1xyXG4gICAgbGV0IGJsQXZnID0gJCgnI2JsLWF2ZycpLnZhbCgpO1xyXG4gICAgbGV0IGFiQXZnID0gJCgnI2FiLWF2ZycpLnZhbCgpO1xyXG4gICAgLy8gY29sb3Igc2NoZW1lIGZvciB0aGUgaW5wdXRzXHJcbiAgICBsZXQgY29sb3JzID0gWycjN2ZjOTdmJywgJyNmZGMwODYnLCAnIzM4NmNiMCddO1xyXG4gICAgLy8gY29sb3IgdGhlIGFuaW1hbHNcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YXNldE1ldGFkYXRhLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgaWYgKGRhdGFzZXRNZXRhZGF0YVtpXVt2YWx1ZV0gPCBibEF2Zykge1xyXG4gICAgICAgICAgICBtZXRhZGF0YUNvbG9yW2RhdGFzZXRNZXRhZGF0YVtpXVsnYW5pbWFsX2lkJ11dID0gY29sb3JzWzBdO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoZGF0YXNldE1ldGFkYXRhW2ldW3ZhbHVlXSA+IGFiQXZnKSB7XHJcbiAgICAgICAgICAgIG1ldGFkYXRhQ29sb3JbZGF0YXNldE1ldGFkYXRhW2ldWydhbmltYWxfaWQnXV0gPSBjb2xvcnNbMl07XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbWV0YWRhdGFDb2xvcltkYXRhc2V0TWV0YWRhdGFbaV1bJ2FuaW1hbF9pZCddXSA9IGNvbG9yc1sxXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogTWV0YWRhdGEgcmVzZXQgYWxsIGluZGl2aWR1YWwgbWV0YWRhdGEgaW5wdXQgZmllbGRzXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcmVzZXRJbmRpdmlkdWFsTWV0YWRhdGEoKSB7XHJcbiAgICBtZXRhZGF0YUNvbG9yID0ge307XHJcbiAgICAkKCcuZHJvcGRvd24gI3ByZXZpZXcnKVxyXG4gICAgICAgIC5jc3MoJ2JhY2tncm91bmQtY29sb3InLCAncmdiKDI1NSwgMjU1LCAyNTUpJyk7XHJcbn1cclxuIiwiLyplc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtbGV0cyovXHJcbi8qZ2xvYmFsIHdpbmRvdywgZDMsICQsIFNldCovXHJcblxyXG5pbXBvcnQgKiBhcyBTUFYgZnJvbSAnLi9zcGF0aWFsX3ZpZXcvc3BhdGlhbF92aWV3LmpzJztcclxuXHJcbmltcG9ydCB7XHJcbiAgICBkaXNhYmxlUGxheUJ1dHRvblxyXG59IGZyb20gJy4vaGVscGVycy5qcyc7XHJcblxyXG5pbXBvcnQge1xyXG4gICAgYnJ1c2hlbmQsXHJcbiAgICBzbGlkZXJcclxufSBmcm9tICcuL3NwYXRpYWxfdmlldy9pbnRlcmFjdGlvbi5qcyc7XHJcblxyXG5pbXBvcnQge1xyXG4gICAgY2hhbmdlTGVnZW5kLFxyXG59IGZyb20gJy4vc3BhdGlhbF92aWV3L2xlZ2VuZC5qcyc7XHJcblxyXG5pbXBvcnQge1xyXG4gICAgbWV0YWRhdGFDb2xvcixcclxuICAgIHJlc2V0SW5kaXZpZHVhbE1ldGFkYXRhLFxyXG4gICAgY29sb3JNZXRhZGF0YVxyXG59IGZyb20gJy4vbWV0YWRhdGEuanMnO1xyXG5cclxuXHJcbmltcG9ydCB7XHJcbiAgICBzZXROZXR3b3JrQXV0byxcclxuICAgIHNldE5ldHdvckxpbWl0LFxyXG4gICAgc2V0TmV0d29ya0hpZXJhcmNoeSxcclxuICAgIHNldG5ldHdvcmtDb2xvcixcclxuICAgIHNldE5ldHdvcmtJRCxcclxuICAgIHNldE5ldHdvcmtCYWNrZ3JvdW5kLFxyXG4gICAgc2V0TmV0d29ya0JhY2tncm91bmRMaW1pdFxyXG59IGZyb20gJy4vbmV0d29yay5qcyc7XHJcblxyXG5pbXBvcnQge1xyXG4gICAgZGF0YXNldCxcclxuICAgIHN3YXJtRGF0YSxcclxuICAgIGRhdGFzZXRNZXRhZGF0YSxcclxuICAgIHNldE5ldHdvcmtEYXRhLFxyXG4gICAgc2V0SGllcmFyY2h5RGF0YVxyXG59IGZyb20gJy4vZXhwbG9yZS5qcyc7XHJcblxyXG5pbXBvcnQge1xyXG4gICAgZ2V0RGF0YXNldEZlYXR1cmUsXHJcbiAgICBnZXROZXR3b3JrRGF0YSxcclxuICAgIGdldFN3YXJtRGF0YXNldEZlYXR1cmUsXHJcbiAgICBnZXROZXR3b3JrSGllcmFyY2h5RGF0YVxyXG59IGZyb20gJy4vYWpheF9xdWVyaWVzLmpzJztcclxuXHJcbmltcG9ydCB7XHJcbiAgICBjb2xvclNjYWxlXHJcbn0gZnJvbSAnLi9zcGF0aWFsX3ZpZXcvY29sb3JfcGlja2VyJztcclxuXHJcbmltcG9ydCB7XHJcbiAgICBhZGRIaWVyYXJjaHlCdXR0b24sXHJcbiAgICByZW1vdmVIaWVyYXJjaHlCdXR0b24sXHJcbiAgICBkcmF3RGVuZHJvZ3JhbSxcclxuICAgIG1heE51bWJlckhpZXJhcmNoaWVzLFxyXG4gICAgc2V0U2V0T3BlcmF0aW9uXHJcbn0gZnJvbSAnLi9oaWVyYXJjaHkuanMnO1xyXG5cclxuaW1wb3J0IHtcclxuICAgIHNldFRyYWNraW5nQm9vbGVhbixcclxuICAgIHJlc2V0VHJhY2tlZERhdGEsXHJcbiAgICBzZW5kVHJhY2tlZERhdGFcclxufSBmcm9tICcuL3Zpc3VhbF9wYXJhbWV0ZXIuanMnO1xyXG5cclxubGV0IGJydXNoOyAvLyBicnVzaGluZyB2YXJpYWJsZVxyXG5leHBvcnQgbGV0IHBsYXlCb29sZWFuID0gdHJ1ZTsgLy8gcGF1c2UgYW5kIHBsYXkgYm9vbGVhblxyXG5cclxuLyoqXHJcbiAqIEluaXQgYWxsIHRoZSBsaXN0ZW5lcnNcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpbml0TGlzdGVuZXJzKCkge1xyXG4gICAgY3BfbGlzdGVuZXIoKTtcclxuICAgIHNmX2xpc3RlbmVycygpO1xyXG4gICAgYWZfbGlzdGVuZXJzKCk7XHJcbiAgICBtZF9saXN0ZW5lcnMoKTtcclxuICAgIG5fbGlzdGVuZXJzKCk7XHJcbiAgICBoX2xpc3RlbmVycygpO1xyXG59XHJcblxyXG4vKipcclxuICogSW5pdCBjb250cm9sIHBhbmVsIGxpc3RlbmVyc1xyXG4gKi9cclxuZnVuY3Rpb24gY3BfbGlzdGVuZXIoKSB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQbGF5IG9yIHN0b3AgdGhlIGFuaW1hdGlvblxyXG4gICAgICovXHJcbiAgICAkKCcjcGxheS1idXR0b24nKS5jbGljayhmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAoJCgnI3BsYXktYnV0dG9uJykuaGFzQ2xhc3MoJ2FjdGl2ZScpID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIHBsYXlCb29sZWFuID0gZmFsc2U7XHJcbiAgICAgICAgICAgICQoJy5tZGktcGF1c2UnKS5oaWRlKCk7XHJcbiAgICAgICAgICAgICQoJy5tZGktcGxheScpLnNob3coKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBwbGF5Qm9vbGVhbiA9IHRydWU7XHJcbiAgICAgICAgICAgICQoJy5tZGktcGxheScpLmhpZGUoKTtcclxuICAgICAgICAgICAgJCgnLm1kaS1wYXVzZScpLnNob3coKTtcclxuICAgICAgICAgICAgU1BWLnNldEluZGV4VGltZShzbGlkZXIuc2xpZGVyKCd2YWx1ZScpKTtcclxuICAgICAgICAgICAgJCgnLmJydXNoJykucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgIFNQVi5kcmF3KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQYXVzZSB0aGUgYW5pbWF0aW9uIGFuZCBzaG93IG9ubHkgdGhlIG5leHQgZnJhbWVcclxuICAgICAqL1xyXG4gICAgJCgnI25leHQtZnJhbWUtYnV0dG9uJykuY2xpY2soZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKCQoJyNwbGF5LWJ1dHRvbicpLmhhc0NsYXNzKCdhY3RpdmUnKSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICBwbGF5Qm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAkKCcjcGxheS1idXR0b24nKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XHJcbiAgICAgICAgU1BWLmRyYXcoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQnJ1c2hpbmcgYnV0dG9uXHJcbiAgICAgKi9cclxuICAgICQoJyNicnVzaGluZy1idXR0b24nKS5jbGljayhmdW5jdGlvbigpIHtcclxuICAgICAgICAvL3N0b3AgdGhlIGFuaW1hdGlvblxyXG4gICAgICAgIHBsYXlCb29sZWFuID0gZmFsc2U7XHJcbiAgICAgICAgJCgnI3BsYXktYnV0dG9uJykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgICAgIGlmICghJCgnI2JydXNoaW5nLWJ1dHRvbicpLmhhc0NsYXNzKCdhY3RpdmUnKSkge1xyXG4gICAgICAgICAgICAvL2RlZmluZSB0aGUgYnJ1c2hcclxuICAgICAgICAgICAgYnJ1c2ggPSBkMy5icnVzaCgpXHJcbiAgICAgICAgICAgICAgICAuZXh0ZW50KFtcclxuICAgICAgICAgICAgICAgICAgICBbMCwgMF0sXHJcbiAgICAgICAgICAgICAgICAgICAgW1NQVi50YW5rV2lkdGgsIFNQVi50YW5rSGVpZ2h0XVxyXG4gICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgICAgIC5vbignZW5kJywgYnJ1c2hlbmQpO1xyXG4gICAgICAgICAgICAvL2FkZCB0aGUgYnJ1c2hcclxuICAgICAgICAgICAgZDMuc2VsZWN0KCcjbWFpbi12aXMtc3ZnJylcclxuICAgICAgICAgICAgICAgIC5hcHBlbmQoJ2cnKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2JydXNoJylcclxuICAgICAgICAgICAgICAgIC5jYWxsKGJydXNoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyByZW1vdmUgdGhlIGJydXNoXHJcbiAgICAgICAgICAgICQoJy5icnVzaCcpLnJlbW92ZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVW5zZWxlY3QgYWxsIGJ1dHRvblxyXG4gICAgICovXHJcbiAgICAkKCcjcmVtb3ZlLWFjdGl2ZS1zZWxlY3RlZC1idXR0b24nKS5jbGljayhmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAoISQoJyNyZW1vdmUtYWN0aXZlLXNlbGVjdGVkLWJ1dHRvbicpLmlzKCc6ZGlzYWJsZWQnKSkge1xyXG4gICAgICAgICAgICAkKCcjcmVtb3ZlLWFjdGl2ZS1zZWxlY3RlZC1idXR0b24nKS5wcm9wKCdkaXNhYmxlZCcsIHRydWUpO1xyXG4gICAgICAgICAgICBTUFYuc2V0QWN0aXZlQW5pbWFscyhbXSk7XHJcbiAgICAgICAgICAgIC8vIHRyYWNraW5nIG9mIGRhdGEgZm9yIHZpc3VhbCBwYXJhbWV0ZXIgc3VnZ2VzdGlvblxyXG4gICAgICAgICAgICByZXNldFRyYWNrZWREYXRhKCk7XHJcbiAgICAgICAgICAgICQoJyN2aXN1YWwtcGFyYW1ldGVyLWJ1dHRvbicpLnByb3AoJ2Rpc2FibGVkJywgdHJ1ZSkucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCEkKCcjcGxheS1idXR0b24nKS5oYXNDbGFzcygnYWN0aXZlJykpIHtcclxuICAgICAgICAgICAgICAgIC8vZ28gYmFjayBvbmUgc2Vjb25kIGFuZCBkcmF3IHRoZSBuZXh0IGZyYW1lXHJcbiAgICAgICAgICAgICAgICAvL3RoaXMgYXBwbHlzIHRoZSBjaGFuZ2VzXHJcblxyXG4gICAgICAgICAgICAgICAgU1BWLmRlY0luZGV4VGltZSgpO1xyXG4gICAgICAgICAgICAgICAgU1BWLmRyYXcoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVHJhY2sgdmlzdWFsIHBhcmFtZXRlciBidXR0b25cclxuICAgICAqL1xyXG4gICAgJCgnI3Zpc3VhbC1wYXJhbWV0ZXItYnV0dG9uJykuY2xpY2soZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKCQoJyN2aXN1YWwtcGFyYW1ldGVyLWJ1dHRvbicpLmhhc0NsYXNzKCdhY3RpdmUnKSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICBzZXRUcmFja2luZ0Jvb2xlYW4oZmFsc2UpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHNldFRyYWNraW5nQm9vbGVhbih0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNlbmQgdGhlIHRyYWNrZWQgdmlhIGEgYWpheCBxdWVyeSB0byB0aGUgc2VydmVyIHRvIGNhbGN1bGF0ZSB0aGUgcGFyYW1ldGVyc1xyXG4gICAgICovXHJcbiAgICAkKCcjY2FsY3VsYXRlLXBhcmFtZXRlci1idXR0b24nKS5jbGljayhmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAoISQoJyNjYWxjdWxhdGUtcGFyYW1ldGVyLWJ1dHRvbicpLmhhc0NsYXNzKCdhY3RpdmUnKSkge1xyXG4gICAgICAgICAgICBzZXRUcmFja2luZ0Jvb2xlYW4oZmFsc2UpO1xyXG4gICAgICAgICAgICBzZW5kVHJhY2tlZERhdGEoKTtcclxuXHJcbiAgICAgICAgICAgIC8vIGRpc2FibGUgYm90aCBidXR0b25zIGFuZCByZW1vdmUgdGhlIGFjdGl2ZSBvbmVcclxuICAgICAgICAgICAgJCgnI2NhbGN1bGF0ZS1wYXJhbWV0ZXItYnV0dG9uJykucHJvcCgnZGlzYWJsZWQnLCB0cnVlKTtcclxuICAgICAgICAgICAgJCgnI2NhbGN1bGF0ZS1wYXJhbWV0ZXItYnV0dG9uJykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICAkKCcjdmlzdWFsLXBhcmFtZXRlci1idXR0b24nKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTcGF0aWFsIHZpZXcgYmFja2dyb3VuZCBjb2xvclxyXG4gICAgICovXHJcbiAgICAkKCcjYmFja2dyb3VuZC1jb2xvcicpLmNoYW5nZShmdW5jdGlvbigpIHtcclxuICAgICAgICBsZXQgY29sb3IgPSAkKCdpbnB1dFt0eXBlPVwicmFkaW9cIl0uZ3JvdXAtYmFja2dyb3VuZDpjaGVja2VkJykudmFsKCk7XHJcbiAgICAgICAgJCgnI21haW4tdmlzLXN2ZycpLmNzcygnYmFja2dyb3VuZC1jb2xvcicsIGNvbG9yKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2hvdyB0aGUgc3BhdGlhbCB2aWV3IGF4aXMgYnV0dG9uXHJcbiAgICAgKi9cclxuICAgICQoJyNkcmF3LWF4aXMnKS5vbignY2hhbmdlJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY2hlY2tlZCkge1xyXG4gICAgICAgICAgICAkKCcjbWFpbi12aXMgZy54LmF4aXMnKS5zaG93KCk7XHJcbiAgICAgICAgICAgICQoJyNtYWluLXZpcyBnLnkuYXhpcycpLnNob3coKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAkKCcjbWFpbi12aXMgZy54LmF4aXMnKS5oaWRlKCk7XHJcbiAgICAgICAgICAgICQoJyNtYWluLXZpcyBnLnkuYXhpcycpLmhpZGUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfSk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTaG93IHRoZSBmcmFtZSAodGltZSkgbnVtYmVyIGluIHRoZSBzcGF0aWFsIHZpZXcgYnV0dG9uXHJcbiAgICAgKi9cclxuICAgICQoJyNkcmF3LXRpbWUnKS5vbignY2hhbmdlJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY2hlY2tlZCkge1xyXG4gICAgICAgICAgICAkKCcjbWFpbi12aXMgLmZyYW1lLXRleHQnKS5zaG93KCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgJCgnI21haW4tdmlzIC5mcmFtZS10ZXh0JykuaGlkZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRHJhdyB0aGUgbmV0d29yayBiYWNrZ3JvdW5kIGNvbG9yXHJcbiAgICAgKi9cclxuICAgICQoJyNuZXR3b3JrLWJhY2tncm91bmQnKS5vbignY2hhbmdlJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY2hlY2tlZCkge1xyXG4gICAgICAgICAgICBzZXROZXR3b3JrQmFja2dyb3VuZCh0cnVlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBzZXROZXR3b3JrQmFja2dyb3VuZChmYWxzZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgdGhlIG5ldHdvcmsgYmFja2dyb3VuZCBlZGdlIGxpbWl0XHJcbiAgICAgKi9cclxuICAgICQoJyNuZXR3b3JrLWJhY2tncm91bmQtbGltaXQnKS52YWwoMSk7XHJcbiAgICAkKCcjbmV0d29yay1iYWNrZ3JvdW5kLWxpbWl0Jykub24oJ2NoYW5nZScsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGxldCB2YWwgPSAkKHRoaXMpLnZhbCgpO1xyXG4gICAgICAgIGlmICgkLmlzTnVtZXJpYyh2YWwpICYmIHZhbCA+IDApIHtcclxuICAgICAgICAgICAgc2V0TmV0d29ya0JhY2tncm91bmRMaW1pdCh2YWwpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICQodGhpcykudmFsKDEpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29sb3IgU2NhbGUgRnVuY3Rpb24gUmFkaW8gYnV0dG9uc1xyXG4gICAgICovXHJcbiAgICAkKCcjY29sb3Itc2NhbGUtcmFkaW8tZm9ybSBpbnB1dCcpLm9uKCdjaGFuZ2UnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICBjb2xvclNjYWxlWyd0eXBlJ10gPSAkKCdpbnB1dFtuYW1lPWNvbG9yLXNjYWxlLXJhZGlvXTpjaGVja2VkJywgJyNjb2xvci1zY2FsZS1yYWRpby1mb3JtJykudmFsKCk7XHJcbiAgICAgICAgaWYgKCEkKCcjcGxheS1idXR0b24nKS5oYXNDbGFzcygnYWN0aXZlJykpIHtcclxuICAgICAgICAgICAgLy9nbyBiYWNrIG9uZSBzZWNvbmQgYW5kIGRyYXcgdGhlIG5leHQgZnJhbWVcclxuICAgICAgICAgICAgLy90aGlzIGFwcGx5cyB0aGUgY2hhbmdlc1xyXG4gICAgICAgICAgICBTUFYuZGVjSW5kZXhUaW1lKCk7XHJcbiAgICAgICAgICAgIFNQVi5kcmF3KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBJbml0IHN3YXJtIGZlYXR1cmVzIGxpc3RlbmVyc1xyXG4gKi9cclxuZnVuY3Rpb24gc2ZfbGlzdGVuZXJzKCkge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRHJhdyBkaXJlY3Rpb24gYXJyb3cgb2YgdGhlIGFuaW1hbFxyXG4gICAgICovXHJcbiAgICAkKCcjZHJhdy1kaXJlY3Rpb24nKS5jbGljayhmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAoJCgnI2RyYXctZGlyZWN0aW9uJykuaXMoJzpjaGVja2VkJykpIHtcclxuICAgICAgICAgICAgaWYgKCEoJ2RpcmVjdGlvbicgaW4gZGF0YXNldFswXSkpIHtcclxuICAgICAgICAgICAgICAgIGRpc2FibGVQbGF5QnV0dG9uKCk7XHJcbiAgICAgICAgICAgICAgICAvLyBhamF4IHF1ZXJ5IHRvIGdldCBkaXJlY3Rpb24gZGF0YVxyXG4gICAgICAgICAgICAgICAgZ2V0RGF0YXNldEZlYXR1cmUoJ2RpcmVjdGlvbicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICQoJy5hcnJvdycpLnNob3coKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAkKCcuYXJyb3cnKS5oaWRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghJCgnI3BsYXktYnV0dG9uJykuaGFzQ2xhc3MoJ2FjdGl2ZScpKSB7XHJcbiAgICAgICAgICAgIC8vZ28gYmFjayBvbmUgc2Vjb25kIGFuZCBkcmF3IHRoZSBuZXh0IGZyYW1lXHJcbiAgICAgICAgICAgIC8vdGhpcyBhcHBseXMgdGhlIGNoYW5nZXNcclxuICAgICAgICAgICAgU1BWLmRlY0luZGV4VGltZSgpO1xyXG4gICAgICAgICAgICBTUFYuZHJhdygpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRHJhdyBtZWRvaWQgaW4gY29sb3IgYnV0dG9uXHJcbiAgICAgKi9cclxuICAgICQoJyNkcmF3LW1lZG9pZCcpLmNsaWNrKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmICgkKCcjZHJhdy1tZWRvaWQnKS5pcygnOmNoZWNrZWQnKSkge1xyXG5cclxuICAgICAgICAgICAgaWYgKCEoJ21lZG9pZCcgaW4gc3dhcm1EYXRhWzBdKSkge1xyXG4gICAgICAgICAgICAgICAgZ2V0U3dhcm1EYXRhc2V0RmVhdHVyZSgnbWVkb2lkJyk7XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFNQVi5zZXRNZWRvaWRBbmltYWwoc3dhcm1EYXRhW1NQVi5pbmRleFRpbWVdWydtZWRvaWQnXSk7XHJcbiAgICAgICAgICAgIC8vIGRpc3BsYXkgdGhlIG1lZG9pZFxyXG4gICAgICAgICAgICBkMy5zZWxlY3RBbGwoJyNhbmltYWwtJyArIFNQVi5tZWRvaWRBbmltYWwpXHJcbiAgICAgICAgICAgICAgICAuY2xhc3NlZCgnbWVkb2lkJywgdHJ1ZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8gZG8gbm90IGRpc3BsYXkgdGhlIG1lZG9pZCBmaXNoXHJcbiAgICAgICAgICAgIGQzLnNlbGVjdEFsbCgnI2FuaW1hbC0nICsgU1BWLm1lZG9pZEFuaW1hbClcclxuICAgICAgICAgICAgICAgIC5jbGFzc2VkKCdtZWRvaWQnLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIFNQVi5zZXRNZWRvaWRBbmltYWwoLTEpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRHJhdyBjZW50cm9pZCBidXR0b25cclxuICAgICAqL1xyXG4gICAgJCgnI2RyYXctY2VudHJvaWQnKS5jbGljayhmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAoJCgnI2RyYXctY2VudHJvaWQnKS5pcygnOmNoZWNrZWQnKSkge1xyXG4gICAgICAgICAgICBpZiAoISgnY2VudHJvaWQnIGluIHN3YXJtRGF0YVswXSkpIHtcclxuICAgICAgICAgICAgICAgIGdldFN3YXJtRGF0YXNldEZlYXR1cmUoJ2NlbnRyb2lkJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gZGlzcGxheSB0aGUgY2VudHJvaWRcclxuICAgICAgICAgICAgJCgnI2ctY2VudHJvaWQnKS5zaG93KCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8gaGlkZSB0aGUgY2VudHJvaWRcclxuICAgICAgICAgICAgJCgnI2ctY2VudHJvaWQnKS5oaWRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRHJhdyBjb252ZXggaHVsbCBpbiBjb2xvciBidXR0b25cclxuICAgICAqL1xyXG4gICAgJCgnI2RyYXctY29udmV4LWh1bGwnKS5jbGljayhmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAoJCgnI2RyYXctY29udmV4LWh1bGwnKS5pcygnOmNoZWNrZWQnKSkge1xyXG4gICAgICAgICAgICBpZiAoISgnaHVsbCcgaW4gc3dhcm1EYXRhWzBdKSkge1xyXG4gICAgICAgICAgICAgICAgZ2V0U3dhcm1EYXRhc2V0RmVhdHVyZSgnY29udmV4X2h1bGwnKTtcclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBEcmF3IHRyaWFuZ3VsYXRpb25cclxuICAgICAqL1xyXG4gICAgJCgnI2RyYXctdHJpYW5ndWxhdGlvbicpLmNsaWNrKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmICgkKCcjZHJhdy10cmlhbmd1bGF0aW9uJykuaXMoJzpjaGVja2VkJykpIHtcclxuICAgICAgICAgICAgaWYgKCEoJ3RyaWFuZ3VsYXRpb24nIGluIHN3YXJtRGF0YVswXSkpIHtcclxuICAgICAgICAgICAgICAgIGdldFN3YXJtRGF0YXNldEZlYXR1cmUoJ3RyaWFuZ3VsYXRpb24nKTtcclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCEkKCcjcGxheS1idXR0b24nKS5oYXNDbGFzcygnYWN0aXZlJykpIHtcclxuICAgICAgICAgICAgICAgIC8vZ28gYmFjayBvbmUgc2Vjb25kIGFuZCBkcmF3IHRoZSBuZXh0IGZyYW1lXHJcbiAgICAgICAgICAgICAgICAvL3RoaXMgYXBwbHlzIHRoZSBjaGFuZ2VzXHJcbiAgICAgICAgICAgICAgICBTUFYuZGVjSW5kZXhUaW1lKCk7XHJcbiAgICAgICAgICAgICAgICBTUFYuZHJhdygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRHJhdyB2b3Jvbm9pXHJcbiAgICAgKi9cclxuICAgICQoJyNkcmF3LXZvcm9ub2knKS5jbGljayhmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAoJCgnI2RyYXctdm9yb25vaScpLmlzKCc6Y2hlY2tlZCcpKSB7XHJcbiAgICAgICAgICAgIGlmICghKCd2b3Jvbm9pJyBpbiBzd2FybURhdGFbMF0pKSB7XHJcbiAgICAgICAgICAgICAgICBnZXRTd2FybURhdGFzZXRGZWF0dXJlKCd2b3Jvbm9pJyk7XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghJCgnI3BsYXktYnV0dG9uJykuaGFzQ2xhc3MoJ2FjdGl2ZScpKSB7XHJcbiAgICAgICAgICAgICAgICAvL2dvIGJhY2sgb25lIHNlY29uZCBhbmQgZHJhdyB0aGUgbmV4dCBmcmFtZVxyXG4gICAgICAgICAgICAgICAgLy90aGlzIGFwcGx5cyB0aGUgY2hhbmdlc1xyXG4gICAgICAgICAgICAgICAgU1BWLmRlY0luZGV4VGltZSgpO1xyXG4gICAgICAgICAgICAgICAgU1BWLmRyYXcoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBJbml0IGFic29sdXRlIGZlYXR1cmUgbGlzdGVuZXJzXHJcbiAqL1xyXG5mdW5jdGlvbiBhZl9saXN0ZW5lcnMoKSB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBEcmF3IFNwZWVkIGJ1dHRvblxyXG4gICAgICovXHJcbiAgICAkKCcjZHJhdy1zcGVlZCcpLmNsaWNrKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICQoJy5kcmF3LWRldGFpbHMnKS5oaWRlKClcclxuICAgICAgICAgICAgLmZpbmQoJ2lucHV0OmNoZWNrYm94JykucHJvcCgnY2hlY2tlZCcsIHRydWUpLmNsaWNrKCk7XHJcbiAgICAgICAgaWYgKCQoJyNkcmF3LXNwZWVkJykuaXMoJzpjaGVja2VkJykpIHtcclxuICAgICAgICAgICAgLy8gbG9hZCBhYnNvbHV0ZSBmZWF0dXJlIHNwZWVkIGRhdGEgb25jZVxyXG4gICAgICAgICAgICBpZiAoISgnc3BlZWQnIGluIGRhdGFzZXRbMF0pKSB7XHJcbiAgICAgICAgICAgICAgICBkaXNhYmxlUGxheUJ1dHRvbigpO1xyXG4gICAgICAgICAgICAgICAgLy8gYWpheCBxdWVyeSB0byBnZXQgdGhlIGFic29sdXRlIGZlYXR1cmUgc3BlZWRcclxuICAgICAgICAgICAgICAgIGdldERhdGFzZXRGZWF0dXJlKCdzcGVlZCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vICQoJy5kcmF3LWRldGFpbHMnKS5oaWRlKCk7XHJcbiAgICAgICAgICAgICQoJyNkcmF3LXNwZWVkLWRldGFpbHMnKS5zaG93KCk7XHJcbiAgICAgICAgICAgICQoJyNkcmF3LWFjY2VsZXJhdGlvbicpLnByb3AoJ2NoZWNrZWQnLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICQoJyNkcmF3LWRpc3RhbmNlX2NlbnRyb2lkJykucHJvcCgnY2hlY2tlZCcsIGZhbHNlKTtcclxuICAgICAgICAgICAgJCgnI2RyYXctbWlkbGluZV9vZmZzZXQnKS5wcm9wKCdjaGVja2VkJywgZmFsc2UpO1xyXG4gICAgICAgICAgICBTUFYuc2V0QWN0aXZlU2NhbGUoJ3NwZWVkJyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgJCgnI2RyYXctc3BlZWQtZGV0YWlscycpLmhpZGUoKTtcclxuICAgICAgICAgICAgU1BWLnNldEFjdGl2ZVNjYWxlKCdibGFjaycpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvL2NoYW5nZSBjb2xvciBsZWdlbmRcclxuICAgICAgICBkMy5zZWxlY3RBbGwoJy5jb2xvckxlZ2VuZCAqJykucmVtb3ZlKCk7XHJcbiAgICAgICAgY2hhbmdlTGVnZW5kKCk7XHJcblxyXG4gICAgICAgIGlmICghJCgnI3BsYXktYnV0dG9uJykuaGFzQ2xhc3MoJ2FjdGl2ZScpKSB7XHJcbiAgICAgICAgICAgIC8vZ28gYmFjayBvbmUgc2Vjb25kIGFuZCBkcmF3IHRoZSBuZXh0IGZyYW1lXHJcbiAgICAgICAgICAgIC8vdGhpcyBhcHBseXMgdGhlIGNoYW5nZXNcclxuICAgICAgICAgICAgU1BWLmRlY0luZGV4VGltZSgpO1xyXG4gICAgICAgICAgICBTUFYuZHJhdygpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRHJhdyBhY2NlbGVyYXRpb24gYnV0dG9uXHJcbiAgICAgKi9cclxuICAgICQoJyNkcmF3LWFjY2VsZXJhdGlvbicpLmNsaWNrKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICQoJy5kcmF3LWRldGFpbHMnKS5oaWRlKClcclxuICAgICAgICAgICAgLmZpbmQoJ2lucHV0OmNoZWNrYm94JykucHJvcCgnY2hlY2tlZCcsIHRydWUpLmNsaWNrKCk7XHJcbiAgICAgICAgaWYgKCQoJyNkcmF3LWFjY2VsZXJhdGlvbicpLmlzKCc6Y2hlY2tlZCcpKSB7XHJcbiAgICAgICAgICAgIC8vIGxvYWQgYWJzb2x1dGUgZmVhdHVyZSBhY2NlbGVyYXRpb24gZGF0YSBvbmNlXHJcbiAgICAgICAgICAgIGlmICghKCdhY2NlbGVyYXRpb24nIGluIGRhdGFzZXRbMF0pKSB7XHJcbiAgICAgICAgICAgICAgICBkaXNhYmxlUGxheUJ1dHRvbigpO1xyXG4gICAgICAgICAgICAgICAgLy8gYWpheCBxdWVyeSB0byBnZXQgdGhlIGFic29sdXRlIGZlYXR1cmUgYWNjZWxlcmF0aW9uXHJcbiAgICAgICAgICAgICAgICBnZXREYXRhc2V0RmVhdHVyZSgnYWNjZWxlcmF0aW9uJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgJCgnI2RyYXctYWNjZWxlcmF0aW9uLWRldGFpbHMnKS5zaG93KCk7XHJcbiAgICAgICAgICAgICQoJyNkcmF3LXNwZWVkJykucHJvcCgnY2hlY2tlZCcsIGZhbHNlKTtcclxuICAgICAgICAgICAgJCgnI2RyYXctZGlzdGFuY2VfY2VudHJvaWQnKS5wcm9wKCdjaGVja2VkJywgZmFsc2UpO1xyXG4gICAgICAgICAgICAkKCcjZHJhdy1taWRsaW5lX29mZnNldCcpLnByb3AoJ2NoZWNrZWQnLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIFNQVi5zZXRBY3RpdmVTY2FsZSgnYWNjZWxlcmF0aW9uJyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgJCgnI2RyYXctYWNjZWxlcmF0aW9uLWRldGFpbHMnKS5oaWRlKCk7XHJcbiAgICAgICAgICAgIFNQVi5zZXRBY3RpdmVTY2FsZSgnYmxhY2snKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgJCgnLmRyYXctZGV0YWlscy5hY3RpdmUnKS5jbGljaygpO1xyXG4gICAgICAgIC8vY2hhbmdlIGNvbG9yIGxlZ2VuZFxyXG4gICAgICAgIGQzLnNlbGVjdEFsbCgnLmNvbG9yTGVnZW5kIConKS5yZW1vdmUoKTtcclxuICAgICAgICBjaGFuZ2VMZWdlbmQoKTtcclxuXHJcbiAgICAgICAgaWYgKCEkKCcjcGxheS1idXR0b24nKS5oYXNDbGFzcygnYWN0aXZlJykpIHtcclxuICAgICAgICAgICAgLy9nbyBiYWNrIG9uZSBzZWNvbmQgYW5kIGRyYXcgdGhlIG5leHQgZnJhbWVcclxuICAgICAgICAgICAgLy90aGlzIGFwcGx5cyB0aGUgY2hhbmdlc1xyXG4gICAgICAgICAgICBTUFYuZGVjSW5kZXhUaW1lKCk7XHJcbiAgICAgICAgICAgIFNQVi5kcmF3KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBEcmF3IGRpc3RhbmNlIHRvIGNlbnRyb2lkIGJ1dHRvblxyXG4gICAgICovXHJcbiAgICAkKCcjZHJhdy1kaXN0YW5jZV9jZW50cm9pZCcpLmNsaWNrKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICQoJy5kcmF3LWRldGFpbHMnKS5oaWRlKClcclxuICAgICAgICAgICAgLmZpbmQoJ2lucHV0OmNoZWNrYm94JykucHJvcCgnY2hlY2tlZCcsIHRydWUpLmNsaWNrKCk7XHJcbiAgICAgICAgaWYgKCQoJyNkcmF3LWRpc3RhbmNlX2NlbnRyb2lkJykuaXMoJzpjaGVja2VkJykpIHtcclxuICAgICAgICAgICAgLy8gbG9hZCBhYnNvbHV0ZSBmZWF0dXJlIGRpc3RhbmNlX2NlbnRyb2lkIGRhdGEgb25jZVxyXG4gICAgICAgICAgICBpZiAoISgnZGlzdGFuY2VfY2VudHJvaWQnIGluIGRhdGFzZXRbMF0pKSB7XHJcbiAgICAgICAgICAgICAgICBkaXNhYmxlUGxheUJ1dHRvbigpO1xyXG4gICAgICAgICAgICAgICAgLy8gYWpheCBxdWVyeSB0byBnZXQgdGhlIGFic29sdXRlIGZlYXR1cmUgZGlzdGFuY2VfY2VudHJvaWRcclxuICAgICAgICAgICAgICAgIGdldERhdGFzZXRGZWF0dXJlKCdkaXN0YW5jZV9jZW50cm9pZCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICQoJyNkcmF3LWRpc3RhbmNlX2NlbnRyb2lkLWRldGFpbHMnKS5zaG93KCk7XHJcbiAgICAgICAgICAgICQoJyNkcmF3LXNwZWVkJykucHJvcCgnY2hlY2tlZCcsIGZhbHNlKTtcclxuICAgICAgICAgICAgJCgnI2RyYXctYWNjZWxlcmF0aW9uJykucHJvcCgnY2hlY2tlZCcsIGZhbHNlKTtcclxuICAgICAgICAgICAgJCgnI2RyYXctbWlkbGluZV9vZmZzZXQnKS5wcm9wKCdjaGVja2VkJywgZmFsc2UpO1xyXG4gICAgICAgICAgICBTUFYuc2V0QWN0aXZlU2NhbGUoJ2Rpc3RhbmNlX2NlbnRyb2lkJyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgJCgnI2RyYXctZGlzdGFuY2VfY2VudHJvaWQtZGV0YWlscycpLmhpZGUoKTtcclxuICAgICAgICAgICAgU1BWLnNldEFjdGl2ZVNjYWxlKCdibGFjaycpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAkKCcuZHJhdy1kZXRhaWxzLmFjdGl2ZScpLmNsaWNrKCk7XHJcbiAgICAgICAgLy9jaGFuZ2UgY29sb3IgbGVnZW5kXHJcbiAgICAgICAgZDMuc2VsZWN0QWxsKCcuY29sb3JMZWdlbmQgKicpLnJlbW92ZSgpO1xyXG4gICAgICAgIGNoYW5nZUxlZ2VuZCgpO1xyXG5cclxuICAgICAgICBpZiAoISQoJyNwbGF5LWJ1dHRvbicpLmhhc0NsYXNzKCdhY3RpdmUnKSkge1xyXG4gICAgICAgICAgICAvL2dvIGJhY2sgb25lIHNlY29uZCBhbmQgZHJhdyB0aGUgbmV4dCBmcmFtZVxyXG4gICAgICAgICAgICAvL3RoaXMgYXBwbHlzIHRoZSBjaGFuZ2VzXHJcbiAgICAgICAgICAgIFNQVi5kZWNJbmRleFRpbWUoKTtcclxuICAgICAgICAgICAgU1BWLmRyYXcoKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIERyYXcgbWlkbGluZSBvZmZzZXRcclxuICAgICAqL1xyXG4gICAgJCgnI2RyYXctbWlkbGluZV9vZmZzZXQnKS5jbGljayhmdW5jdGlvbigpIHtcclxuICAgICAgICAkKCcuZHJhdy1kZXRhaWxzJykuaGlkZSgpXHJcbiAgICAgICAgICAgIC5maW5kKCdpbnB1dDpjaGVja2JveCcpLnByb3AoJ2NoZWNrZWQnLCB0cnVlKS5jbGljaygpO1xyXG4gICAgICAgIGlmICgkKCcjZHJhdy1taWRsaW5lX29mZnNldCcpLmlzKCc6Y2hlY2tlZCcpKSB7XHJcbiAgICAgICAgICAgIC8vIGxvYWQgYWJzb2x1dGUgZmVhdHVyZSBkcmF3LW1pZGxpbmVfb2Zmc2V0IGRhdGEgb25jZVxyXG4gICAgICAgICAgICBpZiAoISgnZHJhdy1taWRsaW5lX29mZnNldCcgaW4gZGF0YXNldFswXSkpIHtcclxuICAgICAgICAgICAgICAgIGRpc2FibGVQbGF5QnV0dG9uKCk7XHJcbiAgICAgICAgICAgICAgICAvLyBhamF4IHF1ZXJ5IHRvIGdldCB0aGUgYWJzb2x1dGUgZmVhdHVyZSBtaWRsaW5lX29mZnNldFxyXG4gICAgICAgICAgICAgICAgZ2V0RGF0YXNldEZlYXR1cmUoJ21pZGxpbmVfb2Zmc2V0Jyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgJCgnI2RyYXctbWlkbGluZV9vZmZzZXQtZGV0YWlscycpLnNob3coKTtcclxuICAgICAgICAgICAgJCgnI2RyYXctc3BlZWQnKS5wcm9wKCdjaGVja2VkJywgZmFsc2UpO1xyXG4gICAgICAgICAgICAkKCcjZHJhdy1hY2NlbGVyYXRpb24nKS5wcm9wKCdjaGVja2VkJywgZmFsc2UpO1xyXG4gICAgICAgICAgICAkKCcjZHJhdy1kaXN0YW5jZV9jZW50cm9pZCcpLnByb3AoJ2NoZWNrZWQnLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIFNQVi5zZXRBY3RpdmVTY2FsZSgnbWlkbGluZV9vZmZzZXQnKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBTUFYuc2V0QWN0aXZlU2NhbGUoJ2JsYWNrJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgICQoJy5kcmF3LWRldGFpbHMuYWN0aXZlJykuY2xpY2soKTtcclxuICAgICAgICAvL2NoYW5nZSBjb2xvciBsZWdlbmRcclxuICAgICAgICBkMy5zZWxlY3RBbGwoJy5jb2xvckxlZ2VuZCAqJykucmVtb3ZlKCk7XHJcbiAgICAgICAgY2hhbmdlTGVnZW5kKCk7XHJcblxyXG4gICAgICAgIGlmICghJCgnI3BsYXktYnV0dG9uJykuaGFzQ2xhc3MoJ2FjdGl2ZScpKSB7XHJcbiAgICAgICAgICAgIC8vZ28gYmFjayBvbmUgc2Vjb25kIGFuZCBkcmF3IHRoZSBuZXh0IGZyYW1lXHJcbiAgICAgICAgICAgIC8vdGhpcyBhcHBseXMgdGhlIGNoYW5nZXNcclxuICAgICAgICAgICAgU1BWLmRlY0luZGV4VGltZSgpO1xyXG4gICAgICAgICAgICBTUFYuZHJhdygpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxufVxyXG5cclxuLyoqXHJcbiAqIEluaXQgbmV0d29yayBsaXN0ZWVuZXJzXHJcbiAqL1xyXG5mdW5jdGlvbiBuX2xpc3RlbmVycygpIHtcclxuICAgIC8qKlxyXG4gICAgICogTmV0d29yayBidXR0b25zIGNsaWNrZWQgLSBnZXQgdGhlIGRhdGFcclxuICAgICAqL1xyXG4gICAgJCgnI25ldHdvcmtzLW1vZGFsLWJvZHkgYnV0dG9uJykuY2xpY2soZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgbGV0IG5ldHdvcmtfaWQgPSAkKHRoaXMpLmF0dHIoJ2RhdGEnKTtcclxuXHJcbiAgICAgICAgLy8gYWRkIHRoZSBuYW1lIG9mIHRoZSBjaG9vc2VuIG5ldHdvcmsgdG8gdGhlIE5ldHdvcmsgbW9kYWxcclxuICAgICAgICAkKCcjYWN0aXZlLW5ldHdvcmstbmFtZScpLnRleHQoJCh0aGlzKS5hdHRyKCduYW1lJykpO1xyXG5cclxuICAgICAgICBkaXNhYmxlUGxheUJ1dHRvbigpO1xyXG4gICAgICAgIGdldE5ldHdvcmtEYXRhKG5ldHdvcmtfaWQpO1xyXG4gICAgICAgIC8vIHNldCB0aGUgY29sb3Igb2YgdGhlIG5ldHdvcmtcclxuICAgICAgICBzZXRuZXR3b3JrQ29sb3IobmV0d29ya19pZCk7XHJcbiAgICAgICAgJCgnI25ldHdvcmstZGl2JykubW9kYWwoJ3RvZ2dsZScpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBOZXR3b3JrIGJ1dHRvbnMgY2xpY2tlZCAtIGdldCB0aGUgZGF0YVxyXG4gICAgICovXHJcbiAgICAkKCcjbmV0d29yay1yZW1vdmUnKS5jbGljayhmdW5jdGlvbigpIHtcclxuICAgICAgICBzZXROZXR3b3JrRGF0YSh7fSk7XHJcbiAgICAgICAgc2V0TmV0d29ya0lEKC0xKTtcclxuICAgICAgICAvLyByZW1vdmUgdGhlIG5ldHdvcmsgY29sb3JcclxuICAgICAgICBzZXRuZXR3b3JrQ29sb3IoLTEpO1xyXG4gICAgICAgICQoJyNhY3RpdmUtbmV0d29yay1uYW1lJykudGV4dCgnJyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIE5ldHdvcmsgYXV0byBidXR0b24gc2V0IGFjaXZlIG9yIHJlbW92ZVxyXG4gICAgICovXHJcbiAgICAkKCcjbmV0d29yay1hdXRvLXN1Z2dlc3QnKS5jbGljayhmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAoISQoJyNuZXR3b3JrLWF1dG8tc3VnZ2VzdCcpLmhhc0NsYXNzKCdhY3RpdmUnKSkge1xyXG4gICAgICAgICAgICAkKCcjbmV0d29yay1saW1pdC1wJykuaGlkZSgpO1xyXG4gICAgICAgICAgICAkKCcjbmV0d29yay1zbGlkZXInKS5oaWRlKCk7XHJcblxyXG4gICAgICAgICAgICBzZXROZXR3b3JrQXV0byh0cnVlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAkKCcjbmV0d29yay1saW1pdC1wJykuc2hvdygpO1xyXG4gICAgICAgICAgICAkKCcjbmV0d29yay1zbGlkZXInKS5zaG93KCk7XHJcbiAgICAgICAgICAgIHNldE5ldHdvcmtBdXRvKGZhbHNlKTtcclxuICAgICAgICAgICAgbGV0IGxpbWl0ID0gJCgnI25ldHdvcmstc2xpZGVyJykuc2xpZGVyKCd2YWx1ZScpO1xyXG4gICAgICAgICAgICBzZXROZXR3b3JMaW1pdChsaW1pdCk7XHJcbiAgICAgICAgICAgICQoJyNuZXR3b3JrLWxpbWl0JykudmFsKGxpbWl0KTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBJbml0IG1ldGFkYXRhIGxpc3RlbmVyc1xyXG4gKi9cclxuZnVuY3Rpb24gbWRfbGlzdGVuZXJzKCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBNZXRhZGF0YSBzd2F0Y2ggZnVuY3Rpb25zIGNvbG9yaW5nIGluZGl2aWR1YWwgYW5pbWFsc1xyXG4gICAgICovXHJcbiAgICAkKCcubWV0YWRhdGEtc3dhdGNoLm1ldGFkYXRhLXN3YXRjaC1jbGlja2FibGUnKS5jbGljayhmdW5jdGlvbigpIHtcclxuICAgICAgICBsZXQgaWQgPSAkKHRoaXMpLmF0dHIoJ3ZhbHVlJyk7XHJcbiAgICAgICAgbGV0IGNvbG9yUkdCID0gJCh0aGlzKS5jc3MoJ2JhY2tncm91bmQtY29sb3InKTtcclxuICAgICAgICAvLyBzZXQgdGhlIGNvbG9yIG9mIHRoZSBzd2F0Y2ggcHJldmlld1xyXG4gICAgICAgICQoJyNtZXRhZGF0YS1yb3ctJyArIGlkICsgJyAjcHJldmlldycpXHJcbiAgICAgICAgICAgIC5jc3MoJ2JhY2tncm91bmQtY29sb3InLCBjb2xvclJHQik7XHJcbiAgICAgICAgLy8gaWYgd2hpdGUgdGhhbiByZXNldCB0aGUgY29sb3JcclxuICAgICAgICBpZiAoY29sb3JSR0IgPT09ICdyZ2IoMjU1LCAyNTUsIDI1NSknKSB7XHJcbiAgICAgICAgICAgIGlmIChtZXRhZGF0YUNvbG9yW2lkXSkge1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIG1ldGFkYXRhQ29sb3JbaWRdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbWV0YWRhdGFDb2xvcltpZF0gPSBjb2xvclJHQjtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIE1ldGFkYXRhIGdyb3VwIG1ldGFkYXRhIGZ1bmN0aW9ucyBmb3IgaW5zdGFuY2UgY29sb3Igc2V4XHJcbiAgICAgKi9cclxuICAgICQoJyNncm91cC1tZXRhZGF0YSA6aW5wdXQnKS5jaGFuZ2UoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgLy8gcmVzZXQgdGhlIG1ldGFkYXQgYWNvbG9yaW5nXHJcbiAgICAgICAgcmVzZXRJbmRpdmlkdWFsTWV0YWRhdGEoKTtcclxuXHJcbiAgICAgICAgbGV0IHZhbHVlID0gJCh0aGlzKS5hdHRyKCd2YWx1ZScpO1xyXG4gICAgICAgIGxldCB0bXAgPSBbXTtcclxuXHJcbiAgICAgICAgLy8gbWV0YWRhdGEgc2V4IGlzIGNob29zZW4gLSBjb2xvcmluZyBiYXNlZCBvbiBtIGFuZCBmXHJcbiAgICAgICAgaWYgKHZhbHVlID09PSAnc2V4Jykge1xyXG4gICAgICAgICAgICAkKCcjbWV0YWRhdGEtZGl2JykubW9kYWwoJ3RvZ2dsZScpO1xyXG4gICAgICAgICAgICAvLyBjbG9zZSBhbmQgY29sb3IgaGVyZVxyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGFzZXRNZXRhZGF0YS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdG1wLnB1c2goZGF0YXNldE1ldGFkYXRhW2ldW3ZhbHVlXS50b0xvd2VyQ2FzZSgpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBjcmVhdGUgYSBzZXQgb2YgaW5kaXZpZHVhbCBzdHJpbmdzIGluIHNleFxyXG4gICAgICAgICAgICB0bXAgPSBBcnJheS5mcm9tKG5ldyBTZXQodG1wKSk7XHJcbiAgICAgICAgICAgIGxldCBjb2xvcnMgPSBbJyM3ZmM5N2YnLCAnIzM4NmNiMCddO1xyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhc2V0TWV0YWRhdGEubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdG1wLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGFzZXRNZXRhZGF0YVtpXVt2YWx1ZV0udG9Mb3dlckNhc2UoKSA9PT0gdG1wW2pdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFkZCB0aGUgY29sb3JpbmcgdG8gdGhlIG1ldGFkYXRhY29sb3Igb2JqZWN0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGFkYXRhQ29sb3JbZGF0YXNldE1ldGFkYXRhW2ldWydhbmltYWxfaWQnXV0gPSBjb2xvcnNbal07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICQoJyNtZXRhZGF0YS1pbnB1dCcpLmhpZGUoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAkKCcjbWV0YWRhdGEtaW5wdXQnKS5zaG93KCk7XHJcbiAgICAgICAgICAgIC8vIHNldCB2YWx1ZXMgb2YgaW5wdXRzXHJcbiAgICAgICAgICAgIC8vIGhlcmUgYXJlIGF1dG9tYXRpY2FsbHkgaW5wdXQgdmFsdWVzIGNhbGN1bGF0ZWRcclxuICAgICAgICAgICAgLy8gLjI1IGFuZCAuNzUgcGVyY2VudGlsZXMgYXJlIHVzZWRcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhc2V0TWV0YWRhdGEubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHRtcC5wdXNoKGRhdGFzZXRNZXRhZGF0YVtpXVt2YWx1ZV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxldCBibEF2ZyA9IGQzLnF1YW50aWxlKHRtcCwgMC4yNSk7IC8vIGJlbG93IGF2ZXJhZ2UgdmFsdWVcclxuICAgICAgICAgICAgbGV0IGFiQXZnID0gZDMucXVhbnRpbGUodG1wLCAwLjc1KTsgLy8gYWJvdmUgYXZlcmFnZVxyXG4gICAgICAgICAgICAkKCcjYmwtYXZnJykudmFsKGJsQXZnKTtcclxuICAgICAgICAgICAgJCgnI2FiLWF2ZycpLnZhbChhYkF2Zyk7XHJcbiAgICAgICAgICAgIC8vIGNvbG9yIHRoZSBhbmltYWxzXHJcbiAgICAgICAgICAgIGNvbG9yTWV0YWRhdGEoKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIE1ldGFkYXRhIGdyb3VwIG1ldGFkYXRhIGlucHV0IHNwaW5uZXJcclxuICAgICAqICsvLSAwLjEgdG8gdGhlIGlucHV0IHZhbHVlXHJcbiAgICAgKi9cclxuICAgICQoJy5udW1iZXItc3Bpbm5lciBidXR0b24nKS5jbGljayhmdW5jdGlvbigpIHtcclxuICAgICAgICBsZXQgYnRuID0gJCh0aGlzKSxcclxuICAgICAgICAgICAgb2xkVmFsdWUgPSBidG4uY2xvc2VzdCgnLm51bWJlci1zcGlubmVyJykuZmluZCgnaW5wdXQnKS52YWwoKS50cmltKCksXHJcbiAgICAgICAgICAgIG5ld1ZhbCA9IDA7XHJcblxyXG4gICAgICAgIGlmIChidG4uYXR0cignZGF0YS1kaXInKSA9PSAndXAnKSB7XHJcbiAgICAgICAgICAgIG5ld1ZhbCA9IHBhcnNlRmxvYXQob2xkVmFsdWUpICsgMC4xO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChvbGRWYWx1ZSA+IDApIHtcclxuICAgICAgICAgICAgICAgIG5ld1ZhbCA9IHBhcnNlRmxvYXQob2xkVmFsdWUpIC0gMC4xO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbmV3VmFsID0gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBuZXdWYWwgPSBNYXRoLnJvdW5kKG5ld1ZhbCAqIDEwMCkgLyAxMDA7IC1cclxuICAgICAgICBidG4uY2xvc2VzdCgnLm51bWJlci1zcGlubmVyJykuZmluZCgnaW5wdXQnKS52YWwobmV3VmFsKTtcclxuICAgICAgICAvLyBjaGFuZ2UgdGhlIGNvbG9yaW5nXHJcbiAgICAgICAgY29sb3JNZXRhZGF0YSgpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBNZXRhZGF0YSBpbnB1dCBmaWVsZHMgY2hhbmdlXHJcbiAgICAgKi9cclxuICAgICQoJy5udW1iZXItc3Bpbm5lciBpbnB1dCcpLm9uKCdpbnB1dCcsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGNvbG9yTWV0YWRhdGEoKTtcclxuICAgIH0pO1xyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlc2V0IGFsbCBtZXRhZGF0YSBpbnB1dCBwYXJhbWV0ZXJzXHJcbiAgICAgKi9cclxuICAgICQoJyNtZXRhZGF0YS1yZXNldCcpLmNsaWNrKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICQoJyNtZXRhZGF0YS1pbnB1dCcpLmhpZGUoKTtcclxuICAgICAgICByZXNldEluZGl2aWR1YWxNZXRhZGF0YSgpO1xyXG4gICAgfSk7XHJcblxyXG59XHJcbi8qKlxyXG4gKiBJbml0aWFsaXplIGhpZXJhcmNoeS9kZW5kZ3JvZ3JhbSBsaXN0ZW5lcnNcclxuICovXHJcbmZ1bmN0aW9uIGhfbGlzdGVuZXJzKCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBTaG93IGRlbmRncm9ncmFtIHNsaWRpbmcgYnV0dG9uXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGluaXRTaG93RGVuZHJvZ3JhbUxpc3RlbmVyKGlkKSB7XHJcblxyXG4gICAgICAgICQoJyNzaG93LWRlbmRyb2dyYW0tJyArIGlkKS5jbGljayhmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgbGV0IGNsaWNrZWRCdXR0b25JRCA9ICQodGhpcykuYXR0cignaWQnKTtcclxuICAgICAgICAgICAgLy8gaXRlcmF0ZSBvdmVyIGFsbCBidXR0b25zIGFuZCBjdXN0b20gaGlnaGxpZ2h0IGp1c3Qgb25lIG9yIG5vbmVcclxuICAgICAgICAgICAgJCgnLnNob3ctZGVuZHJvZ3JhbScpLmVhY2goZnVuY3Rpb24oaSwgYnV0dG9uKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBhY3RpdmUgZm91bmQgYnV0dG9uXHJcbiAgICAgICAgICAgICAgICBpZiAoJChidXR0b24pLmF0dHIoJ2lkJykgPT09IGNsaWNrZWRCdXR0b25JRCAmJiAkKGJ1dHRvbikuaGFzQ2xhc3MoJ2J0bi1wcmltYXJ5JykgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJChidXR0b24pLmFkZENsYXNzKCdidG4tcHJpbWFyeScpO1xyXG4gICAgICAgICAgICAgICAgICAgICQoYnV0dG9uKS5maW5kKCcjYnRuLWxlZnQnKS5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgJChidXR0b24pLmZpbmQoJyNidG4tcmlnaHQnKS5zaG93KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gVE9ETyBhZGQgaGVyZSBhIHJlc2l6ZSBvZiB0aGUgbWFpbiB2aXNcclxuICAgICAgICAgICAgICAgICAgICAvLyAkKCcjZGVuZHJvZ3JhbS1wYW5lbCcpLmluc2VydEFmdGVyKCQodGhpcykpO1xyXG4gICAgICAgICAgICAgICAgfSAvLyByZW1vdmUgaGlnaGxpZ2h0XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAkKGJ1dHRvbikucmVtb3ZlQ2xhc3MoJ2J0bi1wcmltYXJ5Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJChidXR0b24pLmZpbmQoJyNidG4tbGVmdCcpLnNob3coKTtcclxuICAgICAgICAgICAgICAgICAgICAkKGJ1dHRvbikuZmluZCgnI2J0bi1yaWdodCcpLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvLyBzaG93IGRlbmRyb2dyYW1cclxuICAgICAgICAgICAgaWYgKCQoJy5zaG93LWRlbmRyb2dyYW0uYnRuLXByaW1hcnknKS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICQoJyNkZW5kcm9ncmFtLXBhbmVsJykuc2hvdygpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgJCgnI2RlbmRyb2dyYW0tcGFuZWwnKS5oaWRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCEkKCcjcGxheS1idXR0b24nKS5oYXNDbGFzcygnYWN0aXZlJykpIHtcclxuICAgICAgICAgICAgICAgIC8vZ28gYmFjayBvbmUgc2Vjb25kIGFuZCBkcmF3IHRoZSBuZXh0IGZyYW1lXHJcbiAgICAgICAgICAgICAgICAvL3RoaXMgYXBwbHlzIHRoZSBjaGFuZ2VzXHJcbiAgICAgICAgICAgICAgICBTUFYuZGVjSW5kZXhUaW1lKCk7XHJcbiAgICAgICAgICAgICAgICBTUFYuZHJhdygpO1xyXG4gICAgICAgICAgICAgICAgZHJhd0RlbmRyb2dyYW0oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSGllcmFyY2h5IGJ1dHRvbiBpbiBuZXR3b3JrIG1vZGFsIG9uIGNoYW5nZVxyXG4gICAgICogTG9hZCBkYXRhIG9yIHJlbW92ZSBpdFxyXG4gICAgICovXHJcbiAgICAkKCcuaGllYXJjaHktY2hlY2tib3gnKS5vbignY2hhbmdlJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgbGV0IGNoZWNrYm94ID0gJCh0aGlzKTtcclxuXHJcblxyXG4gICAgICAgIGxldCBpZCA9IGNoZWNrYm94LmF0dHIoJ2RhdGEnKTtcclxuICAgICAgICBsZXQgbmFtZSA9IGNoZWNrYm94LmF0dHIoJ25hbWUnKTtcclxuICAgICAgICBsZXQgY2hlY2tlZCA9IGNoZWNrYm94LnByb3AoJ2NoZWNrZWQnKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhjaGVja2VkKTtcclxuICAgICAgICBpZiAoY2hlY2tlZCAmJiAkKCcuc2hvdy1kZW5kcm9ncmFtJykubGVuZ3RoIDwgbWF4TnVtYmVySGllcmFyY2hpZXMpIHtcclxuICAgICAgICAgICAgZGlzYWJsZVBsYXlCdXR0b24oKTtcclxuICAgICAgICAgICAgZ2V0TmV0d29ya0hpZXJhcmNoeURhdGEoaWQpO1xyXG5cclxuICAgICAgICAgICAgYWRkSGllcmFyY2h5QnV0dG9uKGlkLCBuYW1lKTtcclxuICAgICAgICAgICAgaW5pdFNob3dEZW5kcm9ncmFtTGlzdGVuZXIoaWQpO1xyXG4gICAgICAgICAgICAkKCcjZGVuZHJvZ3JhbS1idXR0b25zLWRpdicpLnNob3coKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gZWxzZSBpZiAoJCgnLnNob3ctZGVuZHJvZ3JhbScpLmxlbmd0aCA9PT0gbWF4TnVtYmVySGllcmFyY2hpZXMpIHtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZygnTWF4IG51bWJlciBvZiBoaWVyYXJjaGllcyBpczogJyArIG1heE51bWJlckhpZXJhcmNoaWVzKTtcclxuICAgICAgICAvL1RPRE8gaW1wbGVtZW50IHRoaXMgaGVyZVxyXG4gICAgICAgIC8vIG5vdGljZSB1c2VyIHRoYXQgaXQgaXMgbm90IHBvc3NpYmxlIHRvIHNob3cgbW9yZSB0aGFuIG4gaGllcmFyY2hpZXNcclxuICAgICAgICAvLyAgICAgICAgICA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxyXG4gICAgICAgIC8vICAgPHN0cm9uZz5JbmZvITwvc3Ryb25nPiBBdHRlbnRpb24gdXNlciAuXHJcbiAgICAgICAgLy8gPC9kaXY+XHJcbiAgICAgICAgLy8gfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyB0bXAgdmFyaWFibGUgdG8gc2F2ZSBpZiB0aGUgYnV0dG9uIHdoaWNoIGlzIGdvaW5nIHRvIGJlIHJlbW92ZWRcclxuICAgICAgICAgICAgLy8gd2FzIGFjdGl2ZVxyXG4gICAgICAgICAgICBsZXQgdG1wQWN0aXZlID0gJCgnI3Nob3ctZGVuZHJvZ3JhbS0nICsgaWQpLmhhc0NsYXNzKCdidG4tcHJpbWFyeScpO1xyXG4gICAgICAgICAgICBzZXRIaWVyYXJjaHlEYXRhKHt9LCBpZCk7XHJcblxyXG4gICAgICAgICAgICByZW1vdmVIaWVyYXJjaHlCdXR0b24oaWQpO1xyXG4gICAgICAgICAgICAvLyBUT0RPIGZpbmQgYmV0dGVyIHdheSBoZXJlXHJcbiAgICAgICAgICAgIGQzLnNlbGVjdCgnZy5oJyArIGlkKS5yZW1vdmUoKTtcclxuICAgICAgICAgICAgLy8gcmVtb3ZlIHRoZSBkZW5kcm9ncmFtIGFuZCB0aGUgcGFuZWwgaWYgdGhlIHJlbW92ZWQgZWxlbWVudCB3YXMgY2hlY2tlZFxyXG4gICAgICAgICAgICBpZiAodG1wQWN0aXZlID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAkKCcjZGVuZHJvZ3JhbS1wYW5lbCcpLmhpZGUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoJCgnLnNob3ctZGVuZHJvZ3JhbScpLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgJCgnI2RlbmRyb2dyYW0tYnV0dG9ucy1kaXYnKS5oaWRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHJlc2l6ZSB0aGUgbWFpbiBzdmdcclxuICAgICAgICBpZiAoJCgnLnNob3ctZGVuZHJvZ3JhbScpLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAkKCcjbWFpbi12aXMtZGl2JykucmVtb3ZlQ2xhc3MoJ2NvbC1tZC0xMicpO1xyXG4gICAgICAgICAgICAkKCcjbWFpbi12aXMtZGl2JykuYWRkQ2xhc3MoJ2NvbC1tZC04Jyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgJCgnI21haW4tdmlzLWRpdicpLnJlbW92ZUNsYXNzKCdjb2wtbWQtOCcpO1xyXG4gICAgICAgICAgICAkKCcjbWFpbi12aXMtZGl2JykuYWRkQ2xhc3MoJ2NvbC1tZC0xMicpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVmlzdWFsaXplIHRoZSBuZXR3b3JrIG9ubHkgaW4gdGhlIGNob29zZW4gaGllcmFyY2h5XHJcbiAgICAgKi9cclxuICAgICQoJy5uZXR3b3JrLWhpZXJhcmNoeS1jaGVja2JveCcpLm9uKCdjaGFuZ2UnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAvLyBnZXQgdGhlIGluZm8gZm9yIHRoZSBjbGlja2VkIGJ1dHRvblxyXG4gICAgICAgIGxldCBjaGVja2JveCA9ICQodGhpcyk7XHJcblxyXG4gICAgICAgIC8vIHJlc2V0IGFsbCB0aGUgb3RoZXIgYWN0aXZlIGNoZWNrYm94ZXNcclxuICAgICAgICAkKCcubmV0d29yay1oaWVyYXJjaHktY2hlY2tib3gnKS5wcm9wKCdjaGVja2VkJywgZmFsc2UpO1xyXG4gICAgICAgIGNoZWNrYm94LnByb3AoJ2NoZWNrZWQnLCB0cnVlKTtcclxuXHJcbiAgICAgICAgaWYgKGNoZWNrYm94LnByb3AoJ2NoZWNrZWQnKSkge1xyXG4gICAgICAgICAgICAvLyBzZXQgdGhlIG5ldHdvcmsgaWRcclxuICAgICAgICAgICAgc2V0TmV0d29ya0hpZXJhcmNoeShjaGVja2JveC5hdHRyKCdkYXRhJykpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHNldE5ldHdvcmtIaWVyYXJjaHkodW5kZWZpbmVkKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEhpZXJhcmNoeSBzZXQgdGhlb3J5IGJ1dHRvbnMgLSB1bmlvbiwgaW50ZXJzZWN0aW9uLCBzeW1tZXRyaWMgZGlmZmVyZW5jZVxyXG4gICAgICovXHJcbiAgICAkKCcuc2V0LWJ1dHRvbicpLmNsaWNrKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGxldCBkYXRhID0gJCh0aGlzKS5maW5kKCdpbnB1dCcpLmF0dHIoJ2RhdGEnKTtcclxuICAgICAgICBzZXRTZXRPcGVyYXRpb24oZGF0YSk7XHJcblxyXG4gICAgICAgIGlmICghJCgnI3BsYXktYnV0dG9uJykuaGFzQ2xhc3MoJ2FjdGl2ZScpKSB7XHJcbiAgICAgICAgICAgIC8vZ28gYmFjayBvbmUgc2Vjb25kIGFuZCBkcmF3IHRoZSBuZXh0IGZyYW1lXHJcbiAgICAgICAgICAgIC8vdGhpcyBhcHBseXMgdGhlIGNoYW5nZXNcclxuICAgICAgICAgICAgU1BWLmRlY0luZGV4VGltZSgpO1xyXG4gICAgICAgICAgICBTUFYuZHJhdygpO1xyXG4gICAgICAgICAgICBkcmF3RGVuZHJvZ3JhbSgpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgLy8gPSA7XHJcblxyXG59XHJcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICAgIEdldHRlciBhbmQgc2V0dGVyXHJcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuLyoqXHJcbiAqIFNldCBwbGF5IGJvb2xlYW5cclxuICogQHBhcmFtIHtCb29sZWFufSB2YWx1ZSAtIHBhdXNlIChmYWxzZSkgb3IgcGxheSAodHJ1ZSlcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXRQbGF5Qm9vbGVhbih2YWx1ZSkge1xyXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nKSB7XHJcbiAgICAgICAgcGxheUJvb2xlYW4gPSB2YWx1ZTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcGxheUJvb2xlYW4gPSBmYWxzZTtcclxuICAgIH1cclxufVxyXG4iLCIvKmVzbGludC1kaXNhYmxlIG5vLXVudXNlZC1sZXRzKi9cclxuLypnbG9iYWwgd2luZG93LCBkMywgJCwgcGFyYW1ldGVycyovXHJcbmltcG9ydCB7XHJcbiAgICBzZXRJbmRleFRpbWVcclxufSBmcm9tICcuL3NwYXRpYWxfdmlldy9zcGF0aWFsX3ZpZXcuanMnO1xyXG5cclxuaW1wb3J0IHtcclxuICAgIHN3YXJtRGF0YSxcclxuICAgIGRhdGFzZXQsXHJcbiAgICBhbmltYWxJZHNcclxufSBmcm9tICcuL2V4cGxvcmUuanMnO1xyXG5cclxuaW1wb3J0IHtcclxuICAgIHBlcmNlbnRpbGVzTGluZUNoYXJ0XHJcbn0gZnJvbSAnLi9oZWxwZXJzLmpzJztcclxuXHJcbmltcG9ydCB7XHJcbiAgICBpbmRleFRpbWUsXHJcbn0gZnJvbSAnLi9zcGF0aWFsX3ZpZXcvc3BhdGlhbF92aWV3JztcclxuXHJcblxyXG5cclxuXHJcbmV4cG9ydCBsZXQgem9vbUZ1bmN0aW9uO1xyXG5cclxubGV0IHRyZW5kQ2hhcnRzWm9vbSA9IHt9O1xyXG4vL2xldCB0aGlzLnRyZW5kQ2hhcnRzRWxlbSA9IFsnbG93ZXItb3V0ZXItYXJlYScsICdsb3dlci1pbm5lci1hcmVhJywgJ21lZGlhbi1saW5lJywgJ3VwcGVyLWlubmVyLWFyZWEnLCAndXBwZXItb3V0ZXItYXJlYSddO1xyXG4vL2xldCBsaW5lQ2hhcnRXaWR0aCA9IDUwMDA7XHJcbmxldCByYXRpbyA9IDE7XHJcbmxldCB6b29tR3JvdXA7XHJcbmxldCB4O1xyXG5sZXQgeTtcclxuXHJcblxyXG5jbGFzcyBDaGFydCB7XHJcblxyXG4gICAgY29uc3RydWN0b3IoZGF0YSkge1xyXG4gICAgICAgIC8vIGxvYWQgaW4gYXJndW1lbnRzIGZyb20gY29uZmlnIG9iamVjdFxyXG4gICAgICAgIHRoaXMuc3dhcm1EYXRhID0gZGF0YTtcclxuICAgICAgICB0aGlzLnN3YXJtX2ZlYXR1cmVzID0gT2JqZWN0LmtleXModGhpcy5zd2FybURhdGFbMF0pO1xyXG4gICAgICAgIHRoaXMubGluZUNoYXJ0V2lkdGggPSA1MDAwO1xyXG4gICAgICAgIHRoaXMudHJlbmRDaGFydHNFbGVtID0gWydsb3dlci1vdXRlci1hcmVhJywgJ2xvd2VyLWlubmVyLWFyZWEnLCAnbWVkaWFuLWxpbmUnLCAndXBwZXItaW5uZXItYXJlYScsICd1cHBlci1vdXRlci1hcmVhJ107XHJcbiAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICogaW5pdCB0aGUgbGluZSBjaGFydCBhbmQgYWxzbyB0aGUgdHJlbmQgY2hhcnRcclxuICAgICAqL1xyXG5cclxuXHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBMaW5lQ2hhcnQgZXh0ZW5kcyBDaGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvcihkYXRhKXtcclxuICAgIHN1cGVyKGRhdGEpXHJcbiAgICB0aGlzLmxpbmVDaGFydCgpO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBsaW5lQ2hhcnQoKSB7XHJcblxyXG4gICAgICByYXRpbyA9IE1hdGguY2VpbCh0aGlzLnN3YXJtRGF0YS5sZW5ndGggLyB0aGlzLmxpbmVDaGFydFdpZHRoKTtcclxuXHJcbiAgICAgIC8vIFN3YXJtIGZlYXR1cmVzIGxpbmUgY2hhcnRcclxuICAgICAgbGV0IGxpbmVDaGFydEhlaWdodCA9IDUwMDsgLy8gdGhlIGxpbmUgY2hhcnQgaGVpZ2h0XHJcbiAgICAgIGxldCBtYXJnaW4gPSB7XHJcbiAgICAgICAgICB0b3A6IDEwLFxyXG4gICAgICAgICAgcmlnaHQ6IDAsXHJcbiAgICAgICAgICBib3R0b206IDEwMCxcclxuICAgICAgICAgIGxlZnQ6IDEwXHJcbiAgICAgIH07XHJcbiAgICAgIGxldCBtYXJnaW5Ub0xlZ2VuZCA9IDUwO1xyXG5cclxuICAgICAgbGV0IHN3YXJtX2ZlYXR1cmVzID0gdGhpcy5zd2FybV9mZWF0dXJlcztcclxuICAgICAgLy8gcmVtb3ZlIHRoZSB0aW1lIGtleVxyXG4gICAgICBsZXQgaW5kZXggPSBzd2FybV9mZWF0dXJlcy5pbmRleE9mKCd0aW1lJyk7XHJcbiAgICAgIHN3YXJtX2ZlYXR1cmVzLnNwbGljZShpbmRleCwgMSk7XHJcblxyXG4gICAgICBsZXQgbGluZUNoYXJ0RGF0YSA9IFtdO1xyXG4gICAgICAvLyBhZ2dyZWdhdGUgYW5kIGF2ZXJhZ2UgdGhlIHN3YXJtIGRhdGEgdG8gdGhpcy5saW5lQ2hhcnRXaWR0aCBwb2ludHMgaW4gdGhlIGxpbmUgY2hhcnRcclxuICAgICAgaWYgKHRoaXMuc3dhcm1EYXRhLmxlbmd0aCA+IHRoaXMubGluZUNoYXJ0V2lkdGgpIHtcclxuICAgICAgICAgIC8vIHRtcCBhcnJheSBmb3IgdGhlIGFnZ3JlZ2F0ZWQgYW5kIGF2ZXJhZ2VkIGZlYXR1cmVzXHJcbiAgICAgICAgICBsZXQgdG1wID0gbmV3IEFycmF5KHN3YXJtX2ZlYXR1cmVzLmxlbmd0aCkuZmlsbCgwKTtcclxuXHJcbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc3dhcm1EYXRhLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgLy8gYWdncmVnYXRlIHRoZSBmZWF0dXJlcyBpbiB0aGUgdGVtcCBhcnJheVxyXG4gICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgc3dhcm1fZmVhdHVyZXMubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgICAgdG1wW2pdICs9IHRoaXMuc3dhcm1EYXRhW2ldW3N3YXJtX2ZlYXR1cmVzW2pdXTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgLy8gaWYgdGhlIHJhdGlvIGlzIHplcm8gdGhlbiBhdmVyYWdlIGl0IGFuZCBzZXQgaXQgdG8gemVyb1xyXG4gICAgICAgICAgICAgIGlmIChpICUgcmF0aW8gPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgbGV0IHRtcF9vYmplY3QgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAndGltZSc6IGkgLyByYXRpb1xyXG4gICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBzd2FybV9mZWF0dXJlcy5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgdG1wW2pdID0gdG1wW2pdIC8gcmF0aW87XHJcbiAgICAgICAgICAgICAgICAgICAgICB0bXBfb2JqZWN0W3N3YXJtX2ZlYXR1cmVzW2pdXSA9IHRtcFtqXTtcclxuICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgbGluZUNoYXJ0RGF0YS5wdXNoKHRtcF9vYmplY3QpO1xyXG4gICAgICAgICAgICAgICAgICB0bXAgPSBuZXcgQXJyYXkoc3dhcm1fZmVhdHVyZXMubGVuZ3RoKS5maWxsKDApO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGxpbmVDaGFydERhdGEgPSB0aGlzLnN3YXJtRGF0YTtcclxuICAgICAgfVxyXG4gICAgICAvL2NvbnNvbGUubG9nKGxpbmVDaGFydERhdGEpO1xyXG4gICAgICB6b29tRnVuY3Rpb24gPSBkMy5zY2FsZUxpbmVhcigpXHJcbiAgICAgICAgICAuZG9tYWluKFswLCBsaW5lQ2hhcnREYXRhLmxlbmd0aF0pXHJcbiAgICAgICAgICAucmFuZ2UoWzAsIHRoaXMubGluZUNoYXJ0V2lkdGhdKTtcclxuXHJcblxyXG4gICAgICAvLyB4IGF4aXMgc2NhbGUgLSBtaW51cyBtYXJnaW5MaW5lQ2hhcnQgIG5lZWRlZFxyXG4gICAgICB4ID0gZDMuc2NhbGVMaW5lYXIoKVxyXG4gICAgICAgICAgLmRvbWFpbihbMCwgbGluZUNoYXJ0RGF0YS5sZW5ndGhdKVxyXG4gICAgICAgICAgLnJhbmdlKFswLCB0aGlzLmxpbmVDaGFydFdpZHRoXSk7XHJcbiAgICAgIGxldCB4MiA9IGQzLnNjYWxlTGluZWFyKClcclxuICAgICAgICAgIC5kb21haW4oWzAsIGxpbmVDaGFydERhdGEubGVuZ3RoXSlcclxuICAgICAgICAgIC5yYW5nZShbMCwgdGhpcy5saW5lQ2hhcnRXaWR0aF0pO1xyXG4gICAgICAvLyBkZWZpbmUgd2hlcmUgdGhlIGF4aXMgaXMgZXRjXHJcbiAgICAgIGxldCB4QXhpcyA9IGQzLmF4aXNCb3R0b20oeClcclxuICAgICAgICAgIC50aWNrcygxMClcclxuICAgICAgICAgIC50aWNrU2l6ZSgxMClcclxuICAgICAgICAgIC50aWNrUGFkZGluZyg1KVxyXG4gICAgICAgICAgLnRpY2tGb3JtYXQoZnVuY3Rpb24oZCkge1xyXG4gICAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKChkICogcmF0aW8pIC8gMTUwMCkgJSA2MCArICc6JyArIE1hdGguZmxvb3IoKGQgKiByYXRpbykgLyBwYXJhbWV0ZXJzWydmcHMnXSkgJSA2MCArICc6OicgKyAoZCAqIHJhdGlvKSAlIHBhcmFtZXRlcnNbJ2ZwcyddO1xyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICAvLyB5IGF4aXMgc2NhbGUgd2hpY2ggaXMgbm9ybWFsaXplZFxyXG4gICAgICB5ID0gZDMuc2NhbGVMaW5lYXIoKVxyXG4gICAgICAgICAgLmRvbWFpbihbMCwgMTAwXSlcclxuICAgICAgICAgIC5yYW5nZShbbGluZUNoYXJ0SGVpZ2h0LCAwXSk7XHJcbiAgICAgIC8vIGRlZmluZSB3aGVyZSB0aGUgYXhpcyBpcyBldGNcclxuICAgICAgbGV0IHlBeGlzID0gZDMuYXhpc0xlZnQoeSlcclxuICAgICAgICAgIC50aWNrcygwKVxyXG4gICAgICAgICAgLnRpY2tTaXplKDEwKVxyXG4gICAgICAgICAgLnRpY2tQYWRkaW5nKDUpO1xyXG5cclxuICAgICAgbGV0IGRyYWdnZWQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIC8vIGRyYWdnZWQgZnVuY3Rpb24gZ2V0IHRoZSBjb29yZGluYXRlcyBhbmQgY2FsY3VsYXRlIHRoZSB0aW1lIG1vbWVudCBmcm9tIHRoaXNcclxuICAgICAgICAgIGxldCBjb29yZHMgPSBkMy5tb3VzZSh0aGlzKTtcclxuICAgICAgICAgIGlmIChjb29yZHNbMF0gPCBtYXJnaW4ubGVmdCB8fCBjb29yZHNbMF0gPiB0aGlzLmxpbmVDaGFydFdpZHRoIHx8IGNvb3Jkc1sxXSA8IDAgfHwgY29vcmRzWzFdID4gbGluZUNoYXJ0SGVpZ2h0KSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgLy8gdG1wIHNjYWxlIHRvIGluY2x1ZGUgdGhlIHpvb20gZmFjdG9yXHJcbiAgICAgICAgICBsZXQgdG1wU2NhbGUgPSBkMy5zY2FsZUxpbmVhcigpXHJcbiAgICAgICAgICAgICAgLmRvbWFpbih6b29tRnVuY3Rpb24ucmFuZ2UoKSlcclxuICAgICAgICAgICAgICAucmFuZ2Uoem9vbUZ1bmN0aW9uLmRvbWFpbigpKTtcclxuICAgICAgICAgIC8vIHNldCB0aGUgbmV3IHRpbWVcclxuICAgICAgICAgIHNldEluZGV4VGltZShNYXRoLmZsb29yKCh0bXBTY2FsZShjb29yZHNbMF0gLSBtYXJnaW4ubGVmdCkpICogcmF0aW8pKTtcclxuICAgICAgfTtcclxuICAgICAgbGV0IHpvb20gPSBkMy56b29tKClcclxuICAgICAgICAgIC5zY2FsZUV4dGVudChbMSwgMjBdKVxyXG4gICAgICAgICAgLnRyYW5zbGF0ZUV4dGVudChbXHJcbiAgICAgICAgICAgICAgWzAsIDBdLFxyXG4gICAgICAgICAgICAgIFt0aGlzLmxpbmVDaGFydFdpZHRoLCBsaW5lQ2hhcnRIZWlnaHRdXHJcbiAgICAgICAgICBdKVxyXG4gICAgICAgICAgLmV4dGVudChbXHJcbiAgICAgICAgICAgICAgWzAsIDBdLFxyXG4gICAgICAgICAgICAgIFt0aGlzLmxpbmVDaGFydFdpZHRoLCBsaW5lQ2hhcnRIZWlnaHRdXHJcbiAgICAgICAgICBdKVxyXG4gICAgICAgICAgLm9uKCd6b29tJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgLy8gZ2V0IHRoZSB0cmFuc2Zvcm0gZmFjdG9yXHJcbiAgICAgICAgICAgICAgbGV0IHQgPSBkMy5ldmVudC50cmFuc2Zvcm07XHJcbiAgICAgICAgICAgICAgLy8gY2hhbmdlIHNjYWxpbmcgZnVuY3Rpb25cclxuICAgICAgICAgICAgICB6b29tRnVuY3Rpb24gPSB4LmRvbWFpbih0LnJlc2NhbGVYKHgyKS5kb21haW4oKSk7XHJcbiAgICAgICAgICAgICAgLy8gem9vbSBlYWNoIGF2YWlhYmxlIGxpbmVcclxuICAgICAgICAgICAgICBmb3IgKGxldCBrZXkgaW4gbGluZXMpIHtcclxuICAgICAgICAgICAgICAgICAgaWYgKGxpbmVzLmhhc093blByb3BlcnR5KGtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgIHpvb21Hcm91cC5zZWxlY3QoKCcjJyArIGtleSArICdMaW5lJykpLmF0dHIoJ2QnLCBsaW5lc1trZXldKTtcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAvLyB6b29tIHRoZSB0cmVuZCBjaGFydHNcclxuICAgICAgICAgICAgICBmb3IgKGxldCBrZXkgaW4gdHJlbmRDaGFydHNab29tKSB7XHJcbiAgICAgICAgICAgICAgICAgIGlmICh0cmVuZENoYXJ0c1pvb20uaGFzT3duUHJvcGVydHkoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnRyZW5kQ2hhcnRzRWxlbS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHpvb21Hcm91cFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc2VsZWN0KCgnIycgKyBrZXkgKyAnVHJlbmRDaGFydCAuJyArIHRoaXMudHJlbmRDaGFydHNFbGVtW2ldKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2QnLCB0cmVuZENoYXJ0c1pvb21ba2V5XVt0aGlzLnRyZW5kQ2hhcnRzRWxlbVtpXV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIC8vIHJlc2NhbGUgdGhlIGF4aXNcclxuICAgICAgICAgICAgICBnWGF4aXMuY2FsbCh4QXhpcyk7XHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgIC8vIG1ha2UgdGhlIHN2ZyByZXNpemFibGVcclxuICAgICAgbGV0IHN3YXJtTGluZUNoYXJ0ID0gZDMuc2VsZWN0KCcjc3dhcm0tdmlzJylcclxuICAgICAgICAgIC5jbGFzc2VkKCdzdmctbGluZS1jaGFydC1jb250YWluZXInLCB0cnVlKVxyXG4gICAgICAgICAgLy8gdG8gbWFrZSBpdCByZXNwb25zaXZlIHdpdGggY3NzXHJcbiAgICAgICAgICAuYXBwZW5kKCdzdmcnKVxyXG4gICAgICAgICAgLmF0dHIoJ3ByZXNlcnZlQXNwZWN0UmF0aW8nLCAneE1pbllNaW4gbWVldCcpXHJcblxyXG4gICAgICAgICAgLmF0dHIoJ3ZpZXdCb3gnLCAnMCAwICcgKyB0aGlzLmxpbmVDaGFydFdpZHRoICsgJyAnICsgKGxpbmVDaGFydEhlaWdodCArIG1hcmdpbi5ib3R0b20pKVxyXG4gICAgICAgICAgLy8gYWRkIHRoZSBjbGFzcyBzdmctY29udGVudFxyXG4gICAgICAgICAgLmNsYXNzZWQoJ3N2Zy1jb250ZW50JywgdHJ1ZSk7XHJcblxyXG4gICAgICB6b29tR3JvdXAgPSBzd2FybUxpbmVDaGFydFxyXG4gICAgICAgICAgLmFwcGVuZCgnc3ZnOmcnKVxyXG4gICAgICAgICAgLmF0dHIoJ2lkJywgJ2xpbmVDaGFydFpvb20nKVxyXG4gICAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoJyArIG1hcmdpbi5sZWZ0ICsgJywwKScpO1xyXG5cclxuICAgICAgLy8gYXBwZW5kIGEgZ3JvdXAgZm9yIHRoZSB4IGF4aXNcclxuICAgICAgLy8gYWRkIHRoZSBheGlzXHJcbiAgICAgIGxldCBnWGF4aXMgPSB6b29tR3JvdXAuYXBwZW5kKCdnJylcclxuICAgICAgICAgIC5hdHRyKCdjbGFzcycsICd4IGF4aXMtbGluZS1jaGFydCcpXHJcbiAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgwLCcgKyBsaW5lQ2hhcnRIZWlnaHQgKyAnKScpXHJcbiAgICAgICAgICAuY2FsbCh4QXhpcyk7XHJcblxyXG4gICAgICAvLyBhcHBlbmQgYSBncm91cCBmb3IgdGhlIHkgYXhpc1xyXG4gICAgICB6b29tR3JvdXAuYXBwZW5kKCdnJylcclxuICAgICAgICAgIC5hdHRyKCdjbGFzcycsICd5IGF4aXMtbGluZS1jaGFydCcpXHJcbiAgICAgICAgICAuY2FsbCh5QXhpcyk7XHJcblxyXG5cclxuICAgICAgLy8gdGhlIHRpbWUgbGluZSBhcHBlbmQgdGhlIGxpbmVcclxuICAgICAgem9vbUdyb3VwLmFwcGVuZCgnbGluZScpXHJcbiAgICAgICAgICAuYXR0cignY2xhc3MnLCAndGltZS1saW5lJylcclxuICAgICAgICAgIC5hdHRyKCdpZCcsICdsaW5lQ2hhcnRUaW1lTGluZScpXHJcbiAgICAgICAgICAuYXR0cigneDEnLCAwKVxyXG4gICAgICAgICAgLmF0dHIoJ3kxJywgMClcclxuICAgICAgICAgIC5hdHRyKCd4MicsIDApXHJcbiAgICAgICAgICAuYXR0cigneTInLCBsaW5lQ2hhcnRIZWlnaHQpO1xyXG5cclxuICAgICAgICAgIC8vIGNvbG9ycyBmb3IgdGhlIGxpbmVzXHJcbiAgICAgICAgICBsZXQgbGluZV9jb2xvcnMgPSBkMy5zY2FsZU9yZGluYWwoZDMuc2NoZW1lQ2F0ZWdvcnkxMCk7XHJcbiAgICAgICAgICBsZXQgbGluZXMgPSB7fTtcclxuICAgICAgICAgIC8vIGFkZCB0aGUgbGluZXMgdG8gdGhlIGxpbmUgY2hhcnRcclxuICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3dhcm1fZmVhdHVyZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICBsZXQgbWluID0gZDMubWluKGxpbmVDaGFydERhdGEsIGZ1bmN0aW9uKGQpIHtcclxuICAgICAgICAgICAgICAgICAgcmV0dXJuIGRbc3dhcm1fZmVhdHVyZXNbaV1dO1xyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgIGxldCBtYXggPSBkMy5tYXgobGluZUNoYXJ0RGF0YSwgZnVuY3Rpb24oZCkge1xyXG4gICAgICAgICAgICAgICAgICByZXR1cm4gZFtzd2FybV9mZWF0dXJlc1tpXV07XHJcbiAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgIGxldCBub3JtYWxpemF0aW9uU2NhbGUgPSBkMy5zY2FsZUxpbmVhcigpLmRvbWFpbihbbWluLCBtYXhdKS5yYW5nZShbMCwgMTAwXSk7XHJcbiAgICAgICAgICAgICAgbGV0IGxpbmUgPSBkMy5saW5lKClcclxuICAgICAgICAgICAgICAgICAgLngoZnVuY3Rpb24oZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHgoZFsndGltZSddKTtcclxuICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgLnkoZnVuY3Rpb24oZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHkobm9ybWFsaXphdGlvblNjYWxlKGRbc3dhcm1fZmVhdHVyZXNbaV1dKSk7XHJcbiAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgIGxpbmVzW3N3YXJtX2ZlYXR1cmVzW2ldXSA9IGxpbmU7XHJcbiAgICAgICAgICAgICAgLy9hcHBlbmQgdGhlIGxpbmUgdG8gdGhlIGxpbmUgY2hhcnRcclxuICAgICAgICAgICAgICB6b29tR3JvdXAuYXBwZW5kKCdwYXRoJylcclxuICAgICAgICAgICAgICAgICAgLmRhdGEoW2xpbmVDaGFydERhdGFdKVxyXG4gICAgICAgICAgICAgICAgICAuYXR0cignaWQnLCAoc3dhcm1fZmVhdHVyZXNbaV0gKyAnTGluZScpKVxyXG4gICAgICAgICAgICAgICAgICAuYXR0cignY2xhc3MnLCAnbGluZSBsaW5lQ2hhcnRMaW5lJylcclxuICAgICAgICAgICAgICAgICAgLnN0eWxlKCdzdHJva2UnLCBsaW5lX2NvbG9ycyhpKSlcclxuICAgICAgICAgICAgICAgICAgLmF0dHIoJ2QnLCBsaW5lKVxyXG4gICAgICAgICAgICAgICAgICAuYXR0cignbmFtZScsIHN3YXJtX2ZlYXR1cmVzW2ldKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAkKCcjbGluZUNoYXJ0VGltZUxpbmUnKS5hcHBlbmRUbygnI2xpbmVDaGFydFpvb20nKTtcclxuICAgICAgICAgIC8vIGFwcGVuZCB0aGUgem9vbSByZWN0YW5nbGVcclxuICAgICAgICAgIHpvb21Hcm91cC5hcHBlbmQoJ3JlY3QnKVxyXG4gICAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsICd6b29tJylcclxuICAgICAgICAgICAgICAuYXR0cignd2lkdGgnLCB0aGlzLmxpbmVDaGFydFdpZHRoKVxyXG4gICAgICAgICAgICAgIC5hdHRyKCdoZWlnaHQnLCBsaW5lQ2hhcnRIZWlnaHQpXHJcbiAgICAgICAgICAgICAgLmNhbGwoem9vbSlcclxuICAgICAgICAgICAgICAub24oJ2NsaWNrJywgZHJhZ2dlZClcclxuICAgICAgICAgICAgICAuY2FsbChkMy5kcmFnKClcclxuICAgICAgICAgICAgICAgICAgLm9uKCdkcmFnJywgZHJhZ2dlZClcclxuICAgICAgICAgICAgICApO1xyXG5cclxuICAgICAgLy8gYXBwZW5kIHRoZSBsZWdlbmQgZm9yIHRoZSBsaW5lIGNoYXJ0XHJcbiAgICAgIC8vIHZhcnMgZm9yIHRoZSBsZWdlbmRcclxuICAgICAgbGV0IGxlZ2VuZFdpZHRoID0gMTAwO1xyXG4gICAgICBsZXQgbGVnZW5kSGVpZ2h0ID0gNTA7XHJcblxyXG4gICAgICAvL3NlbGVjdCBhbGwgdGhlIGxpbmVzXHJcbiAgICAgIGxldCBjaGFydExpbmVzID0gZDMuc2VsZWN0QWxsKCcubGluZScpO1xyXG5cclxuICAgICAgLy9hcHBlbmQgYSBncm91cCBmb3IgdGhlIGxlZ2VuZFxyXG4gICAgICBzd2FybUxpbmVDaGFydFxyXG4gICAgICAgICAgLmFwcGVuZCgnZycpXHJcbiAgICAgICAgICAuYXR0cignaWQnLCAnbGluZUNoYXJ0TGVnZW5kJylcclxuICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKCcgKyBtYXJnaW4uYm90dG9tICsgJywnICsgKGxpbmVDaGFydEhlaWdodCArIG1hcmdpblRvTGVnZW5kKSArICcpJylcclxuICAgICAgICAgIC5zZWxlY3RBbGwoJ3JlY3QubGVnZW5kJylcclxuICAgICAgICAgIC5kYXRhKGNoYXJ0TGluZXMuX2dyb3Vwc1swXSlcclxuICAgICAgICAgIC5lbnRlcigpXHJcbiAgICAgICAgICAvL2FwcGVuZCB0aGUgd2hvbGUgbGVnZW5kIGluIGEgZWFjaCBmdW5jdGlvblxyXG4gICAgICAgICAgLmVhY2goZnVuY3Rpb24oZCwgaSkge1xyXG4gICAgICAgICAgICAgIGxldCBzcGFjaW5nID0gNjAwO1xyXG4gICAgICAgICAgICAgIGxldCB0ZXh0U3BhY2UgPSA0MDtcclxuICAgICAgICAgICAgICAvLyBhcHBlbmQgdGhlIHJlY3RhbmdsZXMgZm9yIHRoZSBsZWdlbmRcclxuICAgICAgICAgICAgICBkMy5zZWxlY3QodGhpcykuYXBwZW5kKCdyZWN0JylcclxuICAgICAgICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2xlZ2VuZCcpXHJcbiAgICAgICAgICAgICAgICAgIC5hdHRyKCd3aWR0aCcsIGxlZ2VuZFdpZHRoKVxyXG4gICAgICAgICAgICAgICAgICAuYXR0cignaGVpZ2h0JywgbGVnZW5kSGVpZ2h0KVxyXG4gICAgICAgICAgICAgICAgICAuYXR0cigneCcsIChzcGFjaW5nICogaSkgKyAncHgnKVxyXG4gICAgICAgICAgICAgICAgICAuc3R5bGUoJ2ZpbGwnLCBkLnN0eWxlLnN0cm9rZSk7XHJcblxyXG4gICAgICAgICAgICAgIC8vIGFwcGVuZCB0aGUgdGV4dCBmb3IgdGhlIGxlZ2VuZFxyXG4gICAgICAgICAgICAgIGQzLnNlbGVjdCh0aGlzKS5hcHBlbmQoJ3RleHQnKVxyXG4gICAgICAgICAgICAgICAgICAuYXR0cignaWQnLCBkLmF0dHJpYnV0ZXMuaWQudmFsdWUgKyAnTGVnZW5kVGl0bGUnKVxyXG4gICAgICAgICAgICAgICAgICAuYXR0cignY2xhc3MnLCAnbGluZS1jaGFydC1sZWdlbmQtdGV4dCcpXHJcbiAgICAgICAgICAgICAgICAgIC5hdHRyKCd5JywgdGV4dFNwYWNlKVxyXG4gICAgICAgICAgICAgICAgICAuYXR0cigneCcsIChzcGFjaW5nICogaSArIGxlZ2VuZFdpZHRoICsgMTApICsgJ3B4JylcclxuICAgICAgICAgICAgICAgICAgLnRleHQoZC5hdHRyaWJ1dGVzLm5hbWUudmFsdWUgKyAnOiAnKTtcclxuXHJcbiAgICAgICAgICAgICAgLy9hcHBlbmQgdGhlIHRleHQgZm9yIHRoZSB2YWx1ZSBvZiB0aGUgbGluZVxyXG4gICAgICAgICAgICAgIGQzLnNlbGVjdCh0aGlzKS5hcHBlbmQoJ3RleHQnKVxyXG4gICAgICAgICAgICAgICAgICAuYXR0cignaWQnLCBkLmF0dHJpYnV0ZXMuaWQudmFsdWUgKyAnVmFsdWUnKVxyXG4gICAgICAgICAgICAgICAgICAuYXR0cignY2xhc3MnLCAnbGluZS1jaGFydC1sZWdlbmQtdGV4dCcpXHJcbiAgICAgICAgICAgICAgICAgIC5hdHRyKCd5JywgdGV4dFNwYWNlKVxyXG4gICAgICAgICAgICAgICAgICAuYXR0cigneCcsIChzcGFjaW5nICogaSArIGxlZ2VuZFdpZHRoICtcclxuICAgICAgICAgICAgICAgICAgICAgIC8vdGhlIG5leHQgZXhwcmVzc2lvbiBnZXRzIHRoZSB0ZXh0IGxlbmd0aFxyXG4gICAgICAgICAgICAgICAgICAgICAgZDMuc2VsZWN0KCcjJyArIGQuYXR0cmlidXRlcy5pZC52YWx1ZSArICdMZWdlbmRUaXRsZScpLm5vZGUoKS5nZXRDb21wdXRlZFRleHRMZW5ndGgoKSArXHJcbiAgICAgICAgICAgICAgICAgICAgICAxMCkgKyAncHgnKVxyXG4gICAgICAgICAgICAgICAgICAudGV4dCgnMC4wJyk7XHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgIC8vYXBwZW5kIGEgbGVnZW5kIGdyb3VwIGZvciB0aGUgdHJlbmQgY2hhcnRzXHJcbiAgICAgIHN3YXJtTGluZUNoYXJ0XHJcbiAgICAgICAgICAuYXBwZW5kKCdnJylcclxuICAgICAgICAgIC5hdHRyKCdpZCcsICd0cmVuZENoYXJ0TGVnZW5kJylcclxuICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKCcgKyBtYXJnaW4uYm90dG9tICsgJywnICsgKGxpbmVDaGFydEhlaWdodCArIG1hcmdpblRvTGVnZW5kKSArICcpJylcclxuICAgICAgICAgIC5zZWxlY3RBbGwoJ3JlY3QubGVnZW5kJylcclxuICAgICAgICAgIC5kYXRhKFsnNSUgLSA5NSUnLCAnMjUlIC0gNzUlJywgJ01lZGlhbiddKVxyXG4gICAgICAgICAgLmVudGVyKClcclxuICAgICAgICAgIC8vYXBwZW5kIHRoZSB3aG9sZSBsZWdlbmQgaW4gYSBlYWNoIGZ1bmN0aW9uXHJcbiAgICAgICAgICAuZWFjaChmdW5jdGlvbihkLCBpKSB7XHJcbiAgICAgICAgICAgICAgbGV0IHNwYWNpbmcgPSA4MDA7XHJcbiAgICAgICAgICAgICAgbGV0IHRleHRTcGFjZSA9IDQwO1xyXG4gICAgICAgICAgICAgIC8vIGFwcGVuZCB0aGUgcmVjdGFuZ2xlcyBmb3IgdGhlIGxlZ2VuZFxyXG4gICAgICAgICAgICAgIGQzLnNlbGVjdCh0aGlzKS5hcHBlbmQoJ3JlY3QnKVxyXG4gICAgICAgICAgICAgICAgICAuYXR0cignY2xhc3MnLCAnbGVnZW5kJylcclxuICAgICAgICAgICAgICAgICAgLmF0dHIoJ3dpZHRoJywgbGVnZW5kV2lkdGgpXHJcbiAgICAgICAgICAgICAgICAgIC5hdHRyKCdoZWlnaHQnLCBsZWdlbmRIZWlnaHQpXHJcbiAgICAgICAgICAgICAgICAgIC5hdHRyKCd4JywgKHNwYWNpbmcgKiBpKSArICdweCcpXHJcbiAgICAgICAgICAgICAgICAgIC5zdHlsZSgnZmlsbCcsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgaWYgKGkgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJyM3NGE5Y2YnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICcjMDQ1YThkJztcclxuICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICcjNTI1MjUyJztcclxuICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgIC8vIGFwcGVuZCB0aGUgdGV4dCBmb3IgdGhlIGxlZ2VuZFxyXG4gICAgICAgICAgICAgIGQzLnNlbGVjdCh0aGlzKS5hcHBlbmQoJ3RleHQnKVxyXG4gICAgICAgICAgICAgICAgICAuYXR0cignY2xhc3MnLCAnbGluZS1jaGFydC1sZWdlbmQtdGV4dCcpXHJcbiAgICAgICAgICAgICAgICAgIC5hdHRyKCd5JywgdGV4dFNwYWNlKVxyXG4gICAgICAgICAgICAgICAgICAuYXR0cigneCcsIChzcGFjaW5nICogaSArIGxlZ2VuZFdpZHRoICsgMTApICsgJ3B4JylcclxuICAgICAgICAgICAgICAgICAgLnRleHQoZCk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgJCgnI3RyZW5kQ2hhcnRMZWdlbmQnKS5oaWRlKCk7XHJcblxyXG4gICAgICB0aGlzLmluaXRMaW5lQ2hhcnRCdXR0b25zKClcclxuXHJcblxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSW5pdCBsaW5lIGNoYXJ0IGJ1dHRvbiBsaXN0ZW5lcnNcclxuICAgKi9cclxuICBpbml0TGluZUNoYXJ0QnV0dG9ucygpIHtcclxuICAgICAgLy8gYWRkIHRoZSBMaW5lIGNoYXJ0IGJ1dHRvbnMgdG8gdGhlIGZlYXR1cmUgcGFuZWxcclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnN3YXJtX2ZlYXR1cmVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICBsZXQgY2FwaXRhbGl6ZWRfZmVhdHVyZV9zdHJpbmcgPSB0aGlzLnN3YXJtX2ZlYXR1cmVzW2ldLnNwbGl0KCdfJykuam9pbignICcpO1xyXG4gICAgICAgICAgY2FwaXRhbGl6ZWRfZmVhdHVyZV9zdHJpbmcgPSBjYXBpdGFsaXplZF9mZWF0dXJlX3N0cmluZy5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIGNhcGl0YWxpemVkX2ZlYXR1cmVfc3RyaW5nLnNsaWNlKDEpO1xyXG5cclxuICAgICAgICAgICQoJyNsaW5lLWNoYXJ0LWZlYXR1cmUtY2hlY2tib3hlcycpXHJcbiAgICAgICAgICAgICAgLmFwcGVuZCgnPHRyPjx0aD4gPGRpdiBjbGFzcz1cInByZXR0eSBwLXN3aXRjaCBwLWZpbGwgcC1iaWdnZXJcIj48aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgY2xhc3M9XCJsaW5lLWNoYXJ0LWNoZWNrLWJveFwiIGlkPVwiZHJhdy0nICtcclxuICAgICAgICAgICAgICAgICAgdGhpcy5zd2FybV9mZWF0dXJlc1tpXSArICdcIiBkYXRhPVwiIycgKyB0aGlzLnN3YXJtX2ZlYXR1cmVzW2ldICsgJ0xpbmVcIiAvPjxkaXYgY2xhc3M9XCJzdGF0ZVwiPjxsYWJlbD4nICtcclxuICAgICAgICAgICAgICAgICAgY2FwaXRhbGl6ZWRfZmVhdHVyZV9zdHJpbmcgKyAnPC9sYWJlbD48L2Rpdj48L2Rpdj48L3RoPjwvdHI+Jyk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgICQoJy5saW5lLWNoYXJ0LWNoZWNrLWJveCcpLmNoYW5nZShmdW5jdGlvbigpIHtcclxuICAgICAgICAgIGxldCBjaGVja2JveCA9ICQodGhpcyk7XHJcbiAgICAgICAgICBpZiAoY2hlY2tib3gucHJvcCgnY2hlY2tlZCcpKSB7XHJcbiAgICAgICAgICAgICAgJChjaGVja2JveC5hdHRyKCdkYXRhJykpLnNob3coKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgJChjaGVja2JveC5hdHRyKCdkYXRhJykpLmhpZGUoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgfVxyXG5cclxufVxyXG5cclxuLyoqXHJcbiAqIEFkZCBhIHRyZW5kIGNoYXJ0IHNob3dpbmcgbWVkaWFuIGFuZCBwZXJjZW50aWxlc1xyXG4gKiAvLyAtIHdoaWNoIGZlYXR1cmVcclxuICovXHJcbmV4cG9ydCBjbGFzcyBUcmVuZENoYXJ0IGV4dGVuZHMgQ2hhcnR7XHJcbiAgICBjb25zdHJ1Y3RvcihlbGVtLCBzd2FybURhdGEpe1xyXG4gICAgICBzdXBlcihzd2FybURhdGEpO1xyXG4gICAgICB0aGlzLmVsZW0gPSBlbGVtO1xyXG5cclxuICAgICAgdGhpcy50cmVuZGNoYXJ0KCk7XHJcbiAgICAgIC8vdGhpcy5kaXNhYmxlTGluZUNoYXJ0KCk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIGRpc2FibGVMaW5lQ2hhcnQoKSB7XHJcbiAgICAgICAgJCgnLmxpbmVDaGFydEJ1dHRvbicpLnByb3AoJ2NoZWNrZWQnLCBmYWxzZSkucHJvcCgnZGlzYWJsZWQnLCB0cnVlKTtcclxuICAgICAgICAkKCcubGluZS1jaGFydC1jaGVjay1ib3gnKS5hdHRyKCdkaXNhYmxlZCcsIHRydWUpO1xyXG4gICAgICAgICQoJy5saW5lQ2hhcnRMaW5lJykuYXR0cigndmlzaWJpbGl0eScsICdoaWRkZW4nKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgdHJlbmRjaGFydCgpe1xyXG4gICAgLy8gY2hlY2sgd2hpY2ggZmVhdHVyZSB0byBkaXNwbGF5IGluIHRoZSB0cmVuZCBjaGFydFxyXG4gICAgbGV0IGZlYXR1cmUgPSAnJztcclxuICAgIGlmICh0aGlzLmVsZW1bJ2lkJ10udG9Mb3dlckNhc2UoKS5pbmNsdWRlcygnc3BlZWQnKSkge1xyXG4gICAgICAgIGZlYXR1cmUgPSAnc3BlZWQnO1xyXG4gICAgfSBlbHNlIGlmICh0aGlzLmVsZW1bJ2lkJ10udG9Mb3dlckNhc2UoKS5pbmNsdWRlcygnYWNjZWxlcmF0aW9uJykpIHtcclxuICAgICAgICBmZWF0dXJlID0gJ2FjY2VsZXJhdGlvbic7XHJcbiAgICB9IGVsc2UgaWYgKHRoaXMuZWxlbVsnaWQnXS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKCdkaXN0YW5jZV9jZW50cm9pZCcpKSB7XHJcbiAgICAgICAgZmVhdHVyZSA9ICdkaXN0YW5jZV9jZW50cm9pZCc7XHJcbiAgICB9IGVsc2UgaWYgKHRoaXMuZWxlbVsnaWQnXS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKCdtaWRsaW5lX29mZnNldCcpKSB7XHJcbiAgICAgICAgZmVhdHVyZSA9ICdtaWRsaW5lX29mZnNldCc7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIC8vIGRhdGEgaXMgbm90IGxvYWRlZCBmdWxseSAtLSByZXR1cm5cclxuICAgIC8vaWYgKCFkYXRhc2V0WzBdW2ZlYXR1cmVdKSB7XHJcbiAgICAvLyAgICByZXR1cm47XHJcbiAgICAvL31cclxuICAgIC8vIGNoYW5nZSB0byB0aGUgdHJlbmQgY2hhcnQgbGVnZW5kXHJcbiAgICAkKCcjbGluZUNoYXJ0TGVnZW5kJykuaGlkZSgpO1xyXG4gICAgJCgnI3RyZW5kQ2hhcnRMZWdlbmQnKS5zaG93KCk7XHJcbiAgICAvLyBjaGVjayBpZiBhbHJlYWR5IGNvbXB1dGVkIGFuZCBvbmx5IGhpZGRlblxyXG4gICAgaWYgKCEkKCgnIycgKyBmZWF0dXJlICsgJ1RyZW5kQ2hhcnQnKSkubGVuZ3RoKSB7XHJcbiAgICAgICAgLy8gZ2V0IHRoZSBkYXRhIGZvciB0aGUgdHJlbmQgY2hhcnRcclxuICAgICAgICBsZXQgdHJlbmRDaGFydERhdGEgPSBbXTtcclxuICAgICAgICBsZXQgbnVtX2FuaW1hbHMgPSBhbmltYWxJZHMubGVuZ3RoO1xyXG4gICAgICAgIC8vIGNhbGN1bGF0ZSB0aGUgcGVyY2V0aWxlcyBmb3IgZXZlcnkgdGltZSBzdGVwXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzd2FybURhdGEubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgbGV0IHRtcCA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IG51bV9hbmltYWxzOyBqKyspIHtcclxuICAgICAgICAgICAgICAgIGlmIChkYXRhc2V0W2kgKiBudW1fYW5pbWFscyArIGpdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wLnB1c2goZGF0YXNldFtpICogbnVtX2FuaW1hbHMgKyBqXVtmZWF0dXJlXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdHJlbmRDaGFydERhdGEucHVzaChwZXJjZW50aWxlc0xpbmVDaGFydCh0bXApKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy9hZ2dyZWdhdGUgYW5kIGF2ZXJhZ2UgdGhlIHRyZW5kQ2hhcnREYXRhIHRvIHRoaXMubGluZUNoYXJ0V2lkdGggZGF0YSBwb2ludHNcclxuICAgICAgICBpZiAodHJlbmRDaGFydERhdGEubGVuZ3RoID4gdGhpcy5saW5lQ2hhcnRXaWR0aCkge1xyXG4gICAgICAgICAgICBsZXQgdG1wVHJlbmRDaGFydERhdGEgPSBbXTtcclxuXHJcbiAgICAgICAgICAgIC8vIFtwZXJjMDUscGVyYzI1LHBlcmM1MCxwZXJjNzUscGVyYzk1XVxyXG4gICAgICAgICAgICBsZXQgdG1wID0gWzAsIDAsIDAsIDAsIDBdO1xyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0cmVuZENoYXJ0RGF0YS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgLy8gYWdncmVnYXRlXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRtcC5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRtcFtqXSArPSB0cmVuZENoYXJ0RGF0YVtpXVtqXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIGRpdmlkZVxyXG4gICAgICAgICAgICAgICAgaWYgKGkgJSByYXRpbyA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdG1wLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRtcFtqXSArPSB0bXBbal0gLyByYXRpbztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy9hZGQgdG8gdGhlXHJcbiAgICAgICAgICAgICAgICAgICAgdG1wVHJlbmRDaGFydERhdGEucHVzaCh0bXApO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFtwZXJjMDUscGVyYzI1LHBlcmM1MCxwZXJjNzUscGVyYzk1XVxyXG4gICAgICAgICAgICAgICAgICAgIHRtcCA9IFswLCAwLCAwLCAwLCAwXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0cmVuZENoYXJ0RGF0YSA9IHRtcFRyZW5kQ2hhcnREYXRhO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBnZXQgbWluIGFuZCBtYXggZm9yIHRoZSBub3JtYWxpemF0aW9uXHJcbiAgICAgICAgbGV0IG1pbiA9IGQzLm1pbih0cmVuZENoYXJ0RGF0YSwgZnVuY3Rpb24oZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZFswXTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBsZXQgbWF4ID0gZDMubWF4KHRyZW5kQ2hhcnREYXRhLCBmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBkWzRdO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGxldCBub3JtYWxpemF0aW9uU2NhbGUgPSBkMy5zY2FsZUxpbmVhcigpLmRvbWFpbihbbWluLCBtYXhdKS5yYW5nZShbMCwgMTAwXSk7XHJcblxyXG4gICAgICAgIC8vIGFkZCBhIGdyb3VwIGZvciB0aGUgdHJlbmQgY2hhcnRcclxuICAgICAgICBsZXQgdHJlbmRDaGFydCA9IHpvb21Hcm91cC5hcHBlbmQoJ2cnKVxyXG4gICAgICAgICAgICAuYXR0cignaWQnLCAoZmVhdHVyZSArICdUcmVuZENoYXJ0JykpXHJcbiAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsICd0cmVuZENoYXJ0RGF0YScpO1xyXG4gICAgICAgIC8vIGFwcGVuZCB0aGUgem9vbSByZWN0YW5nbGUgYWdhaW4gdG8gdGhlIGVuZCBvZiB0aGUgZ3JvdXBcclxuICAgICAgICAkKCcuem9vbScpLmFwcGVuZFRvKCcjbGluZUNoYXJ0Wm9vbScpO1xyXG4gICAgICAgICQoJyNsaW5lQ2hhcnRUaW1lTGluZScpLmFwcGVuZFRvKCcjbGluZUNoYXJ0Wm9vbScpO1xyXG4gICAgICAgIC8vIHZhciB0byBzYXZlIHRoZSBmdW5jdGlvbnMgZm9yIHRoZSB6b29tXHJcbiAgICAgICAgdHJlbmRDaGFydHNab29tW2ZlYXR1cmVdID0ge307XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy50cmVuZENoYXJ0c0VsZW0ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgLy8gZnVuY3Rpb25zIGZvciB0aGUgdXBwZXIgYW5kIGlubmVyIGFyZWFzIGFuZCB0aGUgbWVkaWFuXHJcbiAgICAgICAgICAgIGxldCB0ZW1wO1xyXG4gICAgICAgICAgICAvLyBsb3dlciBvdXRlciBhcmVhIGFuZCBsb3dlciBpbm5lciBhcmVhXHJcbiAgICAgICAgICAgIGlmIChpIDwgMikge1xyXG4gICAgICAgICAgICAgICAgdGVtcCA9IGQzLmFyZWEoKVxyXG4gICAgICAgICAgICAgICAgICAgIC54KGZ1bmN0aW9uKGQsIGopIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHgoaik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAueTAoZnVuY3Rpb24oZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geShub3JtYWxpemF0aW9uU2NhbGUoZFsoaSArIDEpXSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLnkxKGZ1bmN0aW9uKGQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHkobm9ybWFsaXphdGlvblNjYWxlKGRbaV0pKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBtZWRpYW4gbGluZVxyXG4gICAgICAgICAgICBlbHNlIGlmIChpID09PSAyKSB7XHJcbiAgICAgICAgICAgICAgICB0ZW1wID0gZDMubGluZSgpXHJcbiAgICAgICAgICAgICAgICAgICAgLngoZnVuY3Rpb24oZCwgaikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geChqKTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC55KGZ1bmN0aW9uKGQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHkobm9ybWFsaXphdGlvblNjYWxlKGRbaV0pKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyB1cHBlciBpbm5lciBhcmVhIGFuZCB1cHBlciBvdXRlciBhcmVhXHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGkgPiAyKSB7XHJcbiAgICAgICAgICAgICAgICB0ZW1wID0gZDMuYXJlYSgpXHJcbiAgICAgICAgICAgICAgICAgICAgLngoZnVuY3Rpb24oZCwgaikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geChqKTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC55MChmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB5KG5vcm1hbGl6YXRpb25TY2FsZShkW2ldKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAueTEoZnVuY3Rpb24oZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geShub3JtYWxpemF0aW9uU2NhbGUoZFsoaSAtIDEpXSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIHNhdmUgdGhpcyBmb3IgdGhlIGxhdGVyIHpvb21cclxuICAgICAgICAgICAgdHJlbmRDaGFydHNab29tW2ZlYXR1cmVdW3RoaXMudHJlbmRDaGFydHNFbGVtW2ldXSA9IHRlbXA7XHJcbiAgICAgICAgICAgIC8vIGFwcGVuZCBpdCB0byB0aGUgcGF0aFxyXG4gICAgICAgICAgICB0cmVuZENoYXJ0LmFwcGVuZCgncGF0aCcpXHJcbiAgICAgICAgICAgICAgICAuZGF0YShbdHJlbmRDaGFydERhdGFdKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgdGhpcy50cmVuZENoYXJ0c0VsZW1baV0pXHJcbiAgICAgICAgICAgICAgICAuYXR0cignZCcsIHRlbXApO1xyXG4gICAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gc2hvdyB0aGUgdHJlbmQgY2hhcnRcclxuICAgICAgICAkKCgnIycgKyBmZWF0dXJlICsgJ1RyZW5kQ2hhcnQnKSkuc2hvdygpO1xyXG4gICAgfVxyXG59XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBVcGRhdGUgdGhlIGxpbmUgY2hhcnQgZmllbGRzIGFuZCB0aGUgbGluZSBjaGFydCB0aW1lIGxpbmVcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVMaW5lQ2hhcnQoKSB7XHJcbiAgICBpZiAoZDMuc2VsZWN0KCcjbGluZUNoYXJ0VGltZUxpbmUnKSAmJiBzd2FybURhdGFbTWF0aC5jZWlsKGluZGV4VGltZSAvIHJhdGlvKV0pIHtcclxuICAgICAgICBsZXQgdG1wID0gTWF0aC5jZWlsKGluZGV4VGltZSAvIHJhdGlvKTtcclxuICAgICAgICAvL3VwZGF0ZSB0aGUgbGluZSBjaGFydCBsZWdlbmQgdGV4dCB2YWx1ZXMgcGVyIHNlY29uZFxyXG4gICAgICAgIGlmIChpbmRleFRpbWUgJSAyNSA9PT0gMCkge1xyXG4gICAgICAgICAgICAvLyBUT0RPIGNoYW5nZSB0aGlzIHRvIGEgbW9yZSBtb2R1bGFyIHdheVxyXG4gICAgICAgICAgICBkMy5zZWxlY3QoJyNjb252ZXhfaHVsbF9hcmVhTGluZVZhbHVlJylcclxuICAgICAgICAgICAgICAgIC50ZXh0KChzd2FybURhdGFbdG1wXVsnY29udmV4X2h1bGxfYXJlYSddKSArICdtbcKyJyk7XHJcbiAgICAgICAgICAgIGQzLnNlbGVjdCgnI3NwZWVkTGluZVZhbHVlJylcclxuICAgICAgICAgICAgICAgIC50ZXh0KHN3YXJtRGF0YVt0bXBdWydzcGVlZCddICsgJ21tL3MnKTtcclxuICAgICAgICAgICAgZDMuc2VsZWN0KCcjYWNjZWxlcmF0aW9uTGluZVZhbHVlJylcclxuICAgICAgICAgICAgICAgIC50ZXh0KHN3YXJtRGF0YVt0bXBdWydhY2NlbGVyYXRpb24nXSArICdtbS9zwrInKTtcclxuICAgICAgICAgICAgZDMuc2VsZWN0KCcjZGlzdGFuY2VfY2VudHJvaWRMaW5lVmFsdWUnKVxyXG4gICAgICAgICAgICAgICAgLnRleHQoc3dhcm1EYXRhW3RtcF1bJ2Rpc3RhbmNlX2NlbnRyb2lkJ10gKyAnbW0nKTtcclxuICAgICAgICAgICAgZDMuc2VsZWN0KCcjZGlyZWN0aW9uTGluZVZhbHVlJylcclxuICAgICAgICAgICAgICAgIC50ZXh0KHN3YXJtRGF0YVt0bXBdWydkaXJlY3Rpb24nXSArICfCsCcpO1xyXG4gICAgICAgICAgICBkMy5zZWxlY3QoJyNwb2xhcmlzYXRpb25MaW5lVmFsdWUnKVxyXG4gICAgICAgICAgICAgICAgLnRleHQoc3dhcm1EYXRhW3RtcF1bJ3BvbGFyaXNhdGlvbiddKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZDMuc2VsZWN0KCcjbGluZUNoYXJ0VGltZUxpbmUnKVxyXG4gICAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgnICsgem9vbUZ1bmN0aW9uKHRtcCkgKyAnLDApJyk7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuXHJcblxyXG4vL3JhdGlvID0gTWF0aC5jZWlsKHN3YXJtRGF0YS5sZW5ndGggLyB0aGlzLmxpbmVDaGFydFdpZHRoKTtcclxuICAgIC8vY29uc29sZS5sb2coc3dhcm1EYXRhKTtcclxuICAgIC8vbGV0IHJlc3VsdCA9IHN3YXJtRGF0YS5tYXAob2JqID0+ICh7dGltZTpvYmoudGltZSwgZGlzdF9jZW46b2JqLmRpc3RhbmNlX2NlbnRyb2lkfSkpO1xyXG4gICAgLy9jb25zb2xlLmxvZyhyZXN1bHQpO1xyXG5cclxuXHJcblxyXG5cclxuXHJcbi8vbGluZWNoYXJ0LmRyYXcoKTtcclxuLy9sZXQgc3dhcm1EYXQgPSBuZXcgc3dhcm1EYXRhKCk7XHJcbiIsIi8qZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLWxldHMqL1xyXG4vKmdsb2JhbCB3aW5kb3csICQsIGQzICovXHJcbmltcG9ydCB7XHJcbiAgICBoaWVyYXJjaHlDb2xvcnMsXHJcbiAgICBjb2xvcnMsXHJcbiAgICBjaGFuZ2VIaWVyYXJjaHlMZWdlbmRcclxufSBmcm9tICcuL2hpZXJhcmNoeS5qcyc7XHJcblxyXG5cclxuXHJcbmV4cG9ydCBsZXQgbmV0d29ya0F1dG8gPSBmYWxzZTsgLy8gaWYgdHJ1ZSB0aGUgbmV0d29yayBlZGdlIGxpbWl0IGlzIGF1dG9tYXRpY2FsbHkgc3VnZ2VzdGVkXHJcbmV4cG9ydCBsZXQgbmV0d29ya0xpbWl0ID0gMC41O1xyXG5leHBvcnQgbGV0IHNob3dOZXR3b3JrSGllcmFyY2h5O1xyXG5leHBvcnQgbGV0IG5ldHdvcmtDb2xvciA9IHt9O1xyXG5leHBvcnQgbGV0IG5ldHdvcmtJRDtcclxuZXhwb3J0IGxldCBuZXR3b3JrQmFja2dyb3VuZCA9IHRydWU7XHJcbmV4cG9ydCBsZXQgbmV0d29ya0JhY2tncm91bmRMaW1pdCA9IDE7IC8vZHJhdyBiYWNrZ3JvdW5kIGxpbmUgaWYgbGltaXQgaXMgZXhjZWVkZWRcclxuLy8gZml4ZWQgY29sb3Igc2NhbGUgZm9yIHRoZSBuZXR3b3JrXHJcblxyXG4vKipcclxuICogY29sb3Igc2NhbGUgZm9yIG5ldHdvcmsgLSByYW5nZSBpcyBkZWZpbmVkIGR5bmFtaWMgYmFzZWQgb24gdGhlIGhpZXJhcmhjeSBjb2xvclxyXG4gKi9cclxuZXhwb3J0IGxldCBuZXR3b3JrQ29sb3JTY2FsZSA9IGQzLnNjYWxlVGhyZXNob2xkKClcclxuICAgIC5kb21haW4oXHJcbiAgICAgICAgWzAsIC4xLCAuMiwgLjMsIC40LCAuNSwgLjYsIC43LCAuOCwgLjksIDFdXHJcbiAgICApLnJhbmdlKFsnI2Y3ZmJmZicsICcjZGVlYmY3JywgJyNjNmRiZWYnLCAnIzllY2FlMScsICcjNmJhZWQ2JywgJyM0MjkyYzYnLCAnIzIxNzFiNScsICcjMDg1MTljJywgJyMwODMwNmInXSk7XHJcblxyXG5cclxuLyoqXHJcbiAqIEFkZCB0aGUgbmV0d29yayAgc2VsZWN0IGJ1dHRvbnMgYW5kIGhpZXJhcmNoeSBjaGVja2JveGVzIHRvIHRoZSBuZXR3b3JrIG1vZGFsXHJcbiAqIEBwYXJhbSB7YXJyYXl9IGRhdGEgLSBBcnJheSBvZiBuZXR3b3JrIGRhdGFcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBhZGROZXR3b3JrQnV0dG9ucyhkYXRhKSB7XHJcbiAgICBpZiAoZGF0YS5sZW5ndGgpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGRhdGFbaV1bJ2ZpbmlzaGVkJ10pIHtcclxuICAgICAgICAgICAgICAgICQoJyNuZXR3b3Jrcy1oaWVyYXJjaGllcy10YWJsZSB0Ym9keScpXHJcbiAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgnPHRyPjx0ZD4nICsgZGF0YVtpXVsnbmFtZSddICsgJzwvdGQ+ICcgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHRkPiA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tZGVmYXVsdFwiIGRhdGE9JyArIGRhdGFbaV1bJ25ldHdvcmtfaWQnXSArICcgbmFtZT0nICsgZGF0YVtpXVsnbmFtZSddICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJz48c3BhbiBjbGFzcz1cIm1kaSBtZGktZ3JhcGhxbFwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvc3Bhbj48L2J1dHRvbj48L3RkPiAnICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzx0ZD48ZGl2IGNsYXNzPVwicHJldHR5IHAtc3dpdGNoIHAtZmlsbFwiPjxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBjbGFzcz1cImhpZWFyY2h5LWNoZWNrYm94XCIgZGF0YT1cIicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhW2ldWyduZXR3b3JrX2lkJ10gKyAnXCIgbmFtZT1cIicgKyBkYXRhW2ldWyduYW1lJ10gKyAnXCI+PGRpdiBjbGFzcz1cInN0YXRlIHAtc3VjY2Vzc1wiPjxsYWJlbD48L2xhYmVsPjwvZGl2PjwvZGl2PjwvdGQ+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8dGQ+LS0tPC90ZD4nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICc8dGQ+PGRpdiBjbGFzcz1cInByZXR0eSBwLXN3aXRjaCBwLWZpbGxcIj48aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgY2xhc3M9XCJuZXR3b3JrLWhpZXJhcmNoeS1jaGVja2JveFwiIGRhdGE9XCInICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGF0YVtpXVsnbmV0d29ya19pZCddICsgJ1wiPjxkaXYgY2xhc3M9XCJzdGF0ZSBwLXN1Y2Nlc3NcIj48bGFiZWw+PC9sYWJlbD48L2Rpdj48L2Rpdj48L3RkPidcclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICAkKCcjbmV0d29ya3MtaGllcmFyY2hpZXMtdGFibGUnKVxyXG4gICAgICAgICAgICAuYXBwZW5kKCdUaGVyZSBpcyBubyBuZXR3b3JrIGRhdGEgZm9yIHRoaXMgZGF0YXNldCcpO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAgIFNldHRlclxyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbi8qKlxyXG4gKiBTZXQgdGhlIG5ldHdvcmsgYXV0byB2YWx1ZSAtIGlmIHRydWUgdGhhbiB0aGUgbmV0d29yayBsaW1pdCBpcyBzZXQgdG8gdGhlIDAuOTUgcGVyY2VudGlsZSBvZiBhbGwgdmFsdWVzXHJcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gdmFsdWVcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXROZXR3b3JrQXV0byh2YWx1ZSkge1xyXG4gICAgbmV0d29ya0F1dG8gPSB2YWx1ZTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFNldCB0aGUgbmV0d29yayBsaW1pdCB3aXRoIHRoZSBzcGVjaWZpYyBuZXR3b3JrIHNsaWRlciAtIGN1c3RvbVxyXG4gKiAwID0gc2ltaWxhciBhbmQgMSB1bnNpbWlsYXIgZm9yIHRoZSBzcGVjaWZpYyB0aW1lIG1vbWVudFxyXG4gKiBAcGFyYW0ge051bWJlcn0gdmFsdWUgLSBiZXR3ZWVuIDAgYW5kIDFcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXROZXR3b3JMaW1pdCh2YWx1ZSkge1xyXG4gICAgbmV0d29ya0xpbWl0ID0gdmFsdWU7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTZXQgdGhlIG5ldHdvcmsgaW4gaGllcmFyY2h5IChlLmcuIGgwKSBmaWx0ZXJcclxuICogQHBhcmFtIHtOdW1iZXJ9IGhpZXJhcmNoeSAtIGUuZy4gMC1uXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc2V0TmV0d29ya0hpZXJhcmNoeSh2YWx1ZSkge1xyXG4gICAgc2hvd05ldHdvcmtIaWVyYXJjaHkgPSB2YWx1ZTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFNldCB0aGUgbmV0d29yayBuZXR3b3JrIGlkIC0gbmVlZGVkIGZvciBoaWVyYXJjaHkgc3RhbmRhcmQgZGV2aWF0aW9uIGNvbG9yaW5nXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB2YWx1ZSAtIGUuZy4gMC1uXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc2V0TmV0d29ya0lEKHZhbHVlKSB7XHJcbiAgICBuZXR3b3JrSUQgPSB2YWx1ZTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFNldCBuZXR3b3JrIGNvbG9yIHNjYWxlIHJhbmdlXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBpZCAtIGlkIG9mIHRoZSBuZXR3b3JrXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc2V0bmV0d29ya0NvbG9yKG5ldHdvcmtfaWQpIHtcclxuICAgIC8vIGlmIGlkID0gLTEgc2V0IHRoZSBjb2xvciB0byBub3RoaW5nXHJcbiAgICBpZiAobmV0d29ya19pZCA+PSAwKSB7XHJcbiAgICAgICAgbmV0d29ya0NvbG9yWydoJyArIG5ldHdvcmtfaWRdID0gJyMwODMwNmInO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBuZXR3b3JrQ29sb3IgPSB7fTtcclxuICAgIH1cclxuICAgIGNoYW5nZUhpZXJhcmNoeUxlZ2VuZCgpO1xyXG59XHJcblxyXG4vKipcclxuICogU2V0IHRoZSBib29sZWFuIHZhbHVlIGZvciB0aGUgbmV0d29yayBiYWNrZ3JvdW5kIGNvbG9yXHJcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gdmFsdWUgLSB0cnVlIG9yIGZhbHNlXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc2V0TmV0d29ya0JhY2tncm91bmQodmFsdWUpIHtcclxuICAgIG5ldHdvcmtCYWNrZ3JvdW5kID0gdmFsdWU7XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogU2V0IHRoZSBuZXR3b3JrIGJhY2tncm91bmQgY29sb3IgbGltaXQgLSBkcmF3IGJhY2tncm91bmQgbGluZSBpZiBsaW1pdCBpcyBleGNlZWRlZFxyXG4gKiBAcGFyYW0ge0ludGVnZXJ9IHZhbHVlIC0gbmV3IGxpbWl0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc2V0TmV0d29ya0JhY2tncm91bmRMaW1pdCh2YWx1ZSkge1xyXG4gICAgbmV0d29ya0JhY2tncm91bmRMaW1pdCA9IHZhbHVlO1xyXG59IiwiLyplc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtbGV0cyovXHJcbi8qZ2xvYmFsIHdpbmRvdywgJCwgcGFyYW1ldGVycyAqL1xyXG5cclxubGV0IEpTT05BUElfTUlNRVRZUEUgPSAnYXBwbGljYXRpb24vdm5kLmFwaStqc29uJztcclxudmFyIHNvdXJjZTtcclxuXHJcbmltcG9ydCB7XHJcbiAgICBhZGRUb0RhdGFzZXQsXHJcbiAgICBzZXREYXRhU2V0UGVyY2VudGlsZSxcclxuICAgIHNldFN3YXJtRGF0YSxcclxuICAgIHNldE1ldGFEYXRhLFxyXG4gICAgc2V0RGF0YXNldEZlYXR1cmUsXHJcbiAgICBzZXROZXR3b3JrRGF0YSxcclxuICAgIHNldEhpZXJhcmNoeURhdGEsXHJcbiAgICBzZXRBbmltYWxJZHNcclxufSBmcm9tICcuL2V4cGxvcmUuanMnO1xyXG5cclxuaW1wb3J0IHtcclxuICAgIGFkZE5ldHdvcmtCdXR0b25zLFxyXG4gICAgc2V0TmV0d29ya0lEXHJcbn0gZnJvbSAnLi9uZXR3b3JrLmpzJztcclxuXHJcbmltcG9ydCB7XHJcbiAgICBlbmFibGVQbGF5QnV0dG9uLFxyXG4gICAgZGlzYWJsZVBsYXlCdXR0b24sXHJcbiAgICBhZGRBYnNvbHV0ZUZlYXR1cmVCdXR0b25zXHJcbn0gZnJvbSAnLi9oZWxwZXJzLmpzJztcclxuXHJcbmltcG9ydCB7XHJcbiAgICBzcGF0aWFsVmlld0luaXRcclxufSBmcm9tICcuL3NwYXRpYWxfdmlldy9zcGF0aWFsX3ZpZXcuanMnO1xyXG5cclxuLy8gaW1wb3J0IHtcclxuLy8gICAgIHJlc3BvbnNlUGFyYW1ldGVyc1xyXG4vLyB9IGZyb20gJy4vdmlzdWFsX3BhcmFtZXRlci5qcyc7XHJcblxyXG5cclxuLyoqXHJcbiAqIFN0cmVhbSB0aGUgbW92ZW1lbnQgZGF0YSBmcm9tIHRoZSBBUElcclxuICogTG9hZHMgb25seSB0aGUgZXhwbGljaXQgbW92ZW1lbnQgZGF0YVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHN0cmVhbU1vdmVtZW50RGF0YSgpIHtcclxuICAgIGlmICh3aW5kb3cuRXZlbnRTb3VyY2UpIHtcclxuICAgICAgICBzb3VyY2UgPSBuZXcgRXZlbnRTb3VyY2UoJy9hcGkvbW92ZW1lbnRfb25seS8nICsgcGFyYW1ldGVyc1snaWQnXSk7XHJcbiAgICAgICAgc291cmNlLm9ubWVzc2FnZSA9IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgaWYgKGUuZGF0YSA9PT0gJ2Nsb3NlJykge1xyXG4gICAgICAgICAgICAgICAgc291cmNlLmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAvLyBpZiBhbGwgYWpheCBxdWVyaWVzIGFyZSBjb21wZWx0ZSBpbml0aWFsaXplXHJcbiAgICAgICAgICAgICAgICAoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gY2hlY2tQZW5kaW5nUmVxdWVzdCgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCQuYWN0aXZlID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoY2hlY2tQZW5kaW5nUmVxdWVzdCwgMTAwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwYXRpYWxWaWV3SW5pdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGNoZWNrUGVuZGluZ1JlcXVlc3QsIDEwMCk7XHJcbiAgICAgICAgICAgICAgICB9KSgpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYWRkVG9EYXRhc2V0KEpTT04ucGFyc2UoZS5kYXRhKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBzb3VyY2UuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgIGlmIChlLnJlYWR5U3RhdGUgPT0gRXZlbnRTb3VyY2UuQ0xPU0VEKSB7XHJcbiAgICAgICAgICAgICAgICBhbGVydCgnU3RyZWFtaW5nIGVycm9yJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCBmYWxzZSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGFsZXJ0KCdXZWJicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgc3RyZWFtaW5nJyk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBHZXQgdGhlIHBlcmNlbnRpbGUgZGF0YSBmcm9tIHRoZSBhcGkgZXhwb3J0IHRvIGV4cGxvcmUuanNcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRQZXJjZW50aWxlKCkge1xyXG4gICAgbGV0IGRhdGFTZXRQZXJjZW50aWxlID0gW107XHJcbiAgICAkLmFqYXgoe1xyXG4gICAgICAgIHVybDogJy9hcGkvcGVyY2VudGlsZS8nICsgcGFyYW1ldGVyc1snaWQnXSxcclxuICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxyXG4gICAgICAgIHR5cGU6ICdHRVQnLFxyXG4gICAgICAgIGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD11dGYtOCcsXHJcbiAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAnQWNjZXB0JzogSlNPTkFQSV9NSU1FVFlQRVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICAgICAgICAvLyBjb252ZXJ0IHRoZSBkYXRhU2V0UGVyY2VudGlsZSBpbnRvIGFuIGFycmF5XHJcbiAgICAgICAgICAgIC8vIFttaW4sIHBlcmNlbnRpbGVfMSwuLi4scGVyY2VudGlsZV85LG1heF1cclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBkYXRhU2V0UGVyY2VudGlsZVtkYXRhW2ldWydmZWF0dXJlJ11dID0gW2RhdGFbaV1bJ21pbiddLCBkYXRhW2ldWydwMSddLCBkYXRhW2ldWydwMiddLCBkYXRhW2ldWydwMyddLCBkYXRhW2ldWydwNSddLCBkYXRhW2ldWydwNyddLCBkYXRhW2ldWydwOCddLCBkYXRhW2ldWydwOSddLCBkYXRhW2ldWydtYXgnXV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc2V0RGF0YVNldFBlcmNlbnRpbGUoZGF0YVNldFBlcmNlbnRpbGUpO1xyXG4gICAgICAgICAgICBhZGRBYnNvbHV0ZUZlYXR1cmVCdXR0b25zKGRhdGFTZXRQZXJjZW50aWxlKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEdldCB0aGUgc3dhcm0gZmVhdHVyZXMgZm9yIHRoZSBsaW5lIGNoYXJ0IGZyb20gdGhlIGFwaVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFN3YXJtRmVhdHVyZXMoKSB7XHJcbiAgICBjb25zdCBzd2FybV9mZWF0dXJlcyA9IFsnc3dhcm1fdGltZScsICdzd2FybV9zcGVlZCcsICdzd2FybV9hY2NlbGVyYXRpb24nLCAnc3dhcm1fY29udmV4X2h1bGxfYXJlYScsXHJcbiAgICAgICAgJ3N3YXJtX2Rpc3RhbmNlX2NlbnRyb2lkJywgJ3N3YXJtX2RpcmVjdGlvbicsICdzd2FybV9wb2xhcmlzYXRpb24nXHJcbiAgICBdO1xyXG5cclxuICAgIC8vIGdldCBhbGwgdGhlIG90aGVyIHN3YXJtIGZlYXR1cmVzIGZvciB0aGUgbGluZSBjaGFydFxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzd2FybV9mZWF0dXJlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICQuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogJy9hcGkvZGF0YXNldC8nICsgcGFyYW1ldGVyc1snaWQnXSArICcvJyArIHN3YXJtX2ZlYXR1cmVzW2ldLFxyXG4gICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxyXG4gICAgICAgICAgICB0eXBlOiAnR0VUJyxcclxuICAgICAgICAgICAgY29udGVudFR5cGU6ICdhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PXV0Zi04JyxcclxuICAgICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICAgJ0FjY2VwdCc6IEpTT05BUElfTUlNRVRZUEVcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGZlYXR1cmUgPSBzd2FybV9mZWF0dXJlc1tpXS5yZXBsYWNlKCdzd2FybV8nLCAnJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgc2V0U3dhcm1EYXRhKGRhdGEsIGZlYXR1cmUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBHZXQgdGhlIG1lYWRhdGEgaW5mb3JtYXRpb25cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRNZXRhRGF0YSgpIHtcclxuICAgICQuYWpheCh7XHJcbiAgICAgICAgdXJsOiAnL2FwaS9tZXRhZGF0YS8nICsgcGFyYW1ldGVyc1snaWQnXSxcclxuICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxyXG4gICAgICAgIHR5cGU6ICdHRVQnLFxyXG4gICAgICAgIGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD11dGYtOCcsXHJcbiAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAnQWNjZXB0JzogSlNPTkFQSV9NSU1FVFlQRVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICAgICAgICBzZXRNZXRhRGF0YShkYXRhKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEdldCB0aGUgbmV0d29yayBkYXRhc2V0cyBmb3IgdGhlIGJ1dHRvbnNcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXROZXR3b3JrRGF0YUJ1dHRvbigpIHtcclxuICAgICQuYWpheCh7XHJcbiAgICAgICAgdXJsOiAnL2FwaS9kYXRhc2V0L25ldHdvcmtzLycgKyBwYXJhbWV0ZXJzWydpZCddLFxyXG4gICAgICAgIGRhdGFUeXBlOiAnanNvbicsXHJcbiAgICAgICAgdHlwZTogJ0dFVCcsXHJcbiAgICAgICAgY29udGVudFR5cGU6ICdhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PXV0Zi04JyxcclxuICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICdBY2NlcHQnOiBKU09OQVBJX01JTUVUWVBFXHJcbiAgICAgICAgfSxcclxuICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgICAgIGFkZE5ldHdvcmtCdXR0b25zKGRhdGEpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59XHJcblxyXG4vKipcclxuICogR2V0IHRoZSBzcGVjaWZjIGZlYXR1cmVcclxuICogQHBhcmFtIHtTdHJpbmd9IGZlYXR1cmUgLSBmb3IgaW5zdGFuY2Ugc3BlZWQsIGFjY2VsZXJhdGlvbiBldGMuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGF0YXNldEZlYXR1cmUoZmVhdHVyZSkge1xyXG4gICAgJC5hamF4KHtcclxuICAgICAgICB1cmw6ICcvYXBpL2RhdGFzZXQvJyArIHBhcmFtZXRlcnNbJ2lkJ10gKyAnLycgKyBmZWF0dXJlLFxyXG4gICAgICAgIGRhdGFUeXBlOiAnanNvbicsXHJcbiAgICAgICAgdHlwZTogJ0dFVCcsXHJcbiAgICAgICAgY29udGVudFR5cGU6ICdhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PXV0Zi04JyxcclxuICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICdBY2NlcHQnOiBKU09OQVBJX01JTUVUWVBFXHJcbiAgICAgICAgfSxcclxuICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgICAgIC8vIGFkZCB0aGUgc3BlZWQgZmVhdHVyZSB0byB0aGUgZGF0YXNldFxyXG4gICAgICAgICAgICBzZXREYXRhc2V0RmVhdHVyZShkYXRhLCBmZWF0dXJlKTtcclxuICAgICAgICAgICAgZW5hYmxlUGxheUJ1dHRvbigpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59XHJcblxyXG4vKipcclxuICogR2V0IHRoZSBzcGVjaWZjIHN3YXJtIGZlYXR1cmVcclxuICogQHBhcmFtIHtTdHJpbmd9IGZlYXR1cmUgLSBmb3IgaW5zdGFuY2UgY2VudHJvaWQsIG1lZG9pZCBldGMuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0U3dhcm1EYXRhc2V0RmVhdHVyZShmZWF0dXJlKSB7XHJcbiAgICBkaXNhYmxlUGxheUJ1dHRvbigpO1xyXG4gICAgJC5hamF4KHtcclxuICAgICAgICB1cmw6ICcvYXBpL2RhdGFzZXQvJyArIHBhcmFtZXRlcnNbJ2lkJ10gKyAnLycgKyBmZWF0dXJlLFxyXG4gICAgICAgIGRhdGFUeXBlOiAnanNvbicsXHJcbiAgICAgICAgdHlwZTogJ0dFVCcsXHJcbiAgICAgICAgY29udGVudFR5cGU6ICdhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PXV0Zi04JyxcclxuICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICdBY2NlcHQnOiBKU09OQVBJX01JTUVUWVBFXHJcbiAgICAgICAgfSxcclxuICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgICAgIC8vIGFkZCB0aGUgc3BlZWQgZmVhdHVyZSB0byB0aGUgZGF0YXNldFxyXG4gICAgICAgICAgICBzZXRTd2FybURhdGEoZGF0YSwgZmVhdHVyZSk7XHJcbiAgICAgICAgICAgIGVuYWJsZVBsYXlCdXR0b24oKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEdldCB0aGUgbmV0d29yayBmb3IgdGhlIHNwZWNpZmljIG5ldHdvcmtfaWRcclxuICogQHBhcmFtIHtTdHJpbmd9IG5ldHdvcmtfaWQgLSB1bmlxdWUgbmV0d29yayBpZCBvZiBhIGRhdGFzZXQuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0TmV0d29ya0RhdGEobmV0d29ya19pZCkge1xyXG4gICAgJC5hamF4KHtcclxuICAgICAgICB1cmw6ICcvYXBpL2RhdGFzZXQvbmV0d29yay8nICsgcGFyYW1ldGVyc1snaWQnXSArICcvJyArIG5ldHdvcmtfaWQsXHJcbiAgICAgICAgZGF0YVR5cGU6ICdqc29uJyxcclxuICAgICAgICB0eXBlOiAnR0VUJyxcclxuICAgICAgICBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9dXRmLTgnLFxyXG4gICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgJ0FjY2VwdCc6IEpTT05BUElfTUlNRVRZUEVcclxuICAgICAgICB9LFxyXG4gICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICAgICAgaWYgKGRhdGEubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICBzZXROZXR3b3JrRGF0YShKU09OLnBhcnNlKGRhdGFbMF1bJ2RhdGEnXSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVuYWJsZVBsYXlCdXR0b24oKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIC8vIG5lZWRlZCBmb3Igc3RhbmRhcmQgRGV2aWF0aW9uIGluIGRlbmRyb2dyYW1cclxuICAgIHNldE5ldHdvcmtJRChuZXR3b3JrX2lkKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEdldCB0aGUgbmV0d29yayBoaWVyYXJjaHkgZm9yIHRoZSBzcGVjaWZpYyBuZXR3b3JrX2lkXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBuZXR3b3JrX2lkIC0gdW5pcXVlIG5ldHdvcmsgaWQgb2YgYSBkYXRhc2V0LlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldE5ldHdvcmtIaWVyYXJjaHlEYXRhKG5ldHdvcmtfaWQpIHtcclxuICAgICQuYWpheCh7XHJcbiAgICAgICAgdXJsOiAnL2FwaS9kYXRhc2V0L25ldHdvcmsvaGllcmFyY2h5LycgKyBwYXJhbWV0ZXJzWydpZCddICsgJy8nICsgbmV0d29ya19pZCxcclxuICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxyXG4gICAgICAgIHR5cGU6ICdHRVQnLFxyXG4gICAgICAgIGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD11dGYtOCcsXHJcbiAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAnQWNjZXB0JzogSlNPTkFQSV9NSU1FVFlQRVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICAgICAgICBpZiAoZGF0YS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHNldEhpZXJhcmNoeURhdGEoSlNPTi5wYXJzZShkYXRhWzBdWydoaWVyYXJjaHknXSksIG5ldHdvcmtfaWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVuYWJsZVBsYXlCdXR0b24oKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEdldCB0aGUgZGlzdGluY3QgYW5pbWFsIGlkcyBmb3IgYSBzcGVjaWZjIGRhdGFzZXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRBbmltYWxJZHMoKSB7XHJcbiAgICAkLmFqYXgoe1xyXG4gICAgICAgIHVybDogJy9hcGkvZGF0YXNldC8nICsgcGFyYW1ldGVyc1snaWQnXSArICcvYW5pbWFsX2lkcycsXHJcbiAgICAgICAgZGF0YVR5cGU6ICdqc29uJyxcclxuICAgICAgICB0eXBlOiAnR0VUJyxcclxuICAgICAgICBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9dXRmLTgnLFxyXG4gICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgJ0FjY2VwdCc6IEpTT05BUElfTUlNRVRZUEVcclxuICAgICAgICB9LFxyXG4gICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICAgICAgc2V0QW5pbWFsSWRzKGRhdGEpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59XHJcblxyXG4vLyAvKipcclxuLy8gICogVmlzdWFsIHBhcmFtZXRlciBzdWdnZXN0aW9uIGFqYXggcXVlcnlcclxuLy8gICogQHBhcmFtIHtBcnJheX0gdHJhY2tlZERhdGEgLSB0cmFja2VkIGRhdGEgd2l0aCAuXHJcbi8vICAqL1xyXG4vLyBleHBvcnQgZnVuY3Rpb24gZ2V0U3VnZ2VzdGVkUGFyYW1ldGVycyh0cmFja2VkRGF0YSkge1xyXG4vLyAgICAgJC5hamF4KHtcclxuLy8gICAgICAgICB1cmw6ICcvYXBpL2RhdGFzZXQvdmlzdWFsX3BhcmFtZXRlci8nICsgcGFyYW1ldGVyc1snaWQnXSxcclxuLy8gICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxyXG4vLyAgICAgICAgIHR5cGU6ICdQT1NUJyxcclxuLy8gICAgICAgICBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9dXRmLTgnLFxyXG4vLyAgICAgICAgIGhlYWRlcnM6IHtcclxuLy8gICAgICAgICAgICAgJ0FjY2VwdCc6IEpTT05BUElfTUlNRVRZUEVcclxuLy8gICAgICAgICB9LFxyXG4vLyAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHtcclxuLy8gICAgICAgICAgICAgcmVzcG9uc2VQYXJhbWV0ZXJzKGRhdGEpO1xyXG4vLyAgICAgICAgIH0sXHJcbi8vICAgICAgICAgZGF0YTogdHJhY2tlZERhdGFcclxuLy8gICAgIH0pO1xyXG4vL1xyXG4vLyB9XHJcbiIsIi8qZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLWxldHMqL1xyXG4vKmdsb2JhbCB3aW5kb3csJCwgZDMsIFBvbHlCb29sKi9cclxuLy8gaW1wb3J0ICogYXMgc3B2IGZyb20gJy4vc3BhdGlhbF92aWV3LmpzJztcclxuXHJcbmltcG9ydCB7XHJcbiAgICBuZXR3b3JrSGllcmFyY2h5XHJcbn0gZnJvbSAnLi9leHBsb3JlLmpzJztcclxuXHJcbmltcG9ydCB7XHJcbiAgICBpbmRleFRpbWUsXHJcbiAgICBhcnJheUFuaW1hbHMsXHJcbiAgICBzZXRBY3RpdmVBbmltYWxzLFxyXG4gICAgZGVjSW5kZXhUaW1lLFxyXG4gICAgZHJhd1xyXG59IGZyb20gJy4vc3BhdGlhbF92aWV3L3NwYXRpYWxfdmlldyc7XHJcblxyXG5pbXBvcnQge1xyXG4gICAgc2hvd05ldHdvcmtIaWVyYXJjaHksXHJcbiAgICBuZXR3b3JrQ29sb3JcclxufSBmcm9tICcuL25ldHdvcmsuanMnO1xyXG5cclxuaW1wb3J0IHtcclxuICAgIHN0YW5kYXJkRGV2aWF0aW9uXHJcbn0gZnJvbSAnLi9oZWxwZXJzLmpzJztcclxuXHJcbmxldCB6b29tR3JvdXA7IC8vIHpvb20gZ3JvdXAgZm9yIHRoZSBzcGVjaWZpYyBkZW5kcm9ncmFtXHJcbmxldCB0cmVlbWFwO1xyXG5sZXQgdG9vbHRpcERpdjtcclxubGV0IHNwYXRpYWxWaWV3OyAvLyBnZXQgdGhlIHNwYXRpYWwgdmlldyBzdmcgZnJvbSB0aGUgbWFpbiB2aXNcclxubGV0IHN2Z0xlZ2VuZDtcclxubGV0IGhpZXJhcmNoeUxldmVscyA9IHt9O1xyXG5sZXQgc2V0T3BlcmF0aW9uID0gJ3VuaW9uJztcclxubGV0IGlkOyAvLyBuZWVkZWQgZm9yIHRoZSBjb2xsYXBzZSBmdW5jdGlvblxyXG4vL1N0YXRpYyBjb2xvciBzY2FsZSBmb3IgdGhlIGRlbmRyb2dyYW0gdmFyaWFjbmUgY29sb3JpbmdcclxubGV0IHN0YW5kYXJkRGV2aWF0aW9uQ29sb3JTY2FsZSA9IGQzLnNjYWxlVGhyZXNob2xkKClcclxuICAgIC5kb21haW4oXHJcbiAgICAgICAgWzAsIC4xLCAuMiwgLjMsIC40LCAuNSwgLjYsIC43LCAuOCwgLjksIDFdXHJcbiAgICApXHJcbiAgICAucmFuZ2UoWycjZjdmYmZmJywgJyNkZWViZjcnLCAnI2M2ZGJlZicsICcjOWVjYWUxJywgJyM2YmFlZDYnLCAnIzQyOTJjNicsICcjMjE3MWI1JywgJyMwODUxOWMnLCAnIzA4MzA2YiddKTtcclxuXHJcbmV4cG9ydCBjb25zdCBtYXhOdW1iZXJIaWVyYXJjaGllcyA9IDQ7XHJcbmV4cG9ydCBsZXQgbmV0d29ya0hpZXJhcmNoeUlkcyA9IFtdO1xyXG5leHBvcnQgbGV0IGhpZXJhcmNoeUNvbG9ycyA9IHt9O1xyXG5leHBvcnQgbGV0IGhpZXJhcmNoeUdyb3VwU3RkZXYgPSB7fTtcclxuLy8gVE9ETyBhZGQgbW9yZSBjb2xvcnNcclxuZXhwb3J0IGxldCBjb2xvcnMgPSBbJyM3ZmM5N2YnLCAnIzM4NmNiMCcsICcjZTcyOThhJywgJyNmZjk5MDAnXTtcclxuXHJcbi8qKlxyXG4gKiBJbml0aWFsaXplIHRoZSBkZW5kcm9ncmFtXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaW5pdERlbmRyb2dyYW0oKSB7XHJcbiAgICAvLyBjb25zdGFuY3QgZmFjdG9ycyBmb3IgdGhlIGRlbmRncm9ncmFtXHJcbiAgICBsZXQgbWFyZ2luID0gMjAsXHJcbiAgICAgICAgd2lkdGggPSA1MDAwLFxyXG4gICAgICAgIGhlaWdodCA9IDUwMDA7XHJcblxyXG4gICAgLy8gem9vbSBmdW5jdGlvbiBmb3IgdGhlIGRlbmRyb2dyYW1cclxuICAgIGxldCB6b29tID0gZDMuem9vbSgpXHJcbiAgICAgICAgLnNjYWxlRXh0ZW50KFsxLCAxMF0pXHJcbiAgICAgICAgLm9uKCd6b29tJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIC8vY29uc3RyYWluZWQgem9vbWluZ1xyXG4gICAgICAgICAgICBkMy5ldmVudC50cmFuc2Zvcm0ueCA9IE1hdGgubWluKDAsIHdpZHRoICogKGQzLmV2ZW50LnRyYW5zZm9ybS5rIC0gMSksXHJcbiAgICAgICAgICAgICAgICBNYXRoLm1heCh3aWR0aCAqICgxIC0gZDMuZXZlbnQudHJhbnNmb3JtLmspLCBkMy5ldmVudC50cmFuc2Zvcm0ueCkpO1xyXG5cclxuICAgICAgICAgICAgZDMuZXZlbnQudHJhbnNmb3JtLnkgPSBNYXRoLm1pbigwLCBoZWlnaHQgKiAoZDMuZXZlbnQudHJhbnNmb3JtLmsgLSAxKSxcclxuICAgICAgICAgICAgICAgIE1hdGgubWF4KGhlaWdodCAqICgxIC0gZDMuZXZlbnQudHJhbnNmb3JtLmspLCBkMy5ldmVudC50cmFuc2Zvcm0ueSkpO1xyXG5cclxuICAgICAgICAgICAgLy8gdHJhbnNsYXRlIGFuZCBzY2FsZVxyXG4gICAgICAgICAgICB6b29tR3JvdXAuYXR0cigndHJhbnNmb3JtJywgZDMuZXZlbnQudHJhbnNmb3JtKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAvLyBzdmcgY29udGFpbmVyIGZvciB0aGUgZGVuZHJvZ3JhbVxyXG4gICAgbGV0IHN2ZyA9IGQzLnNlbGVjdCgnI2RlbmRyb2dyYW0tcGFuZWwnKVxyXG4gICAgICAgIC5jbGFzc2VkKCdzdmctZGVuZHJvZ3JhbS1jb250YWluZXInLCB0cnVlKVxyXG4gICAgICAgIC5hcHBlbmQoJ3N2ZycpXHJcbiAgICAgICAgLmF0dHIoJ3ByZXNlcnZlQXNwZWN0UmF0aW8nLCAneE1pbllNaW4gbWVldCcpXHJcbiAgICAgICAgLmF0dHIoJ3ZpZXdCb3gnLCAnMCAwICcgKyB3aWR0aCArICcgJyArIGhlaWdodClcclxuICAgICAgICAvLyBhZGQgdGhlIGNsYXNzIHN2Zy1jb250ZW50XHJcbiAgICAgICAgLmNsYXNzZWQoJ3N2Zy1jb250ZW50LWRlbmRyb2dyYW0nLCB0cnVlKVxyXG4gICAgICAgIC5jYWxsKHpvb20pO1xyXG5cclxuICAgIGluaXREZW5kcm9ncmFtTGVnZW5kKCk7XHJcblxyXG4gICAgLy8gYXBwZW5kIHRoZSB6b29tIGdyb3VwIHRvIHRoZSBzdmdcclxuICAgIHpvb21Hcm91cCA9IHN2Zy5hcHBlbmQoJ2cnKVxyXG4gICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKCcgKyBtYXJnaW4gKyAnLCcgKyBtYXJnaW4gKyAnKScpXHJcbiAgICAgICAgLmFwcGVuZCgnc3ZnOmcnKTtcclxuXHJcbiAgICAvLyBkMyB0cmVlXHJcbiAgICB0cmVlbWFwID0gZDMudHJlZSgpIC8vZDMuY2x1c3RlcigpXHJcbiAgICAgICAgLnNpemUoWyhoZWlnaHQgLSAxMCAqIG1hcmdpbiksICh3aWR0aCAtIDEwICogbWFyZ2luKV0pO1xyXG5cclxuICAgIC8vIHNldCB0aGUgc3BhdGlhbCB2aWV3IC0gbmVlZGVkIHRvIGFkZCB0aGUgY2x1c3RlcmluZyB0byB0aGUgc3BhdGlhbCB2aWV3IHdpbmRvd1xyXG4gICAgc3BhdGlhbFZpZXcgPSBkMy5zZWxlY3QoJy50YW5rJyk7XHJcblxyXG4gICAgLy8gaW5pdCBkZW5kcm9ncmFtIHNsaWRlclxyXG4gICAgLy8gaW5pdGlhbGl6ZSB0aGUgTmV0d29yayBzbGlkZXJcclxuICAgICQoJyNkZW5kcm9ncmFtLXBhbmVsLWxldmVsLXNsaWRlcicpXHJcbiAgICAgICAgLnNsaWRlcih7XHJcbiAgICAgICAgICAgIHJhbmdlOiAnbWF4JyxcclxuICAgICAgICAgICAgbWluOiAyLFxyXG4gICAgICAgICAgICBtYXg6IDIsXHJcbiAgICAgICAgICAgIHN0ZXA6IDEsXHJcbiAgICAgICAgICAgIHZhbHVlOiBoaWVyYXJjaHlMZXZlbHNbJ2gwJ10sXHJcbiAgICAgICAgICAgIHNsaWRlOiBmdW5jdGlvbihldmVudCwgdWkpIHtcclxuICAgICAgICAgICAgICAgIGxldCBpZCA9ICQoJy5zaG93LWRlbmRyb2dyYW0uYnRuLXByaW1hcnknKS5hdHRyKCdkYXRhJyk7XHJcbiAgICAgICAgICAgICAgICBzZXRIaWVyYXJjaHlMZXZlbChpZCwgdWkudmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgdXBkYXRlRGVuZHJvZ3JhbSgpO1xyXG4gICAgICAgICAgICAgICAgLy8gaWYgbm8gYW5pbWF0aW9uIGlzIGFjdGl2ZSBkcmF3IHRoZSBuZXcgY2x1c3RlcmluZyBhbmQgZGVuZHJvZ3JhbVxyXG4gICAgICAgICAgICAgICAgLy8gZHJhd0RlbmRyb2dyYW0oKTtcclxuICAgICAgICAgICAgICAgIGlmICghJCgnI3BsYXktYnV0dG9uJykuaGFzQ2xhc3MoJ2FjdGl2ZScpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9nbyBiYWNrIG9uZSBzZWNvbmQgYW5kIGRyYXcgdGhlIG5leHQgZnJhbWVcclxuICAgICAgICAgICAgICAgICAgICAvL3RoaXMgYXBwbHlzIHRoZSBjaGFuZ2VzXHJcbiAgICAgICAgICAgICAgICAgICAgZGVjSW5kZXhUaW1lKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZHJhdygpO1xyXG4gICAgICAgICAgICAgICAgICAgIGRyYXdEZW5kcm9ncmFtKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAvLyBpbml0IHRoZSB0b29sdGlwIGZvciB0aGUgZGVuZHJvZ3JhbVxyXG4gICAgdG9vbHRpcERpdiA9IGQzLnNlbGVjdCgnI2RlbmRyb2dyYW0tdG9vbHRpcCcpXHJcbiAgICAgICAgLnN0eWxlKCdsZWZ0JywgMCArICdweCcpXHJcbiAgICAgICAgLnN0eWxlKCd0b3AnLCAwICsgJ3B4JylcclxuICAgICAgICAub24oJ21vdXNlb3ZlcicsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB0b29sdGlwRGl2XHJcbiAgICAgICAgICAgICAgICAuc3R5bGUoJ29wYWNpdHknLCAxKTtcclxuICAgICAgICB9KTtcclxuICAgIC8vIGluaXQgdGhlIGhpZXJhcmNoeSBsZWdlbmRcclxuICAgIGxldCBsZWdlbmRXaWR0aCA9IG1heE51bWJlckhpZXJhcmNoaWVzICogMTAwO1xyXG4gICAgbGV0IGxlZ2VuZEhlaWdodCA9IDYwO1xyXG5cclxuICAgIHN2Z0xlZ2VuZCA9IGQzLnNlbGVjdCgnI2hpZXJhcmNoeS1sZWdlbmQtZGl2JylcclxuICAgICAgICAuYXBwZW5kKCdzdmcnKVxyXG4gICAgICAgIC5hdHRyKCdpZCcsICdoaWVyYXJjaHktbGVnZW5kJylcclxuICAgICAgICAuYXR0cignd2lkdGgnLCBsZWdlbmRXaWR0aClcclxuICAgICAgICAuYXR0cignaGVpZ2h0JywgbGVnZW5kSGVpZ2h0KTtcclxuXHJcbiAgICAvLyBhZGQgcGF0dGVybiBmb3Igc3RyaXBlZCBiYWNrZ3JvdW5kIG9mIGludGVyc2VjdGlvbnMgZXRjLlxyXG4gICAgc3BhdGlhbFZpZXcuYXBwZW5kKCdkZWZzJylcclxuICAgICAgICAuYXBwZW5kKCdzdmc6cGF0dGVybicpXHJcbiAgICAgICAgLmF0dHIoJ2lkJywgJ3N0cmlwZWQnKVxyXG4gICAgICAgIC5hdHRyKCdwYXR0ZXJuVW5pdHMnLCAndXNlclNwYWNlT25Vc2UnKVxyXG4gICAgICAgIC5hdHRyKCd3aWR0aCcsICcyMCcpXHJcbiAgICAgICAgLmF0dHIoJ2hlaWdodCcsICc1JylcclxuICAgICAgICAuYXR0cigncGF0dGVyblRyYW5zZm9ybScsICdyb3RhdGUoNjApJylcclxuICAgICAgICAuYXBwZW5kKCdyZWN0JylcclxuICAgICAgICAuYXR0cignd2lkdGgnLCA1KVxyXG4gICAgICAgIC5hdHRyKCdoZWlnaHQnLCAxMClcclxuICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgwLDApJylcclxuICAgICAgICAuc3R5bGUoJ2ZpbGwnLCAnIzY3MDAwZCcpO1xyXG5cclxufVxyXG5cclxuLyoqXHJcbiAqIERyYXcgdGhlIGRlbmRncm9ncmFtIGZvciBvbmUgc3RlcFxyXG4gKiBGdXJ0aGVyIGNhbGxzIHRoZSBkcmF3SGllcmFyY2h5IGZ1bmN0aW9uXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZHJhd0RlbmRyb2dyYW0oKSB7XHJcbiAgICAvLyBnZXQgdGhlIGFjdGl2ZSBkZW5kcm9ncmFtXHJcbiAgICBpZCA9ICQoJy5zaG93LWRlbmRyb2dyYW0uYnRuLXByaW1hcnknKS5hdHRyKCdkYXRhJyk7XHJcbiAgICAvLyBpZiBkYXRhIGlzIGF2YWlhYmxlIGRyYXcgaGllcmFyY2h5IGNsdXN0ZXJzIGFuZCBhIGJ1dHRvbiBpcyBhY3RpdmUgc2VsY3RlZFxyXG4gICAgaWYgKCEkLmlzRW1wdHlPYmplY3QobmV0d29ya0hpZXJhcmNoeSkgJiYgaWQpIHtcclxuICAgICAgICAvLyBnZXQgdGhlIGRhdGEgYW5kIHRyYW5zZm9ybSBpdFxyXG4gICAgICAgIGxldCB0cmVlRGF0YSA9IG5ldHdvcmtIaWVyYXJjaHlbJ2gnICsgaWRdW2luZGV4VGltZV07XHJcbiAgICAgICAgbGV0IG5vZGVzID0gZDMuaGllcmFyY2h5KHRyZWVEYXRhLCBmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBkLmNoaWxkcmVuO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8vIHNraXAgdGhlIHJvb3Qgbm9kZVxyXG4gICAgICAgIG5vZGVzID0gbm9kZXMuY2hpbGRyZW5bMF07XHJcbiAgICAgICAgLy8gY29sbGFwc2UgdGhlIHRyZWVcclxuICAgICAgICBub2Rlcy5jaGlsZHJlbi5mb3JFYWNoKGNvbGxhcHNlKTtcclxuXHJcbiAgICAgICAgLy8gbWFwcyB0aGUgbm9kZSBkYXRhIHRvIHRoZSB0cmVlIGxheW91dFxyXG4gICAgICAgIG5vZGVzID0gdHJlZW1hcChub2Rlcyk7XHJcbiAgICAgICAgLy9jb25zb2xlLmxvZyhub2Rlcyk7XHJcblxyXG4gICAgICAgIC8vIGhpZGUgaWYgbm8gbmV0d29yayBpcyBjaG9vc2VuXHJcbiAgICAgICAgaWYgKCQoJy5zaG93LWRlbmRyb2dyYW0uYnRuLXByaW1hcnknKS5sZW5ndGgpIHtcclxuXHJcbiAgICAgICAgICAgIC8vIHNldCB0aGUgbmV3IHNsaWRlciBtYXhcclxuICAgICAgICAgICAgJCgnI2RlbmRyb2dyYW0tcGFuZWwtbGV2ZWwtc2xpZGVyJylcclxuICAgICAgICAgICAgICAgIC5zbGlkZXIoJ29wdGlvbicsICdtYXgnLCAobm9kZXNbJ2hlaWdodCddIC0gMSkpXHJcbiAgICAgICAgICAgICAgICAuc2xpZGVyKCd2YWx1ZScsIGhpZXJhcmNoeUxldmVsc1snaCcgKyBpZF0pO1xyXG5cclxuICAgICAgICAgICAgLy8gREFUQSBKT0lOIC0gbGlua3MgKGVkZ2VzKVxyXG4gICAgICAgICAgICBsZXQgbGluayA9IHpvb21Hcm91cFxyXG4gICAgICAgICAgICAgICAgLnNlbGVjdEFsbCgncGF0aC5saW5rJylcclxuICAgICAgICAgICAgICAgIC5kYXRhKG5vZGVzLmRlc2NlbmRhbnRzKCkuc2xpY2UoMSkpO1xyXG5cclxuICAgICAgICAgICAgLy8gRU5URVJcclxuICAgICAgICAgICAgbGlua1xyXG4gICAgICAgICAgICAgICAgLmVudGVyKClcclxuICAgICAgICAgICAgICAgIC5hcHBlbmQoJ3BhdGgnKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2xpbmsnKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2QnLCBkaWFnb25hbExpbmVzKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFRyYW5zaXRpb24gbGlua3MgdG8gdGhlaXIgbmV3IHBvc2l0aW9uLlxyXG4gICAgICAgICAgICBsaW5rXHJcbiAgICAgICAgICAgICAgICAuYXR0cignZCcsIGRpYWdvbmFsTGluZXMpO1xyXG5cclxuICAgICAgICAgICAgLy8gRVhJVFxyXG4gICAgICAgICAgICBsaW5rLmV4aXQoKVxyXG4gICAgICAgICAgICAgICAgLnJlbW92ZSgpO1xyXG5cclxuICAgICAgICAgICAgLy8gREFUQSBKT0lOIC0gbm9kZXNcclxuICAgICAgICAgICAgLy8gYWRkcyBlYWNoIG5vZGUgYXMgYSBncm91cFxyXG4gICAgICAgICAgICBsZXQgbm9kZSA9IHpvb21Hcm91cFxyXG4gICAgICAgICAgICAgICAgLnNlbGVjdEFsbCgnLm5vZGUnKVxyXG4gICAgICAgICAgICAgICAgLmRhdGEobm9kZXMuZGVzY2VuZGFudHMoKSk7XHJcblxyXG4gICAgICAgICAgICAvLyBhZGQgdGhlIGdyb3VwcyB0byB0aGUgZGVuZGdyb2dyYW1cclxuICAgICAgICAgICAgdmFyIG5vZGVFbnRlciA9IG5vZGUuZW50ZXIoKVxyXG4gICAgICAgICAgICAgICAgLmFwcGVuZCgnZycpXHJcbiAgICAgICAgICAgICAgICAuYXR0cignY2xhc3MnLCBmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdub2RlJyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChkLmNoaWxkcmVuID8gJyBub2RlLS1pbnRlcm5hbCcgOiAnIG5vZGUtLWxlYWYnKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgZnVuY3Rpb24oZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAndHJhbnNsYXRlKCcgKyBkLnggKyAnLCcgKyBkLnkgKyAnKSc7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vIEVOVEVSIC0gYXBwZW5kIGZvciBlYWNoIGdyb3VwIGEgbm9kZSAoY2lyY2xlKVxyXG4gICAgICAgICAgICAvLyB3aXRoIGhpZ2hsaWdodGluZyBmb3IgdGhlIGFjdGl2ZSBjaG9vc2VuIGxldmVsXHJcbiAgICAgICAgICAgIG5vZGVFbnRlci5hcHBlbmQoJ2NpcmNsZScpXHJcbiAgICAgICAgICAgICAgICAuYXR0cigncicsIGZ1bmN0aW9uKGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZFsnZGVwdGgnXSA9PT0gaGllcmFyY2h5TGV2ZWxzWydoJyArIGlkXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gNDAgKyBkLmRhdGEubmFtZS5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDIwICsgZC5kYXRhLm5hbWUubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAuYXR0cignY2xhc3MnLCBmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRbJ2RlcHRoJ10gPT09IGhpZXJhcmNoeUxldmVsc1snaCcgKyBpZF0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdhY3RpdmUtbGV2ZWwnO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAuYXR0cignaWQnLCBmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdoJyArIGRbJ2RhdGEnXVsnbmFtZSddLnRvU3RyaW5nKCkuaGFzaENvZGUoKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAvLyBUT0RPIGZpbmQgYSBuaWNlIGZ1bmN0aW9uIGZvciB0aGUgb24gY2xpY2sgbWV0aG9kXHJcbiAgICAgICAgICAgICAgICAub24oJ2NsaWNrJywgY2xpY2spXHJcbiAgICAgICAgICAgICAgICAub24oJ21vdXNlb3ZlcicsIGZ1bmN0aW9uKGQpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyB0b29sdGlwIHBvc2l0aW9uIGFuZCB0ZXh0XHJcbiAgICAgICAgICAgICAgICAgICAgdG9vbHRpcERpdlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuc3R5bGUoJ2xlZnQnLCAoZDMuZXZlbnQucGFnZVggKyA1KSArICdweCcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zdHlsZSgndG9wJywgKGQzLmV2ZW50LnBhZ2VZICsgNSkgKyAncHgnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuc3R5bGUoJ29wYWNpdHknLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICB0b29sdGlwRGl2LnNlbGVjdCgnLnRvb2x0aXAtc3BhbicpLmh0bWwoZFsnZGF0YSddWyduYW1lJ10udG9TdHJpbmcoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gYWRkIGhpZ2hsaWdodCBpbiB0aGUgc3BhdGlhbCB2aWV3XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlIHVuZGlvbiBvZiB0aGUgcGF0aHMgbWFrZXMgdGhpcyBjb21wbGljYXRlZFxyXG4gICAgICAgICAgICAgICAgICAgIGFkZEhpZ2hsaWdodFNwYXRpYWxWaWV3KGRbJ2RhdGEnXVsnbmFtZSddKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAub24oJ21vdXNlb3V0JywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9vbHRpcERpdi50cmFuc2l0aW9uKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmR1cmF0aW9uKDUwMClcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnN0eWxlKCdvcGFjaXR5JywgMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gcmVtb3ZlIGhpZ2hsaWdodCBpbiB0aGUgc3BhdGlhbCB2aWV3XHJcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlSGlnaGxpZ2h0U3BhdGlhbFZpZXcoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgLy8gYWRkIHRoZSB0ZXh0IC0gIyBudW1iZXIgb2YgYW5pbWFscyBpbiB0aGUgY2x1c3RlclxyXG4gICAgICAgICAgICBub2RlRW50ZXIuYXBwZW5kKCd0ZXh0JylcclxuICAgICAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsICdkZW5kcm9ncmFtLXRleHQnKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoJ3gnLCAxNTApXHJcbiAgICAgICAgICAgICAgICAuYXR0cigneScsIC0xNTApXHJcbiAgICAgICAgICAgICAgICAudGV4dChmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQuZGF0YS5uYW1lLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgLy8gVVBEQVRFIC0tIHVwZGF0ZSB0aGUgZ3JvdXBzXHJcbiAgICAgICAgICAgIG5vZGVFbnRlclxyXG4gICAgICAgICAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGZ1bmN0aW9uKGQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3RyYW5zbGF0ZSgnICsgZC54ICsgJywnICsgZC55ICsgJyknO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvLyB1cGRhZSB0aGUgbm9kZSBhbmQgY2lyY2xlc1xyXG4gICAgICAgICAgICAvLyB3aXRoIGFjdGl2ZS1sZXZlbCBmdW5jdGlvbiB0byBoaWdobGlnaHQgd2hpY2ggbGV2ZWwgaXMgY2hvc2VuXHJcbiAgICAgICAgICAgIG5vZGVcclxuICAgICAgICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd0cmFuc2xhdGUoJyArIGQueCArICcsJyArIGQueSArICcpJztcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAuc2VsZWN0KCdjaXJjbGUnKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoJ3InLCBmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRbJ2RlcHRoJ10gPT09IGhpZXJhcmNoeUxldmVsc1snaCcgKyBpZF0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDQwICsgZC5kYXRhLm5hbWUubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAyMCArIGQuZGF0YS5uYW1lLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgZnVuY3Rpb24oZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkWydkZXB0aCddID09PSBoaWVyYXJjaHlMZXZlbHNbJ2gnICsgaWRdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdhY3RpdmUtbGV2ZWwnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coKCdoJyArIGRbJ2RhdGEnXVsnbmFtZSddLnRvU3RyaW5nKCkuaGFzaENvZGUoKSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2FjdGl2ZS1sZXZlbCc7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAuYXR0cignaWQnLCBmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdoJyArIGRbJ2RhdGEnXVsnbmFtZSddLnRvU3RyaW5nKCkuaGFzaENvZGUoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgLy8gdXBkYXRlIHRoZSB0ZXh0IG9mIG51bWJlciBvZiBlbnRpdGllc1xyXG4gICAgICAgICAgICBub2RlLnNlbGVjdCgndGV4dCcpXHJcbiAgICAgICAgICAgICAgICAudGV4dChmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQuZGF0YS5uYW1lLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgLy8gRVhJVFxyXG4gICAgICAgICAgICBub2RlLmV4aXQoKVxyXG4gICAgICAgICAgICAgICAgLnJlbW92ZSgpO1xyXG5cclxuICAgICAgICAgICAgLy8gY29sb3IgdGhlIGRlbmRyb2dyYW0gbm9kZXMgdXNpbmcgdGhlIHN0YW5kYXJkRGV2aWF0aW9uIGluIHRoZSBjbHVzdGVyXHJcbiAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhoaWVyYXJjaHlHcm91cFN0ZGV2KS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIC8vIHNob3cgdGhlIGxlZ2VuZCBmb3IgdGhlIGNvbG9yaW5nXHJcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhoaWVyYXJjaHlHcm91cFN0ZGV2KTtcclxuICAgICAgICAgICAgICAgIC8vIFRPRE8gbGVnZW5kIGhlcmVcclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdKVU1QUyBIRVJFJyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoJCgnI2RlbmRyb2dyYW0tbGVnZW5kJykuY3NzKCdkaXNwbGF5JykgPT0gJ25vbmUnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJCgnI2RlbmRyb2dyYW0tbGVnZW5kJykuc2hvdygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gSU1QT1JUQU5UIC0gYXN5bmMgcHJvYmxlbXNcclxuICAgICAgICAgICAgICAgIC8vIFRPRE8gc29sdmUgdGhpcyAtIHZlcnkgc2xvd1xyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICBub2RlLnNlbGVjdCgnY2lyY2xlJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnN0eWxlKCdmaWxsJywgZnVuY3Rpb24oZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coaGllcmFyY2h5R3JvdXBTdGRldik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygoJ2gnICsgZFsnZGF0YSddWyduYW1lJ10udG9TdHJpbmcoKS5oYXNoQ29kZSgpKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygoJ2gnICsgZFsnZGF0YSddWyduYW1lJ10udG9TdHJpbmcoKS5oYXNoQ29kZSgpKSBpbiBoaWVyYXJjaHlHcm91cFN0ZGV2KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29sb3IgdGhlIG5vZGVzIGJ5IGNhbGN1bGF0aW5nIHRoZSBzdGFuZGFyZERldmlhdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZm9yIGVhY2ggY2x1c3RlclxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gb25seSBhY3RpdmUgaXMgc2hvdyBpbiBjbHVzdGVyIGlzIGNob29zZW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoJ2gnICsgZFsnZGF0YSddWyduYW1lJ10udG9TdHJpbmcoKS5oYXNoQ29kZSgpKSBpbiBoaWVyYXJjaHlHcm91cFN0ZGV2KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2hlbGxvJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coc3RhbmRhcmREZXZpYXRpb24oaGllcmFyY2h5R3JvdXBTdGRldlsoJ2gnICsgZFsnZGF0YSddWyduYW1lJ10udG9TdHJpbmcoKS5oYXNoQ29kZSgpKV0pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RhbmRhcmREZXZpYXRpb25Db2xvclNjYWxlKHN0YW5kYXJkRGV2aWF0aW9uKGhpZXJhcmNoeUdyb3VwU3RkZXZbKCdoJyArIGRbJ2RhdGEnXVsnbmFtZSddLnRvU3RyaW5nKCkuaGFzaENvZGUoKSldKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRbJ2RlcHRoJ10gIT09IGhpZXJhcmNoeUxldmVsc1snaCcgKyBpZF0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnIzAwMCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSwgMjUwKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICgkKCcjZGVuZHJvZ3JhbS1sZWdlbmQnKS5jc3MoJ2Rpc3BsYXknKSAhPT0gJ25vbmUnKSB7XHJcbiAgICAgICAgICAgICAgICAkKCcjZGVuZHJvZ3JhbS1sZWdlbmQnKS5oaWRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoISQuaXNFbXB0eU9iamVjdChuZXR3b3JrSGllcmFyY2h5KSkge1xyXG4gICAgICAgIC8vIGRyYXcgdGhlIGhpZXJhcmNoeSBpbiBzcGF0aWFsIHZpZXdcclxuICAgICAgICBkcmF3SGllcmFyY2h5KCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDb2xsYXBzZSBmdW5jdGlvbiAtIG9ubHkgc2hvdyB0aGUgYWN0aXZlIGxldmVsIGFuZCBvbmUgc3ViIGxldmVsXHJcbiAqL1xyXG5mdW5jdGlvbiBjb2xsYXBzZShkKSB7XHJcbiAgICBpZiAoZC5jaGlsZHJlbiAmJiBkLmRlcHRoIDw9IGhpZXJhcmNoeUxldmVsc1snaCcgKyBpZF0pIHtcclxuICAgICAgICBkLl9jaGlsZHJlbiA9IGQuY2hpbGRyZW47XHJcbiAgICAgICAgZC5fY2hpbGRyZW4uZm9yRWFjaChjb2xsYXBzZSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGQuY2hpbGRyZW4gPSBudWxsO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogRHJhdyB0aGUgYWxsIGhpZXJhcmNoaWVzIGluIHRoZSBzcGF0aWFsIHZpZXdcclxuICogYWRkIGEgZ3JvdXAgd2l0aCB0aGUgaWRzIG9mIHRoZSBhbmltYWxzIGluIGl0IHRvIHRoZSB2aWV3XHJcbiAqIHdpdGggcGF0aCBjaGlsZCBlbGVtZW50c1xyXG4gKi9cclxuZnVuY3Rpb24gZHJhd0hpZXJhcmNoeSgpIHtcclxuICAgIC8vIGlkIG9mIHRoZSBoaWVyYXJjaHkgZS5nLiBbMSw1LDNdXHJcbiAgICBsZXQgaGllcmFyY2h5SWRzID0gT2JqZWN0LmtleXMobmV0d29ya0hpZXJhcmNoeSkubWFwKGZ1bmN0aW9uKHgpIHtcclxuICAgICAgICByZXR1cm4geC5yZXBsYWNlKCdoJywgJycpO1xyXG4gICAgfSk7XHJcbiAgICAvLyAgVGhlIGNsdXN0ZXJpbmcgaW4gYW4gMkQgYXJyYXkgd2l0aCB3aGljaCBhbmltYWwgaWQgYmVsb25ncyB0byB3aGljaCBncm91cFxyXG4gICAgbGV0IGhpZXJhcmNoeVZlcnRpY2VzID0gW107XHJcblxyXG4gICAgLy8gaXRlcmF0ZSBvdmVyIHRoZSBoaWVyYXJjaHkgZGF0YSB0byBnZXQgdGhlIGhpZXJhcmNoeSBhbmltYWwgaWRzIHBlciBjbHVzdGVyaW5nIGFuZCBncm91cGluZ1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBoaWVyYXJjaHlJZHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBsZXQgdHJlZURhdGEgPSBuZXR3b3JrSGllcmFyY2h5WydoJyArIGhpZXJhcmNoeUlkc1tpXV1baW5kZXhUaW1lXTtcclxuICAgICAgICBsZXQgbm9kZXMgPSBkMy5oaWVyYXJjaHkodHJlZURhdGEsIGZ1bmN0aW9uKGQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGQuY2hpbGRyZW47XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIG5vZGVzID0gdHJlZW1hcChub2Rlcyk7XHJcbiAgICAgICAgbGV0IHJvb3QgPSBub2Rlc1snY2hpbGRyZW4nXVswXTtcclxuICAgICAgICBpZiAoc2hvd05ldHdvcmtIaWVyYXJjaHkgPT09IGhpZXJhcmNoeUlkc1tpXSkge1xyXG4gICAgICAgICAgICBuZXR3b3JrSGllcmFyY2h5SWRzID0gZ2V0SGllcmFyY2h5TGV2ZWwocm9vdCwgaGllcmFyY2h5SWRzW2ldKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gYWRkIHRoZSB2ZXJ0aWNlcyBpbnRvIHRoZSBhcnJheVxyXG4gICAgICAgIGhpZXJhcmNoeVZlcnRpY2VzLnB1c2goZ2V0SGllcmFyY2h5VmVydGljZXMoZ2V0SGllcmFyY2h5TGV2ZWwocm9vdCwgaGllcmFyY2h5SWRzW2ldKSkpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGlmIG1vcmUgdGhhbiAyIGhpZXJhcmNoaWVzIGFyZSBkcmF3blxyXG4gICAgaWYgKGhpZXJhcmNoeVZlcnRpY2VzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAvLyB1bmlvbiB0aGUgbGlzdCBvZiBwb2x5Z29ucyB0byBvbmUgcG9seWdvblxyXG4gICAgICAgIC8vIGZvciAobGV0IGkgPSAwOyBpIDwgaGllcmFyY2h5SWRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgLy8gICAgIGhpZXJhcmNoeVZlcnRpY2VzW2ldID0gdW5pb25Qb2x5Z29ucyhoaWVyYXJjaHlWZXJ0aWNlc1tpXSk7XHJcbiAgICAgICAgLy8gfVxyXG5cclxuICAgICAgICAvLyB0cmFuc2Zvcm0gYW5kIGNhbGN1bGF0ZSB0aGUgaW50ZXJzZWN0aW9uIHBvbHlnb25zIG9mIHRoZSBuIGhpZXJhcmNoaWVzXHJcbiAgICAgICAgLy8gaWYgKHNldE9wZXJhdGlvbiA9PT0gJ2ludGVyc2VjdGlvbicpIHtcclxuICAgICAgICAvLyAgICAgLy8gdGVtcCBzb2x1dGlvbiBvZiB0d28gaW50ZXJzZWN0aW9uc1xyXG4gICAgICAgIC8vICAgICBsZXQgdG1wSW50ZXJzZWN0aW9uID0gaGllcmFyY2h5VmVydGljZXNbMF07XHJcbiAgICAgICAgLy8gICAgIC8vIGl0ZXJhdGUgb3ZlciB0aGUgaGllcmFyY2hpZXMgYW5kIGludGVyc2VjdCBhbGwgb2YgdGhlbVxyXG4gICAgICAgIC8vICAgICBmb3IgKGxldCBpID0gMTsgaSA8IGhpZXJhcmNoeVZlcnRpY2VzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgLy8gICAgICAgICAvLyBpbnRlcnNlY3Rpb25cclxuICAgICAgICAvLyAgICAgICAgIHRtcEludGVyc2VjdGlvbiA9IFBvbHlCb29sLmludGVyc2VjdCh7XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgcmVnaW9uczogdG1wSW50ZXJzZWN0aW9uLCAvLyBsaXN0IG9mIHJlZ2lvbnNcclxuICAgICAgICAvLyAgICAgICAgICAgICBpbnZlcnRlZDogZmFsc2UgLy8gaXMgdGhpcyBwb2x5Z29uIGludmVydGVkP1xyXG4gICAgICAgIC8vICAgICAgICAgfSwge1xyXG4gICAgICAgIC8vICAgICAgICAgICAgIHJlZ2lvbnM6IGhpZXJhcmNoeVZlcnRpY2VzW2ldLFxyXG4gICAgICAgIC8vICAgICAgICAgICAgIGludmVydGVkOiBmYWxzZVxyXG4gICAgICAgIC8vICAgICAgICAgfSk7XHJcbiAgICAgICAgLy8gICAgICAgICAvLyBjb252ZXJ0IGl0IGFnYWluXHJcbiAgICAgICAgLy8gICAgICAgICB0bXBJbnRlcnNlY3Rpb24gPSB0bXBJbnRlcnNlY3Rpb25bJ3JlZ2lvbnMnXTtcclxuICAgICAgICAvLyAgICAgfVxyXG4gICAgICAgIC8vXHJcbiAgICAgICAgLy8gICAgIC8vIHJlc3VsdFxyXG4gICAgICAgIC8vICAgICBoaWVyYXJjaHlWZXJ0aWNlcyA9IFt0bXBJbnRlcnNlY3Rpb25dO1xyXG4gICAgICAgIC8vIH1cclxuICAgICAgICAvLyAvLyB0cmFuc2Zvcm0gYW5kIGNhbGN1bGF0ZSB0aGUgc3ltbWV0cmljIGRpZmZlcmVuY2UgcG9seWdvbnMgb2YgdGhlIG4gaGllcmFyY2hpZXNcclxuICAgICAgICAvLyBlbHNlIGlmIChzZXRPcGVyYXRpb24gPT09ICdzeW0tZGlmZmVyZW5jZScpIHtcclxuICAgICAgICAvLyAgICAgLy8geG9yID0gVW5pb24gb2YgYWxsIGhpZXJhcmNoaWVzIC0gaW50ZXJzZWN0aW9uIG9mIGFsbCBoaWVyYXJjaGllc1xyXG4gICAgICAgIC8vICAgICAvLyB0ZW1wIHNvbHV0aW9uIG9mIHR3byBpbnRlcnNlY3Rpb25zXHJcbiAgICAgICAgLy8gICAgIGxldCB0bXBJbnRlcnNlY3Rpb24gPSBoaWVyYXJjaHlWZXJ0aWNlc1swXTtcclxuICAgICAgICAvLyAgICAgLy8gaXRlcmF0ZSBvdmVyIHRoZSBoaWVyYXJjaGllcyBhbmQgaW50ZXJzZWN0IGFsbCBvZiB0aGVtXHJcbiAgICAgICAgLy8gICAgIGZvciAobGV0IGkgPSAxOyBpIDwgaGllcmFyY2h5VmVydGljZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAvLyAgICAgICAgIC8vIGludGVyc2VjdGlvblxyXG4gICAgICAgIC8vICAgICAgICAgdG1wSW50ZXJzZWN0aW9uID0gUG9seUJvb2wuaW50ZXJzZWN0KHtcclxuICAgICAgICAvLyAgICAgICAgICAgICByZWdpb25zOiB0bXBJbnRlcnNlY3Rpb24sIC8vIGxpc3Qgb2YgcmVnaW9uc1xyXG4gICAgICAgIC8vICAgICAgICAgICAgIGludmVydGVkOiBmYWxzZSAvLyBpcyB0aGlzIHBvbHlnb24gaW52ZXJ0ZWQ/XHJcbiAgICAgICAgLy8gICAgICAgICB9LCB7XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgcmVnaW9uczogaGllcmFyY2h5VmVydGljZXNbaV0sXHJcbiAgICAgICAgLy8gICAgICAgICAgICAgaW52ZXJ0ZWQ6IGZhbHNlXHJcbiAgICAgICAgLy8gICAgICAgICB9KTtcclxuICAgICAgICAvLyAgICAgICAgIC8vIGNvbnZlcnQgaXQgYWdhaW5cclxuICAgICAgICAvLyAgICAgICAgIHRtcEludGVyc2VjdGlvbiA9IHRtcEludGVyc2VjdGlvblsncmVnaW9ucyddO1xyXG4gICAgICAgIC8vICAgICB9XHJcbiAgICAgICAgLy8gICAgIC8vIGludGVyc2VjdGlvbiByZXN1bHRcclxuICAgICAgICAvLyAgICAgbGV0IGludGVyc2VjdGlvbkhpZXJhcmNoeVBvbHlnb25zID0gdG1wSW50ZXJzZWN0aW9uO1xyXG4gICAgICAgIC8vXHJcbiAgICAgICAgLy8gICAgIC8vIHVuaW9uXHJcbiAgICAgICAgLy8gICAgIGxldCB0bXBVbmlvbiA9IGhpZXJhcmNoeVZlcnRpY2VzWzBdO1xyXG4gICAgICAgIC8vICAgICAvLyBpdGVyYXRlIG92ZXIgdGhlIGhpZXJhcmNoaWVzIGFuZCBpbnRlcnNlY3QgYWxsIG9mIHRoZW1cclxuICAgICAgICAvLyAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCBoaWVyYXJjaHlWZXJ0aWNlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIC8vICAgICAgICAgLy8gaW50ZXJzZWN0aW9uXHJcbiAgICAgICAgLy8gICAgICAgICB0bXBVbmlvbiA9IFBvbHlCb29sLnVuaW9uKHtcclxuICAgICAgICAvLyAgICAgICAgICAgICByZWdpb25zOiB0bXBVbmlvbiwgLy8gbGlzdCBvZiByZWdpb25zXHJcbiAgICAgICAgLy8gICAgICAgICAgICAgaW52ZXJ0ZWQ6IGZhbHNlIC8vIGlzIHRoaXMgcG9seWdvbiBpbnZlcnRlZD9cclxuICAgICAgICAvLyAgICAgICAgIH0sIHtcclxuICAgICAgICAvLyAgICAgICAgICAgICByZWdpb25zOiBoaWVyYXJjaHlWZXJ0aWNlc1tpXSxcclxuICAgICAgICAvLyAgICAgICAgICAgICBpbnZlcnRlZDogZmFsc2VcclxuICAgICAgICAvLyAgICAgICAgIH0pO1xyXG4gICAgICAgIC8vICAgICAgICAgLy8gY29udmVydCBpdCBhZ2FpblxyXG4gICAgICAgIC8vICAgICAgICAgdG1wVW5pb24gPSB0bXBVbmlvblsncmVnaW9ucyddO1xyXG4gICAgICAgIC8vICAgICB9XHJcbiAgICAgICAgLy8gICAgIGxldCB1bmlvbkhpZXJhcmNoeVBvbHlnb25zID0gdG1wVW5pb247XHJcbiAgICAgICAgLy9cclxuICAgICAgICAvL1xyXG4gICAgICAgIC8vICAgICAvLyBzeW1tZXRyaWMgZGlmZmVyZW5jZVxyXG4gICAgICAgIC8vICAgICBsZXQgdG1wRGlmZmVyZW5jZSA9IFBvbHlCb29sLnhvcih7XHJcbiAgICAgICAgLy8gICAgICAgICByZWdpb25zOiB1bmlvbkhpZXJhcmNoeVBvbHlnb25zLCAvLyBsaXN0IG9mIHJlZ2lvbnNcclxuICAgICAgICAvLyAgICAgICAgIGludmVydGVkOiBmYWxzZSAvLyBpcyB0aGlzIHBvbHlnb24gaW52ZXJ0ZWQ/XHJcbiAgICAgICAgLy8gICAgIH0sIHtcclxuICAgICAgICAvLyAgICAgICAgIHJlZ2lvbnM6IGludGVyc2VjdGlvbkhpZXJhcmNoeVBvbHlnb25zLFxyXG4gICAgICAgIC8vICAgICAgICAgaW52ZXJ0ZWQ6IGZhbHNlXHJcbiAgICAgICAgLy8gICAgIH0pO1xyXG4gICAgICAgIC8vICAgICAvLyBjb252ZXJ0IGl0IGFnYWluXHJcbiAgICAgICAgLy8gICAgIHRtcERpZmZlcmVuY2UgPSB0bXBEaWZmZXJlbmNlWydyZWdpb25zJ107XHJcbiAgICAgICAgLy8gICAgIC8vIHJlc3VsdFxyXG4gICAgICAgIC8vICAgICBoaWVyYXJjaHlWZXJ0aWNlcyA9IFt0bXBEaWZmZXJlbmNlXTtcclxuICAgICAgICAvLyB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gREFUQSBKb2luXHJcbiAgICBsZXQgaGllcmFyY2hpZXMgPSBzcGF0aWFsVmlld1xyXG4gICAgICAgIC5zZWxlY3RBbGwoJ2cuaGllcmFyY2h5LWdyb3VwJylcclxuICAgICAgICAuZGF0YShoaWVyYXJjaHlWZXJ0aWNlcyk7XHJcblxyXG4gICAgLy8gRU5URVIgdGhlIGdyb3VwcyAtIGFkZHMgYSBzcGVjaWZpYyBpZCBhbmQgY29sb3JcclxuICAgIGhpZXJhcmNoaWVzXHJcbiAgICAgICAgLmVudGVyKClcclxuICAgICAgICAuYXBwZW5kKCdnJylcclxuICAgICAgICAuYXR0cignY2xhc3MnLCBmdW5jdGlvbihkLCBpKSB7XHJcbiAgICAgICAgICAgIGlmIChzZXRPcGVyYXRpb24gPT09ICdpbnRlcnNlY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2hpZXJhcmNoeS1ncm91cCBpbnRlcnNlY3Rpb24nO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHNldE9wZXJhdGlvbiA9PT0gJ3N5bS1kaWZmZXJlbmNlJykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICdoaWVyYXJjaHktZ3JvdXAgc3ltLWRpZmZlcmVuY2UnO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICdoaWVyYXJjaHktZ3JvdXAgaCcgKyBoaWVyYXJjaHlJZHNbaV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICAgIC5zdHlsZSgnZmlsbCcsIGZ1bmN0aW9uKGQsIGkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGhpZXJhcmNoeUNvbG9yc1snaCcgKyBoaWVyYXJjaHlJZHNbaV1dO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmF0dHIoJ3N0cm9rZScsIGZ1bmN0aW9uKGQsIGkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGhpZXJhcmNoeUNvbG9yc1snaCcgKyBoaWVyYXJjaHlJZHNbaV1dO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLm1vdmVUb0JhY2soKTtcclxuXHJcbiAgICAvLyBVUERBVEUgLSB0aGUgY2xhc3MgbmVlZGVkIGZvciBpbnRlcnNlY3Rpb24gYW5kIHN5bW1ldHJpYyBkaWZmZXJlbmNlXHJcbiAgICBoaWVyYXJjaGllcy5hdHRyKCdjbGFzcycsIGZ1bmN0aW9uKGQsIGkpIHtcclxuICAgICAgICBpZiAoc2V0T3BlcmF0aW9uID09PSAnaW50ZXJzZWN0aW9uJykge1xyXG4gICAgICAgICAgICByZXR1cm4gJ2hpZXJhcmNoeS1ncm91cCBpbnRlcnNlY3Rpb24nO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoc2V0T3BlcmF0aW9uID09PSAnc3ltLWRpZmZlcmVuY2UnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnaGllcmFyY2h5LWdyb3VwIHN5bS1kaWZmZXJlbmNlJztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gJ2hpZXJhcmNoeS1ncm91cCBoJyArIGhpZXJhcmNoeUlkc1tpXTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBFWElUXHJcbiAgICBoaWVyYXJjaGllcy5leGl0KClcclxuICAgICAgICAucmVtb3ZlKCk7XHJcblxyXG4gICAgLy8gSGllcmFjaHkgaHVsbHMgYWRkZWQgdG8gdGhlIHNwYXRpYWwgdmlldyAtIGdldCB0aGUgcG9pbnRzIGZvciBlYWNoIGFuaW1hbCBpbiB0aGVcclxuICAgIC8vIHNwYXRpYWwgdmlldyBzbyB0aGF0IGEgY29udmV4IGh1bGwgY2FuIGJlIGNhbGN1bGF0ZWRcclxuICAgIGxldCBoaWVyYXJ5SHVsbHMgPSBoaWVyYXJjaGllcy5zZWxlY3RBbGwoJ3BhdGguaGllcmFyY2h5LWh1bGwtcGF0aCcpXHJcbiAgICAgICAgLmRhdGEoZnVuY3Rpb24oZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZDtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAvLyBFTlRFUiBhbmQgY2FsY3VsYXRlIHRoZSBjb252ZXggaHVsbFxyXG4gICAgaGllcmFyeUh1bGxzXHJcbiAgICAgICAgLmVudGVyKClcclxuICAgICAgICAuYXBwZW5kKCdwYXRoJylcclxuICAgICAgICAvLyAuYXR0cignaWQnLCBmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgLy8gICAgIHJldHVybiAnaHAnICsgZC5qb2luKCcnKS5yZXBsYWNlKC8sL2csICcnKTtcclxuICAgICAgICAvLyB9KVxyXG4gICAgICAgIC5hdHRyKCdjbGFzcycsICdoaWVyYXJjaHktaHVsbC1wYXRoJylcclxuICAgICAgICAuYXR0cignZCcsIGZ1bmN0aW9uKGQpIHtcclxuICAgICAgICAgICAgLy8gcmV0dXJuIGRyYXdMaW5lKGQpO1xyXG4gICAgICAgICAgICByZXR1cm4gJ00nICsgZC5qb2luKCdMJykgKyAnWic7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgLy8gVVBEQVRFIHRoZSBjb252ZXggaHVsbFxyXG4gICAgaGllcmFyeUh1bGxzXHJcbiAgICAgICAgLmF0dHIoJ2QnLCBmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgIC8vIHJldHVybiBkcmF3TGluZShkKTtcclxuICAgICAgICAgICAgcmV0dXJuICdNJyArIGQuam9pbignTCcpICsgJ1onO1xyXG4gICAgICAgIH0pO1xyXG4gICAgLy8gLmF0dHIoJ2lkJywgZnVuY3Rpb24oZCkge1xyXG4gICAgLy8gcmV0dXJuICdocCcgKyBkLmpvaW4oJycpLnJlcGxhY2UoLywvZywgJycpO1xyXG4gICAgLy8gfSk7XHJcbiAgICAvLyBFWElUXHJcbiAgICBoaWVyYXJ5SHVsbHMuZXhpdCgpXHJcbiAgICAgICAgLnJlbW92ZSgpO1xyXG5cclxufVxyXG5cclxuLyoqXHJcbiAqIFVuaW9uIG11bHRpcGxlIHBvbHlnb25zIHRvZ2V0aGVyIC0gbmVlZGVkIG9yIGVsc2UgdGhlcmUgd2lsbCBiZSBob2xlcyBpbiB0aGUgaW50ZXJzZWN0aW9uc1xyXG4gKiBAcGFyYW0ge2FycmF5fSBwb2x5Z29ucyAtIGFycmF5IG9mIGFycmF5IG9mIHBvaW50c1xyXG4gKi9cclxuLy8gZnVuY3Rpb24gdW5pb25Qb2x5Z29ucyhwb2x5Z29ucykge1xyXG4vLyAgICAgLy8gY29uc29sZS5sb2cocG9seWdvbnMpO1xyXG4vLyAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb2x5Z29ucy5sZW5ndGg7IGkrKykge1xyXG4vLyAgICAgICAgIHBvbHlnb25zW2ldID0ge1xyXG4vLyAgICAgICAgICAgICByZWdpb25zOiBbcG9seWdvbnNbaV1dLFxyXG4vLyAgICAgICAgICAgICBpbnZlcnRlZDogZmFsc2UgLy8gaXMgdGhpcyBwb2x5Z29uIGludmVydGVkP1xyXG4vLyAgICAgICAgIH07XHJcbi8vICAgICB9XHJcbi8vICAgICAvLyB1bmlvbiBhIGxpc3Qgb2YgcG9seWdvbnMgdG9nZXRoZXJcclxuLy8gICAgIGxldCBzZWdtZW50cyA9IFBvbHlCb29sLnNlZ21lbnRzKHBvbHlnb25zWzBdKTtcclxuLy8gICAgIGZvciAobGV0IGkgPSAxOyBpIDwgcG9seWdvbnMubGVuZ3RoOyBpKyspIHtcclxuLy8gICAgICAgICBsZXQgc2VnMiA9IFBvbHlCb29sLnNlZ21lbnRzKHBvbHlnb25zW2ldKTtcclxuLy8gICAgICAgICBsZXQgY29tYiA9IFBvbHlCb29sLmNvbWJpbmUoc2VnbWVudHMsIHNlZzIpO1xyXG4vLyAgICAgICAgIHNlZ21lbnRzID0gUG9seUJvb2wuc2VsZWN0VW5pb24oY29tYik7XHJcbi8vICAgICB9XHJcbi8vICAgICByZXR1cm4gUG9seUJvb2wucG9seWdvbihzZWdtZW50cylbJ3JlZ2lvbnMnXTtcclxuLy8gfVxyXG5cclxuLyoqXHJcbiAqIEVkZ2UgZHJhd2luZyBtZXRob2Qgb2YgdGhlIGRlbmRyb2dyYW1cclxuICogQHBhcmFtIHtvYmplY3R9IGQgLSBUcmVlbWFwIGVsZW1lbnRcclxuICovXHJcbmZ1bmN0aW9uIGRpYWdvbmFsTGluZXMoZCkge1xyXG4gICAgcmV0dXJuICdNJyArIGQueCArICcsJyArIGQueSArXHJcbiAgICAgICAgJ1YnICsgZC5wYXJlbnQueSArICdIJyArIGQucGFyZW50Lng7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBPbiBjbGljayBmdW5jdGlvbiAtIGhpZ2hsaWdodCB0aGUgZWxlbWVudHMgaW4gdGhlIHNwYXRpYWwgdmlld1xyXG4gKiBAcGFyYW0ge29iamVjdH0gZCAtIFRyZWVtYXAgZWxlbWVudFxyXG4gKi9cclxuZnVuY3Rpb24gY2xpY2soZCkge1xyXG4gICAgc2V0QWN0aXZlQW5pbWFscyhkWydkYXRhJ11bJ25hbWUnXSk7XHJcbiAgICAvLyBpZiBubyBhbmltYXRpb24gaXMgYWN0aXZlIGRyYXcgdGhlIGRyYXcgb25lIHN0ZXBcclxuICAgIGlmICghJCgnI3BsYXktYnV0dG9uJykuaGFzQ2xhc3MoJ2FjdGl2ZScpKSB7XHJcbiAgICAgICAgZGVjSW5kZXhUaW1lKCk7XHJcbiAgICAgICAgZHJhdygpO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogR2V0IGFsbCB0aGUgY2x1c3RlcmluZyBvZiBhIHNwZWNpZmljIGxldmVsIGluIHRoZSBkZW5kcm9ncmFtIHRyZWVcclxuICogRm9yIGluc3RhbmNlIGFsbCBjbHVzdGVycyBmcm9tIGxldmVsIDVcclxuICogQHBhcmFtIHtvYmplY3R9IHJvb3QgLSBSb290IG9mIHRoZSB0cmVlbWFwXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBoaWVhcmNoeSAtIE51bWJlciBvZiBoaWVyYXJjaHkgZnJvbSBbMC0zXVxyXG4gKi9cclxuZnVuY3Rpb24gZ2V0SGllcmFyY2h5TGV2ZWwocm9vdCwgaGllcmFyY2h5KSB7XHJcbiAgICBsZXQgcmVzdWx0ID0gW107XHJcbiAgICBsZXQgbGV2ZWwgPSBoaWVyYXJjaHlMZXZlbHNbJ2gnICsgaGllcmFyY2h5XTtcclxuXHJcbiAgICAvLyBzZWNvbmQgbGV2ZWwgb2YgdGhlIGFycmF5XHJcbiAgICBsZXQgdG1wX25vZGVzID0gcm9vdFsnY2hpbGRyZW4nXTtcclxuICAgIC8vIGl0ZXJhdGUgdGhyb3VnaCB0aGUgdHJlZVxyXG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCByb290WydoZWlnaHQnXTsgaSsrKSB7XHJcbiAgICAgICAgLy8gY2hlY2sgaWYgd2UgYXJlIGF0IHRoZSBzZWFyY2hlZCBsZXZlbFxyXG4gICAgICAgIGlmICh0bXBfbm9kZXNbMF0gJiYgdG1wX25vZGVzWzBdWydkZXB0aCddID09PSBsZXZlbCkge1xyXG4gICAgICAgICAgICAvLyBhZGQgZWFjaCBjbHVzdGVyIHRvIHRoZSByZXN1bHQgc2V0XHJcbiAgICAgICAgICAgIHRtcF9ub2Rlcy5mb3JFYWNoKGZ1bmN0aW9uKG5vZGUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygbm9kZVsnZGF0YSddWyduYW1lJ10gIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gobm9kZVsnZGF0YSddWyduYW1lJ10pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGdldCBhbGwgY2hpbGRyZW4gb2YgYSBzcGVjaWZpYyBsZXZlbCBpbiB0aGUgdHJlZVxyXG4gICAgICAgIGxldCB0bXAgPSBbXTtcclxuICAgICAgICB0bXBfbm9kZXMuZm9yRWFjaChmdW5jdGlvbihub2RlKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygbm9kZVsnY2hpbGRyZW4nXSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgIHRtcCA9IHRtcC5jb25jYXQobm9kZVsnY2hpbGRyZW4nXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICB0bXBfbm9kZXMgPSB0bXA7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG4vKipcclxuICogUmV0dXJuIHRoZSBzcGVjaWZpYyB2ZXJ0aWNlcyBvZiBhIGNsdXN0ZXJpbmcgaW4gdGhlIHNwYXRpYWwgdmlld1xyXG4gKiBSZXR1cm4gYW4gYXJyYXkgb2YgcG9pbnRzIFtbeCx5XVt4LHldLi4uXVxyXG4gKiBAcGFyYW0ge0FycmF5fSBoaWVyYXJjaGllcyAtIEFycmF5IG9mIGFycmF5cyB3aXRoIGVhY2ggYXJyYXkgY29udGFpbnMgYWxsIHRoZSBpZHMgZm9yIGEgc3BlY2lmaWMgY2x1c3RlcmluZ1xyXG4gKi9cclxuZnVuY3Rpb24gZ2V0SGllcmFyY2h5VmVydGljZXMoaGllcmFyY2hpZXMpIHtcclxuICAgIGxldCByZXN1bHQgPSBbXTsgLy8gcmVzdWx0IHNldFxyXG4gICAgaGllcmFyY2hpZXMuZm9yRWFjaChmdW5jdGlvbihjbHVzdGVyKSB7XHJcbiAgICAgICAgbGV0IHZlcnRpY2VzID0gW107IC8vIHZlcnRpY2VzIG9mIHRoZSBjbHVzdGVycyBpbiB0aGUgc3BhdGlhbCB2aWV3XHJcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBjbHVzdGVyLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgIGxldCBncm91cE1lbWJlciA9IGFycmF5QW5pbWFscy5maW5kKGQgPT4gZFsnYSddID09PSBjbHVzdGVyW2pdKTtcclxuICAgICAgICAgICAgaWYgKGdyb3VwTWVtYmVyKSB7XHJcbiAgICAgICAgICAgICAgICB2ZXJ0aWNlcy5wdXNoKFtncm91cE1lbWJlclsncCddWzBdLCAtZ3JvdXBNZW1iZXJbJ3AnXVsxXV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIEFuZHJldyBtb250b25lIGNoYWluIGFsZ29yaXRobSByZXV0cm5zIGZvciBwb2ludHMgZmV3ZXIgdGhhbiAzIG51bGxcclxuICAgICAgICBpZiAodmVydGljZXMubGVuZ3RoID49IDMpIHtcclxuICAgICAgICAgICAgcmVzdWx0LnB1c2goZDMucG9seWdvbkh1bGwodmVydGljZXMpKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTZXQgdGhlIGFjdGl2ZSBsZXZlbCBmb3IgYSBzcGVjaWZpYyBkZW5kcm9ncmFtXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBoaWVyYXJjaHkgLSBIaWVyYXJjaHkgY2FuIGJlIGZyb20gWzAtM11cclxuICogQHBhcmFtIHtudW1iZXJ9IGxldmVsIC0gTmV3IGFjdGl2ZSBsZXZlbFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNldEhpZXJhcmNoeUxldmVsKGhpZXJhcmNoeSwgbGV2ZWwpIHtcclxuICAgIC8vIFRPRE8gY2F0Y2ggY2FzZXMgPCAwIGFuZCBiaWdnZXIgdGhhbiBvdmVyYWxsIGhlaWdodFxyXG4gICAgaGllcmFyY2h5TGV2ZWxzWydoJyArIGhpZXJhcmNoeV0gPSBsZXZlbDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJlbW92ZSB0aGUgZW50cnkgZm9yIHRoZSBoaWVyYXJjaCBsZXZlbFxyXG4gKiBAcGFyYW0ge251bWJlcn0gaGllcmFyY2h5IC0gSGllcmFyY2h5XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlSGllcmFyY2h5TGV2ZWwoaGllcmFyY2h5KSB7XHJcbiAgICAvLyBUT0RPIGNhdGNoIGNhc2VzIDwgMCBhbmQgYmlnZ2VyIHRoYW4gb3ZlcmFsbCBoZWlnaHRcclxuICAgIGRlbGV0ZSBoaWVyYXJjaHlMZXZlbHNbJ2gnICsgaGllcmFyY2h5XTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFNldCB0aGUgYWN0aXZlIGNvbG9yIGZvciBhIHNwZWNpZmljIGRlbmRyb2dyYW1cclxuICogQHBhcmFtIHtudW1iZXJ9IGhpZXJhcmNoeSAtIEhpZXJhcmNoeSBjYW4gYmUgZnJvbSBbMC0zXVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNldEhpZXJhcmNoeUNvbG9yKGhpZXJhcmNoeSkge1xyXG4gICAgLy8gY2hlY2sgaWYgdGhlIGhpZXJhcmNoeSBpcyBhbHJlYWR5IHNob3duIGFzIG5ldHdvcmtcclxuICAgIC8vIHRha2UgdGhlIHNhbWUgY29sb3JcclxuICAgIGZvciAobGV0IGtleSBpbiBuZXR3b3JrQ29sb3IpIHtcclxuICAgICAgICBpZiAoa2V5ID09PSAoJ2gnICsgaGllcmFyY2h5KSkge1xyXG4gICAgICAgICAgICBoaWVyYXJjaHlDb2xvcnNbJ2gnICsgaGllcmFyY2h5XSA9IG5ldHdvcmtDb2xvcltrZXldO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gaGllcmFyY2h5IGlzIG5vdCB2aXN1YWxpemVkIGFscmVhZHkgYXMgYSBuZXR3b3JrXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbG9ycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGxldCB0bXBfYm9vbGVhbiA9IHRydWU7XHJcbiAgICAgICAgZm9yIChsZXQga2V5IGluIGhpZXJhcmNoeUNvbG9ycykge1xyXG4gICAgICAgICAgICBpZiAoaGllcmFyY2h5Q29sb3JzLmhhc093blByb3BlcnR5KGtleSkpIHtcclxuICAgICAgICAgICAgICAgIGlmIChoaWVyYXJjaHlDb2xvcnNba2V5XSA9PT0gY29sb3JzW2ldKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wX2Jvb2xlYW4gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodG1wX2Jvb2xlYW4pIHtcclxuICAgICAgICAgICAgLy8gY2hlY2sgaWYgYSBuZXR3b3JrIGlzIGRlcGljdGVkXHJcbiAgICAgICAgICAgIC8vIGlmIHNvIHNraXAgdGhlIGNvbG9yIHdoaWNoIGlzIGFscmVhZHkgY2hvb3NlbiBmb3IgdGhlIG5ldHdvcmtcclxuICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKG5ldHdvcmtDb2xvcikubGVuZ3RoICE9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBrZXkgaW4gbmV0d29ya0NvbG9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5ldHdvcmtDb2xvcltrZXldICE9PSBjb2xvcnNbaV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGllcmFyY2h5Q29sb3JzWydoJyArIGhpZXJhcmNoeV0gPSBjb2xvcnNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBoaWVyYXJjaHlDb2xvcnNbJ2gnICsgaGllcmFyY2h5XSA9IGNvbG9yc1tpXTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZW1vdmUgdGhlIGNvbG9yIGZvciB0aGUgaGllcmFyY2ggbGV2ZWxcclxuICogQHBhcmFtIHtudW1iZXJ9IGhpZXJhcmNoeSAtIEhpZXJhcmNoeVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUhpZXJhcmNoeUNvbG9yKGhpZXJhcmNoeSkge1xyXG4gICAgZGVsZXRlIGhpZXJhcmNoeUNvbG9yc1snaCcgKyBoaWVyYXJjaHldO1xyXG59XHJcblxyXG4vKipcclxuICogQWRkIHRoZSBoaWVyYXJjaHkgYnV0dG9uIHRvIHRoZSBkaXZcclxuICogQHBhcmFtIHtudW1iZXJ9IGlkIC0gSGllcmFyY2h5IG9mIHRoZSBpZFxyXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZSAtIE5ldyBhY3RpdmUgbGV2ZWxcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBhZGRIaWVyYXJjaHlCdXR0b24oaWQsIG5hbWUpIHtcclxuICAgIGlmICgkKCcuc2hvdy1kZW5kcm9ncmFtJykubGVuZ3RoIDwgbWF4TnVtYmVySGllcmFyY2hpZXMpIHtcclxuICAgICAgICAkKCcjZGVuZHJvZ3JhbS1idXR0b25zLWRpdicpLmFwcGVuZCgnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgaWQ9XCJzaG93LWRlbmRyb2dyYW0tJyArIGlkICsgJ1wiIGRhdGE9JyArIGlkICsgJyBuYW1lPScgKyBuYW1lICtcclxuICAgICAgICAgICAgJyBjbGFzcz1cInNob3ctZGVuZHJvZ3JhbSBidG4gYnRuLWJsb2NrXCIgZGF0YS10b2dnbGU9XCJidXR0b25cIiBhcmlhLXByZXNzZWQ9XCJmYWxzZVwiIGF1dG9jb21wbGV0ZT1cIm9mZlwiPicgK1xyXG4gICAgICAgICAgICAnIDxzcGFuIGNsYXNzPVwiYnRuLWxhYmVsXCIgaWQ9XCJidG4tbGVmdFwiPiA8aSBjbGFzcz1cIm1kaSBtZGktYXJyb3ctY29sbGFwc2UtbGVmdFwiPjwvaT4mbmJzcCZuYnNwIFNob3cgJyArIG5hbWUgKyAnPC9zcGFuPicgK1xyXG4gICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJidG4tbGFiZWxcIiBpZD1cImJ0bi1yaWdodFwiPiA8aSBjbGFzcz1cIm1kaSBtZGktYXJyb3ctY29sbGFwc2UtcmlnaHRcIj48L2k+Jm5ic3AmbmJzcCBIaWRlICcgKyBuYW1lICsgJyA8L3NwYW4+PC9idXR0b24+IDxicj4nXHJcbiAgICAgICAgKTtcclxuICAgICAgICAkKCcjc2hvdy1kZW5kcm9ncmFtLScgKyBpZCkuZmluZCgnI2J0bi1yaWdodCcpLmhpZGUoKTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFJlbW92ZSBhIHNwZWNpZmljIGhpZXJhcmNoeSBidXR0b24gdG8gdGhlIGRpdlxyXG4gKiBAcGFyYW0ge251bWJlcn0gaWQgLSBIaWVyYXJjaHkgb2YgdGhlIGlkXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlSGllcmFyY2h5QnV0dG9uKGlkKSB7XHJcbiAgICAvLyByZW1vdmUgdGhlIGZvbGxvd2luZyBsaW5lIGJyZWFrIGFuZCBlbGVtZW50XHJcbiAgICAkKCcjc2hvdy1kZW5kcm9ncmFtLScgKyBpZCkubmV4dCgpLnJlbW92ZSgpO1xyXG4gICAgJCgnI3Nob3ctZGVuZHJvZ3JhbS0nICsgaWQpLnJlbW92ZSgpO1xyXG59XHJcblxyXG4vKipcclxuICogVXBkYXRlIHNsaWRlciBhbmQgdGV4dCBpbiB0aGUgZGVuZHJvZ3JhbSBwYW5lbFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZURlbmRyb2dyYW0oKSB7XHJcbiAgICAvLyBnZXQgdGhlIGltcG9ydGFudCBpbmZvXHJcbiAgICBsZXQgaWQgPSAkKCcuc2hvdy1kZW5kcm9ncmFtLmJ0bi1wcmltYXJ5JykuYXR0cignZGF0YScpO1xyXG4gICAgbGV0IG5hbWUgPSAkKCcuc2hvdy1kZW5kcm9ncmFtLmJ0bi1wcmltYXJ5JykuYXR0cignbmFtZScpO1xyXG4gICAgLy8gc2V0IHRoZSBuYW1lIG9mIHRoZSBkaXNwbGF5ZWQgaGllcmFyY2h5XHJcbiAgICAkKCcjZGVuZHJvZ3JhbS1wYW5lbC1uYW1lJykudGV4dChuYW1lKTtcclxuXHJcbiAgICAvLyBzZXQgc2xpZGVyIGFuZCAgdGV4dCB2YWx1ZVxyXG4gICAgJCgnI2RlbmRyb2dyYW0tcGFuZWwtbGV2ZWwtc2xpZGVyJykudmFsKGhpZXJhcmNoeUxldmVsc1snaCcgKyBpZF0pO1xyXG4gICAgJCgnI2RlbmRyb2dyYW0tcGFuZWwtbGV2ZWwtdGV4dCcpLnRleHQoaGllcmFyY2h5TGV2ZWxzWydoJyArIGlkXSk7XHJcblxyXG59XHJcblxyXG4vKipcclxuICogVXBkYXRlIGhpZXJhcmNoeSBsZWdlbmRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjaGFuZ2VIaWVyYXJjaHlMZWdlbmQoKSB7XHJcbiAgICBsZXQgbGVnZW5kOyAvLyB0aGUgY29sb3IgbGVnZW5kXHJcbiAgICBsZXQgbGVnZW5kVGV4dDsgLy8gY29sb3IgbGVnZW5kIHRleHRcclxuICAgIC8vIHZhcnMgZm9yIHRoZSBsZWdlbmRcclxuICAgIGxldCBsZWdlbmRTd2F0Y2hXaWR0aCA9IDUwO1xyXG4gICAgbGV0IGxlZ2VuZFN3YXRjaEhlaWdodCA9IDIwO1xyXG5cclxuICAgIC8vIFNob3cgb3IgaGlkZSB0aGUgc3ZnIGVsZW1lbnRcclxuICAgIGlmIChPYmplY3Qua2V5cyhoaWVyYXJjaHlDb2xvcnMpLmxlbmd0aCAhPT0gMCB8fCBPYmplY3Qua2V5cyhuZXR3b3JrQ29sb3IpLmxlbmd0aCAhPT0gMCkge1xyXG4gICAgICAgICQoJyNoaWVyYXJjaHktbGVnZW5kLWRpdicpLnNob3coKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgJCgnI2hpZXJhcmNoeS1sZWdlbmQtZGl2JykuaGlkZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBsZWdlbmREYXRhID0gW107XHJcbiAgICBsZXQgbGVnZW5kVGV4dERhdGEgPSBbXTtcclxuICAgIC8vIGdldCB0aGUgcmVxdWlyZWQgZGF0YVxyXG4gICAgJCgnLnNob3ctZGVuZHJvZ3JhbScpLmVhY2goZnVuY3Rpb24oaSwgb2JqKSB7XHJcbiAgICAgICAgLy8gY2hlY2sgaWYgZGF0YSBpcyBub3QgdW5kZWZpbmVkXHJcbiAgICAgICAgaWYgKGhpZXJhcmNoeUNvbG9yc1snaCcgKyAkKG9iaikuYXR0cignZGF0YScpXSAhPSBudWxsICYmICQob2JqKS5hdHRyKCduYW1lJykgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBsZWdlbmREYXRhLnB1c2goaGllcmFyY2h5Q29sb3JzWydoJyArICQob2JqKS5hdHRyKCdkYXRhJyldKTtcclxuICAgICAgICAgICAgbGVnZW5kVGV4dERhdGEucHVzaCgkKG9iaikuYXR0cignbmFtZScpKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIC8vIGFkZCB0aGUgbmV0d29yayBjb2xvclxyXG4gICAgaWYgKE9iamVjdC5rZXlzKG5ldHdvcmtDb2xvcikubGVuZ3RoICE9PSAwKSB7XHJcbiAgICAgICAgZm9yIChsZXQga2V5IGluIG5ldHdvcmtDb2xvcikge1xyXG4gICAgICAgICAgICBpZiAobGVnZW5kRGF0YS5pbmRleE9mKG5ldHdvcmtDb2xvcltrZXldKSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIGxlZ2VuZERhdGEucHVzaChuZXR3b3JrQ29sb3Jba2V5XSk7XHJcbiAgICAgICAgICAgICAgICBsZWdlbmRUZXh0RGF0YS5wdXNoKCdOZXR3b3JrJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBEQVRBIEpPSU5cclxuICAgIGxlZ2VuZCA9IHN2Z0xlZ2VuZC5zZWxlY3RBbGwoJ3JlY3QubGVnZW5kJylcclxuICAgICAgICAuZGF0YShsZWdlbmREYXRhKTtcclxuICAgIGxlZ2VuZFRleHQgPSBzdmdMZWdlbmQuc2VsZWN0QWxsKCd0ZXh0LmxlZ2VuZC10ZXh0JylcclxuICAgICAgICAuZGF0YShsZWdlbmRUZXh0RGF0YSk7XHJcblxyXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tIExlZ2VuZCBzd2F0Y2hlcyAgLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgLy8gVVBEQVRFIC0gbGVnZW5kXHJcbiAgICBsZWdlbmQuc3R5bGUoJ2ZpbGwnLCBmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgcmV0dXJuIGQ7XHJcbiAgICB9KTtcclxuICAgIC8vIEVOVEVSIC0gbGVnZW5kXHJcbiAgICBsZWdlbmRcclxuICAgICAgICAuZW50ZXIoKVxyXG4gICAgICAgIC5hcHBlbmQoJ3JlY3QnKVxyXG4gICAgICAgIC5hdHRyKCdjbGFzcycsICdsZWdlbmQnKVxyXG4gICAgICAgIC5hdHRyKCd3aWR0aCcsIGxlZ2VuZFN3YXRjaFdpZHRoKVxyXG4gICAgICAgIC5hdHRyKCdoZWlnaHQnLCBsZWdlbmRTd2F0Y2hIZWlnaHQpXHJcbiAgICAgICAgLmF0dHIoJ3knLCAwKVxyXG4gICAgICAgIC5hdHRyKCd4JywgZnVuY3Rpb24oZCwgaSkge1xyXG4gICAgICAgICAgICByZXR1cm4gKGxlZ2VuZFN3YXRjaFdpZHRoICsgMi41ICogaSAqIGxlZ2VuZFN3YXRjaFdpZHRoKSArICdweCc7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuc3R5bGUoJ2ZpbGwnLCBmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBkO1xyXG4gICAgICAgIH0pO1xyXG4gICAgLy8gRVhJVCAtIGxlZ2VuZFxyXG4gICAgbGVnZW5kLmV4aXQoKVxyXG4gICAgICAgIC5yZW1vdmUoKTtcclxuXHJcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0gVGV4dCAgLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgLy8gVVBEQVRFIC0gbGVnZW5kIHRleHRcclxuICAgIGxlZ2VuZFRleHQudGV4dChmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgcmV0dXJuIGQ7XHJcbiAgICB9KTtcclxuICAgIC8vIEVOVEVSIC0gbGVnZW5kIHRleHRcclxuICAgIGxlZ2VuZFRleHRcclxuICAgICAgICAuZW50ZXIoKVxyXG4gICAgICAgIC5hcHBlbmQoJ3RleHQnKVxyXG4gICAgICAgIC5hdHRyKCdjbGFzcycsICdsZWdlbmQtdGV4dCcpXHJcbiAgICAgICAgLmF0dHIoJ3knLCAyICogbGVnZW5kU3dhdGNoSGVpZ2h0KVxyXG4gICAgICAgIC5hdHRyKCd4JywgZnVuY3Rpb24oZCwgaSkge1xyXG4gICAgICAgICAgICByZXR1cm4gKGxlZ2VuZFN3YXRjaFdpZHRoICsgMi41ICogaSAqIGxlZ2VuZFN3YXRjaFdpZHRoKSArICdweCc7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAudGV4dChmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBkO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIC8vIEVYSVQgLSBsZWdlbmQgdGV4dFxyXG4gICAgbGVnZW5kVGV4dC5leGl0KClcclxuICAgICAgICAucmVtb3ZlKCk7XHJcblxyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIEluaXRpYWxpemUgdGhlIGRlbmRyb2dyYW0gbGVnZW5kXHJcbiAqL1xyXG5mdW5jdGlvbiBpbml0RGVuZHJvZ3JhbUxlZ2VuZCgpIHtcclxuICAgIGxldCBsZWdlbmRXaWR0aCA9IDU1MDtcclxuICAgIGxldCBsZWdlbmRIZWlnaHQgPSA2MDtcclxuXHJcbiAgICBsZXQgZGVuZHJvZ3JhbUxlZ2VuZCA9IGQzLnNlbGVjdCgnI2RlbmRyb2dyYW0tcGFuZWwnKVxyXG4gICAgICAgIC5hcHBlbmQoJ3N2ZycpXHJcbiAgICAgICAgLmF0dHIoJ2lkJywgJ2RlbmRyb2dyYW0tbGVnZW5kJylcclxuICAgICAgICAuYXR0cignd2lkdGgnLCBsZWdlbmRXaWR0aClcclxuICAgICAgICAuYXR0cignaGVpZ2h0JywgbGVnZW5kSGVpZ2h0KTtcclxuXHJcbiAgICAkKCcjZGVuZHJvZ3JhbS1sZWdlbmQnKS5oaWRlKCk7XHJcblxyXG4gICAgbGV0IGxlZ2VuZDsgLy8gdGhlIGNvbG9yIGxlZ2VuZFxyXG4gICAgbGV0IGxlZ2VuZFRleHQ7IC8vIGNvbG9yIGxlZ2VuZCB0ZXh0XHJcbiAgICAvLyB2YXJzIGZvciB0aGUgbGVnZW5kXHJcbiAgICBsZXQgbGVnZW5kU3dhdGNoV2lkdGggPSA1MDtcclxuICAgIGxldCBsZWdlbmRTd2F0Y2hIZWlnaHQgPSAyMDtcclxuXHJcbiAgICBsZXQgbGVnZW5kRGF0YSA9IHN0YW5kYXJkRGV2aWF0aW9uQ29sb3JTY2FsZS5yYW5nZSgpO1xyXG4gICAgLy9UT0RPIGNoYW5nZSB0aGlzIHRvIGJldHRlciBzb2x1dGlvblxyXG4gICAgbGV0IGxlZ2VuZFRleHREYXRhID0gWydsb3cnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJ2hpZ2gnXTtcclxuXHJcbiAgICBsZWdlbmQgPSBkZW5kcm9ncmFtTGVnZW5kLnNlbGVjdEFsbCgncmVjdC5sZWdlbmQnKVxyXG4gICAgICAgIC5kYXRhKGxlZ2VuZERhdGEpO1xyXG4gICAgbGVnZW5kVGV4dCA9IGRlbmRyb2dyYW1MZWdlbmQuc2VsZWN0QWxsKCd0ZXh0LmxlZ2VuZC10ZXh0JylcclxuICAgICAgICAuZGF0YShsZWdlbmRUZXh0RGF0YSk7XHJcblxyXG4gICAgLy8gRU5URVIgLSBsZWdlbmRcclxuICAgIGxlZ2VuZFxyXG4gICAgICAgIC5lbnRlcigpXHJcbiAgICAgICAgLmFwcGVuZCgncmVjdCcpXHJcbiAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2xlZ2VuZCcpXHJcbiAgICAgICAgLmF0dHIoJ3dpZHRoJywgbGVnZW5kU3dhdGNoV2lkdGgpXHJcbiAgICAgICAgLmF0dHIoJ2hlaWdodCcsIGxlZ2VuZFN3YXRjaEhlaWdodClcclxuICAgICAgICAuYXR0cigneScsIDApXHJcbiAgICAgICAgLmF0dHIoJ3gnLCBmdW5jdGlvbihkLCBpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoaSAqIGxlZ2VuZFN3YXRjaFdpZHRoKSArICdweCc7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuc3R5bGUoJ2ZpbGwnLCBmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBkO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLSBUZXh0ICAtLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAvLyBFTlRFUiAtIGxlZ2VuZCB0ZXh0XHJcbiAgICBsZWdlbmRUZXh0XHJcbiAgICAgICAgLmVudGVyKClcclxuICAgICAgICAuYXBwZW5kKCd0ZXh0JylcclxuICAgICAgICAuYXR0cignY2xhc3MnLCAnbGVnZW5kLXRleHQnKVxyXG4gICAgICAgIC5hdHRyKCd5JywgMiAqIGxlZ2VuZFN3YXRjaEhlaWdodClcclxuICAgICAgICAuYXR0cigneCcsIGZ1bmN0aW9uKGQsIGkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChpICogbGVnZW5kU3dhdGNoV2lkdGgpICsgJ3B4JztcclxuICAgICAgICB9KVxyXG4gICAgICAgIC50ZXh0KGZ1bmN0aW9uKGQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGQ7XHJcbiAgICAgICAgfSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTZXQgdGhlIHNldCBvcGVyYXRpb25cclxuICogQHBhcmFtIHtzdHJpbmd9IG9wZXJhdGlvbiAtIGUuZy4gXCJ1bmlvblwiIFwiaW50ZXJzZWN0aW9uXCIgXCJzeW0tZGlmZmVyZW5jZVwiXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc2V0U2V0T3BlcmF0aW9uKHZhbHVlKSB7XHJcbiAgICBzZXRPcGVyYXRpb24gPSB2YWx1ZTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFNldCB0aGUgaGllcmFyY2h5IGdyb3VwIHN0YW5kYXJkIGRldmlhdGlvblxyXG4gKiBAcGFyYW0ge1N0cmluZ30ga2V5IC0gdW5pcXVlIGhhc2ggaWQgZm9yIHRoZSBncm91cFxyXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgLSB1bmlxdWUgaGFzaCBpZCBmb3IgdGhlIGdyb3VwXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc2V0aGllcmFyY2h5R3JvdXBTdGRldihrZXksIHZhbHVlKSB7XHJcbiAgICBpZiAoa2V5IGluIGhpZXJhcmNoeUdyb3VwU3RkZXYpIHtcclxuICAgICAgICBoaWVyYXJjaHlHcm91cFN0ZGV2W2tleV0ucHVzaCh2YWx1ZSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGhpZXJhcmNoeUdyb3VwU3RkZXZba2V5XSA9IFt2YWx1ZV07XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXNldCBoaWVyYXJjaHkgZ3JvdXAgc3RhbmRhcmQgZGV2aWF0aW9uXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcmVzZXRoaWVyYXJjaHlHcm91cFN0ZGV2KCkge1xyXG4gICAgaGllcmFyY2h5R3JvdXBTdGRldiA9IHt9O1xyXG59XHJcblxyXG4vKipcclxuICogSGlnaGxpZ2h0IGEgc3Vic2V0IG9mIGFuaW1hbHMgaW4gdGhlIHNwYXRpYWwgdmlld1xyXG4gKiBAcGFyYW0ge2FycmF5fSBhbmltYWxzIC0gYXJyYXkgb2YgYW5pbWFsIGlkcyB3aGljaCBoYXZlIHRvIGJlIGhpZ2hsaWdodGVkXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gYWRkSGlnaGxpZ2h0U3BhdGlhbFZpZXcoYW5pbWFscykge1xyXG4gICAgLy8gcG9pbnRzIHRvIGNhbGN1bGF0ZSB0aGUgY29udmV4IGh1bGwgb2YgdGhlIGhpZ2hsaWdodCBjbHVzdGVyXHJcbiAgICBsZXQgdmVydGljZXMgPSBbXTtcclxuICAgIC8vIGl0ZXJhdGUgdGhyb3VnaCB0aGUgb2JqZWN0cyBpbiB0aGUgY2x1c3RlclxyXG4gICAgLy8gZ2V0IHRoZSBwb2ludHMgYW5kIGhpZ2hsaWdodCB0aGUgYW5pbWFsc1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhbmltYWxzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgbGV0IHRtcEFuaW1hbCA9IHNwYXRpYWxWaWV3LnNlbGVjdCgnI2FuaW1hbC0nICsgYW5pbWFsc1tpXSk7XHJcbiAgICAgICAgbGV0IHBvaW50ID0gdG1wQW5pbWFsLmRhdGEoKVswXVsncCddO1xyXG4gICAgICAgIHZlcnRpY2VzLnB1c2goW3BvaW50WzBdLCAtcG9pbnRbMV1dKTtcclxuXHJcbiAgICAgICAgdG1wQW5pbWFsLmNsYXNzZWQoJ2FuaW1hbC1oaWdobGlnaHQnLCB0cnVlKTtcclxuICAgIH1cclxuICAgIC8vIGFkZCBhIHBvbHlnb24gaHVsbCBpbiB0aGUgc3BhdGlhbCB2aWV3XHJcbiAgICBzcGF0aWFsVmlldy5hcHBlbmQoJ3BhdGgnKVxyXG4gICAgICAgIC5hdHRyKCdjbGFzcycsICdoaWdobGlnaHQtaGllcmFyY2h5JylcclxuICAgICAgICAuYXR0cignZCcsICgnTScgKyBkMy5wb2x5Z29uSHVsbCh2ZXJ0aWNlcykuam9pbignTCcpICsgJ1onKSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZW1vdmUgdGhlIGhpZ2hsaWdodCBpbiB0aGUgc3BhdGlhbCB2aWV3XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlSGlnaGxpZ2h0U3BhdGlhbFZpZXcoKSB7XHJcbiAgICAvLyByZW1vdmUgdGhlIGNvbG9yaW5nIGFuZCB0aGUgaGllcmFyY2h5IGhpZ2hsaWdodCBodWxsXHJcbiAgICBkMy5zZWxlY3RBbGwoJy5hbmltYWwnKS5jbGFzc2VkKCdhbmltYWwtaGlnaGxpZ2h0JywgZmFsc2UpO1xyXG4gICAgZDMuc2VsZWN0QWxsKCcuaGlnaGxpZ2h0LWhpZXJhcmNoeScpLnJlbW92ZSgpO1xyXG59XHJcbiIsIi8qZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLWxldHMqL1xyXG4vKmdsb2JhbCB3aW5kb3csJCwgZDMsKi9cclxuLy8gaW1wb3J0ICogYXMgc3B2IGZyb20gJy4vc3BhdGlhbF92aWV3LmpzJztcclxuXHJcbmltcG9ydCB7XHJcbiAgICBkcmF3XHJcbn0gZnJvbSAnLi9zcGF0aWFsX3ZpZXcvc3BhdGlhbF92aWV3LmpzJztcclxuXHJcbmltcG9ydCB7XHJcbiAgICBzZXRQbGF5Qm9vbGVhblxyXG59IGZyb20gJy4vbGlzdGVuZXIuanMnO1xyXG5cclxuaW1wb3J0IHtcclxuICAvL2luaXRUcmVuZENoYXJ0TGlzdGVuZXIsXHJcbiAgVHJlbmRDaGFydFxyXG59IGZyb20gJy4vbGluZV9jaGFydC5qcyc7XHJcbmltcG9ydCB7XHJcbiAgICBzd2FybURhdGFcclxufSBmcm9tICcuL2V4cGxvcmUuanMnO1xyXG4vKipcclxuICogRGlzYWJsZSB0aGUgcGxheSBidXR0b24gLS0+IExvYWRpbmcgc3ltYm9sXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZGlzYWJsZVBsYXlCdXR0b24oKSB7XHJcbiAgICBzZXRQbGF5Qm9vbGVhbihmYWxzZSk7XHJcbiAgICAkKCcjcGxheS1idXR0b24nKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XHJcbiAgICAkKCcjcGxheS1idXR0b24nKS5wcm9wKCdkaXNhYmxlZCcsIHRydWUpO1xyXG4gICAgJCgnI3BsYXktaWNvbnMnKS5oaWRlKCk7XHJcbiAgICAkKCcjcGxheS1sb2FkaW5nJykuc2hvdygpO1xyXG5cclxufVxyXG5cclxuLyoqXHJcbiAqIEVuYWJsZSB0aGUgcGxheSBidXR0b24gcmVtb3ZlIGxvYWRpbmcgc3ltYm9sXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZW5hYmxlUGxheUJ1dHRvbigpIHtcclxuICAgIHNldFBsYXlCb29sZWFuKHRydWUpO1xyXG4gICAgJCgnI3BsYXktYnV0dG9uJykuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgJCgnI3BsYXktYnV0dG9uJykucHJvcCgnZGlzYWJsZWQnLCBmYWxzZSk7XHJcbiAgICAkKCcjcGxheS1sb2FkaW5nJykuaGlkZSgpO1xyXG4gICAgJCgnI3BsYXktaWNvbnMnKS5zaG93KCk7XHJcbiAgICBkcmF3KCk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm4gIC4wNSBwZXJjZW50aWxlcyBvZiB0aGUgYXJyYXlcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBwZXJjZW50aWxlcyhhcnIpIHtcclxuICAgIGxldCBwID0gMC4wNTtcclxuICAgIGlmIChhcnIubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuIDA7XHJcbiAgICB9XHJcbiAgICBhcnIuc29ydChmdW5jdGlvbihhLCBiKSB7XHJcbiAgICAgICAgcmV0dXJuIGEgLSBiO1xyXG4gICAgfSk7XHJcbiAgICBsZXQgaW5kZXggPSAoYXJyLmxlbmd0aCAtIDEpICogcDtcclxuICAgIGxldCBsb3dlciA9IE1hdGguZmxvb3IoaW5kZXgpO1xyXG4gICAgbGV0IHVwcGVyID0gbG93ZXIgKyAxO1xyXG4gICAgbGV0IHdlaWdodCA9IGluZGV4ICUgMTtcclxuICAgIGlmICh1cHBlciA+PSBhcnIubGVuZ3RoKSB7XHJcbiAgICAgICAgcmV0dXJuIDEgLSBhcnJbbG93ZXJdO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gMSAtIChhcnJbbG93ZXJdICogKDEgLSB3ZWlnaHQpICsgYXJyW3VwcGVyXSAqIHdlaWdodCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm4gdGhlIDA1LCAyNSwgNTAsIDc1LCA5NSBwZXJjZW50aWxlcyBvZiB0aGUgYXJyYXlcclxuICpcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBwZXJjZW50aWxlc0xpbmVDaGFydChhcnIpIHtcclxuICAgIGxldCBwID0gWzAuMDUsIDAuMjUsIDAuNSwgMC43NSwgMC45NV07XHJcbiAgICBsZXQgcmVzdWx0ID0gW107XHJcbiAgICBpZiAoYXJyLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIHJldHVybiAwO1xyXG4gICAgfVxyXG4gICAgYXJyLnNvcnQoZnVuY3Rpb24oYSwgYikge1xyXG4gICAgICAgIHJldHVybiBhIC0gYjtcclxuICAgIH0pO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgbGV0IGluZGV4ID0gKGFyci5sZW5ndGggLSAxKSAqIHBbaV07XHJcbiAgICAgICAgbGV0IGxvd2VyID0gTWF0aC5mbG9vcihpbmRleCk7XHJcbiAgICAgICAgbGV0IHVwcGVyID0gbG93ZXIgKyAxO1xyXG4gICAgICAgIGxldCB3ZWlnaHQgPSBpbmRleCAlIDE7XHJcbiAgICAgICAgaWYgKHVwcGVyID49IGFyci5sZW5ndGgpIHtcclxuICAgICAgICAgICAgcmVzdWx0LnB1c2goYXJyW2xvd2VyXSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmVzdWx0LnB1c2goYXJyW2xvd2VyXSAqICgxIC0gd2VpZ2h0KSArIGFyclt1cHBlcl0gKiB3ZWlnaHQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBMaW5lIGNoYXJ0IGRldGFpbHMgY2xpY2sgbGlzdGVuZXJcclxuICovXHJcbmZ1bmN0aW9uIGluaXRUcmVuZENoYXJ0TGlzdGVuZXIoKSB7XHJcbiAgICAkKCcuZHJhdy1kZXRhaWxzJykuY2xpY2soZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKCQodGhpcykuZmluZCgnaW5wdXQ6Y2hlY2tib3gnKS5wcm9wKCdjaGVja2VkJykpIHtcclxuICAgICAgICAgICAgLy9kaXNhYmxlTGluZUNoYXJ0KCk7XHJcbiAgICAgICAgICAgIHZhciB0cmVuZGNoYXJ0ID0gbmV3IFRyZW5kQ2hhcnQodGhpcywgc3dhcm1EYXRhKTtcclxuICAgICAgICAgICAgdHJlbmRjaGFydC5kaXNhYmxlTGluZUNoYXJ0KCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmVtb3ZlVHJlbmRDaGFydCgpO1xyXG4gICAgICAgICAgICBlbmFibGVMaW5lQ2hhcnQoKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufVxyXG5cclxuLyoqXHJcbiAqIExpbmUgY2hhcnQgZGV0YWlscyBjbGljayBsaXN0ZW5lclxyXG4gKi9cclxuZnVuY3Rpb24gZGlzYWJsZUxpbmVDaGFydCgpIHtcclxuICAgICQoJy5saW5lQ2hhcnRCdXR0b24nKS5wcm9wKCdjaGVja2VkJywgZmFsc2UpLnByb3AoJ2Rpc2FibGVkJywgdHJ1ZSk7XHJcbiAgICAkKCcubGluZS1jaGFydC1jaGVjay1ib3gnKS5hdHRyKCdkaXNhYmxlZCcsIHRydWUpO1xyXG4gICAgJCgnLmxpbmVDaGFydExpbmUnKS5hdHRyKCd2aXNpYmlsaXR5JywgJ2hpZGRlbicpO1xyXG59XHJcblxyXG4vKipcclxuICogTGluZSBjaGFydCBkZXRhaWxzIGNsaWNrIGxpc3RlbmVyXHJcbiAqL1xyXG5mdW5jdGlvbiBlbmFibGVMaW5lQ2hhcnQoKSB7XHJcbiAgICAkKCcubGluZUNoYXJ0QnV0dG9uJykucHJvcCgnY2hlY2tlZCcsIHRydWUpLnByb3AoJ2Rpc2FibGVkJywgZmFsc2UpO1xyXG4gICAgJCgnLmxpbmUtY2hhcnQtY2hlY2stYm94JykuYXR0cignZGlzYWJsZWQnLCBmYWxzZSk7XHJcbiAgICAkKCcubGluZUNoYXJ0TGluZScpLmF0dHIoJ3Zpc2liaWxpdHknLCAndmlzaWJsZScpO1xyXG59XHJcblxyXG4vKipcclxuICogSGlkZSB0aGUgdHJlbmQgY2hhcnRcclxuICovXHJcbmZ1bmN0aW9uIHJlbW92ZVRyZW5kQ2hhcnQoKSB7XHJcbiAgICAkKCcudHJlbmRDaGFydERhdGEnKS5oaWRlKCk7XHJcbiAgICAkKCcjdHJlbmRDaGFydExlZ2VuZCcpLmhpZGUoKTtcclxuICAgICQoJyNsaW5lQ2hhcnRMZWdlbmQnKS5zaG93KCk7XHJcbn1cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIEFkZCB0aGUgYWJzb2x1dGUgZmVhdHVyZSBjaGVja2JveGVzIGluIHRoZSBmZWF0dXJlIHBhbmVsIGV4cG9ydCB0byBhamF4XHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gYWRkQWJzb2x1dGVGZWF0dXJlQnV0dG9ucyhkYXRhU2V0UGVyY2VudGlsZSkge1xyXG4gICAgLy8gaXRlcmF0ZSBvdmVyIHRoZSBvYmplY3RcclxuICAgIGZvciAodmFyIGtleSBpbiBkYXRhU2V0UGVyY2VudGlsZSkge1xyXG4gICAgICAgIGlmIChkYXRhU2V0UGVyY2VudGlsZS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XHJcbiAgICAgICAgICAgIC8vIGdlbmVyYXRlIHRleHQgZm9yIHRoZSBkaXNwbGF5ZWQgYnV0dG9uXHJcbiAgICAgICAgICAgIGxldCBjYXBpdGFsaXplZF9mZWF0dXJlX3N0cmluZyA9IGtleS5zcGxpdCgnXycpLmpvaW4oJyAnKTtcclxuICAgICAgICAgICAgY2FwaXRhbGl6ZWRfZmVhdHVyZV9zdHJpbmcgPSBjYXBpdGFsaXplZF9mZWF0dXJlX3N0cmluZy5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIGNhcGl0YWxpemVkX2ZlYXR1cmVfc3RyaW5nLnNsaWNlKDEpO1xyXG4gICAgICAgICAgICAvLyBhZGQgdGhlIGJ1dHRvblxyXG4gICAgICAgICAgICAkKCcjYWJzb2x1dGUtZmVhdHVyZS1jaGVja2JveGVzJykuYXBwZW5kKCc8dHI+PHRoPicgK1xyXG4gICAgICAgICAgICAgICAgJyA8ZGl2IGNsYXNzPVwicHJldHR5IHAtc3dpdGNoIHAtZmlsbCBwLWJpZ2dlclwiPjxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBpZD1cImRyYXctJyArIGtleSArXHJcbiAgICAgICAgICAgICAgICAnXCIvPjxkaXYgY2xhc3M9XCJzdGF0ZVwiPjxsYWJlbD4nICsgY2FwaXRhbGl6ZWRfZmVhdHVyZV9zdHJpbmcgKyAnPC9sYWJlbD48L2Rpdj48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgIC8vIHF1YW50aWxlIGdyYXBoXHJcbiAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cImZsb2F0LXJpZ2h0IGRyYXctZGV0YWlsc1wiIGlkPVwiZHJhdy0nICsga2V5ICsgJy1kZXRhaWxzXCI+PGRpdiBjbGFzcz1cInByZXR0eSBwLWljb24gcC10b2dnbGUgcC1wbGFpblwiPjxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBpZD1cImRyYXctJyArIGtleSArICctaW5wdXRcIiAvPicgK1xyXG4gICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzdGF0ZSBwLXN1Y2Nlc3MtbyBwLW9uXCI+PGkgY2xhc3M9XCJtZGkgbWRpLWltYWdlLWFyZWFcIj48L2k+PGxhYmVsPjwvbGFiZWw+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cInN0YXRlIHAtb2ZmXCI+PGkgY2xhc3M9XCJtZGkgbWRpLWltYWdlLW9mZlwiPjwvaT48bGFiZWw+PC9sYWJlbD48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICc8L2Rpdj48L2Rpdj48L3RoPjwvdHI+Jyk7XHJcblxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIGhpZGUgdGhlIGVsZW1lbnRzXHJcbiAgICAkKCcuZHJhdy1kZXRhaWxzJykuaGlkZSgpO1xyXG4gICAgLy8gaW5pdCB0aGUgbGlzdGVybmVyc1xyXG4gIGluaXRUcmVuZENoYXJ0TGlzdGVuZXIoKTtcclxuXHJcbn1cclxuXHJcbi8vIGdlbmVyYXRlIGhhc2ggY29kZXMgZnJvbSBzdHJpbmdzXHJcbi8vIHNvdXJjZTogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNzYxNjQ2MS9nZW5lcmF0ZS1hLWhhc2gtZnJvbS1zdHJpbmctaW4tamF2YXNjcmlwdC1qcXVlcnlcclxuU3RyaW5nLnByb3RvdHlwZS5oYXNoQ29kZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIGhhc2ggPSAwLFxyXG4gICAgICAgIGksIGNocjtcclxuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIGhhc2g7XHJcbiAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGNociA9IHRoaXMuY2hhckNvZGVBdChpKTtcclxuICAgICAgICBoYXNoID0gKChoYXNoIDw8IDUpIC0gaGFzaCkgKyBjaHI7XHJcbiAgICAgICAgaGFzaCB8PSAwOyAvLyBDb252ZXJ0IHRvIDMyYml0IGludGVnZXJcclxuICAgIH1cclxuICAgIHJldHVybiBoYXNoO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIENhbGN1bGF0ZSB0aGUgc3RhbmRhcmREZXZpYXRpb24gb2YgYW4gYXJyYXkgb2YgbnVtYmVyc1xyXG4gKiBAcGFyYW0ge0FycmF5fSBhcnIgLSBhcnJheSBvZiBudW1iZXJzXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc3RhbmRhcmREZXZpYXRpb24oYXJyKSB7XHJcbiAgICBpZiAoYXJyIGluc3RhbmNlb2YgQXJyYXkpIHtcclxuICAgICAgICBsZXQgbWVhbiA9IGFyci5yZWR1Y2UoZnVuY3Rpb24ocHYsIGN2KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBwdiArIGN2O1xyXG4gICAgICAgIH0sIDApIC8gYXJyLmxlbmd0aDtcclxuICAgICAgICBsZXQgdG1wID0gYXJyLm1hcChmdW5jdGlvbihudW0pIHtcclxuICAgICAgICAgICAgcmV0dXJuIE1hdGgucG93KG51bSAtIG1lYW4sIDIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBNYXRoLnNxcnQodG1wLnJlZHVjZShmdW5jdGlvbihwdiwgY3YpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHB2ICsgY3Y7XHJcbiAgICAgICAgfSwgMCkgLyB0bXAubGVuZ3RoKTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIE1vdmUgZWxlbWVudCBpbiBTVkcgaW50byBiYWNrZ3JvdW5kIGRvbmUgYnkgbW92aW5nIGl0IHRvIGZpcnN0IGVsZW1lbnRcclxuICovXHJcbmQzLnNlbGVjdGlvbi5wcm90b3R5cGUubW92ZVRvQmFjayA9IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgZmlyc3RDaGlsZCA9IHRoaXMucGFyZW50Tm9kZS5maXJzdENoaWxkO1xyXG4gICAgICAgIGlmIChmaXJzdENoaWxkKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpcywgZmlyc3RDaGlsZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn07XHJcblxyXG4vKipcclxuICogTWFrZSB0aGUgbWFpbiB2aXMgc3BhdGlhbCB2aWV3IHJlc2l6YWJsZVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VSZXNpemFibGUoaGVpZ2h0LCB3aWR0aCkge1xyXG4gICAgJChmdW5jdGlvbigpIHtcclxuICAgICAgICAkKCcjbWFpbi12aXMnKVxyXG4gICAgICAgICAgICAuZHJhZ2dhYmxlKHtcclxuICAgICAgICAgICAgICAgIGNvbnRhaW5tZW50OiAncGFyZW50J1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAucmVzaXphYmxlKHtcclxuICAgICAgICAgICAgICAgIGFzcGVjdFJhdGlvOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgbWF4V2lkdGg6ICQoJyNtYWluLXZpcy1kaXYnKS53aWR0aCgpXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5oZWlnaHQoaGVpZ2h0ICogMC42KVxyXG4gICAgICAgICAgICAud2lkdGgod2lkdGggKiAwLjYpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXNldCB0aGUgYnV0dG9ucyBhbmQgY2hlY2tib3hlc1xyXG4gKiBIaWRlIGljb25zIC0gbmVlZGVkIGJlY2F1c2Ugb2YgYm9vdHN0cmFwIGJ1Z1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRDb25maWcoKSB7XHJcbiAgICAkKCdpbnB1dFt0eXBlPWNoZWNrYm94XScpLnByb3AoJ2NoZWNrZWQnLCBmYWxzZSk7XHJcbiAgICAvL3NldCB0aGUgY29sb3Igc2NhbGUgZnVuY3Rpb24gdG8gbGluZWFyXHJcbiAgICAkKCcjY29sb3Itc2NhbGUtbGluZWFyJylcclxuICAgICAgICAucHJvcCgnY2hlY2tlZCcsIHRydWUpO1xyXG4gICAgJCgnI2dyb3VwLXNpemUtbScpXHJcbiAgICAgICAgLnByb3AoJ2NoZWNrZWQnLCB0cnVlKTtcclxuICAgICQoJyNiYWNrZ3JvdW5kLXdoaXRlJylcclxuICAgICAgICAucHJvcCgnY2hlY2tlZCcsIHRydWUpO1xyXG4gICAgJCgnI3NldHRpbmdzLWRpdiBpbnB1dFt0eXBlPWNoZWNrYm94XScpXHJcbiAgICAgICAgLnByb3AoJ2NoZWNrZWQnLCB0cnVlKTtcclxuICAgIC8vaGlkZSB0aGUgbG9hZGluZyBnaWZcclxuICAgICQoJyNsb2FkaW5nJylcclxuICAgICAgICAuaGlkZSgpO1xyXG4gICAgLy8gbmVlZGVkIGR1ZSB0byBqUXVlcnkgaW5jb21wYXRpYmlsaXR5XHJcbiAgICAkKCcjcGxheS1sb2FkaW5nJykuaGlkZSgpO1xyXG4gICAgJCgnLm1kaS1wbGF5JykuaGlkZSgpO1xyXG4gICAgJCgnI21ldGFkYXRhLWlucHV0JykuaGlkZSgpO1xyXG4gICAgJCgnI2RlbmRyb2dyYW0tYnV0dG9ucy1kaXYnKS5oaWRlKCk7XHJcbiAgICAkKCcjZy1jZW50cm9pZCcpLmhpZGUoKTtcclxuICAgIC8vY2hlY2sgbGluZSBjaGFydCBkcmF3IGFsbCBsaW5lc1xyXG4gICAgJCgnI2xpbmUtY2hhcnQtZmVhdHVyZS1jaGVja2JveGVzIGlucHV0W3R5cGU9Y2hlY2tib3hdJylcclxuICAgICAgICAucHJvcCgnY2hlY2tlZCcsIHRydWUpO1xyXG59XHJcbiIsIi8qZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLWxldHMqL1xyXG4vKmdsb2JhbCB3aW5kb3csICQsZDMsIHBhcmFtZXRlcnMsIFNldCAqL1xyXG4ndXNlIHN0cmljdCc7XHJcbmltcG9ydCB7XHJcbiAgICBkYXRhc2V0LFxyXG4gICAgbmV0d29ya0RhdGEsXHJcbiAgICBzd2FybURhdGFcclxufSBmcm9tICcuLi9leHBsb3JlLmpzJztcclxuXHJcbmltcG9ydCB7XHJcbiAgICBuZXR3b3JrQ29sb3JTY2FsZSxcclxuICAgIG5ldHdvcmtBdXRvLFxyXG4gICAgc2V0TmV0d29yTGltaXQsXHJcbiAgICBuZXR3b3JrTGltaXQsXHJcbiAgICAvLyBzaG93TmV0d29ya0hpZXJhcmNoeSxcclxuICAgIC8vIG5ldHdvcmtJRCxcclxuICAgIC8vIG5ldHdvcmtCYWNrZ3JvdW5kLFxyXG4gICAgLy8gbmV0d29ya0JhY2tncm91bmRMaW1pdFxyXG59IGZyb20gJy4uL25ldHdvcmsuanMnO1xyXG5cclxuaW1wb3J0IHtcclxuICAgIC8vbGluZUNoYXJ0LFxyXG4gICAgdXBkYXRlTGluZUNoYXJ0LFxyXG4gICAgTGluZUNoYXJ0XHJcbn0gZnJvbSAnLi4vbGluZV9jaGFydCc7XHJcblxyXG5pbXBvcnQge1xyXG4gICAgcGVyY2VudGlsZXMsXHJcbiAgICBtYWtlUmVzaXphYmxlLFxyXG4gICAgZGVmYXVsdENvbmZpZ1xyXG59IGZyb20gJy4uL2hlbHBlcnMuanMnO1xyXG5cclxuaW1wb3J0IHtcclxuICAgIHNldFRpbWVTbGlkZXIsXHJcbiAgICBpbml0VG9vbHRpcCxcclxuICAgIHRvb2x0aXBGdW5jdGlvbixcclxuICAgIGluaXRTbGlkZXJzLFxyXG4gICAgdG9vbHRpcFxyXG59IGZyb20gJy4vaW50ZXJhY3Rpb24uanMnO1xyXG5cclxuaW1wb3J0IHtcclxuICAgIG1ldGFkYXRhQ29sb3JcclxufSBmcm9tICcuLi9tZXRhZGF0YS5qcyc7XHJcblxyXG5pbXBvcnQge1xyXG4gICAgaW5pdENvbG9yUGlja2VyLFxyXG4gICAgcmV0dXJuQ29sb3JTY2FsZVxyXG59IGZyb20gJy4vY29sb3JfcGlja2VyLmpzJztcclxuXHJcbmltcG9ydCB7XHJcbiAgICBpbml0TGlzdGVuZXJzLFxyXG4gICAgcGxheUJvb2xlYW5cclxufSBmcm9tICcuLi9saXN0ZW5lci5qcyc7XHJcblxyXG5pbXBvcnQge1xyXG4gICAgYWRkU3BhdGlhbFZpZXdHcm91cFxyXG59IGZyb20gJy4vbGVnZW5kLmpzJztcclxuXHJcbmltcG9ydCB7XHJcbiAgICBpbml0RGVuZHJvZ3JhbSxcclxuICAgIGRyYXdEZW5kcm9ncmFtLFxyXG4gICAgLy8gbmV0d29ya0hpZXJhcmNoeUlkcyxcclxuICAgIC8vIHNldGhpZXJhcmNoeUdyb3VwU3RkZXYsXHJcbiAgICByZXNldGhpZXJhcmNoeUdyb3VwU3RkZXZcclxufSBmcm9tICcuLi9oaWVyYXJjaHkuanMnO1xyXG5cclxuaW1wb3J0IHtcclxuICAgIHRyYWNraW5nQm9vbGVhbixcclxuICAgIGFkZFRyYWNrZWREYXRhXHJcbn0gZnJvbSAnLi4vdmlzdWFsX3BhcmFtZXRlci5qcyc7XHJcblxyXG5cclxuZXhwb3J0IGxldCBpbmRleFRpbWUgPSAwOyAvLyBhY3R1YWwgdGltZSBtb21lbnQgaW4gdGhlIGFuaW1hdGlvblxyXG5leHBvcnQgbGV0IHRhbmtXaWR0aDtcclxuZXhwb3J0IGxldCB0YW5rSGVpZ2h0O1xyXG5leHBvcnQgbGV0IGFjdGl2ZVNjYWxlID0gJ2JsYWNrJzsgLy8gY2FuIGJlIHNwZWVkLCBhY2NlbGVyYXRpb24sIC4uIGFuZCBibGFjayAobWVhbmluZyBubyBhY3RpdmUgc2NhbGUpXHJcbmV4cG9ydCBsZXQgbWVkb2lkQW5pbWFsID0gLTE7IC8vIHdoaWNoIGFuaW1hbCBpcyB0aGUgbWVkb2lkICgtMSBpcyBubyBhbmltYWwpXHJcbmV4cG9ydCBsZXQgYWN0aXZlQW5pbWFscyA9IFtdOyAvLyBhY3RpdmUgc2VsZWN0ZWQgYW5pbWFsc1xyXG5leHBvcnQgbGV0IGFycmF5QW5pbWFsczsgLy8gYXJyYXkgb2YgYW5pbWFscyBmb3IgdGhlIHNwZWNpZmljIHRpbWUgZnJhbWVcclxuXHJcbmxldCBzdmdDb250YWluZXI7IC8vIHN2ZyBjb250YWluZXIgZm9yIHRoZSBzcGF0aWFsIHZpZXdcclxubGV0IHRhbms7IC8vIHN2ZyBncm91cCBmb3IgdGhlIHNwYXRpYWwgdmlldyB0YW5rXHJcbi8vIGxldCBuZXR3b3JrQmFrRGF0YSA9IHt9O1xyXG5cclxuLyoqXHJcbiAqIEluaXRpYWxpemUgdGhlIHNwYXRpYWwgdmlldyB3aXRoIGFsbCB0aGUgaW1wb3J0YW50IGZhY3RvcnNcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzcGF0aWFsVmlld0luaXQoKSB7XHJcblxyXG4gICAgbGV0IG1pblBvaW50ID0gcGFyYW1ldGVyc1snbWluJ11bJ2dlb21ldHJ5J11bJ2Nvb3JkaW5hdGVzJ107XHJcbiAgICBsZXQgbWF4UG9pbnQgPSBwYXJhbWV0ZXJzWydtYXgnXVsnZ2VvbWV0cnknXVsnY29vcmRpbmF0ZXMnXTtcclxuICAgIC8vIGxldCBjb29yZGluYXRlT3JpZ2luID0gcGFyYW1ldGVyc1snY29vcmRpbmF0ZV9vcmlnaW4nXVsnZ2VvbWV0cnknXVsnY29vcmRpbmF0ZXMnXTtcclxuICAgIC8vIHdpZHRoID0gd2lkdGggKjEuMDIgLS0+IHNvIHRoZXJlIGlzIGEgbWFyZ2luIGluIHRoZSBzcGF0aWFsIHZpZXcgd2hlcmUgbm8gYW5pbWFsIGlzIGV2ZXJcclxuICAgIHRhbmtXaWR0aCA9IChtYXhQb2ludFswXSAtIG1pblBvaW50WzBdKSAqIDEuMDI7XHJcbiAgICB0YW5rSGVpZ2h0ID0gKG1heFBvaW50WzFdIC0gbWluUG9pbnRbMV0pICogMS4wMjtcclxuICAgIC8vWCBhbmQgWSBheGlzXHJcbiAgICBsZXQgeCA9IGQzLnNjYWxlTGluZWFyKClcclxuICAgICAgICAuZG9tYWluKFttaW5Qb2ludFswXSwgbWF4UG9pbnRbMF1dKVxyXG4gICAgICAgIC5yYW5nZShbbWluUG9pbnRbMF0sIG1heFBvaW50WzBdXSk7XHJcblxyXG4gICAgbGV0IHhBeGlzID0gZDMuYXhpc0JvdHRvbSh4KVxyXG4gICAgICAgIC50aWNrcygxMClcclxuICAgICAgICAudGlja1NpemUoMTApXHJcbiAgICAgICAgLnRpY2tQYWRkaW5nKDUpO1xyXG5cclxuICAgIGxldCB5ID0gZDMuc2NhbGVMaW5lYXIoKVxyXG4gICAgICAgIC5kb21haW4oW21pblBvaW50WzFdLCBtYXhQb2ludFsxXV0pXHJcbiAgICAgICAgLnJhbmdlKFttaW5Qb2ludFsxXSwgbWF4UG9pbnRbMV1dKTtcclxuXHJcbiAgICBsZXQgeUF4aXMgPSBkMy5heGlzUmlnaHQoeSlcclxuICAgICAgICAudGlja3MoNylcclxuICAgICAgICAudGlja1NpemUoMTApXHJcbiAgICAgICAgLnRpY2tQYWRkaW5nKDUpO1xyXG5cclxuICAgIC8vIFpPT01JTkcgQU5EIFBBTk5JTkcgU1RVRkZcclxuICAgIGxldCB6b29tR3JvdXA7XHJcbiAgICBsZXQgem9vbSA9IGQzLnpvb20oKVxyXG4gICAgICAgIC5zY2FsZUV4dGVudChbMSwgNl0pXHJcbiAgICAgICAgLm9uKCd6b29tJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIC8vY29uc3RyYWluZWQgem9vbWluZ1xyXG4gICAgICAgICAgICAvLyBtb2RpZnkgdGhlIHRyYW5zbGF0ZSBzbyB0aGF0IGl0IG5ldmVyIGV4aXRzIHRoZSB0YW5rXHJcbiAgICAgICAgICAgIGQzLmV2ZW50LnRyYW5zZm9ybS54ID0gTWF0aC5taW4oMCwgdGFua1dpZHRoICogKGQzLmV2ZW50LnRyYW5zZm9ybS5rIC0gMSksXHJcbiAgICAgICAgICAgICAgICBNYXRoLm1heCh0YW5rV2lkdGggKiAoMSAtIGQzLmV2ZW50LnRyYW5zZm9ybS5rKSwgZDMuZXZlbnQudHJhbnNmb3JtLngpKTtcclxuXHJcbiAgICAgICAgICAgIGQzLmV2ZW50LnRyYW5zZm9ybS55ID0gTWF0aC5taW4oMCwgdGFua0hlaWdodCAqIChkMy5ldmVudC50cmFuc2Zvcm0uayAtIDEpLFxyXG4gICAgICAgICAgICAgICAgTWF0aC5tYXgodGFua0hlaWdodCAqICgxIC0gZDMuZXZlbnQudHJhbnNmb3JtLmspLCBkMy5ldmVudC50cmFuc2Zvcm0ueSkpO1xyXG5cclxuICAgICAgICAgICAgLy8gdHJhbnNsYXRlIGFuZCBzY2FsZVxyXG4gICAgICAgICAgICB6b29tR3JvdXAuYXR0cigndHJhbnNmb3JtJywgZDMuZXZlbnQudHJhbnNmb3JtKTtcclxuXHJcbiAgICAgICAgICAgIC8vIHJlc2NhbGUgdGhlIGF4aXNcclxuICAgICAgICAgICAgZ1hheGlzLmNhbGwoeEF4aXMuc2NhbGUoZDMuZXZlbnQudHJhbnNmb3JtLnJlc2NhbGVYKHgpKSk7XHJcbiAgICAgICAgICAgIGdZYXhpcy5jYWxsKHlBeGlzLnNjYWxlKGQzLmV2ZW50LnRyYW5zZm9ybS5yZXNjYWxlWSh5KSkpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIC8vdGhlIHN2ZyBjb250YWluZXJcclxuICAgIHN2Z0NvbnRhaW5lciA9IGQzLnNlbGVjdCgnI21haW4tdmlzJylcclxuICAgICAgICAuY2xhc3NlZCgnc3ZnLWNvbnRhaW5lcicsIHRydWUpXHJcbiAgICAgICAgLy8gdG8gbWFrZSBpdCByZXNwb25zaXZlIHdpdGggY3NzXHJcbiAgICAgICAgLmFwcGVuZCgnc3ZnJylcclxuICAgICAgICAuYXR0cigncHJlc2VydmVBc3BlY3RSYXRpbycsICd4TWluWU1pbiBtZWV0JylcclxuICAgICAgICAuYXR0cigndmlld0JveCcsICcwIDAgJyArIHRhbmtXaWR0aCArICcgJyArIHRhbmtIZWlnaHQpXHJcbiAgICAgICAgLy8gYWRkIHRoZSBjbGFzcyBzdmctY29udGVudFxyXG4gICAgICAgIC5jbGFzc2VkKCdzdmctY29udGVudCcsIHRydWUpXHJcbiAgICAgICAgLmF0dHIoJ2lkJywgJ21haW4tdmlzLXN2ZycpXHJcbiAgICAgICAgLmNhbGwoem9vbSk7XHJcblxyXG4gICAgLyogZGVwZW5kcyBvbiBzdmcgcmF0aW8sIGZvciBlLmcgMTI0MC8xOTAwID0gMC42NSBzbyBwYWRkaW5nLWJvdHRvbSA9IDY1JSAqL1xyXG4gICAgbGV0IHBlcmNlbnRhZ2UgPSBNYXRoLmNlaWwoKHRhbmtIZWlnaHQgLyB0YW5rV2lkdGgpICogMTAwKTtcclxuICAgICQoJyNtYWluLXZpcycpLmFwcGVuZCgkKCc8c3R5bGU+I21haW4tdmlzOjphZnRlciB7cGFkZGluZy10b3A6ICcgKyBwZXJjZW50YWdlICsgJyU7ZGlzcGxheTogYmxvY2s7Y29udGVudDogXCJcIjt9PC9zdHlsZT4gJykpO1xyXG5cclxuICAgIHpvb21Hcm91cCA9IHN2Z0NvbnRhaW5lci5hcHBlbmQoJ3N2ZzpnJyk7XHJcblxyXG4gICAgLy8gVmlzdWFsaXplIHRoZSBiYWNrZ3JvdW5kIGltYWdlIGlmIGl0IGlzIHVwbG9hZGVkXHJcbiAgICBpZiAocGFyYW1ldGVycy5iYWNrZ3JvdW5kX2ltYWdlKSB7XHJcbiAgICAgICAgem9vbUdyb3VwXHJcbiAgICAgICAgICAgIC5hcHBlbmQoJ2ltYWdlJylcclxuICAgICAgICAgICAgLmF0dHIoJ3hsaW5rOmhyZWYnLCAnLycgKyBwYXJhbWV0ZXJzLmJhY2tncm91bmRfaW1hZ2UpXHJcbiAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsICdiYWNrZ3JvdW5kLWltYWdlJylcclxuICAgICAgICAgICAgLmF0dHIoJ2hlaWdodCcsIHRhbmtIZWlnaHQpXHJcbiAgICAgICAgICAgIC5hdHRyKCd3aWR0aCcsIHRhbmtXaWR0aClcclxuICAgICAgICAgICAgLmF0dHIoJ3gnLCAnMCcpXHJcbiAgICAgICAgICAgIC5hdHRyKCd5JywgJzAnKTtcclxuICAgIH1cclxuXHJcbiAgICAvL2FwcGVuZCB0aGUgdGFuayBncm91cCB3aXRoIGEgdHJhbnNmb3JtYXRpb24gd2hpY2ggcm90YXRlcyB0aGUgeSBheGlzXHJcbiAgICB0YW5rID0gem9vbUdyb3VwLmFwcGVuZCgnc3ZnOmcnKVxyXG4gICAgICAgIC5hdHRyKCdjbGFzcycsICd0YW5rJylcclxuICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGxldCB4ID0gcGFyYW1ldGVycy5pbnZlcnRlZF94ID8gLTEgOiAxO1xyXG4gICAgICAgICAgICBsZXQgeSA9IHBhcmFtZXRlcnMuaW52ZXJ0ZWRfeSA/IC0xIDogMTtcclxuICAgICAgICAgICAgcmV0dXJuICdzY2FsZSgnICsgeCArICcsJyArIHkgKyAnKSc7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgLy9hZGQgdGhlIGNlbnRyb2lkXHJcbiAgICB0YW5rLmFwcGVuZCgnZycpXHJcbiAgICAgICAgLmF0dHIoJ2lkJywgJ2ctY2VudHJvaWQnKVxyXG4gICAgICAgIC5hcHBlbmQoJ2NpcmNsZScpXHJcbiAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2NlbnRyb2lkJylcclxuICAgICAgICAuYXR0cigncicsIDYpXHJcbiAgICAgICAgLmF0dHIoJ2N4JywgMClcclxuICAgICAgICAuYXR0cignY3knLCAwKTtcclxuXHJcbiAgICAvLyBhcnJvdyBmb3IgdGhlIGNlbnRyb2lkIGRpcmVjdGlvblxyXG4gICAgdGFuay5zZWxlY3QoJyNnLWNlbnRyb2lkJylcclxuICAgICAgICAuYXBwZW5kKCdzdmc6ZGVmcycpXHJcbiAgICAgICAgLmFwcGVuZCgnc3ZnOm1hcmtlcicpXHJcbiAgICAgICAgLmF0dHIoJ2lkJywgJ2NlbnRyb2lkLWFycm93JylcclxuICAgICAgICAuYXR0cigncmVmWCcsIDIpXHJcbiAgICAgICAgLmF0dHIoJ3JlZlknLCA2KVxyXG4gICAgICAgIC5hdHRyKCdtYXJrZXJXaWR0aCcsIDEzKVxyXG4gICAgICAgIC5hdHRyKCdtYXJrZXJIZWlnaHQnLCAxMylcclxuICAgICAgICAuYXR0cignb3JpZW50JywgJ2F1dG8nKVxyXG4gICAgICAgIC5hcHBlbmQoJ3N2ZzpwYXRoJylcclxuICAgICAgICAuYXR0cignZCcsICdNMiwyIEwyLDExIEwxMCw2IEwyLDInKTtcclxuXHJcbiAgICAvLyBBcHBlbmQgdGhlIGxpbmUgZm9yIHRoZSBkaXJlY3Rpb24gYXJyb3dcclxuICAgIHRhbmsuc2VsZWN0KCcjZy1jZW50cm9pZCcpXHJcbiAgICAgICAgLmFwcGVuZCgnbGluZScpXHJcbiAgICAgICAgLmF0dHIoJ2lkJywgJ2NlbnRyb2lkLWxpbmUnKVxyXG4gICAgICAgIC5hdHRyKCdtYXJrZXItZW5kJywgJ3VybCgjY2VudHJvaWQtYXJyb3cpJyk7XHJcblxyXG4gICAgLy9hcHBlbmQgbmV0d29yayAgZ3JvdXBcclxuICAgIHRhbmsuYXBwZW5kKCdnJylcclxuICAgICAgICAuYXR0cignaWQnLCAnbmV0d29yay1ncm91cCcpO1xyXG5cclxuICAgIC8vYXBwZW5kIGRlbGF1bmF5LXRyaWFuZ3VsYXRpb24gZ3JvdXBcclxuICAgIHRhbmsuYXBwZW5kKCdnJylcclxuICAgICAgICAuYXR0cignaWQnLCAnZGVsYXVuYXktdHJpYW5ndWxhdGlvbi1ncm91cCcpO1xyXG5cclxuICAgIC8vYXBwZW5kIHZvcm9ub2kgZ3JvdXBcclxuICAgIHRhbmsuYXBwZW5kKCdnJylcclxuICAgICAgICAuYXR0cignaWQnLCAndm9ybm9pLWdyb3VwJyk7XHJcblxyXG4gICAgLy9hcHBlbmQgdGhlIGZyYW1lIHRpbWUgdGV4dFxyXG4gICAgc3ZnQ29udGFpbmVyLmFwcGVuZCgndGV4dCcpXHJcbiAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2ZyYW1lLXRleHQnKVxyXG4gICAgICAgIC5hdHRyKCd4JywgMzApXHJcbiAgICAgICAgLmF0dHIoJ3knLCAzMClcclxuICAgICAgICAudGV4dCgnLS0gOiAtLSA6IC0tICcpO1xyXG5cclxuICAgIC8vIGFkZCB0aGUgYXhpc1xyXG4gICAgbGV0IGdYYXhpcyA9IHN2Z0NvbnRhaW5lci5hcHBlbmQoJ2cnKVxyXG4gICAgICAgIC5hdHRyKCdjbGFzcycsICd4IGF4aXMnKVxyXG4gICAgICAgIC5jYWxsKHhBeGlzKTtcclxuXHJcbiAgICBsZXQgZ1lheGlzID0gc3ZnQ29udGFpbmVyLmFwcGVuZCgnZycpXHJcbiAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ3kgYXhpcycpXHJcbiAgICAgICAgLmNhbGwoeUF4aXMpO1xyXG5cclxuICAgIC8vIGluaXQgc3R1ZmYgZnJvbSBvdGhlciBtb2R1bGVzXHJcbiAgICBpbml0VG9vbHRpcCgpO1xyXG4gICAgaW5pdFNsaWRlcnMoKTtcclxuICAgIGFkZFNwYXRpYWxWaWV3R3JvdXAoKTtcclxuICAgIGluaXRDb2xvclBpY2tlcigpO1xyXG4gICAgdmFyIGxpbmVjaGFydCA9IG5ldyBMaW5lQ2hhcnQoc3dhcm1EYXRhKTtcclxuICAgIGluaXRMaXN0ZW5lcnMoKTtcclxuICAgIGluaXREZW5kcm9ncmFtKCk7XHJcbiAgICBtYWtlUmVzaXphYmxlKHRhbmtIZWlnaHQsIHRhbmtXaWR0aCk7XHJcbiAgICBkZWZhdWx0Q29uZmlnKCk7XHJcbiAgICAvLyBzdGFydCB0aGUgYW5pbWF0aW9uXHJcbiAgICBkcmF3KCk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBEcmF3aW5nIGZ1bmN0aW9uIC0gaXMgY2FsbGVkIGZvciBlYWNoIHRpbWVzdGVwXHJcbiAqIGluZGV4VGltZSBzYXZlcyB0aGUgY3VycmVudCB0aW1lXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZHJhdygpIHtcclxuICAgIC8vdXBkYXRlIHRpbWUgdG8gd2FpdCBha2Egc3BlZWQgb2YgcmVwbGF5XHJcbiAgICBsZXQgdGltZVRvV2FpdCA9ICQoJ2lucHV0W3R5cGU9XCJyYWRpb1wiXS5ncm91cC1wbGF5YmFjay1yYXRlOmNoZWNrZWQnKVxyXG4gICAgICAgIC52YWwoKTtcclxuICAgIC8vc2NhbGUgdGhlIHNpemUgYnkgdGhpcyBudW1iZXJcclxuICAgIGxldCBhbmltYWxTY2FsZSA9ICQoJ2lucHV0W3R5cGU9XCJyYWRpb1wiXS5ncm91cC1zaXplOmNoZWNrZWQnKVxyXG4gICAgICAgIC52YWwoKTtcclxuXHJcbiAgICAvL2dldCB0aGUgbmV4dCBhbmltYWxzXHJcbiAgICBhcnJheUFuaW1hbHMgPSBkYXRhc2V0LmZpbHRlcihmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgcmV0dXJuIGRbJ3QnXSA9PT0gaW5kZXhUaW1lO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy90aGUgdGltZW91dCBpcyBzZXQgYWZ0ZXIgb25lIHVwZGF0ZSAzMCBtc1xyXG4gICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgLy8gZHJhdyBoaWVyYXJjaHlcclxuICAgICAgICAgICAgZHJhd0RlbmRyb2dyYW0oKTtcclxuICAgICAgICAgICAgLy9jaGFuZ2UgdGhlIHRpbWUgZnJhbWUgdGV4dFxyXG4gICAgICAgICAgICBzdmdDb250YWluZXIuc2VsZWN0KCcuZnJhbWUtdGV4dCcpXHJcbiAgICAgICAgICAgICAgICAudGV4dChNYXRoLmZsb29yKGluZGV4VGltZSAvIDE1MDApICUgNjAgKyAnOicgKyBNYXRoLmZsb29yKGluZGV4VGltZSAvIHBhcmFtZXRlcnNbJ2ZwcyddKSAlIDYwICsgJzo6JyArIGluZGV4VGltZSAlIHBhcmFtZXRlcnNbJ2ZwcyddKTtcclxuICAgICAgICAgICAgLy8gaWYgYSBzZWNvbmQgaGFzIGNoYW5nZWQgbW92ZSB0aGUgc2xpZGVyXHJcbiAgICAgICAgICAgIGlmIChpbmRleFRpbWUgJSBwYXJhbWV0ZXJzWydmcHMnXSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgc2V0VGltZVNsaWRlcihpbmRleFRpbWUpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZXQgc3ZnQW5pbWFscyA9IHRhbmsuc2VsZWN0QWxsKCdnLmFuaW1hbCcpXHJcbiAgICAgICAgICAgICAgICAuZGF0YShhcnJheUFuaW1hbHMpO1xyXG5cclxuICAgICAgICAgICAgLy8gTmV0d29yayB2aXNcclxuICAgICAgICAgICAgbGV0IG5ldHdvcmtWaXM7XHJcbiAgICAgICAgICAgIC8vIGxldCBuZXR3b3JrVmlzQmFrO1xyXG4gICAgICAgICAgICBpZiAoaW5kZXhUaW1lIGluIG5ldHdvcmtEYXRhKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgbmV0d29yayA9IG5ldHdvcmtEYXRhW2luZGV4VGltZV07XHJcbiAgICAgICAgICAgICAgICAvLyByZXNldCB0aGUgZ3JvdXAgc3RhbmRhcmQgZGV2aWF0aW9uIGZvciB0aGUgaGllcmFyaGN5XHJcbiAgICAgICAgICAgICAgICAvLyBuZWVkZWQgZm9yIGNvbG9yaW5nIG9mIHRoZSBkZW5kcm9ncmFtIG5vZGVzICh2YXJpYWNuZSlcclxuICAgICAgICAgICAgICAgIHJlc2V0aGllcmFyY2h5R3JvdXBTdGRldigpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIGRpc3BsYXkgdGhlIHdob2xlIG5ldHdvcmtcclxuICAgICAgICAgICAgICAgIG5ldHdvcmsgPSBuZXR3b3JrLm1hcChmdW5jdGlvbihpdGVtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGFuaW1hbDEgPSBhcnJheUFuaW1hbHMuZmlsdGVyKGZ1bmN0aW9uKG9iaikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2JqWydhJ10gPT09IGl0ZW1bJ3MnXTtcclxuICAgICAgICAgICAgICAgICAgICB9KVswXTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgYW5pbWFsMiA9IGFycmF5QW5pbWFscy5maWx0ZXIoZnVuY3Rpb24ob2JqKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvYmpbJ2EnXSA9PT0gaXRlbVsnZSddO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdub2RlMSc6IGFuaW1hbDFbJ2EnXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ25vZGUyJzogYW5pbWFsMlsnYSddLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnc3RhcnQnOiBhbmltYWwxWydwJ10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdlbmQnOiBhbmltYWwyWydwJ10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICd2YWwnOiBpdGVtWyd2J11cclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgbmV0d29yay5mb3JFYWNoKGZ1bmN0aW9uKGQpIHtcclxuICAgICAgICAgICAgICAgICAgICAkKCgnI21jLScgKyBkWydub2RlMSddICsgJy0nICsgZFsnbm9kZTInXSkpLmNzcygnZmlsbCcsIG5ldHdvcmtDb2xvclNjYWxlKGRbJ3ZhbCddKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgJCgoJyNtYy0nICsgZFsnbm9kZTInXSArICctJyArIGRbJ25vZGUxJ10pKS5jc3MoJ2ZpbGwnLCBuZXR3b3JrQ29sb3JTY2FsZShkWyd2YWwnXSkpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKG5ldHdvcmtBdXRvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRtcEFycmF5ID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuZXR3b3JrLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRtcEFycmF5LnB1c2gobmV0d29ya1tpXVsndmFsJ10pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBzZXROZXR3b3JMaW1pdChwZXJjZW50aWxlcyh0bXBBcnJheSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgbmV0d29yayA9IG5ldHdvcmsuZmlsdGVyKGZ1bmN0aW9uKGQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZFsndmFsJ10gPD0gKDEgLSBuZXR3b3JrTGltaXQpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAvLyBEQVRBIEpPSU5cclxuICAgICAgICAgICAgICAgIG5ldHdvcmtWaXMgPSB0YW5rLnNlbGVjdCgnI25ldHdvcmstZ3JvdXAnKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zZWxlY3RBbGwoJ2xpbmUubmV0d29yay1lZGdlcycpXHJcbiAgICAgICAgICAgICAgICAgICAgLmRhdGEobmV0d29yayk7XHJcbiAgICAgICAgICAgICAgICAvLyBVUERBVEVcclxuICAgICAgICAgICAgICAgIG5ldHdvcmtWaXNcclxuICAgICAgICAgICAgICAgICAgICAuYXR0cigneDEnLCBmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkWydzdGFydCddWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3kxJywgZnVuY3Rpb24oZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLWRbJ3N0YXJ0J11bMV07XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAuYXR0cigneDInLCBmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkWydlbmQnXVswXTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCd5MicsIGZ1bmN0aW9uKGQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC1kWydlbmQnXVsxXTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdzdHJva2UnLCBmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXR3b3JrQ29sb3JTY2FsZSgoMSAtIGRbJ3ZhbCddKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAuYXR0cignc3Ryb2tlLW9wYWNpdHknLCBmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAxIC0gZFsndmFsJ107XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAvL0VOVEVSXHJcblxyXG4gICAgICAgICAgICAgICAgbmV0d29ya1Zpc1xyXG4gICAgICAgICAgICAgICAgICAgIC5lbnRlcigpXHJcbiAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgnbGluZScpXHJcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ25ldHdvcmstZWRnZXMnKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCd4MScsIGZ1bmN0aW9uKGQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRbJ3N0YXJ0J11bMF07XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAuYXR0cigneTEnLCBmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAtZFsnc3RhcnQnXVsxXTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCd4MicsIGZ1bmN0aW9uKGQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRbJ2VuZCddWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3kyJywgZnVuY3Rpb24oZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLWRbJ2VuZCddWzFdO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3N0cm9rZScsIGZ1bmN0aW9uKGQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldHdvcmtDb2xvclNjYWxlKGRbJ3ZhbCddKTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdzdHJva2Utb3BhY2l0eScsIGZ1bmN0aW9uKGQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRbJ3ZhbCddO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG5ldHdvcmtWaXMgPSB0YW5rLnNlbGVjdEFsbCgnbGluZS5uZXR3b3JrLWVkZ2VzJylcclxuICAgICAgICAgICAgICAgICAgICAuZGF0YShbXSk7XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIEVYSVQgLSBuZXR3b3JrXHJcbiAgICAgICAgICAgIG5ldHdvcmtWaXMuZXhpdCgpXHJcbiAgICAgICAgICAgICAgICAucmVtb3ZlKCk7XHJcblxyXG4gICAgICAgICAgICAvLyBkZWxhdW5heSB0cmlhbmd1bGF0aW9uXHJcbiAgICAgICAgICAgIC8vIERBVEEgSk9JTiAgLSB0cmlhbmd1bGF0aW9uXHJcbiAgICAgICAgICAgIHZhciB0cmlhbmd1bGF0aW9uO1xyXG4gICAgICAgICAgICBpZiAoJCgnI2RyYXctdHJpYW5ndWxhdGlvbicpXHJcbiAgICAgICAgICAgICAgICAuaXMoJzpjaGVja2VkJykpIHtcclxuICAgICAgICAgICAgICAgIHRyaWFuZ3VsYXRpb24gPSB0YW5rLnNlbGVjdCgnI2RlbGF1bmF5LXRyaWFuZ3VsYXRpb24tZ3JvdXAnKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zZWxlY3RBbGwoJ3BhdGguZGVsYXVuYXktdHJpYW5ndWxhdGlvbicpXHJcbiAgICAgICAgICAgICAgICAgICAgLmRhdGEoW3N3YXJtRGF0YVtpbmRleFRpbWVdWyd0cmlhbmd1bGF0aW9uJ11dKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBVUERBVEUgLSB0cmlhbmd1bGF0aW9uXHJcbiAgICAgICAgICAgICAgICB0cmlhbmd1bGF0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2QnLCBmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgLy9FTlRFUiAtIHRyaWFuZ3VsYXRpb25cclxuICAgICAgICAgICAgICAgIHRyaWFuZ3VsYXRpb24uZW50ZXIoKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJ3BhdGgnKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsICdkZWxhdW5heS10cmlhbmd1bGF0aW9uJylcclxuICAgICAgICAgICAgICAgICAgICAuYXR0cignZCcsIGZ1bmN0aW9uKGQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0cmlhbmd1bGF0aW9uID0gdGFuay5zZWxlY3RBbGwoJ3BhdGguZGVsYXVuYXktdHJpYW5ndWxhdGlvbicpXHJcbiAgICAgICAgICAgICAgICAgICAgLmRhdGEoW10pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIEVYSVQgLSB0cmlhbmd1bGF0aW9uXHJcbiAgICAgICAgICAgIHRyaWFuZ3VsYXRpb24uZXhpdCgpXHJcbiAgICAgICAgICAgICAgICAucmVtb3ZlKCk7XHJcblxyXG4gICAgICAgICAgICAvLyBWb3Jvbm9pXHJcbiAgICAgICAgICAgIC8vIERBVEEgSk9JTiAgLSB2b3Jvbm9pXHJcbiAgICAgICAgICAgIHZhciB2b3Jvbm9pO1xyXG4gICAgICAgICAgICBpZiAoJCgnI2RyYXctdm9yb25vaScpXHJcbiAgICAgICAgICAgICAgICAuaXMoJzpjaGVja2VkJykpIHtcclxuICAgICAgICAgICAgICAgIC8vYXBwZW5kIHRoZSBncm91cCBmb3IgdGhlIHZvcm9ub2kgcGF0aHNcclxuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coaW5kZXhUaW1lKTtcclxuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coc3dhcm1EYXRhW2luZGV4VGltZV1bJ3Zvcm9ub2knXSk7XHJcbiAgICAgICAgICAgICAgICB2b3Jvbm9pID0gdGFua1xyXG4gICAgICAgICAgICAgICAgICAgIC5zZWxlY3QoJyN2b3Jub2ktZ3JvdXAnKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zZWxlY3RBbGwoJ3BhdGgudm9yb25vaScpXHJcbiAgICAgICAgICAgICAgICAgICAgLmRhdGEoc3dhcm1EYXRhW2luZGV4VGltZV1bJ3Zvcm9ub2knXS5zcGxpdCgnOycpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBVUERBVEUgLSB2b3Jvbm9pXHJcbiAgICAgICAgICAgICAgICB2b3Jvbm9pXHJcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2QnLCBmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgLy9FTlRFUiAtIHZvcm9ub2lcclxuICAgICAgICAgICAgICAgIHZvcm9ub2kuZW50ZXIoKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJ3BhdGgnKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsICd2b3Jvbm9pJylcclxuICAgICAgICAgICAgICAgICAgICAuYXR0cignZCcsIGZ1bmN0aW9uKGQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2b3Jvbm9pID0gdGFuay5zZWxlY3QoJyN2b3Jub2ktZ3JvdXAnKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zZWxlY3RBbGwoJ3BhdGgudm9yb25vaScpXHJcbiAgICAgICAgICAgICAgICAgICAgLmRhdGEoW10pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIEVYSVQgLSB2b3Jvbm9pXHJcbiAgICAgICAgICAgIHZvcm9ub2kuZXhpdCgpXHJcbiAgICAgICAgICAgICAgICAucmVtb3ZlKCk7XHJcblxyXG4gICAgICAgICAgICAvL0VOVEVSIC0gYXBwZW5kIHRoZSBhbmltYWwgZ3JvdXBzXHJcbiAgICAgICAgICAgIGxldCBhbmltYWxHcm91cGluZ3MgPSBzdmdBbmltYWxzXHJcbiAgICAgICAgICAgICAgICAuZW50ZXIoKVxyXG4gICAgICAgICAgICAgICAgLmFwcGVuZCgnZycpXHJcbiAgICAgICAgICAgICAgICAuYXR0cignY2xhc3MnLCAnYW5pbWFsJylcclxuICAgICAgICAgICAgICAgIC5hdHRyKCdpZCcsIGZ1bmN0aW9uKGQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2FuaW1hbC0nICsgZFsnYSddO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvLyBBcHBlbmQgdGhlIGNpcmNsZXMgZm9yIGVhY2ggYW5pbWFsIHRvIHRoZSBhbmltYWxncm91cFxyXG4gICAgICAgICAgICBhbmltYWxHcm91cGluZ3MuYXBwZW5kKCdjaXJjbGUnKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoJ3InLCAxLjUgKiBhbmltYWxTY2FsZSlcclxuICAgICAgICAgICAgICAgIC5hdHRyKCdjeCcsIGZ1bmN0aW9uKGQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZFsncCddWzBdO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC5hdHRyKCdjeScsIGZ1bmN0aW9uKGQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gLWRbJ3AnXVsxXTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAub24oJ21vdXNlb3ZlcicsIGZ1bmN0aW9uKGQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0b29sdGlwRnVuY3Rpb24oZCk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLm9uKCdtb3VzZW91dCcsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRvb2x0aXBcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnRyYW5zaXRpb24oKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuZHVyYXRpb24oNTAwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuc3R5bGUoJ29wYWNpdHknLCAwKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAvLyBhZGQgb24gY2xpY2sgZm9yIHRoZSBhY3RpdmUgZmlzaHNcclxuICAgICAgICAgICAgICAgIC5vbignY2xpY2snLCBmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFjdGl2ZUFuaW1hbHMuaW5jbHVkZXMoZFsnYSddKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmVBbmltYWxzID0gYWN0aXZlQW5pbWFscy5maWx0ZXIoaXRlbSA9PiBpdGVtICE9PSBkWydhJ10pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2ZUFuaW1hbHMucHVzaChkWydhJ10pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoISQoJyNwbGF5LWJ1dHRvbicpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5oYXNDbGFzcygnYWN0aXZlJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9nbyBiYWNrIG9uZSBzZWNvbmQgYW5kIGRyYXcgdGhlIG5leHQgZnJhbWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy90aGlzIGFwcGx5cyB0aGUgY2hhbmdlc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleFRpbWUtLTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZHJhdygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgLy8gVVBEQVRFIC0gYW5pbWFscyBjaXJjbGVzXHJcbiAgICAgICAgICAgIHN2Z0FuaW1hbHMuc2VsZWN0KCdjaXJjbGUnKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2N4JywgZnVuY3Rpb24oZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkWydwJ11bMF07XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2N5JywgZnVuY3Rpb24oZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAtZFsncCddWzFdO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC5hdHRyKCdyJywgYW5pbWFsU2NhbGUpO1xyXG5cclxuICAgICAgICAgICAgLy8gQXBwZW5kIGZvciBlYWNoIGdyb3VwIHRoZSBhcnJvdywgbmVlZGVkIGZvciBjb2xvcmluZ1xyXG4gICAgICAgICAgICBhbmltYWxHcm91cGluZ3MuYXBwZW5kKCdzdmc6ZGVmcycpXHJcbiAgICAgICAgICAgICAgICAuYXBwZW5kKCdzdmc6bWFya2VyJylcclxuICAgICAgICAgICAgICAgIC5hdHRyKCdpZCcsIGZ1bmN0aW9uKGQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2Fycm93LW1hcmtlci0nICsgZFsnYSddO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC5hdHRyKCdyZWZYJywgMilcclxuICAgICAgICAgICAgICAgIC5hdHRyKCdyZWZZJywgNilcclxuICAgICAgICAgICAgICAgIC5hdHRyKCdtYXJrZXJXaWR0aCcsIDEzKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoJ21hcmtlckhlaWdodCcsIDEzKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoJ29yaWVudCcsICdhdXRvJylcclxuICAgICAgICAgICAgICAgIC5hcHBlbmQoJ3N2ZzpwYXRoJylcclxuICAgICAgICAgICAgICAgIC5hdHRyKCdkJywgJ00yLDIgTDIsMTEgTDEwLDYgTDIsMicpO1xyXG5cclxuICAgICAgICAgICAgLy8gQXBwZW5kIHRoZSBsaW5lIGZvciB0aGUgZGlyZWN0aW9uIGFycm93XHJcbiAgICAgICAgICAgIGFuaW1hbEdyb3VwaW5nc1xyXG4gICAgICAgICAgICAgICAgLmFwcGVuZCgnbGluZScpXHJcbiAgICAgICAgICAgICAgICAuYXR0cignY2xhc3MnLCAnYXJyb3cnKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoJ21hcmtlci1lbmQnLCBmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd1cmwoI2Fycm93LW1hcmtlci0nICsgZFsnYSddICsgJyknO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvL2V4ZWN1dGUgb25seSB3aGVuIGRyYXcgZGlyZWN0aW9uIGJ1dHRvbiBpcyBjaGVja2VkXHJcbiAgICAgICAgICAgIGlmICgkKCcjZHJhdy1kaXJlY3Rpb24nKVxyXG4gICAgICAgICAgICAgICAgLmlzKCc6Y2hlY2tlZCcpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBVUERBVEUgYW5pbWFsIGRpcmVjdGlvbiBhcnJvd1xyXG4gICAgICAgICAgICAgICAgc3ZnQW5pbWFscy5zZWxlY3QoJ2xpbmUnKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCd4MScsIGZ1bmN0aW9uKGQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRbJ3AnXVswXTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCd5MScsIGZ1bmN0aW9uKGQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC1kWydwJ11bMV07XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAuYXR0cigneDInLCBmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoZFsncCddWzBdICsgMiAqIGFuaW1hbFNjYWxlKTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCd5MicsIGZ1bmN0aW9uKGQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICgtZFsncCddWzFdKTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAncm90YXRlKCcgKyAtZFsnZGlyZWN0aW9uJ10gKyAnICcgKyBkWydwJ11bMF0gKyAnICcgKyAtZFsncCddWzFdICsgJyknO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gaGlkZSB0aGUgYXJyb3dzXHJcbiAgICAgICAgICAgICAgICAkKCcuYXJyb3cnKS5oaWRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIEVYSVQgLSB0aGUgZ3JvdXBzXHJcbiAgICAgICAgICAgIHN2Z0FuaW1hbHMuZXhpdCgpXHJcbiAgICAgICAgICAgICAgICAucmVtb3ZlKCk7XHJcblxyXG4gICAgICAgICAgICAvL0NvbnZleCBodWxsXHJcbiAgICAgICAgICAgIGlmICgkKCcjZHJhdy1jb252ZXgtaHVsbCcpXHJcbiAgICAgICAgICAgICAgICAuaXMoJzpjaGVja2VkJykpIHtcclxuICAgICAgICAgICAgICAgIC8vIERBVEEgSk9JTiAtIHBhdGhzXHJcbiAgICAgICAgICAgICAgICB2YXIgaHVsbFBhdGggPSB0YW5rLnNlbGVjdEFsbCgncGF0aC5odWxsLXBhdGgnKVxyXG4gICAgICAgICAgICAgICAgICAgIC5kYXRhKFtzd2FybURhdGFbaW5kZXhUaW1lXVsnY29udmV4X2h1bGwnXV0pO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIFVQREFURSAtIGh1bGwgcGF0aFxyXG4gICAgICAgICAgICAgICAgaHVsbFBhdGhcclxuICAgICAgICAgICAgICAgICAgICAuYXR0cignZCcsIGZ1bmN0aW9uKGQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gRU5URVIgLSBodWxsIHBhdGhzXHJcbiAgICAgICAgICAgICAgICBodWxsUGF0aC5lbnRlcigpXHJcbiAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgncGF0aCcpXHJcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2h1bGwtcGF0aCcpXHJcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2QnLCBmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIGRyYXcgbm8gaHVsbFxyXG4gICAgICAgICAgICAgICAgaHVsbFBhdGggPSB0YW5rLnNlbGVjdCgncGF0aC5odWxsLXBhdGgnKVxyXG4gICAgICAgICAgICAgICAgICAgIC5kYXRhKFtdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBFWElUIC0gaHVsbCBwYXRoc1xyXG4gICAgICAgICAgICBodWxsUGF0aC5leGl0KClcclxuICAgICAgICAgICAgICAgIC5yZW1vdmUoKTtcclxuXHJcbiAgICAgICAgICAgIC8vY2hhbmdlIHRoZSBjb2xvcnMgb2YgdGhlIGZpc2hcclxuICAgICAgICAgICAgaWYgKGFjdGl2ZVNjYWxlICE9PSAnYmxhY2snKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBvbmNlIHRoZSBmaWxsIGZvciB0aGUgaGVhZHMgYW5kIHRoZSBzdHJva2UgZm9yIHRoZSBwYXRoXHJcbiAgICAgICAgICAgICAgICB2YXIgdG1wU2NhbGUgPSByZXR1cm5Db2xvclNjYWxlKCk7XHJcbiAgICAgICAgICAgICAgICBzdmdBbmltYWxzXHJcbiAgICAgICAgICAgICAgICAgICAgLnRyYW5zaXRpb24oKVxyXG4gICAgICAgICAgICAgICAgICAgIC5kdXJhdGlvbigxMClcclxuICAgICAgICAgICAgICAgICAgICAuc3R5bGUoJ2ZpbGwnLCBmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0bXBTY2FsZShkW2FjdGl2ZVNjYWxlXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAuYXR0cignc3Ryb2tlJywgZnVuY3Rpb24oZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdG1wU2NhbGUoZFthY3RpdmVTY2FsZV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy9jb2xvciBldmVyeSBmaXNoIGJsYWNrXHJcbiAgICAgICAgICAgICAgICBzdmdBbmltYWxzXHJcbiAgICAgICAgICAgICAgICAgICAgLnN0eWxlKCdmaWxsJywgJyMwMDAnKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdzdHJva2UnLCAnIzAwMCcpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICghJC5pc0VtcHR5T2JqZWN0KG1ldGFkYXRhQ29sb3IpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmtleXMobWV0YWRhdGFDb2xvcikuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZDNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zZWxlY3QoJyNhbmltYWwtJyArIGtleSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zdHlsZSgnZmlsbCcsIG1ldGFkYXRhQ29sb3Jba2V5XSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdzdHJva2UnLCBtZXRhZGF0YUNvbG9yW2tleV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvL2NoYW5nZSBvcGFjdGl5IGlmIHRoZSBmaXNoIGlzIHNlbGVjdGVkXHJcbiAgICAgICAgICAgIGlmIChhY3RpdmVBbmltYWxzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgc3ZnQW5pbWFsc1xyXG4gICAgICAgICAgICAgICAgICAgIC5zdHlsZSgnb3BhY2l0eScsIGZ1bmN0aW9uKGQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFjdGl2ZUFuaW1hbHMuaW5jbHVkZXMoZFsnYSddKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMC4yNTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKCQoJyNyZW1vdmUtYWN0aXZlLXNlbGVjdGVkLWJ1dHRvbicpXHJcbiAgICAgICAgICAgICAgICAgICAgLmlzKCc6ZGlzYWJsZWQnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICQoJyNyZW1vdmUtYWN0aXZlLXNlbGVjdGVkLWJ1dHRvbicpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5wcm9wKCdkaXNhYmxlZCcsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAkKCcjdmlzdWFsLXBhcmFtZXRlci1idXR0b24nKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAucHJvcCgnZGlzYWJsZWQnLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBpZiB0cmFja2luZyBpcyBvblxyXG4gICAgICAgICAgICAgICAgaWYgKHRyYWNraW5nQm9vbGVhbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGFkZFRyYWNrZWREYXRhKGFycmF5QW5pbWFsc1swXVsndCddLCBhY3RpdmVBbmltYWxzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmICghJCgnI3JlbW92ZS1hY3RpdmUtc2VsZWN0ZWQtYnV0dG9uJylcclxuICAgICAgICAgICAgICAgICAgICAuaXMoJzpkaXNhYmxlZCcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJCgnI3JlbW92ZS1hY3RpdmUtc2VsZWN0ZWQtYnV0dG9uJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnByb3AoJ2Rpc2FibGVkJywgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgJCgnI3Zpc3VhbC1wYXJhbWV0ZXItYnV0dG9uJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnByb3AoJ2Rpc2FibGVkJywgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBub3JtYWwgb3BhY2l0eVxyXG4gICAgICAgICAgICAgICAgc3ZnQW5pbWFsc1xyXG4gICAgICAgICAgICAgICAgICAgIC5zdHlsZSgnb3BhY2l0eScsIDEpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvL2RyYXcgY2VudHJvaWRcclxuICAgICAgICAgICAgZDMuc2VsZWN0KCcuY2VudHJvaWQnKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2N4JywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCdjZW50cm9pZCcgaW4gc3dhcm1EYXRhWzBdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzd2FybURhdGFbaW5kZXhUaW1lXVsnY2VudHJvaWQnXVswXTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2N5JywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCdjZW50cm9pZCcgaW4gc3dhcm1EYXRhWzBdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAtc3dhcm1EYXRhW2luZGV4VGltZV1bJ2NlbnRyb2lkJ11bMV07XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGlmICgkKCcjZHJhdy1kaXJlY3Rpb24nKS5pcygnOmNoZWNrZWQnKSAmJlxyXG4gICAgICAgICAgICAgICAgc3dhcm1EYXRhW2luZGV4VGltZV0uY2VudHJvaWQgJiZcclxuICAgICAgICAgICAgICAgICQoJyNkcmF3LWNlbnRyb2lkJykuaXMoJzpjaGVja2VkJykpIHtcclxuICAgICAgICAgICAgICAgIGQzLnNlbGVjdCgnI2NlbnRyb2lkLWxpbmUnKVxyXG4gICAgICAgICAgICAgICAgICAgIC5jbGFzc2VkKCdoaWRkZW4nLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAvLyBVUERBVEUgYW5pbWFsIGRpcmVjdGlvbiBhcnJvd1xyXG4gICAgICAgICAgICAgICAgZDMuc2VsZWN0KCcjY2VudHJvaWQtbGluZScpXHJcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3gxJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzd2FybURhdGFbaW5kZXhUaW1lXVsnY2VudHJvaWQnXVswXTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCd5MScsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLXN3YXJtRGF0YVtpbmRleFRpbWVdWydjZW50cm9pZCddWzFdO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3gyJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoc3dhcm1EYXRhW2luZGV4VGltZV1bJ2NlbnRyb2lkJ11bMF0gKyAyICogYW5pbWFsU2NhbGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3kyJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAtc3dhcm1EYXRhW2luZGV4VGltZV1bJ2NlbnRyb2lkJ11bMV07XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAncm90YXRlKCcgKyAtc3dhcm1EYXRhW2luZGV4VGltZV1bJ2RpcmVjdGlvbiddICsgJyAnICsgc3dhcm1EYXRhW2luZGV4VGltZV1bJ2NlbnRyb2lkJ11bMF0gKyAnICcgKyAtc3dhcm1EYXRhW2luZGV4VGltZV1bJ2NlbnRyb2lkJ11bMV0gKyAnKSc7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBoaWRlIHRoZSBhcnJvd3NcclxuICAgICAgICAgICAgICAgIGQzLnNlbGVjdCgnI2NlbnRyb2lkLWxpbmUnKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsICdoaWRkZW4nKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gbWVkb2lkXHJcbiAgICAgICAgICAgIGlmIChtZWRvaWRBbmltYWwgIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICBkMy5zZWxlY3RBbGwoJyNhbmltYWwtJyArIG1lZG9pZEFuaW1hbClcclxuICAgICAgICAgICAgICAgICAgICAuY2xhc3NlZCgnbWVkb2lkJywgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgbWVkb2lkQW5pbWFsID0gc3dhcm1EYXRhW2luZGV4VGltZV1bJ21lZG9pZCddO1xyXG4gICAgICAgICAgICAgICAgZDMuc2VsZWN0QWxsKCcjYW5pbWFsLScgKyBtZWRvaWRBbmltYWwpXHJcbiAgICAgICAgICAgICAgICAgICAgLmNsYXNzZWQoJ21lZG9pZCcsIHRydWUpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvL25leHQgZnJhbWVcclxuICAgICAgICAgICAgaW5kZXhUaW1lKys7XHJcblxyXG4gICAgICAgICAgICB1cGRhdGVMaW5lQ2hhcnQoKTtcclxuXHJcblxyXG4gICAgICAgICAgICAvL2NoZWNrIGlmIHBsYXkgYnV0dG9uIGlzIGFjdGl2ZSBhbmQgaWYgdGhlIGFuaW1hdGlvbiBpcyBub3QgZmluaXNoZWRcclxuICAgICAgICAgICAgaWYgKGluZGV4VGltZSA+PSBzd2FybURhdGEubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAvL3N0YXJ0IGFnYWluIGZyb20gdGhlIHN0YXJ0XHJcbiAgICAgICAgICAgICAgICBpbmRleFRpbWUgPSAwO1xyXG4gICAgICAgICAgICAgICAgZHJhdygpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBsYXlCb29sZWFuKSB7XHJcbiAgICAgICAgICAgICAgICAvL21lYXN1cmUgZXhlY3V0aW9uIHRpbWVcclxuICAgICAgICAgICAgICAgIC8vICAgbGV0IHQxID0gcGVyZm9ybWFuY2Uubm93KCk7XHJcbiAgICAgICAgICAgICAgICAvLyAgIGNvbnNvbGUubG9nKHQxIC0gdDApOyAvLyBpbiBtaWxsaXNlY29uZHNcclxuICAgICAgICAgICAgICAgIGRyYXcoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdGltZVRvV2FpdCk7XHJcbn1cclxuXHJcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICAgIFNldHRlclxyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbi8qKlxyXG4gKiBTZXQgdGhlIGluZGV4IHRpbWUgdG8gYSBuZXcgdmFsdWVcclxuICogQHBhcmFtIHtOdW1iZXJ9IHZhbHVlIC0gbmV3IHRpbWUgc3RlcFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNldEluZGV4VGltZSh2YWx1ZSkge1xyXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgKGluZGV4VGltZSA8PSBzd2FybURhdGEubGVuZ3RoKSkge1xyXG4gICAgICAgIGluZGV4VGltZSA9IHZhbHVlO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBpbmRleFRpbWUgPSAwO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogRGVjcmVhc2UgdGltZSBieSAxXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZGVjSW5kZXhUaW1lKCkge1xyXG4gICAgaW5kZXhUaW1lID0gaW5kZXhUaW1lIC0gMTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFNldCB0aGUgdGhlIG5ldyBhY3RpdmUgc2NhbGUgLSBlLmcuIHNwZWVkLCBhY2NlbGVyYXRpb24sIGJsYWNrIGV0Yy5cclxuICogQHBhcmFtIHtTdHJpbmd9IHZhbHVlIC0gYWN0aXZlIHNjYWxlIGZvciB0aGUgaW5kaXZpZHVhbCBhbmltYWxzXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc2V0QWN0aXZlU2NhbGUodmFsdWUpIHtcclxuICAgIGFjdGl2ZVNjYWxlID0gdmFsdWU7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTZXQgdGhlIG5ldyBtZWRvaWQgYW5pbWFsXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB2YWx1ZSAtIFVuaXF1ZSBpZCBvZiB0aGUgYW5pbWFsXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc2V0TWVkb2lkQW5pbWFsKHZhbHVlKSB7XHJcbiAgICBtZWRvaWRBbmltYWwgPSB2YWx1ZTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFNldCB0aGUgc2VsZWN0ZWQgYW5kIGhpZ2hsaWdodGVkIGFuaW1hbHNcclxuICogQHBhcmFtIHthcnJheX0gdmFsdWUgLSBhcnJheSBvZiB1bnFpdWUgaWQgb2YgdGhlIGFuaW1hbHNcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXRBY3RpdmVBbmltYWxzKHZhbHVlKSB7XHJcbiAgICBhY3RpdmVBbmltYWxzID0gdmFsdWU7XHJcbn1cclxuIiwiLyplc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtbGV0cyovXHJcbi8qZ2xvYmFsIHdpbmRvdywgJCAqL1xyXG4vLyBpbXBvcnQgYWxsIGpzXHJcbmltcG9ydCAqIGFzIHF1ZXJpZXMgZnJvbSAnLi9hamF4X3F1ZXJpZXMuanMnO1xyXG5cclxuaW1wb3J0IHtcclxuICAgIGluaXRpYWxpemVNZXRhZGRhdGFcclxufSBmcm9tICcuL21ldGFkYXRhLmpzJztcclxuXHJcbmltcG9ydCB7XHJcbiAgICBzZXRIaWVyYXJjaHlMZXZlbCxcclxuICAgIHJlbW92ZUhpZXJhcmNoeUxldmVsLFxyXG4gICAgc2V0SGllcmFyY2h5Q29sb3IsXHJcbiAgICByZW1vdmVIaWVyYXJjaHlDb2xvcixcclxuICAgIGNoYW5nZUhpZXJhcmNoeUxlZ2VuZFxyXG59IGZyb20gJy4vaGllcmFyY2h5LmpzJztcclxuXHJcbi8vIGltcG9ydCBjc3NcclxuaW1wb3J0ICcuL2V4cGxvcmUuY3NzJztcclxuXHJcbmltcG9ydCBDaGFydCBmcm9tICcuL2xpbmVfY2hhcnQuanMnXHJcblxyXG5leHBvcnQgbGV0IGRhdGFzZXQgPSBbXTsgLy8gbWFpbiBkYXRhc2V0IHdpdGggdmFsdWVzIGZvciBlYWNoIGluZGl2aWR1YWwgYW5pbWFsXHJcbmV4cG9ydCBsZXQgZGF0YXNldE1ldGFkYXRhID0gW107IC8vIG1ldGFkYXRhc2V0IGZvciBlYWNoIGluZGl2aWR1YWwgZmlzaFxyXG5leHBvcnQgbGV0IHN3YXJtRGF0YSA9IFtdOyAvLyBzd2FybWRhdGEgZm9yIGxpbmVjaGFydCBhbmQgYWxzbyBvdGhlciBzd2FybSBmZWF0dXJlc1xyXG5leHBvcnQgbGV0IGRhdGFTZXRQZXJjZW50aWxlID0ge307IC8vIHBlY2VudGlsZXMgbmVlZGVkIGZvciB0aGUgY29sb3IgbWFwcGluZ1xyXG5leHBvcnQgbGV0IG5ldHdvcmtEYXRhID0ge307IC8vIG5ldHdvcmsgZGF0YVxyXG5leHBvcnQgbGV0IG5ldHdvcmtIaWVyYXJjaHkgPSB7fTsgLy8gbmV0d29yayBoaWVyYXJjaHkgZGF0YVxyXG5leHBvcnQgbGV0IGFuaW1hbElkcyA9IHt9OyAvLyBkaXN0aW5jdCBhbmltYWwgaWRzXHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBHZXQgdGhlIGJhc2ljIGRhdGEgdG8gZ2V0IHRoZSB0b29sIHJ1bm5pbmcuXHJcbiAqIGFmdGVyIHRoZSBwZW5kaW5nIGFqYXggcXVlcmllcyBhcmUgZmluaXNoZWRcclxuICogdGhlIHRvb2wgaXMgZHJhd25cclxuICovXHJcbiQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkge1xyXG4gICAgY29uc29sZS5sb2cocGFyYW1ldGVycyk7XHJcblxyXG4gICAgLy8gZ2V0IHRoZSBtb3ZlbWVudCBkYXRhXHJcbiAgICBxdWVyaWVzLnN0cmVhbU1vdmVtZW50RGF0YSgpO1xyXG5cclxuICAgIC8vIGdldCB0aGUgZGF0YVNldFBlcmNlbnRpbGVcclxuICAgIHF1ZXJpZXMuZ2V0UGVyY2VudGlsZSgpO1xyXG5cclxuICAgIC8vIGdldCB0aGUgZGlzdGluY3QgYW5pbWFsIGlkcyBmb3IgdGhlIHdob2xlIGRhdGFzZXRcclxuICAgIHF1ZXJpZXMuZ2V0QW5pbWFsSWRzKCk7XHJcblxyXG4gICAgLy8gZ2V0IHRoZSBzd2FybSBmZWF0dXJlcyBmb3IgdGhlIGxpbmUgY2hhcnRcclxuICAgIHF1ZXJpZXMuZ2V0U3dhcm1GZWF0dXJlcygpO1xyXG5cclxuICAgIC8vIGdldCB0aGUgbWV0YWRhdGEgYW5kIGluaXRpYWxpemUgdGhlIG1ldGFkYSB3aW5kb3dcclxuICAgIHF1ZXJpZXMuZ2V0TWV0YURhdGEoKTtcclxuXHJcbiAgICAvLyBnZXQgdGhlIGluZm9ybWF0aW9uIGlmIHRoZXJlIGFyZSBhbHJlYWR5IG5ldHdvcmtzIGNyZWF0ZWQgZm9yIHRoaXMgZGFzdGFzZXRcclxuICAgIHF1ZXJpZXMuZ2V0TmV0d29ya0RhdGFCdXR0b24oKTtcclxufSk7XHJcblxyXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAgICBHZXR0ZXIgYW5kIHNldHRlclxyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbi8qKlxyXG4gKiBDb25jYWN0IHRvIHRoZSBtYWluIGRhdGFzZXRcclxuICogdGhlIGlkZWEgaXMgdG8gdXNlIHRoaXMgb25lIGRheSBmb3IgbGF6eSBsb2FkaW5nXHJcbiAqIEBwYXJhbSB7YXJyYXl9IHZhbHVlIC0gYXJyYXkgb2YgbW92ZW1lbnQgZGF0YXNldHNcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBhZGRUb0RhdGFzZXQodmFsdWUpIHtcclxuICAgIGRhdGFzZXQgPSBkYXRhc2V0LmNvbmNhdCh2YWx1ZSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTZXQgZGF0YXNldCBwZXJjZW50aWxlXHJcbiAqIEBwYXJhbSB7YXJyYXl9IHZhbHVlIC0gYXJyYXkgb2YgYXJyYXJ5c1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNldERhdGFTZXRQZXJjZW50aWxlKHZhbHVlKSB7XHJcbiAgICBkYXRhU2V0UGVyY2VudGlsZSA9IHZhbHVlO1xyXG59XHJcblxyXG4vKipcclxuICogU2V0IGRhdGFzZXQgbWV0YWRhdGFcclxuICogQHBhcmFtIHthcnJheX0gdmFsdWUgLSBhcnJheVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNldE1ldGFEYXRhKHZhbHVlKSB7XHJcbiAgICBkYXRhc2V0TWV0YWRhdGEgPSB2YWx1ZTtcclxuICAgIC8vIGluaXRpYWxpemUgdGhlIG1ldGFkYXRhIG1vZGFsXHJcbiAgICBpbml0aWFsaXplTWV0YWRkYXRhKCk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBZGQgYSBuZXcgZmVhdHVyZSBkaW1lbnNpb24gdG8gdGhlIHN3YXJtIGRhdGFzZXRcclxuICogQHBhcmFtIHthcnJheX0gZGF0YSAtIEFycmF5IG9mIHN3YXJtIHZhbHVlcyBjb25zaXN0aW5nIG9mIFtmZWF0dXJlXzAsZmVhdHVyZV8xLC4uLl1cclxuICogQHBhcmFtIHtzdHJpbmd9IGZlYXR1cmUgLSBzdHJpbmcgYXJyYXkgb2YgdGhlIGZlYXR1cmVcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXRTd2FybURhdGEoZGF0YSwgZmVhdHVyZSkge1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgLy8gYWRkIHRoZSB0aGUgb2JqZWN0IHRvIHRoZSBhcnJheSBpZiB0aGVyZSBpcyBubyBlbGVtZW50IHlldFxyXG4gICAgICAgIGlmICh0eXBlb2Ygc3dhcm1EYXRhW2ldID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICBzd2FybURhdGEucHVzaCh7fSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBjaGVjayBpZiBpbnRlZ2VyIG9yIGZsb2F0XHJcbiAgICAgICAgaWYgKGRhdGFbaV0gJiYgIShpc05hTihkYXRhW2ldKSkpIHtcclxuICAgICAgICAgICAgc3dhcm1EYXRhW2ldW2ZlYXR1cmVdID0gK2RhdGFbaV07XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8gaXMgc3RyaW5nXHJcbiAgICAgICAgICAgIHN3YXJtRGF0YVtpXVtmZWF0dXJlXSA9IGRhdGFbaV07XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIEFkZCBhIG5ldyBmZWF0dXJlIGRpbWVuc2lvbiB0byB0aGUgZGF0YXNldFxyXG4gKiBAcGFyYW0ge2FycmF5fSBkYXRhIC0gQXJyYXkgb2YgZmVhdHVyZXMgdmFsdWVzIGNvbnNpc3Rpbmcgb2YgW2ZlYXR1cmVfMCwgZmVhdHVyZV8xLC4uLl1cclxuICogQHBhcmFtIHtzdHJpbmd9IGZlYXR1cmUgLSBzdHJpbmcgYXJyYXkgb2YgdGhlIGZlYXR1cmVcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXREYXRhc2V0RmVhdHVyZShkYXRhLCBmZWF0dXJlKSB7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAvLyBhZGQgdGhlIHRoZSBvYmplY3QgdG8gdGhlIGFycmF5IGlmIHRoZXJlIGlzIG5vIGVsZW1lbnQgeWV0XHJcbiAgICAgICAgaWYgKHR5cGVvZiBkYXRhc2V0W2ldID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICBkYXRhc2V0LnB1c2goe30pO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBwYXJzZSB0aGUgaW50XHJcbiAgICAgICAgZGF0YXNldFtpXVtmZWF0dXJlXSA9ICtkYXRhW2ldO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogU2V0IHRoZSBuZXR3b3JrIHZhbHVlXHJcbiAqIEBwYXJhbSB7YXJyYXl9IHZhbHVlIC0gQXJyYXkgb2Ygb2YgYXJyYXlzIHdpdGggYWxsIHZhbHVlc1xyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb20gdGhlIGNhbGN1bGF0ZWQgYWRqYWNlbmN5IG1hdHJpeFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNldE5ldHdvcmtEYXRhKHZhbHVlKSB7XHJcbiAgICBuZXR3b3JrRGF0YSA9IHZhbHVlO1xyXG59XHJcblxyXG4vKipcclxuICogU2V0IHRoZSBuZXR3b3JrIGhpZWFyaGN5IHZhbHVlXHJcbiAqIEBwYXJhbSB7YXJyYXl9IHZhbHVlIC0gQXJyYXkgb2Ygb2YgYXJyYXlzIHdpdGggYWxsIHZhbHVlc1xyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpdGggaGllcmFyY2h5XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc2V0SGllcmFyY2h5RGF0YSh2YWx1ZSwgbmV0d29ya19pZCkge1xyXG4gICAgLy8gaWYgdGhlIGVsZW1lbnQgaXMgZW1wdHkgcmVtb3ZlIHRoZSBlbGVtZW50IGZyb20gdGhlIG5ldHdyb2tIaWVyYXJjaHkgb2JqZWN0XHJcbiAgICBpZiAoT2JqZWN0LmtleXModmFsdWUpLmxlbmd0aCA9PT0gMCAmJiB2YWx1ZS5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0KSB7XHJcbiAgICAgICAgZGVsZXRlIG5ldHdvcmtIaWVyYXJjaHlbJ2gnICsgbmV0d29ya19pZF07XHJcbiAgICAgICAgcmVtb3ZlSGllcmFyY2h5TGV2ZWwobmV0d29ya19pZCk7XHJcbiAgICAgICAgcmVtb3ZlSGllcmFyY2h5Q29sb3IobmV0d29ya19pZCk7XHJcbiAgICB9IC8vIGFkZCBpdCB0byB0aGUgbmV0d29yayBoaWVyYXJjaHlcclxuICAgIGVsc2Uge1xyXG4gICAgICAgIG5ldHdvcmtIaWVyYXJjaHlbJ2gnICsgbmV0d29ya19pZF0gPSB2YWx1ZTtcclxuICAgICAgICBzZXRIaWVyYXJjaHlMZXZlbChuZXR3b3JrX2lkLCAyKTtcclxuICAgICAgICBzZXRIaWVyYXJjaHlDb2xvcihuZXR3b3JrX2lkKTtcclxuICAgIH0gLy8gdG9vIG1hbnkgZWxlbWVudHMgY2FudCBiZSBhZGRlZFxyXG5cclxuICAgIGNoYW5nZUhpZXJhcmNoeUxlZ2VuZCgpO1xyXG59XHJcblxyXG4vKipcclxuICogU2V0IGFuaW1hbCBpZHMgZGF0YXNldFxyXG4gKiBAcGFyYW0ge2FycmF5fSBpZHMgLSBBcnJheSBvZiBhbGwgZGlzdGluY3QgYW5pbWFsIGlkc1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNldEFuaW1hbElkcyh2YWx1ZSkge1xyXG4gICAgYW5pbWFsSWRzID0gdmFsdWU7XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==