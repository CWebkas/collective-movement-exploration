!function(e){var t={};function r(n){if(t[n])return t[n].exports;var a=t[n]={i:n,l:!1,exports:{}};return e[n].call(a.exports,a,a.exports,r),a.l=!0,a.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)r.d(n,a,function(t){return e[t]}.bind(null,a));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=6)}([function(e,t){},function(e,t,r){var n=r(2);"string"==typeof n&&(n=[[e.i,n,""]]);var a={hmr:!0,transform:void 0,insertInto:void 0};r(4)(n,a);n.locals&&(e.exports=n.locals)},function(e,t,r){(t=r(3)(!1)).push([e.i,"/* Icons for bootstrap 4 */\r\n\r\n.mdi::before {\r\n    font-size: 24px;\r\n    line-height: 14px;\r\n}\r\n\r\n.btn .mdi::before {\r\n    position: relative;\r\n    top: 4px;\r\n}\r\n\r\n.btn-xs .mdi::before {\r\n    font-size: 18px;\r\n    top: 3px;\r\n}\r\n\r\n.btn-sm .mdi::before {\r\n    font-size: 18px;\r\n    top: 3px;\r\n}\r\n\r\n.dropdown-menu .mdi {\r\n    width: 18px;\r\n}\r\n\r\n.dropdown-menu .mdi::before {\r\n    position: relative;\r\n    top: 4px;\r\n    left: -8px;\r\n}\r\n\r\n.nav .mdi::before {\r\n    position: relative;\r\n    top: 4px;\r\n}\r\n\r\n.navbar .navbar-toggle .mdi::before {\r\n    position: relative;\r\n    top: 4px;\r\n    color: #FFF;\r\n}\r\n\r\n.breadcrumb .mdi::before {\r\n    position: relative;\r\n    top: 4px;\r\n}\r\n\r\n.breadcrumb a:hover {\r\n    text-decoration: none;\r\n}\r\n\r\n.breadcrumb a:hover span {\r\n    text-decoration: underline;\r\n}\r\n\r\n.alert .mdi::before {\r\n    position: relative;\r\n    top: 4px;\r\n    margin-right: 2px;\r\n}\r\n\r\n.input-group-addon .mdi::before {\r\n    position: relative;\r\n    top: 3px;\r\n}\r\n\r\n.navbar-brand .mdi::before {\r\n    position: relative;\r\n    top: 2px;\r\n    margin-right: 2px;\r\n}\r\n\r\n.list-group-item .mdi::before {\r\n    position: relative;\r\n    top: 3px;\r\n    left: -3px\r\n}\r\n\r\n/* SVG elements and text */\r\n\r\n#main-vis {\r\n    margin-bottom: 10px;\r\n}\r\n\r\n.svg-container {\r\n    display: inline-block;\r\n    position: relative;\r\n    width: 100%;\r\n    /* aspect ratio */\r\n    vertical-align: top;\r\n    overflow: visible;\r\n}\r\n\r\n.svg-content {\r\n    display: inline-block;\r\n    position: absolute;\r\n    border: 1px solid #000;\r\n}\r\n\r\n#main-vis-legend-div {\r\n    display: none;\r\n}\r\n\r\n#hierarchy-legend-div {\r\n    display: none;\r\n}\r\n\r\n#main-vis-legend {\r\n    float: right;\r\n    display: inline-block;\r\n    position: relative;\r\n    overflow: visible;\r\n    top: 10px;\r\n    left: 10px;\r\n}\r\n\r\n#hierarchy-legend {\r\n    float: left;\r\n    display: inline-block;\r\n    position: relative;\r\n    overflow: visible;\r\n    top: 10px;\r\n    left: 10px;\r\n}\r\n\r\n.svg-content-dendrogram {\r\n    display: inline-block;\r\n    border: 1px solid #000;\r\n}\r\n\r\n.svg-line-chart-container {\r\n    display: inline-block;\r\n    position: relative;\r\n    width: 100%;\r\n    height: auto;\r\n    /* depends on svg ratio */\r\n    padding-bottom: 17%;\r\n    /* aspect ratio */\r\n    vertical-align: top;\r\n    overflow: visible;\r\n}\r\n\r\n.svg-dendrogram-container {\r\n    display: inline-block;\r\n    position: relative;\r\n    height: auto;\r\n    vertical-align: top;\r\n    overflow: visible;\r\n}\r\n\r\n.axis path {\r\n    display: none;\r\n}\r\n\r\n.axis line {\r\n    stroke-opacity: 0.3;\r\n    shape-rendering: crispEdges;\r\n}\r\n\r\n.x {\r\n    font-size: 1em;\r\n}\r\n\r\n.y {\r\n    font-size: 1em;\r\n}\r\n\r\n.axis-line-chart path line {\r\n    fill: none;\r\n    stroke: #000;\r\n    shape-rendering: crispEdges;\r\n}\r\n\r\n.line {\r\n    fill: none;\r\n    stroke-width: 5px;\r\n}\r\n\r\n/* Time  */\r\n\r\n.frame-text {\r\n    margin-top: 0;\r\n    margin-bottom: 0;\r\n    font-size: 2em;\r\n    color: inherit;\r\n    font-weight: 500;\r\n    line-height: 1.1;\r\n}\r\n\r\n/* Slider ticks  */\r\n\r\n.ui-slider-tick {\r\n    display: inline-block;\r\n    width: 3px;\r\n    background: #337ab7;\r\n    height: 0.8em;\r\n    position: absolute;\r\n}\r\n\r\n/* Laoding gif   */\r\n\r\n#loading {\r\n    display: block;\r\n    text-align: center;\r\n}\r\n\r\n/* Color legend    */\r\n\r\n.legend {\r\n    font-size: 12px;\r\n    stroke: #000;\r\n}\r\n\r\n.legend-text {\r\n    font-size: 1.2em;\r\n    color: inherit;\r\n    line-height: 1.1;\r\n}\r\n\r\n.line-chart-legend-text {\r\n    font-size: 2em;\r\n    color: inherit;\r\n    line-height: 1.1;\r\n}\r\n\r\n.time-line {\r\n    fill: none;\r\n    stroke-width: 5px;\r\n    stroke: #000;\r\n}\r\n\r\n/*swarm features */\r\n\r\n.centroid {\r\n    fill-opacity: 0;\r\n    stroke: #e7298a;\r\n    stroke-width: 3px;\r\n}\r\n\r\n.medoid {\r\n    fill: #e7298a !important;\r\n    stroke: #e7298a !important;\r\n}\r\n\r\n.hull-path {\r\n    fill: #fff;\r\n    fill-opacity: 0;\r\n    stroke-width: 3;\r\n    stroke: #252525;\r\n    stroke-opacity: 0.5;\r\n}\r\n\r\n.hierarchy-group {\r\n    stroke-width: 10;\r\n    stroke-linejoin: round;\r\n    opacity: 0.2;\r\n}\r\n\r\n.delaunay-triangulation {\r\n    fill-opacity: 0;\r\n    stroke-width: 2;\r\n    stroke: #000;\r\n    stroke-opacity: 0.4;\r\n}\r\n\r\n/* Color brewer picker div */\r\n\r\n.palette {\r\n    cursor: pointer;\r\n    display: table;\r\n    vertical-align: bottom;\r\n    margin: 4px 0 4px 4px;\r\n    background: #fff;\r\n    border: solid 1px #aaa;\r\n}\r\n\r\n.swatch {\r\n    display: inline-block;\r\n    vertical-align: middle;\r\n    width: 22px;\r\n    height: 22px;\r\n}\r\n\r\n.voronoi {\r\n    fill-opacity: 0;\r\n    stroke-width: 3;\r\n    stroke: #000;\r\n    stroke-opacity: 0.2;\r\n}\r\n\r\n/* Tooltip */\r\n\r\ndiv.tooltip {\r\n    pointer-events: none;\r\n    opacity: 0;\r\n    background: rgb(255, 255, 255) !important;\r\n    border-left-color: #1b809e !important;\r\n    border: 1px solid #eee;\r\n    border-left-width: 5px;\r\n    border-radius: 3px;\r\n    position: absolute;\r\n}\r\n\r\ndiv.tooltip table td:nth-child(2) {\r\n    text-align: center;\r\n    font-weight: bold;\r\n}\r\n\r\n.tooltip-span {\r\n    display: block;\r\n    width: 150px;\r\n    word-wrap: break-word;\r\n    font-size: 1.5em;\r\n}\r\n\r\n.upper-outer-area, .lower-outer-area {\r\n    stroke-width: 1;\r\n    fill: #74a9cf;\r\n    stroke: #3690c0;\r\n}\r\n\r\n.upper-inner-area, .lower-inner-area {\r\n    stroke-width: 1;\r\n    fill: #045a8d;\r\n    stroke: #023858;\r\n}\r\n\r\n.median-line {\r\n    fill: none;\r\n    stroke: #525252;\r\n    stroke-width: 5;\r\n}\r\n\r\n.selected {\r\n    background: #999;\r\n    border: 4px solid #4d4d4d;\r\n    -moz-border-radius: 5px;\r\n    -webkit-border-radius: 5px;\r\n    box-shadow: 1px 2px 4px rgba(0, 0, 0, .4);\r\n}\r\n\r\n.zoom {\r\n    fill: none;\r\n    pointer-events: all;\r\n}\r\n\r\n.x.axis-line-chart>g>text {\r\n    font-size: 3em;\r\n    color: inherit;\r\n    line-height: 1.1;\r\n}\r\n\r\n.arrow {\r\n    stroke-width: 1;\r\n}\r\n\r\n#centroid-line {\r\n    stroke-width: 1;\r\n    stroke: #e7298a;\r\n}\r\n\r\n#centroid-arrow {\r\n    fill: #e7298a;\r\n}\r\n\r\n.metadata-swatch {\r\n    width: 30px;\r\n    height: 30px;\r\n    border-radius: 3px;\r\n    border: 2px solid #666;\r\n}\r\n\r\n.metadata-swatch-clickable:hover {\r\n    border: 2px solid #000;\r\n    cursor: pointer;\r\n}\r\n\r\n.dropdown-menu {\r\n    min-width: 40px;\r\n    padding: 5px;\r\n}\r\n\r\n.metadata-legend {\r\n    list-style: none;\r\n    margin-top: 10px;\r\n}\r\n\r\n.metadata-legend li {\r\n    float: left;\r\n    margin-right: 10px;\r\n}\r\n\r\n.metadata-legend span {\r\n    border: 2px solid #666;\r\n    float: left;\r\n    width: 30px;\r\n    height: 30px;\r\n}\r\n\r\n.metadata-legend .bl-avg {\r\n    background-color: #7fc97f;\r\n}\r\n\r\n.metadata-legend .avg {\r\n    background-color: #fdc086;\r\n}\r\n\r\n.metadata-legend .ab-avg {\r\n    background-color: #386cb0;\r\n}\r\n\r\n.network-edges {\r\n    fill-opacity: 0;\r\n    stroke-width: 2;\r\n}\r\n\r\n.network-background-edges {\r\n    fill-opacity: 0;\r\n    stroke-opacity: 0.25;\r\n    stroke: #737373;\r\n}\r\n\r\n.node text {\r\n    font: 12px sans-serif;\r\n}\r\n\r\n.node--internal text {\r\n    text-shadow: 0 1px 0 #fff, 0 -1px 0 #fff, 1px 0 0 #fff, -1px 0 0 #fff;\r\n}\r\n\r\n.link {\r\n    fill: none;\r\n    stroke: #636363;\r\n    stroke-width: 5px;\r\n}\r\n\r\n#active-network-name {\r\n    font-weight: bold;\r\n    color: #296292;\r\n}\r\n\r\n.active-level {\r\n    fill: #386cb0;\r\n}\r\n\r\n#dendrogram-panel {\r\n    position: initial;\r\n}\r\n\r\n#dendrogram-panel {\r\n    display: none\r\n}\r\n\r\n.show-dendrogram {\r\n    float: right;\r\n    border-radius: 3px;\r\n    border: 1px solid #D1D3D4;\r\n    font-weight: normal;\r\n}\r\n\r\n.show-dendrogram:hover {\r\n    background: #D1D3D4;\r\n}\r\n\r\n.dendrogram-text {\r\n    font-size: 10em !important;\r\n}\r\n\r\n.highlight-hierarchy {\r\n    fill: #252525;\r\n    stroke: #252525;\r\n    stroke-width: 10;\r\n    stroke-linejoin: round;\r\n    opacity: 0.3;\r\n}\r\n\r\n.animal-highlight {\r\n    fill: #c51b7d !important;\r\n}\r\n\r\n#dendrogram-buttons-div .btn span.glyphicon {\r\n    opacity: 0;\r\n}\r\n\r\n#dendrogram-buttons-div .btn.active span.glyphicon {\r\n    opacity: 1;\r\n}\r\n\r\n#dendrogram-buttons-div {\r\n    border: 2px solid #D1D3D4;\r\n    border-radius: 5px;\r\n}\r\n\r\n#dendrogram-legend {\r\n    margin-left: 20px;\r\n}\r\n\r\n.intersection {\r\n    fill: url(#striped) !important;\r\n    stroke: #67000d;\r\n}\r\n\r\n.sym-difference {\r\n    fill: url(#striped) !important;\r\n    stroke: #67000d;\r\n}\r\n\r\n.modal-lg {\r\n    max-width: 80%;\r\n}\r\n\r\n.background-image {\r\n    background: #fff;\r\n}",""]),e.exports=t},function(e,t,r){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var r=function(e,t){var r=e[1]||"",n=e[3];if(!n)return r;if(t&&"function"==typeof btoa){var a=(o=n,s=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(l," */")),i=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[r].concat(i).concat([a]).join("\n")}var o,s,l;return[r].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(r,"}"):r})).join("")},t.i=function(e,r,n){"string"==typeof e&&(e=[[null,e,""]]);var a={};if(n)for(var i=0;i<this.length;i++){var o=this[i][0];null!=o&&(a[o]=!0)}for(var s=0;s<e.length;s++){var l=[].concat(e[s]);n&&a[l[0]]||(r&&(l[2]?l[2]="".concat(r," and ").concat(l[2]):l[2]=r),t.push(l))}},t}},function(e,t,r){var n,a,i={},o=(n=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===a&&(a=n.apply(this,arguments)),a}),s=function(e){return document.querySelector(e)},l=function(e){var t={};return function(e){if("function"==typeof e)return e();if(void 0===t[e]){var r=s.call(this,e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}}(),d=null,c=0,h=[],p=r(5);function u(e,t){for(var r=0;r<e.length;r++){var n=e[r],a=i[n.id];if(a){a.refs++;for(var o=0;o<a.parts.length;o++)a.parts[o](n.parts[o]);for(;o<n.parts.length;o++)a.parts.push(x(n.parts[o],t))}else{var s=[];for(o=0;o<n.parts.length;o++)s.push(x(n.parts[o],t));i[n.id]={id:n.id,refs:1,parts:s}}}}function m(e,t){for(var r=[],n={},a=0;a<e.length;a++){var i=e[a],o=t.base?i[0]+t.base:i[0],s={css:i[1],media:i[2],sourceMap:i[3]};n[o]?n[o].parts.push(s):r.push(n[o]={id:o,parts:[s]})}return r}function f(e,t){var r=l(e.insertInto);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var n=h[h.length-1];if("top"===e.insertAt)n?n.nextSibling?r.insertBefore(t,n.nextSibling):r.appendChild(t):r.insertBefore(t,r.firstChild),h.push(t);else if("bottom"===e.insertAt)r.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var a=l(e.insertInto+" "+e.insertAt.before);r.insertBefore(t,a)}}function g(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=h.indexOf(e);t>=0&&h.splice(t,1)}function v(e){var t=document.createElement("style");return void 0===e.attrs.type&&(e.attrs.type="text/css"),b(t,e.attrs),f(e,t),t}function b(e,t){Object.keys(t).forEach((function(r){e.setAttribute(r,t[r])}))}function x(e,t){var r,n,a,i;if(t.transform&&e.css){if(!(i=t.transform(e.css)))return function(){};e.css=i}if(t.singleton){var o=c++;r=d||(d=v(t)),n=w.bind(null,r,o,!1),a=w.bind(null,r,o,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(r=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",b(t,e.attrs),f(e,t),t}(t),n=C.bind(null,r,t),a=function(){g(r),r.href&&URL.revokeObjectURL(r.href)}):(r=v(t),n=$.bind(null,r),a=function(){g(r)});return n(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;n(e=t)}else a()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=o()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var r=m(e,t);return u(r,t),function(e){for(var n=[],a=0;a<r.length;a++){var o=r[a];(s=i[o.id]).refs--,n.push(s)}e&&u(m(e,t),t);for(a=0;a<n.length;a++){var s;if(0===(s=n[a]).refs){for(var l=0;l<s.parts.length;l++)s.parts[l]();delete i[s.id]}}}};var k,y=(k=[],function(e,t){return k[e]=t,k.filter(Boolean).join("\n")});function w(e,t,r,n){var a=r?"":n.css;if(e.styleSheet)e.styleSheet.cssText=y(t,a);else{var i=document.createTextNode(a),o=e.childNodes;o[t]&&e.removeChild(o[t]),o.length?e.insertBefore(i,o[t]):e.appendChild(i)}}function $(e,t){var r=t.css,n=t.media;if(n&&e.setAttribute("media",n),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}function C(e,t,r){var n=r.css,a=r.sourceMap,i=void 0===t.convertToAbsoluteUrls&&a;(t.convertToAbsoluteUrls||i)&&(n=p(n)),a&&(n+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */");var o=new Blob([n],{type:"text/css"}),s=e.href;e.href=URL.createObjectURL(o),s&&URL.revokeObjectURL(s)}},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var r=t.protocol+"//"+t.host,n=r+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,(function(e,t){var a,i=t.trim().replace(/^"(.*)"$/,(function(e,t){return t})).replace(/^'(.*)'$/,(function(e,t){return t}));return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?e:(a=0===i.indexOf("//")?i:0===i.indexOf("/")?r+i:n+i.replace(/^\.\//,""),"url("+JSON.stringify(a)+")")}))}},function(e,t,r){"use strict";let n,a;r.r(t),r.d(t,"dataset",(function(){return F})),r.d(t,"datasetMetadata",(function(){return X})),r.d(t,"swarmData",(function(){return J})),r.d(t,"dataSetPercentile",(function(){return Z})),r.d(t,"networkData",(function(){return q})),r.d(t,"networkHierarchy",(function(){return K})),r.d(t,"animalIds",(function(){return Q})),r.d(t,"addToDataset",(function(){return ee})),r.d(t,"setDataSetPercentile",(function(){return te})),r.d(t,"setMetaData",(function(){return re})),r.d(t,"setSwarmData",(function(){return ne})),r.d(t,"setDatasetFeature",(function(){return ae})),r.d(t,"setNetworkData",(function(){return ie})),r.d(t,"setHierarchyData",(function(){return oe})),r.d(t,"setAnimalIds",(function(){return se}));colorbrewer.BuYlBu;let i={};var o=r(0);let s=!0;function l(e){s="boolean"==typeof e&&e}function d(){l(!1),$("#play-button").removeClass("active"),$("#play-button").prop("disabled",!0),$("#play-icons").hide(),$("#play-loading").show()}function c(){l(!0),$("#play-button").addClass("active"),$("#play-button").prop("disabled",!1),$("#play-loading").hide(),$("#play-icons").show()}function h(e){let t=[.05,.25,.5,.75,.95],r=[];if(0===e.length)return 0;e.sort((function(e,t){return e-t}));for(let n=0;n<t.length;n++){let a=(e.length-1)*t[n],i=Math.floor(a),o=i+1,s=a%1;o>=e.length?r.push(e[i]):r.push(e[i]*(1-s)+e[o]*s)}return r}function p(){$(".draw-details").click((function(){$(this).find("input:checkbox").prop("checked")?new C(this,J).disableLineChart():($(".trendChartData").hide(),$("#trendChartLegend").hide(),$("#lineChartLegend").show(),$(".lineChartButton").prop("checked",!0).prop("disabled",!1),$(".line-chart-check-box").attr("disabled",!1),$(".lineChartLine").attr("visibility","visible"))}))}String.prototype.hashCode=function(){var e,t=0;if(0===this.length)return t;for(e=0;e<this.length;e++)t=(t<<5)-t+this.charCodeAt(e),t|=0;return t},d3.selection.prototype.moveToBack=function(){return this.each((function(){var e=this.parentNode.firstChild;e&&this.parentNode.insertBefore(this,e)}))};let u,m,f,g,v={},b=1;class x{constructor(){this.indexTime=0,this.svgContainer=d3.select("#main-vis"),this.zoom=d3.zoom().scaleExtent([1,6]).on("zoom",()=>{d3.event.transform.x=Math.min(0,this.tankWidth*(d3.event.transform.k-1),Math.max(this.tankWidth*(1-d3.event.transform.k),d3.event.transform.x)),d3.event.transform.y=Math.min(0,this.tankHeight*(d3.event.transform.k-1),Math.max(this.tankHeight*(1-d3.event.transform.k),d3.event.transform.y)),this.zoomGroup.attr("transform",d3.event.transform),gXaxis.call(xAxis.scale(d3.event.transform.rescaleX(m))),gYaxis.call(yAxis.scale(d3.event.transform.rescaleY(f)))}),this.zoomGroup=this.svgContainer.append("svg:g"),this.tank=this.zoomGroup.append("svg:g").attr("class","tank").attr("transform",()=>"scale("+(parameters.inverted_x?-1:1)+","+(parameters.inverted_y?-1:1)+")"),this.activeScale="black",this.colorScale={type:"Linear",color:colorbrewer.BuYlBu},this.legendWidth=550,this.legendHeight=60,this.svgLegend=d3.select("#main-vis-legend-div").append("svg").attr("id","main-vis-legend").attr("width",this.legendWidth).attr("height",this.legendHeight),this.medoidAnimal=-1,this.activeAnimals=[],this.arrayAnimals=F.filter(e=>e.t===this.indexTime),this.id=$(".show-dendrogram.btn-primary").attr("data"),this.playBoolean=!0,this.hierarchyLevels={},this.hierarchyGroupStdev={},this.brush=d3.brush().extent([[0,0],[this.tankWidth,this.tankHeight]]),this.dendrozoom=this.zoomGroup,this.networkColor={}}setIndexTime(e){"number"==typeof e&&this.indexTime<=J.length?this.indexTime=e:this.indexTime=0}setActiveScale(e){this.activeScale=e}setActiveAnimals(e){this.activeAnimals=e}decIndexTime(){this.indexTime=this.indexTime-1}updateLineChart(){if(d3.select("#lineChartTimeLine")&&J[Math.ceil(this.indexTime/b)]){let e=Math.ceil(this.indexTime/b);this.indexTime%25==0&&(d3.select("#convex_hull_areaLineValue").text(J[e].convex_hull_area+"mm²"),d3.select("#speedLineValue").text(J[e].speed+"mm/s"),d3.select("#accelerationLineValue").text(J[e].acceleration+"mm/s²"),d3.select("#distance_centroidLineValue").text(J[e].distance_centroid+"mm"),d3.select("#directionLineValue").text(J[e].direction+"°"),d3.select("#polarisationLineValue").text(J[e].polarisation)),d3.select("#lineChartTimeLine").attr("transform","translate("+g(e)+",0)")}}returnColorScale(){return"Linear"===this.colorScale.type?d3.scaleLinear().domain(Z[this.activeScale]).range(this.colorScale.color):"Threshold"===this.colorScale.type?d3.scaleThreshold().domain(Z[this.activeScale]).range(this.colorScale.color):void 0}initColorPicker(){d3.select(".colors-body").selectAll(".palette").data(d3.entries(colorbrewer)).enter().append("span").attr("class","palette").attr("title",e=>e.key).on("click",e=>{$(".palette").removeClass("selected"),$('.palette[title="'+e.key+'"]').addClass("selected"),this.colorScale.color=colorbrewer[e.key],this.changelegend(),$("#play-button").hasClass("active")||(this.decIndexTime(),this.draw())}).selectAll(".swatch").data(e=>e.value).enter().append("span").attr("class","swatch").style("background-color",e=>e),$('.palette[title="BuYlBu"]').addClass("selected")}changelegend(){let e,t;if($("#main-vis-legend-div").show(),"black"!==this.activeScale){var r=this.returnColorScale();e=this.svgLegend.selectAll("rect.legend").data(r.range()),t=this.svgLegend.selectAll("text.legend-text").data(r.domain())}else e=this.svgLegend.selectAll("rect.legend").data([]),t=this.svgLegend.selectAll("text.legend-text").data([]),$("#main-vis-legend-div").hide();e.style("fill",(function(e){return e})),e.enter().append("rect").attr("class","legend").attr("width",50).attr("height",20).attr("y",0).attr("x",(function(e,t){return 50+50*t+"px"})).style("fill",(function(e){return e})),e.exit().remove(),t.text((function(e){return Math.ceil(2*e)/2})),t.enter().append("text").attr("class","legend-text").attr("y",40).attr("x",(function(e,t){return 50+50*t+5+"px"})).text((function(e){return Math.ceil(2*e)/2})),t.exit().remove()}draw(){let e=$('input[type="radio"].group-playback-rate:checked').val(),t=$('input[type="radio"].group-size:checked').val();this.arrayAnimals=F.filter(e=>e.t===this.indexTime),setTimeout(()=>{var e;this.drawDendrogram(),this.svgContainer.select(".frame-text").text(Math.floor(this.indexTime/1500)%60+":"+Math.floor(this.indexTime/parameters.fps)%60+"::"+this.indexTime%parameters.fps),this.indexTime%parameters.fps==0&&(e=this.indexTime,n.slider("value",e));let r,s=this.tank.selectAll("g.animal").data(this.arrayAnimals);if(this.indexTime in q){let e=q[this.indexTime];if(j={},e=e.map(e=>{let t=this.arrayAnimals.filter((function(t){return t.a===e.s}))[0],r=this.arrayAnimals.filter((function(t){return t.a===e.e}))[0];return{node1:t.a,node2:r.a,start:t.p,end:r.p,val:e.v}}),e.forEach((function(e){$("#mc-"+e.node1+"-"+e.node2).css("fill",W(e.val)),$("#mc-"+e.node2+"-"+e.node1).css("fill",W(e.val))})),H){let t=[];for(let r=0;r<e.length;r++)t.push(e[r].val);G(function(e){if(0===e.length)return 0;e.sort((function(e,t){return e-t}));let t=.05*(e.length-1),r=Math.floor(t),n=r+1,a=t%1;return n>=e.length?1-e[r]:1-(e[r]*(1-a)+e[n]*a)}(t))}e=e.filter((function(e){return e.val<=1-B})),r=this.tank.select("#network-group").selectAll("line.network-edges").data(e),r.attr("x1",(function(e){return e.start[0]})).attr("y1",(function(e){return-e.start[1]})).attr("x2",(function(e){return e.end[0]})).attr("y2",(function(e){return-e.end[1]})).attr("stroke",(function(e){return W(1-e.val)})).attr("stroke-opacity",(function(e){return 1-e.val})),r.enter().append("line").attr("class","network-edges").attr("x1",(function(e){return e.start[0]})).attr("y1",(function(e){return-e.start[1]})).attr("x2",(function(e){return e.end[0]})).attr("y2",(function(e){return-e.end[1]})).attr("stroke",(function(e){return W(e.val)})).attr("stroke-opacity",(function(e){return e.val}))}else r=this.tank.selectAll("line.network-edges").data([]);var l,d;r.exit().remove(),$("#draw-triangulation").is(":checked")?((l=this.tank.select("#delaunay-triangulation-group").selectAll("path.delaunay-triangulation").data([J[this.indexTime].triangulation])).attr("d",e=>e),l.enter().append("path").attr("class","delaunay-triangulation").attr("d",e=>e)):l=this.tank.selectAll("path.delaunay-triangulation").data([]),l.exit().remove(),$("#draw-voronoi").is(":checked")?((d="voronoi"in J[0]?this.tank.select("#vornoi-group").selectAll("path.voronoi").data(J[this.indexTime].voronoi.split(";")):this.tank.select("#vornoi-group").selectAll("path.voronoi").data([J[this.indexTime].voronoi])).attr("d",e=>e),d.enter().append("path").attr("class","voronoi").attr("d",e=>e)):d=this.tank.select("#vornoi-group").selectAll("path.voronoi").data([]),d.exit().remove();let c=s.enter().append("g").attr("class","animal").attr("id",e=>"animal-"+e.a);if(c.append("circle").attr("r",1.5*t).attr("cx",e=>e.p[0]).attr("cy",e=>-e.p[1]).on("mouseover",e=>{!function(e){for(let t=0;t<X.length;t++)e.a===X[t].animal_id&&(a.style("left",d3.event.pageX+5+"px").style("top",d3.event.pageY-100+"px").style("opacity",1),a.select("#tooltip-animal-id").html(X[t].animal_id),a.select("#tooltip-species").html(X[t].species),a.select("#tooltip-sex").html(X[t].sex),a.select("#tooltip-size").html(X[t].size),a.select("#tooltip-weight").html(X[t].weight))}(e)}).on("mouseout",()=>{a.transition().duration(500).style("opacity",0)}).on("click",e=>{this.activeAnimals.includes(e.a)?this.activeAnimals=this.activeAnimals.filter(t=>t!==e.a):this.activeAnimals.push(e.a),$("#play-button").hasClass("active")||(this.indexTime--,this.draw())}),s.select("circle").attr("cx",e=>e.p[0]).attr("cy",e=>-e.p[1]).attr("r",t),c.append("svg:defs").append("svg:marker").attr("id",e=>"arrow-marker-"+e.a).attr("refX",2).attr("refY",6).attr("markerWidth",13).attr("markerHeight",13).attr("orient","auto").append("svg:path").attr("d","M2,2 L2,11 L10,6 L2,2"),c.append("line").attr("class","arrow").attr("marker-end",e=>"url(#arrow-marker-"+e.a+")"),$("#draw-direction").is(":checked")?s.select("line").attr("x1",e=>e.p[0]).attr("y1",e=>-e.p[1]).attr("x2",e=>e.p[0]+2*t).attr("y2",e=>-e.p[1]).attr("transform",e=>"rotate("+-e.direction+" "+e.p[0]+" "+-e.p[1]+")"):$(".arrow").hide(),s.exit().remove(),$("#draw-convex-hull").is(":checked")){var h=this.tank.selectAll("path.hull-path").data([J[this.indexTime].convex_hull]);h.attr("d",e=>e),h.enter().append("path").attr("class","hull-path").attr("d",e=>e)}else h=this.tank.select("path.hull-path").data([]);if(h.exit().remove(),"black"!==this.activeScale){var p=this.returnColorScale();s.transition().duration(10).style("fill",e=>p(e[this.activeScale])).attr("stroke",e=>p(e[this.activeScale]))}else s.style("fill","#000").attr("stroke","#000"),$.isEmptyObject(i)||Object.keys(i).forEach((function(e){d3.select("#animal-"+e).style("fill",i[e]).attr("stroke",i[e])}));this.activeAnimals.length?(s.style("opacity",e=>this.activeAnimals.includes(e.a)?1:.25),$("#remove-active-selected-button").is(":disabled")&&($("#remove-active-selected-button").prop("disabled",!1),$("#visual-parameter-button").prop("disabled",!1)),o.trackingBoolean&&Object(o.addTrackedData)(this.arrayAnimals[0].t,this.activeAnimals)):($("#remove-active-selected-button").is(":disabled")||($("#remove-active-selected-button").prop("disabled",!0),$("#visual-parameter-button").prop("disabled",!0)),s.style("opacity",1)),d3.select(".centroid").attr("cx",()=>"centroid"in J[0]?J[this.indexTime].centroid[0]:0).attr("cy",()=>"centroid"in J[0]?-J[this.indexTime].centroid[1]:0),$("#draw-direction").is(":checked")&&J[this.indexTime].centroid&&$("#draw-centroid").is(":checked")?(d3.select("#centroid-line").classed("hidden",!1),d3.select("#centroid-line").attr("x1",()=>J[this.indexTime].centroid[0]).attr("y1",()=>-J[this.indexTime].centroid[1]).attr("x2",()=>J[this.indexTime].centroid[0]+2*t).attr("y2",()=>-J[this.indexTime].centroid[1]).attr("transform",()=>"rotate("+-J[this.indexTime].direction+" "+J[this.indexTime].centroid[0]+" "+-J[this.indexTime].centroid[1]+")")):d3.select("#centroid-line").attr("class","hidden"),-1!==this.medoidAnimal&&(d3.selectAll("#animal-"+this.medoidAnimal).classed("medoid",!1),this.medoidAnimal=J[this.indexTime].medoid,d3.selectAll("#animal-"+this.medoidAnimal).classed("medoid",!0)),this.indexTime++,this.updateLineChart(),this.indexTime>=J.length?(this.indexTime=0,this.draw()):this.playBoolean&&this.draw()},e)}initDendrogram(){let e=d3.zoom().scaleExtent([1,10]).on("zoom",()=>{d3.event.transform.x=Math.min(0,5e3*(d3.event.transform.k-1),Math.max(5e3*(1-d3.event.transform.k),d3.event.transform.x)),d3.event.transform.y=Math.min(0,5e3*(d3.event.transform.k-1),Math.max(5e3*(1-d3.event.transform.k),d3.event.transform.y)),this.dendrozoom.attr("transform",d3.event.transform)}),t=d3.select("#dendrogram-panel").classed("svg-dendrogram-container",!0).append("svg").attr("preserveAspectRatio","xMinYMin meet").attr("viewBox","0 0 5000 5000").classed("svg-content-dendrogram",!0).call(e);D(),this.dendrozoom=t.append("g").attr("transform","translate(20,20)").append("svg:g");d3.tree().size([4800,4800]);let r,n=d3.select(".tank");$("#dendrogram-panel-level-slider").slider({range:"max",min:2,max:2,step:1,value:this.hierarchyLevels.h0,slide:(e,t)=>{let r=$(".show-dendrogram.btn-primary").attr("data");this.setHierarchyLevel(r,t.value),this.updateDendrogram(),$("#play-button").hasClass("active")||(this.decIndexTime(),this.draw(),this.drawDendrogram())}}),r=d3.select("#dendrogram-tooltip").style("left","0px").style("top","0px").on("mouseover",(function(){r.style("opacity",1)}));let a=100*_;d3.select("#hierarchy-legend-div").append("svg").attr("id","hierarchy-legend").attr("width",a).attr("height",60);n.append("defs").append("svg:pattern").attr("id","striped").attr("patternUnits","userSpaceOnUse").attr("width","20").attr("height","5").attr("patternTransform","rotate(60)").append("rect").attr("width",5).attr("height",10).attr("transform","translate(0,0)").style("fill","#67000d")}click(e){setActiveAnimals(e.data.name),$("#play-button").hasClass("active")||(this.decIndexTime(),this.draw())}sethierarchyGroupStdev(e,t){e in this.hierarchyGroupStdev?this.hierarchyGroupStdev[e].push(t):this.hierarchyGroupStdev[e]=[t]}resethierarchyGroupStdev(){this.hierarchyGroupStdev={}}getHierarchyLevel(e,t){let r=[],n=this.hierarchyLevels["h"+t],a=e.children;for(let t=1;t<e.height;t++){if(a[0]&&a[0].depth===n){a.forEach((function(e){void 0!==e.data.name&&r.push(e.data.name)}));break}let e=[];a.forEach((function(t){void 0!==t.children&&(e=e.concat(t.children))})),a=e}return r}setHierarchyLevel(e,t){this.hierarchyLevels["h"+e]=t}setHierarchyColor(e){for(let t in this.networkColor)if(t==="h"+e)return void(S["h"+e]=this.networkColor[t]);for(let t=0;t<colors.length;t++){let r=!0;for(let e in S)S.hasOwnProperty(e)&&S[e]===colors[t]&&(r=!1);if(r){if(0===Object.keys(this.networkColor).length)return void(S["h"+e]=colors[t]);for(let r in this.networkColor)if(this.networkColor[r]!==colors[t])return void(S["h"+e]=colors[t])}}}removeHierarchyColor(e){delete S["h"+e]}removeHierarchyLevel(e){delete this.hierarchyLevels["h"+e]}updateDendrogram(){let e=$(".show-dendrogram.btn-primary").attr("data"),t=$(".show-dendrogram.btn-primary").attr("name");$("#dendrogram-panel-name").text(t),$("#dendrogram-panel-level-slider").val(this.hierarchyLevels["h"+e]),$("#dendrogram-panel-level-text").text(this.hierarchyLevels["h"+e])}getHierarchyVertices(e){let t=[];return e.forEach(e=>{let r=[];for(let t=0;t<e.length;t++){let n=this.arrayAnimals.find(r=>r.a===e[t]);n&&r.push([n.p[0],-n.p[1]])}r.length>=3&&t.push(d3.polygonHull(r))}),t}drawHierarchy(){let e=Object.keys(K).map((function(e){return e.replace("h","")})),t=[];for(let r=0;r<e.length;r++){let n=K["h"+e[r]][this.indexTime],a=d3.hierarchy(n,(function(e){return e.children})),i=20,o=5e3,s=5e3;a=d3.tree().size([s-10*i,o-10*i])(a);let l=a.children[0];E===e[r]&&(networkHierarchyIds=this.getHierarchyLevel(l,e[r])),t.push(this.getHierarchyVertices(this.getHierarchyLevel(l,e[r])))}t.length;let r=d3.select(".tank").selectAll("g.hierarchy-group").data(t);r.enter().append("g").attr("class",(function(t,r){return"hierarchy-group h"+e[r]})).style("fill",(function(t,r){return S["h"+e[r]]})).attr("stroke",(function(t,r){return S["h"+e[r]]})).moveToBack(),r.attr("class",(function(t,r){return"hierarchy-group h"+e[r]})),r.exit().remove();let n=r.selectAll("path.hierarchy-hull-path").data((function(e){return e}));n.enter().append("path").attr("class","hierarchy-hull-path").attr("d",(function(e){return"M"+e.join("L")+"Z"})),n.attr("d",(function(e){return"M"+e.join("L")+"Z"})),n.exit().remove()}drawDendrogram(){var e=t=>{t.children&&t.depth<=2?(t._children=t.children,t._children.forEach(e)):t.children=0};let t=$(".show-dendrogram.btn-primary").attr("data");if(!$.isEmptyObject(K)&&t){let n=K["h"+t][this.indexTime],a=d3.hierarchy(n,(function(e){return e.children}));a=a.children[0],a.children.forEach(e);let i=20,o=5e3,s=5e3;if(a=d3.tree().size([s-10*i,o-10*i])(a),$(".show-dendrogram.btn-primary").length){$("#dendrogram-panel-level-slider").slider("option","max",a.height-1).slider("value",this.hierarchyLevels["h"+t]);let e=this.dendrozoom.selectAll("path.link").data(a.descendants().slice(1));e.enter().append("path").attr("class","link").attr("d",z),e.attr("d",z),e.exit().remove();let n=this.dendrozoom.selectAll(".node").data(a.descendants());var r=n.enter().append("g").attr("class",(function(e){return"node"+(e.children?" node--internal":" node--leaf")})).attr("transform",(function(e){return"translate("+e.x+","+e.y+")"}));r.append("circle").attr("r",e=>e.depth===this.hierarchyLevels["h"+t]?40+e.data.name.length:20+e.data.name.length).attr("class",e=>{if(e.depth===this.hierarchyLevels["h"+t])return"active-level"}).attr("id",e=>"h"+e.data.name.toString().hashCode()).on("click",this.click).on("mouseover",(function(e){tooltipDiv.style("left",d3.event.pageX+5+"px").style("top",d3.event.pageY+5+"px").style("opacity",1),tooltipDiv.select(".tooltip-span").html(e.data.name.toString()),addHighlightSpatialView(e.data.name)})).on("mouseout",(function(){tooltipDiv.transition().duration(500).style("opacity",0),removeHighlightSpatialView()})),r.append("text").attr("class","dendrogram-text").attr("x",150).attr("y",-150).text(e=>e.data.name.length),r.attr("transform",e=>"translate("+e.x+","+e.y+")"),n.attr("transform",e=>"translate("+e.x+","+e.y+")").select("circle").attr("r",e=>e.depth===this.hierarchyLevels["h"+t]?40+e.data.name.length:20+e.data.name.length).attr("class",e=>e.depth===this.hierarchyLevels["h"+t]?"active-level":"").attr("id",e=>"h"+e.data.name.toString().hashCode()),n.select("text").text(e=>e.data.name.length),n.exit().remove(),Object.keys(this.hierarchyGroupStdev).length?(console.log("runs"),"none"==$("#dendrogram-legend").css("display")&&$("#dendrogram-legend").show(),setTimeout(()=>{n.select("circle").style("fill",(function(e){return"h"+e.data.name.toString().hashCode()in j?standardDeviationColorScale(standardDeviation(j["h"+e.data.name.toString().hashCode()])):e.depth!==(void 0)["h"+this.id]?"":"#000"}))},250)):"none"!==$("#dendrogram-legend").css("display")&&$("#dendrogram-legend").hide()}}$.isEmptyObject(K)||this.drawHierarchy()}changeHierarchyLegend(){let e,t;0!==Object.keys(S).length||0!==Object.keys(this.networkColor).length?$("#hierarchy-legend-div").show():$("#hierarchy-legend-div").hide();let r=[],n=[];if($(".show-dendrogram").each((function(e,t){null!=S["h"+$(t).attr("data")]&&null!=$(t).attr("name")&&(r.push(S["h"+$(t).attr("data")]),n.push($(t).attr("name")))})),0!==Object.keys(this.networkColor).length)for(let e in this.networkColor)-1===r.indexOf(this.networkColor[e])&&(r.push(this.networkColor[e]),n.push("Network"));e=this.svgLegend.selectAll("rect.legend").data(r),t=this.svgLegend.selectAll("text.legend-text").data(n),e.style("fill",(function(e){return e})),e.enter().append("rect").attr("class","legend").attr("width",50).attr("height",20).attr("y",0).attr("x",(function(e,t){return 50+2.5*t*50+"px"})).style("fill",(function(e){return e})),e.exit().remove(),t.text((function(e){return e})),t.enter().append("text").attr("class","legend-text").attr("y",40).attr("x",(function(e,t){return 50+2.5*t*50+"px"})).text((function(e){return e})),t.exit().remove()}setnetworkColor(e){e>=0?this.networkColor["h"+e]="#08306b":this.networkColor={},this.changeHierarchyLegend()}}class k extends x{constructor(e){super(e),this.spatialViewInit()}cp_listener(){$("#play-button").click(()=>{!0===$("#play-button").hasClass("active")?(this.playBoolean=!1,$(".mdi-pause").hide(),$(".mdi-play").show()):(this.playBoolean=!0,$(".mdi-play").hide(),$(".mdi-pause").show(),this.setIndexTime(n.slider("value")),$(".brush").remove(),this.draw())}),$("#next-frame-button").click(()=>{!0===$("#play-button").hasClass("active")&&(this.playBoolean=!1),$("#play-button").removeClass("active"),this.draw()}),$("#brushing-button").click(()=>{this.playBoolean=!1,$("#play-button").removeClass("active"),$("#brushing-button").hasClass("active")?$(".brush").remove():(this.brush=d3.brush().extent([[0,0],[this.tankWidth,this.tankHeight]]).on("end",()=>{var e=d3.event.selection;this.activeAnimals=[],this.arrayAnimals.map(t=>{var r=[t.p[0],t.p[1]];e[0][0]<=r[0]&&r[0]<=e[1][0]&&e[0][1]<=r[1]&&r[1]<=e[1][1]&&this.activeAnimals.push(t.a)}),console.log(this.activeAnimals),$("#play-button").hasClass("active"),$("#brushing-button").removeClass("active"),$(".brush").remove()}),d3.select("#main-vis-svg").append("g").attr("class","brush").call(this.brush))}),$("#remove-active-selected-button").click(()=>{$("#remove-active-selected-button").is(":disabled")||($("#remove-active-selected-button").prop("disabled",!0),this.setActiveAnimals([]),resetTrackedData(),$("#visual-parameter-button").prop("disabled",!0).removeClass("active"),$("#play-button").hasClass("active")||(this.decIndexTime(),this.draw()))}),$("#visual-parameter-button").click(()=>{!0===$("#visual-parameter-button").hasClass("active")?setTrackingBoolean(!1):setTrackingBoolean(!0)}),$("#calculate-parameter-button").click(()=>{$("#calculate-parameter-button").hasClass("active")||(setTrackingBoolean(!1),sendTrackedData(),$("#calculate-parameter-button").prop("disabled",!0),$("#calculate-parameter-button").removeClass("active"),$("#visual-parameter-button").removeClass("active"))}),$("#background-color").change(()=>{let e=$('input[type="radio"].group-background:checked').val();$("#main-vis-svg").css("background-color",e)}),$("#draw-axis").on("change",()=>{this.checked?($("#main-vis g.x.axis").show(),$("#main-vis g.y.axis").show()):($("#main-vis g.x.axis").hide(),$("#main-vis g.y.axis").hide())}),$("#draw-time").on("change",()=>{this.checked?$("#main-vis .frame-text").show():$("#main-vis .frame-text").hide()}),$("#network-background").on("change",()=>{this.checked?setNetworkBackground(!0):setNetworkBackground(!1)}),$("#network-background-limit").val(1),$("#network-background-limit").on("change",()=>{let e=$(this).val();$.isNumeric(e)&&e>0?setNetworkBackgroundLimit(e):$(this).val(1)}),$("#color-scale-radio-form input").on("change",()=>{this.colorScale.type=$("input[name=color-scale-radio]:checked","#color-scale-radio-form").val(),$("#play-button").hasClass("active")||(this.decIndexTime(),this.draw())})}sf_listeners(){$("#draw-direction").click(()=>{$("#draw-direction").is(":checked")?("direction"in F[0]||(d(),V("direction")),$(".arrow").show()):$(".arrow").hide(),$("#play-button").hasClass("active")||this.decIndexTime()}),$("#draw-medoid").click(()=>{$("#draw-medoid").is(":checked")?("medoid"in J[0]||Y("medoid"),this.setMedoidAnimal(J[this.indexTime].medoid),d3.selectAll("#animal-"+this.medoidAnimal).classed("medoid",!0)):(d3.selectAll("#animal-"+this.medoidAnimal).classed("medoid",!1),this.setMedoidAnimal(-1))}),$("#draw-centroid").click(()=>{$("#draw-centroid").is(":checked")?("centroid"in J[0]||Y("centroid"),$("#g-centroid").show()):$("#g-centroid").hide()}),$("#draw-convex-hull").click(()=>{$("#draw-convex-hull").is(":checked")&&("hull"in J[0]||Y("convex_hull"))}),$("#draw-triangulation").click(()=>{$("#draw-triangulation").is(":checked")&&("triangulation"in J[0]||Y("triangulation"),$("#play-button").hasClass("active")||this.decIndexTime())}),$("#draw-voronoi").click(()=>{$("#draw-voronoi").is(":checked")&&("voronoi"in J[0]||Y("voronoi"),$("#play-button").hasClass("active")||this.decIndexTime())})}af_listeners(){$("#draw-speed").click(()=>{$(".draw-details").hide().find("input:checkbox").prop("checked",!0).click(),$("#draw-speed").is(":checked")?("speed"in F[0]||(d(),V("speed")),$("#draw-speed-details").show(),$("#draw-acceleration").prop("checked",!1),$("#draw-distance_centroid").prop("checked",!1),$("#draw-midline_offset").prop("checked",!1),this.setActiveScale("speed")):($("#draw-speed-details").hide(),this.setActiveScale("black")),d3.selectAll(".colorLegend *").remove(),this.changelegend(),$("#play-button").hasClass("active")||this.decIndexTime()}),$("#draw-acceleration").click(()=>{$(".draw-details").hide().find("input:checkbox").prop("checked",!0).click(),$("#draw-acceleration").is(":checked")?("acceleration"in F[0]||(d(),V("acceleration")),$("#draw-acceleration-details").show(),$("#draw-speed").prop("checked",!1),$("#draw-distance_centroid").prop("checked",!1),$("#draw-midline_offset").prop("checked",!1),this.setActiveScale("acceleration")):($("#draw-acceleration-details").hide(),this.setActiveScale("black")),$(".draw-details.active").click(),d3.selectAll(".colorLegend *").remove(),this.changelegend(),$("#play-button").hasClass("active")||this.decIndexTime()}),$("#draw-distance_centroid").click(()=>{$(".draw-details").hide().find("input:checkbox").prop("checked",!0).click(),$("#draw-distance_centroid").is(":checked")?(console.log("checked"),"distance_centroid"in F[0]||(d(),V("distance_centroid")),console.log(F),$("#draw-distance_centroid-details").show(),$("#draw-speed").prop("checked",!1),$("#draw-acceleration").prop("checked",!1),$("#draw-midline_offset").prop("checked",!1),this.setActiveScale("distance_centroid")):(console.log("black"),$("#draw-distance_centroid-details").hide(),this.setActiveScale("black")),$(".draw-details.active").click(),d3.selectAll(".colorLegend *").remove(),this.changelegend(),$("#play-button").hasClass("active")||this.decIndexTime()}),$("#draw-midline_offset").click(()=>{$(".draw-details").hide().find("input:checkbox").prop("checked",!0).click(),$("#draw-midline_offset").is(":checked")?("draw-midline_offset"in F[0]||(d(),V("midline_offset")),$("#draw-midline_offset-details").show(),$("#draw-speed").prop("checked",!1),$("#draw-acceleration").prop("checked",!1),$("#draw-distance_centroid").prop("checked",!1),T("midline_offset")):T("black"),$(".draw-details.active").click(),d3.selectAll(".colorLegend *").remove(),this.changelegend(),$("#play-button").hasClass("active")||(this.decIndexTime(),this.draw())})}md_listeners(){$(".metadata-swatch.metadata-swatch-clickable").click((function(){let e=$(this).attr("value"),t=$(this).css("background-color");$("#metadata-row-"+e+" #preview").css("background-color",t),"rgb(255, 255, 255)"===t?i[e]&&delete i[e]:i[e]=t})),$("#group-metadata :input").change((function(){resetIndividualMetadata();let e=$(this).attr("value"),t=[];if("sex"===e){$("#metadata-div").modal("toggle");for(let r=0;r<X.length;r++)t.push(X[r][e].toLowerCase());t=Array.from(new Set(t));let r=["#7fc97f","#386cb0"];for(let n=0;n<X.length;n++)for(let a=0;a<t.length;a++)X[n][e].toLowerCase()===t[a]&&(i[X[n].animal_id]=r[a]);$("#metadata-input").hide()}else{$("#metadata-input").show();for(let r=0;r<X.length;r++)t.push(X[r][e]);let r=d3.quantile(t,.25),n=d3.quantile(t,.75);$("#bl-avg").val(r),$("#ab-avg").val(n),colorMetadata()}})),$(".number-spinner button").click((function(){let e=$(this),t=e.closest(".number-spinner").find("input").val().trim(),r=0;r="up"==e.attr("data-dir")?parseFloat(t)+.1:t>0?parseFloat(t)-.1:0,r=Math.round(100*r)/100,e.closest(".number-spinner").find("input").val(r),colorMetadata()})),$(".number-spinner input").on("input",(function(){colorMetadata()})),$("#metadata-reset").click((function(){$("#metadata-input").hide(),resetIndividualMetadata()}))}initShowDendrogramListener(e){$("#show-dendrogram-"+e).click((function(){let e=$(this).attr("id");$(".show-dendrogram").each((function(t,r){$(r).attr("id")===e&&!1===$(r).hasClass("btn-primary")?($(r).addClass("btn-primary"),$(r).find("#btn-left").hide(),$(r).find("#btn-right").show()):($(r).removeClass("btn-primary"),$(r).find("#btn-left").show(),$(r).find("#btn-right").hide())})),$(".show-dendrogram.btn-primary").length?$("#dendrogram-panel").show():$("#dendrogram-panel").hide(),$("#play-button").hasClass("active")||(this.decIndexTime(),this.draw(),this.drawDendrogram())}))}h_listeners(){var e;$(".hiearchy-checkbox").on("change",(function(){e=$(this)})),$(".hiearchy-checkbox").on("change",()=>{console.log("jumps");let t=e.attr("data"),r=e.attr("name"),n=e.prop("checked");if(console.log(n),n&&$(".show-dendrogram").length<_)d(),a=t,$.ajax({url:"/api/dataset/network/hierarchy/"+parameters.id+"/"+a,dataType:"json",type:"GET",contentType:"application/json; charset=utf-8",headers:{Accept:N},success:function(e){e.length&&oe(JSON.parse(e[0].hierarchy),a),c()}}),function(e,t){$(".show-dendrogram").length<_&&($("#dendrogram-buttons-div").append('<button type="button" id="show-dendrogram-'+e+'" data='+e+" name="+t+' class="show-dendrogram btn btn-block" data-toggle="button" aria-pressed="false" autocomplete="off"> <span class="btn-label" id="btn-left"> <i class="mdi mdi-arrow-collapse-left"></i>&nbsp&nbsp Show '+t+'</span><span class="btn-label" id="btn-right"> <i class="mdi mdi-arrow-collapse-right"></i>&nbsp&nbsp Hide '+t+" </span></button> <br>"),$("#show-dendrogram-"+e).find("#btn-right").hide())}(t,r),this.initShowDendrogramListener(t),$("#dendrogram-buttons-div").show();else{let e=$("#show-dendrogram-"+t).hasClass("btn-primary");oe({},t),function(e){$("#show-dendrogram-"+e).next().remove(),$("#show-dendrogram-"+e).remove()}(t),d3.select("g.h"+t).remove(),!0===e&&$("#dendrogram-panel").hide(),0===$(".show-dendrogram").length&&$("#dendrogram-buttons-div").hide()}var a;$(".show-dendrogram").length?($("#main-vis-div").removeClass("col-md-12"),$("#main-vis-div").addClass("col-md-8")):($("#main-vis-div").removeClass("col-md-8"),$("#main-vis-div").addClass("col-md-12"))}),$(".network-hierarchy-checkbox").on("change",()=>{let e=$(this);$(".network-hierarchy-checkbox").prop("checked",!1),e.prop("checked",!0),e.prop("checked")?setNetworkHierarchy(e.attr("data")):setNetworkHierarchy(void 0)})}n_listeners(){var e;$("#networks-modal-body button").click((function(){e=$(this).attr("data")})),$("#networks-modal-body button").click(()=>{$("#active-network-name").text($(this).attr("name")),d(),function(e){$.ajax({url:"/api/dataset/network/"+parameters.id+"/"+e,dataType:"json",type:"GET",contentType:"application/json; charset=utf-8",headers:{Accept:N},success:function(e){e.length&&ie(JSON.parse(e[0].data)),c()}}),t=e,O=t;var t}(e),this.setnetworkColor(e),$("#network-div").modal("toggle")}),$("#network-remove").click(()=>{ie({}),setNetworkID(-1),this.setnetworkColor(-1),$("#active-network-name").text("")}),$("#network-auto-suggest").click((function(){if($("#network-auto-suggest").hasClass("active")){$("#network-limit-p").show(),$("#network-slider").show(),setNetworkAuto(!1);let e=$("#network-slider").slider("value");G(e),$("#network-limit").val(e)}else $("#network-limit-p").hide(),$("#network-slider").hide(),setNetworkAuto(!0)}))}spatialViewInit(){let e=parameters.min.geometry.coordinates,t=parameters.max.geometry.coordinates;this.tankWidth=1.02*(t[0]-e[0]),this.tankHeight=1.02*(t[1]-e[1]);let r=d3.scaleLinear().domain([e[0],t[0]]).range([e[0],t[0]]),i=d3.axisBottom(r).ticks(10).tickSize(10).tickPadding(5),o=d3.scaleLinear().domain([e[1],t[1]]).range([e[1],t[1]]),s=d3.axisRight(o).ticks(7).tickSize(10).tickPadding(5),l=d3.zoom().scaleExtent([1,6]).on("zoom",()=>{d3.event.transform.x=Math.min(0,this.tankWidth*(d3.event.transform.k-1),Math.max(this.tankWidth*(1-d3.event.transform.k),d3.event.transform.x)),d3.event.transform.y=Math.min(0,this.tankHeight*(d3.event.transform.k-1),Math.max(this.tankHeight*(1-d3.event.transform.k),d3.event.transform.y)),this.zoomGroup.attr("transform",d3.event.transform),c.call(i.scale(d3.event.transform.rescaleX(r))),h.call(s.scale(d3.event.transform.rescaleY(o)))});this.svgContainer=d3.select("#main-vis").classed("svg-container",!0).append("svg").attr("preserveAspectRatio","xMinYMin meet").attr("viewBox","0 0 "+this.tankWidth+" "+this.tankHeight).classed("svg-content",!0).attr("id","main-vis-svg").call(l);let d=Math.ceil(this.tankHeight/this.tankWidth*100);$("#main-vis").append($("<style>#main-vis::after {padding-top: "+d+'%;display: block;content: "";}</style> ')),this.zoomGroup=this.svgContainer.append("svg:g"),parameters.background_image&&this.zoomGroup.append("image").attr("xlink:href","/"+parameters.background_image).attr("class","background-image").attr("height",this.tankHeight).attr("width",this.tankWidth).attr("x","0").attr("y","0"),this.tank=this.zoomGroup.append("svg:g").attr("class","tank").attr("transform",()=>"scale("+(parameters.inverted_x?-1:1)+","+(parameters.inverted_y?-1:1)+")"),this.tank.append("g").attr("id","g-centroid").append("circle").attr("class","centroid").attr("r",6).attr("cx",0).attr("cy",0),this.tank.select("#g-centroid").append("svg:defs").append("svg:marker").attr("id","centroid-arrow").attr("refX",2).attr("refY",6).attr("markerWidth",13).attr("markerHeight",13).attr("orient","auto").append("svg:path").attr("d","M2,2 L2,11 L10,6 L2,2"),this.tank.select("#g-centroid").append("line").attr("id","centroid-line").attr("marker-end","url(#centroid-arrow)"),this.tank.append("g").attr("id","network-group"),this.tank.append("g").attr("id","delaunay-triangulation-group"),this.tank.append("g").attr("id","vornoi-group"),this.svgContainer.append("text").attr("class","frame-text").attr("x",30).attr("y",30).text("-- : -- : -- ");let c=this.svgContainer.append("g").attr("class","x axis").call(i),h=this.svgContainer.append("g").attr("class","y axis").call(s);a=d3.select("div.tooltip").style("left","0px").style("top","0px").on("mouseover",(function(){a.style("opacity",1)})),function(){n=$("#slider").slider({min:0,max:J.length,step:25,slide:function(e,t){(void 0)(t.value),$("#play-button").hasClass("active")||(void 0)()}}),$("#network-slider").slider({range:"max",min:0,max:1,step:.01,value:.5,slide:function(e,t){G(t.value),$("#network-limit").val(t.value)}}),$("#network-limit").val(.5);let e=n.slider("option","max"),t=100/e;for(let r=0;r<e;r+=1500)$('<span class="ui-slider-tick"></span>').css("left",t*r+"%").appendTo(n)}(),this.initColorPicker();var p,u;new w(J);this.cp_listener(),this.sf_listeners(),this.af_listeners(),this.md_listeners(),this.n_listeners(),this.h_listeners(),this.initDendrogram(),p=this.tankHeight,u=this.tankWidth,$((function(){$("#main-vis").draggable({containment:"parent"}).resizable({aspectRatio:!0,maxWidth:$("#main-vis-div").width()}).height(.6*p).width(.6*u)})),$("input[type=checkbox]").prop("checked",!1),$("#color-scale-linear").prop("checked",!0),$("#group-size-m").prop("checked",!0),$("#background-white").prop("checked",!0),$("#settings-div input[type=checkbox]").prop("checked",!0),$("#loading").hide(),$("#play-loading").hide(),$(".mdi-play").hide(),$("#metadata-input").hide(),$("#dendrogram-buttons-div").hide(),$("#g-centroid").hide(),$("#line-chart-feature-checkboxes input[type=checkbox]").prop("checked",!0),this.draw()}setMedoidAnimal(e){this.medoidAnimal=e}}class y extends x{constructor(e){super(),this.swarmData=e,this.swarm_features=Object.keys(this.swarmData[0]),this.lineChartWidth=5e3,this.trendChartsElem=["lower-outer-area","lower-inner-area","median-line","upper-inner-area","upper-outer-area"]}}class w extends y{constructor(e){super(e),this.lineChart()}lineChart(){b=Math.ceil(this.swarmData.length/this.lineChartWidth);let e=100,t=10,r=this.swarm_features,n=r.indexOf("time");r.splice(n,1);let a=[];if(this.swarmData.length>this.lineChartWidth){let e=new Array(r.length).fill(0);for(let t=0;t<this.swarmData.length;t++){for(let n=0;n<r.length;n++)e[n]+=this.swarmData[t][r[n]];if(t%b==0){let n={time:t/b};for(let t=0;t<r.length;t++)e[t]=e[t]/b,n[r[t]]=e[t];a.push(n),e=new Array(r.length).fill(0)}}}else a=this.swarmData;g=d3.scaleLinear().domain([0,a.length]).range([0,this.lineChartWidth]),m=d3.scaleLinear().domain([0,a.length]).range([0,this.lineChartWidth]);let i=d3.scaleLinear().domain([0,a.length]).range([0,this.lineChartWidth]),o=d3.axisBottom(m).ticks(10).tickSize(10).tickPadding(5).tickFormat((function(e){return Math.floor(e*b/1500)%60+":"+Math.floor(e*b/parameters.fps)%60+"::"+e*b%parameters.fps}));f=d3.scaleLinear().domain([0,100]).range([500,0]);let s=d3.axisLeft(f).ticks(0).tickSize(10).tickPadding(5),l=()=>{let e=d3.mouse(this);if(e[0]<t||e[0]>this.lineChartWidth||e[1]<0||e[1]>500)return;let r=d3.scaleLinear().domain(g.range()).range(g.domain());this.setIndexTime(Math.floor(r(e[0]-t)*b))},d=d3.zoom().scaleExtent([1,20]).translateExtent([[0,0],[this.lineChartWidth,500]]).extent([[0,0],[this.lineChartWidth,500]]).on("zoom",()=>{let e=d3.event.transform;g=m.domain(e.rescaleX(i).domain());for(let e in x)x.hasOwnProperty(e)&&u.select("#"+e+"Line").attr("d",x[e]);for(let e in v)if(v.hasOwnProperty(e))for(let t=0;t<this.trendChartsElem.length;t++)u.select("#"+e+"TrendChart ."+this.trendChartsElem[t]).attr("d",v[e][this.trendChartsElem[t]]);h.call(o)}),c=d3.select("#swarm-vis").classed("svg-line-chart-container",!0).append("svg").attr("preserveAspectRatio","xMinYMin meet").attr("viewBox","0 0 "+this.lineChartWidth+" "+(500+e)).classed("svg-content",!0);u=c.append("svg:g").attr("id","lineChartZoom").attr("transform","translate("+t+",0)");let h=u.append("g").attr("class","x axis-line-chart").attr("transform","translate(0,500)").call(o);u.append("g").attr("class","y axis-line-chart").call(s),u.append("line").attr("class","time-line").attr("id","lineChartTimeLine").attr("x1",0).attr("y1",0).attr("x2",0).attr("y2",500);let p=d3.scaleOrdinal(d3.schemeCategory10),x={};for(let e=0;e<r.length;e++){let t=d3.min(a,(function(t){return t[r[e]]})),n=d3.max(a,(function(t){return t[r[e]]})),i=d3.scaleLinear().domain([t,n]).range([0,100]),o=d3.line().x((function(e){return m(e.time)})).y((function(t){return f(i(t[r[e]]))}));x[r[e]]=o,u.append("path").data([a]).attr("id",r[e]+"Line").attr("class","line lineChartLine").style("stroke",p(e)).attr("d",o).attr("name",r[e])}$("#lineChartTimeLine").appendTo("#lineChartZoom"),u.append("rect").attr("class","zoom").attr("width",this.lineChartWidth).attr("height",500).call(d).on("click",l).call(d3.drag().on("drag",l));let k=d3.selectAll(".line");c.append("g").attr("id","lineChartLegend").attr("transform","translate("+e+",550)").selectAll("rect.legend").data(k._groups[0]).enter().each((function(e,t){d3.select(this).append("rect").attr("class","legend").attr("width",100).attr("height",50).attr("x",600*t+"px").style("fill",e.style.stroke),d3.select(this).append("text").attr("id",e.attributes.id.value+"LegendTitle").attr("class","line-chart-legend-text").attr("y",40).attr("x",600*t+100+10+"px").text(e.attributes.name.value+": "),d3.select(this).append("text").attr("id",e.attributes.id.value+"Value").attr("class","line-chart-legend-text").attr("y",40).attr("x",600*t+100+d3.select("#"+e.attributes.id.value+"LegendTitle").node().getComputedTextLength()+10+"px").text("0.0")})),c.append("g").attr("id","trendChartLegend").attr("transform","translate("+e+",550)").selectAll("rect.legend").data(["5% - 95%","25% - 75%","Median"]).enter().each((function(e,t){d3.select(this).append("rect").attr("class","legend").attr("width",100).attr("height",50).attr("x",800*t+"px").style("fill",(function(){return 0===t?"#74a9cf":1===t?"#045a8d":"#525252"})),d3.select(this).append("text").attr("class","line-chart-legend-text").attr("y",40).attr("x",800*t+100+10+"px").text(e)})),$("#trendChartLegend").hide(),this.initLineChartButtons()}initLineChartButtons(){for(let e=0;e<this.swarm_features.length;e++){let t=this.swarm_features[e].split("_").join(" ");t=t.charAt(0).toUpperCase()+t.slice(1),$("#line-chart-feature-checkboxes").append('<tr><th> <div class="pretty p-switch p-fill p-bigger"><input type="checkbox" class="line-chart-check-box" id="draw-'+this.swarm_features[e]+'" data="#'+this.swarm_features[e]+'Line" /><div class="state"><label>'+t+"</label></div></div></th></tr>")}$(".line-chart-check-box").change((function(){let e=$(this);e.prop("checked")?$(e.attr("data")).show():$(e.attr("data")).hide()}))}}class C extends y{constructor(e,t){super(t),this.elem=e,this.trendchart()}disableLineChart(){$(".lineChartButton").prop("checked",!1).prop("disabled",!0),$(".line-chart-check-box").attr("disabled",!0),$(".lineChartLine").attr("visibility","hidden")}trendchart(){let e="";if(this.elem.id.toLowerCase().includes("speed"))e="speed";else if(this.elem.id.toLowerCase().includes("acceleration"))e="acceleration";else if(this.elem.id.toLowerCase().includes("distance_centroid"))e="distance_centroid";else{if(!this.elem.id.toLowerCase().includes("midline_offset"))return;e="midline_offset"}if($("#lineChartLegend").hide(),$("#trendChartLegend").show(),$("#"+e+"TrendChart").length)$("#"+e+"TrendChart").show();else{let t=[],r=Q.length;for(let n=0;n<J.length;n++){let a=[];for(let t=0;t<r;t++)F[n*r+t]&&a.push(F[n*r+t][e]);t.push(h(a))}if(t.length>this.lineChartWidth){let e=[],r=[0,0,0,0,0];for(let n=0;n<t.length;n++){for(let e=0;e<r.length;e++)r[e]+=t[n][e];if(n%b==0){for(let e=0;e<r.length;e++)r[e]+=r[e]/b;e.push(r),r=[0,0,0,0,0]}}t=e}let n=d3.min(t,(function(e){return e[0]})),a=d3.max(t,(function(e){return e[4]})),i=d3.scaleLinear().domain([n,a]).range([0,100]),o=u.append("g").attr("id",e+"TrendChart").attr("class","trendChartData");$(".zoom").appendTo("#lineChartZoom"),$("#lineChartTimeLine").appendTo("#lineChartZoom"),v[e]={};for(let r=0;r<this.trendChartsElem.length;r++){let n;r<2?n=d3.area().x((function(e,t){return m(t)})).y0((function(e){return f(i(e[r+1]))})).y1((function(e){return f(i(e[r]))})):2===r?n=d3.line().x((function(e,t){return m(t)})).y((function(e){return f(i(e[r]))})):r>2&&(n=d3.area().x((function(e,t){return m(t)})).y0((function(e){return f(i(e[r]))})).y1((function(e){return f(i(e[r-1]))}))),v[e][this.trendChartsElem[r]]=n,o.append("path").data([t]).attr("class",this.trendChartsElem[r]).attr("d",n)}}}}function T(e){activeScale=e}let L={},A=d3.scaleThreshold().domain([0,.1,.2,.3,.4,.5,.6,.7,.8,.9,1]).range(["#f7fbff","#deebf7","#c6dbef","#9ecae1","#6baed6","#4292c6","#2171b5","#08519c","#08306b"]);const _=4;let S={},j={},M=["#7fc97f","#386cb0","#e7298a","#ff9900"];function z(e){return"M"+e.x+","+e.y+"V"+e.parent.y+"H"+e.parent.x}function D(){let e,t,r=d3.select("#dendrogram-panel").append("svg").attr("id","dendrogram-legend").attr("width",550).attr("height",60);$("#dendrogram-legend").hide();let n=A.range();e=r.selectAll("rect.legend").data(n),t=r.selectAll("text.legend-text").data(["low","","","","","","","","high"]),e.enter().append("rect").attr("class","legend").attr("width",50).attr("height",20).attr("y",0).attr("x",(function(e,t){return 50*t+"px"})).style("fill",(function(e){return e})),t.enter().append("text").attr("class","legend-text").attr("y",40).attr("x",(function(e,t){return 50*t+"px"})).text((function(e){return e}))}let E,O,H=!1,B=.5,I={},W=d3.scaleThreshold().domain([0,.1,.2,.3,.4,.5,.6,.7,.8,.9,1]).range(["#f7fbff","#deebf7","#c6dbef","#9ecae1","#6baed6","#4292c6","#2171b5","#08519c","#08306b"]);function G(e){B=e}let N="application/vnd.api+json";var U;function R(){let e=[];$.ajax({url:"/api/percentile/"+parameters.id,dataType:"json",type:"GET",contentType:"application/json; charset=utf-8",headers:{Accept:N},success:function(t){for(let r=0;r<t.length;r++)e[t[r].feature]=[t[r].min,t[r].p1,t[r].p2,t[r].p3,t[r].p5,t[r].p7,t[r].p8,t[r].p9,t[r].max];te(e),function(e){for(var t in e)if(e.hasOwnProperty(t)){let e=t.split("_").join(" ");e=e.charAt(0).toUpperCase()+e.slice(1),$("#absolute-feature-checkboxes").append('<tr><th> <div class="pretty p-switch p-fill p-bigger"><input type="checkbox" id="draw-'+t+'"/><div class="state"><label>'+e+'</label></div></div><div class="float-right draw-details" id="draw-'+t+'-details"><div class="pretty p-icon p-toggle p-plain"><input type="checkbox" id="draw-'+t+'-input" /><div class="state p-success-o p-on"><i class="mdi mdi-image-area"></i><label></label></div><div class="state p-off"><i class="mdi mdi-image-off"></i><label></label></div></div></div></th></tr>')}$(".draw-details").hide(),p()}(e)}})}function P(){$.ajax({url:"/api/dataset/networks/"+parameters.id,dataType:"json",type:"GET",contentType:"application/json; charset=utf-8",headers:{Accept:N},success:function(e){!function(e){if(e.length)for(let t=0;t<e.length;t++)e[t].finished&&$("#networks-hierarchies-table tbody").append("<tr><td>"+e[t].name+'</td> <td> <button type="button" class="btn btn-default" data='+e[t].network_id+" name="+e[t].name+'><span class="mdi mdi-graphql" aria-hidden="true"></span></button></td> <td><div class="pretty p-switch p-fill"><input type="checkbox" class="hiearchy-checkbox" data="'+e[t].network_id+'" name="'+e[t].name+'"><div class="state p-success"><label></label></div></div></td><td>---</td>');else $("#networks-hierarchies-table").append("There is no network data for this dataset")}(e)}})}function V(e){$.ajax({url:"/api/dataset/"+parameters.id+"/"+e,dataType:"json",type:"GET",contentType:"application/json; charset=utf-8",headers:{Accept:N},success:function(t){ae(t,e),c()}})}function Y(e){d(),$.ajax({url:"/api/dataset/"+parameters.id+"/"+e,dataType:"json",type:"GET",contentType:"application/json; charset=utf-8",headers:{Accept:N},success:function(t){ne(t,e),c()}})}r(1);let F=[],X=[],J=[],Z={},q={},K={},Q={};function ee(e){F=F.concat(e)}function te(e){Z=e}function re(e){X=e,function(){let e=["#fff","#e41a1c","#377eb8","#4daf4a","#984ea3","#ff7f00","#ffff33","#a65628"];if(X.length)for(let t=0;t<X.length;t++)$("#metadata-table").find("tbody").append($('<tr id="metadata-row-'+X[t].animal_id+'">').append($("<td>").append(X[t].animal_id)).append($("<td>").append(X[t].species)).append($("<td>").append(X[t].sex)).append($("<td>").append(X[t].size)).append($("<td>").append(X[t].weight)).append($("<td>").append('<div class="dropdown">\n                                              <a class="dropdown-toggle btn btn-default btn-color" data-toggle="dropdown" href="#">\n                                              <div id="preview" class="metadata-swatch" style="background-color:#fff"></div>\n                                              <input class="color-field" value="White" style="display:none;">\n                                              </a>\n                                              <ul class="dropdown-menu" role="menu" aria-labelledby="dLabel"> '+function(t){let r="";for(let n=0;n<e.length;n++)r+='<div class="metadata-swatch metadata-swatch-clickable" style="background-color:'+e[n]+'" value="'+t+'"></div>';return r}(X[t].animal_id)+"</ul></div>")));else $("#metadata-table").find("tbody").append("There is no metadata for this dataset")}()}function ne(e,t){for(let r=0;r<e.length;r++)void 0===J[r]&&J.push({}),e[r]&&!isNaN(e[r])?J[r][t]=+e[r]:J[r][t]=e[r]}function ae(e,t){for(let r=0;r<e.length;r++)void 0===F[r]&&F.push({}),F[r][t]=+e[r]}function ie(e){q=e}function oe(e,t){0===Object.keys(e).length&&e.constructor===Object?(delete K["h"+t],delete L["h"+t],function(e){delete S["h"+e]}(t)):(K["h"+t]=e,function(e,t){L["h"+e]=t}(t,2),function(e){for(let t in I)if(t==="h"+e)return void(S["h"+e]=I[t]);for(let t=0;t<M.length;t++){let r=!0;for(let e in S)S.hasOwnProperty(e)&&S[e]===M[t]&&(r=!1);if(r){if(0===Object.keys(I).length)return void(S["h"+e]=M[t]);for(let r in I)if(I[r]!==M[t])return void(S["h"+e]=M[t])}}}(t))}function se(e){Q=e}$(document).ready((function(){window.EventSource?((U=new EventSource("/api/movement_only/"+parameters.id)).onmessage=function(e){"close"===e.data?(U.close(),window.setTimeout((function e(){$.active>0?window.setTimeout(e,100):new k}),100)):ee(JSON.parse(e.data))},U.addEventListener("error",(function(e){e.readyState==EventSource.CLOSED&&alert("Streaming error")}),!1)):alert("Webbrowser does not support streaming"),R(),$.ajax({url:"/api/dataset/"+parameters.id+"/animal_ids",dataType:"json",type:"GET",contentType:"application/json; charset=utf-8",headers:{Accept:N},success:function(e){se(e)}}),function(){const e=["swarm_time","swarm_speed","swarm_acceleration","swarm_convex_hull_area","swarm_distance_centroid","swarm_direction","swarm_polarisation"];for(let t=0;t<e.length;t++)$.ajax({url:"/api/dataset/"+parameters.id+"/"+e[t],dataType:"json",type:"GET",contentType:"application/json; charset=utf-8",headers:{Accept:N},success:function(r){ne(r,e[t].replace("swarm_",""))}})}(),$.ajax({url:"/api/metadata/"+parameters.id,dataType:"json",type:"GET",contentType:"application/json; charset=utf-8",headers:{Accept:N},success:function(e){re(e)}}),P()}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,