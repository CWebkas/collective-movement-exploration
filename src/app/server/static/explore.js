!function(e){var t={};function n(r){if(t[r])return t[r].exports;var a=t[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)n.d(r,a,function(t){return e[t]}.bind(null,a));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=6)}([function(e,t){},function(e,t,n){var r=n(2);"string"==typeof r&&(r=[[e.i,r,""]]);var a={hmr:!0,transform:void 0,insertInto:void 0};n(4)(r,a);r.locals&&(e.exports=r.locals)},function(e,t,n){(t=n(3)(!1)).push([e.i,"/* Icons for bootstrap 4 */\r\n\r\n.mdi::before {\r\n    font-size: 24px;\r\n    line-height: 14px;\r\n}\r\n\r\n.btn .mdi::before {\r\n    position: relative;\r\n    top: 4px;\r\n}\r\n\r\n.btn-xs .mdi::before {\r\n    font-size: 18px;\r\n    top: 3px;\r\n}\r\n\r\n.btn-sm .mdi::before {\r\n    font-size: 18px;\r\n    top: 3px;\r\n}\r\n\r\n.dropdown-menu .mdi {\r\n    width: 18px;\r\n}\r\n\r\n.dropdown-menu .mdi::before {\r\n    position: relative;\r\n    top: 4px;\r\n    left: -8px;\r\n}\r\n\r\n.nav .mdi::before {\r\n    position: relative;\r\n    top: 4px;\r\n}\r\n\r\n.navbar .navbar-toggle .mdi::before {\r\n    position: relative;\r\n    top: 4px;\r\n    color: #FFF;\r\n}\r\n\r\n.breadcrumb .mdi::before {\r\n    position: relative;\r\n    top: 4px;\r\n}\r\n\r\n.breadcrumb a:hover {\r\n    text-decoration: none;\r\n}\r\n\r\n.breadcrumb a:hover span {\r\n    text-decoration: underline;\r\n}\r\n\r\n.alert .mdi::before {\r\n    position: relative;\r\n    top: 4px;\r\n    margin-right: 2px;\r\n}\r\n\r\n.input-group-addon .mdi::before {\r\n    position: relative;\r\n    top: 3px;\r\n}\r\n\r\n.navbar-brand .mdi::before {\r\n    position: relative;\r\n    top: 2px;\r\n    margin-right: 2px;\r\n}\r\n\r\n.list-group-item .mdi::before {\r\n    position: relative;\r\n    top: 3px;\r\n    left: -3px\r\n}\r\n\r\n/* SVG elements and text */\r\n\r\n#main-vis {\r\n    margin-bottom: 10px;\r\n}\r\n\r\n.svg-container {\r\n    display: inline-block;\r\n    position: relative;\r\n    width: 100%;\r\n    /* aspect ratio */\r\n    vertical-align: top;\r\n    overflow: visible;\r\n}\r\n\r\n.svg-content {\r\n    display: inline-block;\r\n    position: absolute;\r\n    border: 1px solid #000;\r\n}\r\n\r\n#main-vis-legend-div {\r\n    display: none;\r\n}\r\n\r\n#hierarchy-legend-div {\r\n    display: none;\r\n}\r\n\r\n#main-vis-legend {\r\n    float: right;\r\n    display: inline-block;\r\n    position: relative;\r\n    overflow: visible;\r\n    top: 10px;\r\n    left: 10px;\r\n}\r\n\r\n#hierarchy-legend {\r\n    float: left;\r\n    display: inline-block;\r\n    position: relative;\r\n    overflow: visible;\r\n    top: 10px;\r\n    left: 10px;\r\n}\r\n\r\n.svg-content-dendrogram {\r\n    display: inline-block;\r\n    border: 1px solid #000;\r\n}\r\n\r\n.svg-line-chart-container {\r\n    display: inline-block;\r\n    position: relative;\r\n    width: 100%;\r\n    height: auto;\r\n    /* depends on svg ratio */\r\n    padding-bottom: 17%;\r\n    /* aspect ratio */\r\n    vertical-align: top;\r\n    overflow: visible;\r\n}\r\n\r\n.svg-dendrogram-container {\r\n    display: inline-block;\r\n    position: relative;\r\n    height: auto;\r\n    vertical-align: top;\r\n    overflow: visible;\r\n}\r\n\r\n.axis path {\r\n    display: none;\r\n}\r\n\r\n.axis line {\r\n    stroke-opacity: 0.3;\r\n    shape-rendering: crispEdges;\r\n}\r\n\r\n.x {\r\n    font-size: 1em;\r\n}\r\n\r\n.y {\r\n    font-size: 1em;\r\n}\r\n\r\n.axis-line-chart path line {\r\n    fill: none;\r\n    stroke: #000;\r\n    shape-rendering: crispEdges;\r\n}\r\n\r\n.line {\r\n    fill: none;\r\n    stroke-width: 5px;\r\n}\r\n\r\n/* Time  */\r\n\r\n.frame-text {\r\n    margin-top: 0;\r\n    margin-bottom: 0;\r\n    font-size: 2em;\r\n    color: inherit;\r\n    font-weight: 500;\r\n    line-height: 1.1;\r\n}\r\n\r\n/* Slider ticks  */\r\n\r\n.ui-slider-tick {\r\n    display: inline-block;\r\n    width: 3px;\r\n    background: #337ab7;\r\n    height: 0.8em;\r\n    position: absolute;\r\n}\r\n\r\n/* Laoding gif   */\r\n\r\n#loading {\r\n    display: block;\r\n    text-align: center;\r\n}\r\n\r\n/* Color legend    */\r\n\r\n.legend {\r\n    font-size: 12px;\r\n    stroke: #000;\r\n}\r\n\r\n.legend-text {\r\n    font-size: 1.2em;\r\n    color: inherit;\r\n    line-height: 1.1;\r\n}\r\n\r\n.line-chart-legend-text {\r\n    font-size: 2em;\r\n    color: inherit;\r\n    line-height: 1.1;\r\n}\r\n\r\n.time-line {\r\n    fill: none;\r\n    stroke-width: 5px;\r\n    stroke: #000;\r\n}\r\n\r\n/*swarm features */\r\n\r\n.centroid {\r\n    fill-opacity: 0;\r\n    stroke: #e7298a;\r\n    stroke-width: 3px;\r\n}\r\n\r\n.medoid {\r\n    fill: #e7298a !important;\r\n    stroke: #e7298a !important;\r\n}\r\n\r\n.hull-path {\r\n    fill: #fff;\r\n    fill-opacity: 0;\r\n    stroke-width: 3;\r\n    stroke: #252525;\r\n    stroke-opacity: 0.5;\r\n}\r\n\r\n.hierarchy-group {\r\n    stroke-width: 10;\r\n    stroke-linejoin: round;\r\n    opacity: 0.2;\r\n}\r\n\r\n.delaunay-triangulation {\r\n    fill-opacity: 0;\r\n    stroke-width: 2;\r\n    stroke: #000;\r\n    stroke-opacity: 0.4;\r\n}\r\n\r\n/* Color brewer picker div */\r\n\r\n.palette {\r\n    cursor: pointer;\r\n    display: table;\r\n    vertical-align: bottom;\r\n    margin: 4px 0 4px 4px;\r\n    background: #fff;\r\n    border: solid 1px #aaa;\r\n}\r\n\r\n.swatch {\r\n    display: inline-block;\r\n    vertical-align: middle;\r\n    width: 22px;\r\n    height: 22px;\r\n}\r\n\r\n.voronoi {\r\n    fill-opacity: 0;\r\n    stroke-width: 3;\r\n    stroke: #000;\r\n    stroke-opacity: 0.2;\r\n}\r\n\r\n/* Tooltip */\r\n\r\ndiv.tooltip {\r\n    pointer-events: none;\r\n    opacity: 0;\r\n    background: rgb(255, 255, 255) !important;\r\n    border-left-color: #1b809e !important;\r\n    border: 1px solid #eee;\r\n    border-left-width: 5px;\r\n    border-radius: 3px;\r\n    position: absolute;\r\n}\r\n\r\ndiv.tooltip table td:nth-child(2) {\r\n    text-align: center;\r\n    font-weight: bold;\r\n}\r\n\r\n.tooltip-span {\r\n    display: block;\r\n    width: 150px;\r\n    word-wrap: break-word;\r\n    font-size: 1.5em;\r\n}\r\n\r\n.upper-outer-area, .lower-outer-area {\r\n    stroke-width: 1;\r\n    fill: #74a9cf;\r\n    stroke: #3690c0;\r\n}\r\n\r\n.upper-inner-area, .lower-inner-area {\r\n    stroke-width: 1;\r\n    fill: #045a8d;\r\n    stroke: #023858;\r\n}\r\n\r\n.median-line {\r\n    fill: none;\r\n    stroke: #525252;\r\n    stroke-width: 5;\r\n}\r\n\r\n.selected {\r\n    background: #999;\r\n    border: 4px solid #4d4d4d;\r\n    -moz-border-radius: 5px;\r\n    -webkit-border-radius: 5px;\r\n    box-shadow: 1px 2px 4px rgba(0, 0, 0, .4);\r\n}\r\n\r\n.zoom {\r\n    fill: none;\r\n    pointer-events: all;\r\n}\r\n\r\n.x.axis-line-chart>g>text {\r\n    font-size: 3em;\r\n    color: inherit;\r\n    line-height: 1.1;\r\n}\r\n\r\n.arrow {\r\n    stroke-width: 1;\r\n}\r\n\r\n#centroid-line {\r\n    stroke-width: 1;\r\n    stroke: #e7298a;\r\n}\r\n\r\n#centroid-arrow {\r\n    fill: #e7298a;\r\n}\r\n\r\n.metadata-swatch {\r\n    width: 30px;\r\n    height: 30px;\r\n    border-radius: 3px;\r\n    border: 2px solid #666;\r\n}\r\n\r\n.metadata-swatch-clickable:hover {\r\n    border: 2px solid #000;\r\n    cursor: pointer;\r\n}\r\n\r\n.dropdown-menu {\r\n    min-width: 40px;\r\n    padding: 5px;\r\n}\r\n\r\n.metadata-legend {\r\n    list-style: none;\r\n    margin-top: 10px;\r\n}\r\n\r\n.metadata-legend li {\r\n    float: left;\r\n    margin-right: 10px;\r\n}\r\n\r\n.metadata-legend span {\r\n    border: 2px solid #666;\r\n    float: left;\r\n    width: 30px;\r\n    height: 30px;\r\n}\r\n\r\n.metadata-legend .bl-avg {\r\n    background-color: #7fc97f;\r\n}\r\n\r\n.metadata-legend .avg {\r\n    background-color: #fdc086;\r\n}\r\n\r\n.metadata-legend .ab-avg {\r\n    background-color: #386cb0;\r\n}\r\n\r\n.network-edges {\r\n    fill-opacity: 0;\r\n    stroke-width: 2;\r\n}\r\n\r\n.network-background-edges {\r\n    fill-opacity: 0;\r\n    stroke-opacity: 0.25;\r\n    stroke: #737373;\r\n}\r\n\r\n.node text {\r\n    font: 12px sans-serif;\r\n}\r\n\r\n.node--internal text {\r\n    text-shadow: 0 1px 0 #fff, 0 -1px 0 #fff, 1px 0 0 #fff, -1px 0 0 #fff;\r\n}\r\n\r\n.link {\r\n    fill: none;\r\n    stroke: #636363;\r\n    stroke-width: 5px;\r\n}\r\n\r\n#active-network-name {\r\n    font-weight: bold;\r\n    color: #296292;\r\n}\r\n\r\n.active-level {\r\n    fill: #386cb0;\r\n}\r\n\r\n#dendrogram-panel {\r\n    position: initial;\r\n}\r\n\r\n#dendrogram-panel {\r\n    display: none\r\n}\r\n\r\n.show-dendrogram {\r\n    float: right;\r\n    border-radius: 3px;\r\n    border: 1px solid #D1D3D4;\r\n    font-weight: normal;\r\n}\r\n\r\n.show-dendrogram:hover {\r\n    background: #D1D3D4;\r\n}\r\n\r\n.dendrogram-text {\r\n    font-size: 10em !important;\r\n}\r\n\r\n.highlight-hierarchy {\r\n    fill: #252525;\r\n    stroke: #252525;\r\n    stroke-width: 10;\r\n    stroke-linejoin: round;\r\n    opacity: 0.3;\r\n}\r\n\r\n.animal-highlight {\r\n    fill: #c51b7d !important;\r\n}\r\n\r\n#dendrogram-buttons-div .btn span.glyphicon {\r\n    opacity: 0;\r\n}\r\n\r\n#dendrogram-buttons-div .btn.active span.glyphicon {\r\n    opacity: 1;\r\n}\r\n\r\n#dendrogram-buttons-div {\r\n    border: 2px solid #D1D3D4;\r\n    border-radius: 5px;\r\n}\r\n\r\n#dendrogram-legend {\r\n    margin-left: 20px;\r\n}\r\n\r\n.intersection {\r\n    fill: url(#striped) !important;\r\n    stroke: #67000d;\r\n}\r\n\r\n.sym-difference {\r\n    fill: url(#striped) !important;\r\n    stroke: #67000d;\r\n}\r\n\r\n.modal-lg {\r\n    max-width: 80%;\r\n}\r\n\r\n.background-image {\r\n    background: #fff;\r\n}",""]),e.exports=t},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var a=(o=r,l=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),d="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(l),"/*# ".concat(d," */")),i=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[n].concat(i).concat([a]).join("\n")}var o,l,d;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var a={};if(r)for(var i=0;i<this.length;i++){var o=this[i][0];null!=o&&(a[o]=!0)}for(var l=0;l<e.length;l++){var d=[].concat(e[l]);r&&a[d[0]]||(n&&(d[2]?d[2]="".concat(n," and ").concat(d[2]):d[2]=n),t.push(d))}},t}},function(e,t,n){var r,a,i={},o=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===a&&(a=r.apply(this,arguments)),a}),l=function(e){return document.querySelector(e)},d=function(e){var t={};return function(e){if("function"==typeof e)return e();if(void 0===t[e]){var n=l.call(this,e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}}(),s=null,c=0,p=[],u=n(5);function h(e,t){for(var n=0;n<e.length;n++){var r=e[n],a=i[r.id];if(a){a.refs++;for(var o=0;o<a.parts.length;o++)a.parts[o](r.parts[o]);for(;o<r.parts.length;o++)a.parts.push(y(r.parts[o],t))}else{var l=[];for(o=0;o<r.parts.length;o++)l.push(y(r.parts[o],t));i[r.id]={id:r.id,refs:1,parts:l}}}}function f(e,t){for(var n=[],r={},a=0;a<e.length;a++){var i=e[a],o=t.base?i[0]+t.base:i[0],l={css:i[1],media:i[2],sourceMap:i[3]};r[o]?r[o].parts.push(l):n.push(r[o]={id:o,parts:[l]})}return n}function m(e,t){var n=d(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=p[p.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),p.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var a=d(e.insertInto+" "+e.insertAt.before);n.insertBefore(t,a)}}function g(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=p.indexOf(e);t>=0&&p.splice(t,1)}function v(e){var t=document.createElement("style");return void 0===e.attrs.type&&(e.attrs.type="text/css"),b(t,e.attrs),m(e,t),t}function b(e,t){Object.keys(t).forEach((function(n){e.setAttribute(n,t[n])}))}function y(e,t){var n,r,a,i;if(t.transform&&e.css){if(!(i=t.transform(e.css)))return function(){};e.css=i}if(t.singleton){var o=c++;n=s||(s=v(t)),r=k.bind(null,n,o,!1),a=k.bind(null,n,o,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",b(t,e.attrs),m(e,t),t}(t),r=C.bind(null,n,t),a=function(){g(n),n.href&&URL.revokeObjectURL(n.href)}):(n=v(t),r=$.bind(null,n),a=function(){g(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else a()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=o()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=f(e,t);return h(n,t),function(e){for(var r=[],a=0;a<n.length;a++){var o=n[a];(l=i[o.id]).refs--,r.push(l)}e&&h(f(e,t),t);for(a=0;a<r.length;a++){var l;if(0===(l=r[a]).refs){for(var d=0;d<l.parts.length;d++)l.parts[d]();delete i[l.id]}}}};var x,w=(x=[],function(e,t){return x[e]=t,x.filter(Boolean).join("\n")});function k(e,t,n,r){var a=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=w(t,a);else{var i=document.createTextNode(a),o=e.childNodes;o[t]&&e.removeChild(o[t]),o.length?e.insertBefore(i,o[t]):e.appendChild(i)}}function $(e,t){var n=t.css,r=t.media;if(r&&e.setAttribute("media",r),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}function C(e,t,n){var r=n.css,a=n.sourceMap,i=void 0===t.convertToAbsoluteUrls&&a;(t.convertToAbsoluteUrls||i)&&(r=u(r)),a&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */");var o=new Blob([r],{type:"text/css"}),l=e.href;e.href=URL.createObjectURL(o),l&&URL.revokeObjectURL(l)}},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,(function(e,t){var a,i=t.trim().replace(/^"(.*)"$/,(function(e,t){return t})).replace(/^'(.*)'$/,(function(e,t){return t}));return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?e:(a=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(a)+")")}))}},function(e,t,n){"use strict";let r,a;function i(){let e=E,t=Y;for(var n=d3.event.selection,r=0;r<Pe.length;r++){var a=[e[r].p[0],e[r].p[1]];n[0][0]<=a[0]&&a[0]<=n[1][0]&&n[0][1]<=a[1]&&a[1]<=n[1][1]&&t.push(e[r].a)}W(t),$("#play-button").hasClass("active")||(q(),V()),$("#brushing-button").removeClass("active"),$(".brush").remove()}n.r(t),n.d(t,"dataset",(function(){return ze})),n.d(t,"datasetMetadata",(function(){return De})),n.d(t,"swarmData",(function(){return Be})),n.d(t,"dataSetPercentile",(function(){return Ue})),n.d(t,"networkData",(function(){return Re})),n.d(t,"networkHierarchy",(function(){return Ne})),n.d(t,"animalIds",(function(){return Pe})),n.d(t,"addToDataset",(function(){return Ie})),n.d(t,"setDataSetPercentile",(function(){return Ge})),n.d(t,"setMetaData",(function(){return He})),n.d(t,"setSwarmData",(function(){return Ye})),n.d(t,"setDatasetFeature",(function(){return Fe})),n.d(t,"setNetworkData",(function(){return Ve})),n.d(t,"setHierarchyData",(function(){return Ze})),n.d(t,"setAnimalIds",(function(){return qe}));let o,l={type:"Linear",color:colorbrewer.BuYlBu};function d(){return"Linear"===l.type?d3.scaleLinear().domain(Ue[G]).range(l.color):"Threshold"===l.type?d3.scaleThreshold().domain(Ue[G]).range(l.color):void 0}function s(){let e,t;if($("#main-vis-legend-div").show(),"black"!==G){var n=d();e=o.selectAll("rect.legend").data(n.range()),t=o.selectAll("text.legend-text").data(n.domain())}else e=o.selectAll("rect.legend").data([]),t=o.selectAll("text.legend-text").data([]),$("#main-vis-legend-div").hide();e.style("fill",(function(e){return e})),e.enter().append("rect").attr("class","legend").attr("width",50).attr("height",20).attr("y",0).attr("x",(function(e,t){return 50+50*t+"px"})).style("fill",(function(e){return e})),e.exit().remove(),t.text((function(e){return Math.ceil(2*e)/2})),t.enter().append("text").attr("class","legend-text").attr("y",40).attr("x",(function(e,t){return 50+50*t+5+"px"})).text((function(e){return Math.ceil(2*e)/2})),t.exit().remove()}let c={};function p(){u();let e=$("#group-metadata .btn.btn-default.active input").attr("value"),t=$("#bl-avg").val(),n=$("#ab-avg").val(),r=["#7fc97f","#fdc086","#386cb0"];for(let a=0;a<De.length;a++)De[a][e]<t?c[De[a].animal_id]=r[0]:De[a][e]>n?c[De[a].animal_id]=r[2]:c[De[a].animal_id]=r[1]}function u(){c={},$(".dropdown #preview").css("background-color","rgb(255, 255, 255)")}var h=n(0);let f,m,g=!0;function v(){$("#play-button").click((function(){!0===$("#play-button").hasClass("active")?(g=!1,$(".mdi-pause").hide(),$(".mdi-play").show()):(g=!0,$(".mdi-play").hide(),$(".mdi-pause").show(),Z(r.slider("value")),$(".brush").remove(),V())})),$("#next-frame-button").click((function(){!0===$("#play-button").hasClass("active")&&(g=!1),$("#play-button").removeClass("active"),V()})),$("#brushing-button").click((function(){g=!1,$("#play-button").removeClass("active"),$("#brushing-button").hasClass("active")?$(".brush").remove():(f=d3.brush().extent([[0,0],[M,S]]).on("end",i),d3.select("#main-vis-svg").append("g").attr("class","brush").call(f))})),$("#remove-active-selected-button").click((function(){$("#remove-active-selected-button").is(":disabled")||($("#remove-active-selected-button").prop("disabled",!0),W([]),Object(h.resetTrackedData)(),$("#visual-parameter-button").prop("disabled",!0).removeClass("active"),$("#play-button").hasClass("active")||(q(),V()))})),$("#visual-parameter-button").click((function(){!0===$("#visual-parameter-button").hasClass("active")?Object(h.setTrackingBoolean)(!1):Object(h.setTrackingBoolean)(!0)})),$("#calculate-parameter-button").click((function(){$("#calculate-parameter-button").hasClass("active")||(Object(h.setTrackingBoolean)(!1),Object(h.sendTrackedData)(),$("#calculate-parameter-button").prop("disabled",!0),$("#calculate-parameter-button").removeClass("active"),$("#visual-parameter-button").removeClass("active"))})),$("#background-color").change((function(){let e=$('input[type="radio"].group-background:checked').val();$("#main-vis-svg").css("background-color",e)})),$("#draw-axis").on("change",(function(){this.checked?($("#main-vis g.x.axis").show(),$("#main-vis g.y.axis").show()):($("#main-vis g.x.axis").hide(),$("#main-vis g.y.axis").hide())})),$("#draw-time").on("change",(function(){this.checked?$("#main-vis .frame-text").show():$("#main-vis .frame-text").hide()})),$("#network-background").on("change",(function(){this.checked?_e(!0):_e(!1)})),$("#network-background-limit").val(1),$("#network-background-limit").on("change",(function(){let e=$(this).val();$.isNumeric(e)&&e>0?we=e:$(this).val(1)})),$("#color-scale-radio-form input").on("change",(function(){l.type=$("input[name=color-scale-radio]:checked","#color-scale-radio-form").val(),$("#play-button").hasClass("active")||(q(),V())})),$("#draw-direction").click((function(){$("#draw-direction").is(":checked")?("direction"in ze[0]||(y(),Se("direction")),$(".arrow").show()):$(".arrow").hide(),$("#play-button").hasClass("active")||(q(),V())})),$("#draw-medoid").click((function(){$("#draw-medoid").is(":checked")?("medoid"in Be[0]||Ee("medoid"),X(Be[I].medoid),d3.selectAll("#animal-"+H).classed("medoid",!0)):(d3.selectAll("#animal-"+H).classed("medoid",!1),X(-1))})),$("#draw-centroid").click((function(){$("#draw-centroid").is(":checked")?("centroid"in Be[0]||Ee("centroid"),$("#g-centroid").show()):$("#g-centroid").hide()})),$("#draw-convex-hull").click((function(){$("#draw-convex-hull").is(":checked")&&("hull"in Be[0]||Ee("convex_hull"))})),$("#draw-triangulation").click((function(){$("#draw-triangulation").is(":checked")&&("triangulation"in Be[0]||Ee("triangulation"),$("#play-button").hasClass("active")||(q(),V()))})),$("#draw-voronoi").click((function(){$("#draw-voronoi").is(":checked")&&("voronoi"in Be[0]||Ee("voronoi"),$("#play-button").hasClass("active")||(q(),V()))})),$("#draw-speed").click((function(){$(".draw-details").hide().find("input:checkbox").prop("checked",!0).click(),$("#draw-speed").is(":checked")?("speed"in ze[0]||(y(),Se("speed")),$("#draw-speed-details").show(),$("#draw-acceleration").prop("checked",!1),$("#draw-distance_centroid").prop("checked",!1),$("#draw-midline_offset").prop("checked",!1),J("speed")):($("#draw-speed-details").hide(),J("black")),d3.selectAll(".colorLegend *").remove(),s(),$("#play-button").hasClass("active")||(q(),V())})),$("#draw-acceleration").click((function(){$(".draw-details").hide().find("input:checkbox").prop("checked",!0).click(),$("#draw-acceleration").is(":checked")?("acceleration"in ze[0]||(y(),Se("acceleration")),$("#draw-acceleration-details").show(),$("#draw-speed").prop("checked",!1),$("#draw-distance_centroid").prop("checked",!1),$("#draw-midline_offset").prop("checked",!1),J("acceleration")):($("#draw-acceleration-details").hide(),J("black")),$(".draw-details.active").click(),d3.selectAll(".colorLegend *").remove(),s(),$("#play-button").hasClass("active")||(q(),V())})),$("#draw-distance_centroid").click((function(){$(".draw-details").hide().find("input:checkbox").prop("checked",!0).click(),$("#draw-distance_centroid").is(":checked")?("distance_centroid"in ze[0]||(y(),Se("distance_centroid")),$("#draw-distance_centroid-details").show(),$("#draw-speed").prop("checked",!1),$("#draw-acceleration").prop("checked",!1),$("#draw-midline_offset").prop("checked",!1),J("distance_centroid")):($("#draw-distance_centroid-details").hide(),J("black")),$(".draw-details.active").click(),d3.selectAll(".colorLegend *").remove(),s(),$("#play-button").hasClass("active")||(q(),V())})),$("#draw-midline_offset").click((function(){$(".draw-details").hide().find("input:checkbox").prop("checked",!0).click(),$("#draw-midline_offset").is(":checked")?("draw-midline_offset"in ze[0]||(y(),Se("midline_offset")),$("#draw-midline_offset-details").show(),$("#draw-speed").prop("checked",!1),$("#draw-acceleration").prop("checked",!1),$("#draw-distance_centroid").prop("checked",!1),J("midline_offset")):J("black"),$(".draw-details.active").click(),d3.selectAll(".colorLegend *").remove(),s(),$("#play-button").hasClass("active")||(q(),V())})),$(".metadata-swatch.metadata-swatch-clickable").click((function(){let e=$(this).attr("value"),t=$(this).css("background-color");$("#metadata-row-"+e+" #preview").css("background-color",t),"rgb(255, 255, 255)"===t?c[e]&&delete c[e]:c[e]=t})),$("#group-metadata :input").change((function(){u();let e=$(this).attr("value"),t=[];if("sex"===e){$("#metadata-div").modal("toggle");for(let n=0;n<De.length;n++)t.push(De[n][e].toLowerCase());t=Array.from(new Set(t));let n=["#7fc97f","#386cb0"];for(let r=0;r<De.length;r++)for(let a=0;a<t.length;a++)De[r][e].toLowerCase()===t[a]&&(c[De[r].animal_id]=n[a]);$("#metadata-input").hide()}else{$("#metadata-input").show();for(let n=0;n<De.length;n++)t.push(De[n][e]);let n=d3.quantile(t,.25),r=d3.quantile(t,.75);$("#bl-avg").val(n),$("#ab-avg").val(r),p()}})),$(".number-spinner button").click((function(){let e=$(this),t=e.closest(".number-spinner").find("input").val().trim(),n=0;n="up"==e.attr("data-dir")?parseFloat(t)+.1:t>0?parseFloat(t)-.1:0,n=Math.round(100*n)/100,e.closest(".number-spinner").find("input").val(n),p()})),$(".number-spinner input").on("input",(function(){p()})),$("#metadata-reset").click((function(){$("#metadata-input").hide(),u()})),$("#networks-modal-body button").click((function(){let e=$(this).attr("data");$("#active-network-name").text($(this).attr("name")),y(),function(e){$.ajax({url:"/api/dataset/network/"+parameters.id+"/"+e,dataType:"json",type:"GET",contentType:"application/json; charset=utf-8",headers:{Accept:Ae},success:function(e){e.length&&Ve(JSON.parse(e[0].data)),x()}}),Le(e)}(e),Te(e),$("#network-div").modal("toggle")})),$("#network-remove").click((function(){Ve({}),Le(-1),Te(-1),$("#active-network-name").text("")})),$("#network-auto-suggest").click((function(){if($("#network-auto-suggest").hasClass("active")){$("#network-limit-p").show(),$("#network-slider").show(),$e(!1);let e=$("#network-slider").slider("value");Ce(e),$("#network-limit").val(e)}else $("#network-limit-p").hide(),$("#network-slider").hide(),$e(!0)})),$(".hiearchy-checkbox").on("change",(function(){let e=$(this),t=e.attr("data"),n=e.attr("name");if(e.prop("checked")&&$(".show-dendrogram").length<ne)y(),r=t,$.ajax({url:"/api/dataset/network/hierarchy/"+parameters.id+"/"+r,dataType:"json",type:"GET",contentType:"application/json; charset=utf-8",headers:{Accept:Ae},success:function(e){e.length&&Ze(JSON.parse(e[0].hierarchy),r),x()}}),function(e,t){$(".show-dendrogram").length<ne&&($("#dendrogram-buttons-div").append('<button type="button" id="show-dendrogram-'+e+'" data='+e+" name="+t+' class="show-dendrogram btn btn-block" data-toggle="button" aria-pressed="false" autocomplete="off"> <span class="btn-label" id="btn-left"> <i class="mdi mdi-arrow-collapse-left"></i>&nbsp&nbsp Show '+t+'</span><span class="btn-label" id="btn-right"> <i class="mdi mdi-arrow-collapse-right"></i>&nbsp&nbsp Hide '+t+" </span></button> <br>"),$("#show-dendrogram-"+e).find("#btn-right").hide())}(t,n),function(e){$("#show-dendrogram-"+e).click((function(){let e=$(this).attr("id");$(".show-dendrogram").each((function(t,n){$(n).attr("id")===e&&!1===$(n).hasClass("btn-primary")?($(n).addClass("btn-primary"),$(n).find("#btn-left").hide(),$(n).find("#btn-right").show()):($(n).removeClass("btn-primary"),$(n).find("#btn-left").show(),$(n).find("#btn-right").hide())})),$(".show-dendrogram.btn-primary").length?$("#dendrogram-panel").show():$("#dendrogram-panel").hide(),$("#play-button").hasClass("active")||(q(),V(),le())}))}(t),$("#dendrogram-buttons-div").show();else{let e=$("#show-dendrogram-"+t).hasClass("btn-primary");Ze({},t),function(e){$("#show-dendrogram-"+e).next().remove(),$("#show-dendrogram-"+e).remove()}(t),d3.select("g.h"+t).remove(),!0===e&&$("#dendrogram-panel").hide(),0===$(".show-dendrogram").length&&$("#dendrogram-buttons-div").hide()}var r;$(".show-dendrogram").length?($("#main-vis-div").removeClass("col-md-12"),$("#main-vis-div").addClass("col-md-8")):($("#main-vis-div").removeClass("col-md-8"),$("#main-vis-div").addClass("col-md-12"))})),$(".network-hierarchy-checkbox").on("change",(function(){let e=$(this);$(".network-hierarchy-checkbox").prop("checked",!1),e.prop("checked",!0),e.prop("checked")?je(e.attr("data")):je(void 0)})),$(".set-button").click((function(){let e=$(this).find("input").attr("data");ee=e,$("#play-button").hasClass("active")||(q(),V(),le())}))}function b(e){g="boolean"==typeof e&&e}function y(){b(!1),$("#play-button").removeClass("active"),$("#play-button").prop("disabled",!0),$("#play-icons").hide(),$("#play-loading").show()}function x(){b(!0),$("#play-button").addClass("active"),$("#play-button").prop("disabled",!1),$("#play-loading").hide(),$("#play-icons").show(),V()}function w(e){let t=[.05,.25,.5,.75,.95],n=[];if(0===e.length)return 0;e.sort((function(e,t){return e-t}));for(let r=0;r<t.length;r++){let a=(e.length-1)*t[r],i=Math.floor(a),o=i+1,l=a%1;o>=e.length?n.push(e[i]):n.push(e[i]*(1-l)+e[o]*l)}return n}function k(e){for(var t in e)if(e.hasOwnProperty(t)){let e=t.split("_").join(" ");e=e.charAt(0).toUpperCase()+e.slice(1),$("#absolute-feature-checkboxes").append('<tr><th> <div class="pretty p-switch p-fill p-bigger"><input type="checkbox" id="draw-'+t+'"/><div class="state"><label>'+e+'</label></div></div><div class="float-right draw-details" id="draw-'+t+'-details"><div class="pretty p-icon p-toggle p-plain"><input type="checkbox" id="draw-'+t+'-input" /><div class="state p-success-o p-on"><i class="mdi mdi-image-area"></i><label></label></div><div class="state p-off"><i class="mdi mdi-image-off"></i><label></label></div></div></div></th></tr>')}$(".draw-details").hide(),$(".draw-details").click((function(){$(this).find("input:checkbox").prop("checked")?($(".lineChartButton").prop("checked",!1).prop("disabled",!0),$(".line-chart-check-box").attr("disabled",!0),$(".lineChartLine").attr("visibility","hidden"),function(e){let t="";if(e.id.toLowerCase().includes("speed"))t="speed";else if(e.id.toLowerCase().includes("acceleration"))t="acceleration";else if(e.id.toLowerCase().includes("distance_centroid"))t="distance_centroid";else{if(!e.id.toLowerCase().includes("midline_offset"))return;t="midline_offset"}if(ze[0][t])if($("#lineChartLegend").hide(),$("#trendChartLegend").show(),$("#"+t+"TrendChart").length)$("#"+t+"TrendChart").show();else{let e=[],n=Pe.length;for(let r=0;r<Be.length;r++){let a=[];for(let e=0;e<n;e++)ze[r*n+e]&&a.push(ze[r*n+e][t]);e.push(w(a))}if(e.length>5e3){let t=[],n=[0,0,0,0,0];for(let r=0;r<e.length;r++){for(let t=0;t<n.length;t++)n[t]+=e[r][t];if(r%A==0){for(let e=0;e<n.length;e++)n[e]+=n[e]/A;t.push(n),n=[0,0,0,0,0]}}e=t}let r=d3.min(e,(function(e){return e[0]})),a=d3.max(e,(function(e){return e[4]})),i=d3.scaleLinear().domain([r,a]).range([0,100]),o=this.zoomGroup.append("g").attr("id",t+"TrendChart").attr("class","trendChartData");$(".zoom").appendTo("#lineChartZoom"),$("#lineChartTimeLine").appendTo("#lineChartZoom"),T[t]={};for(let n=0;n<_.length;n++){let r;n<2?r=d3.area().x((function(e,t){return j(t)})).y0((function(e){return L(i(e[n+1]))})).y1((function(e){return L(i(e[n]))})):2===n?r=d3.line().x((function(e,t){return j(t)})).y((function(e){return L(i(e[n]))})):n>2&&(r=d3.area().x((function(e,t){return j(t)})).y0((function(e){return L(i(e[n]))})).y1((function(e){return L(i(e[n-1]))}))),T[t][_[n]]=r,o.append("path").data([e]).attr("class",_[n]).attr("d",r)}}}(this)):($(".trendChartData").hide(),$("#trendChartLegend").hide(),$("#lineChartLegend").show(),$(".lineChartButton").prop("checked",!0).prop("disabled",!1),$(".line-chart-check-box").attr("disabled",!1),$(".lineChartLine").attr("visibility","visible"))}))}String.prototype.hashCode=function(){var e,t=0;if(0===this.length)return t;for(e=0;e<this.length;e++)t=(t<<5)-t+this.charCodeAt(e),t|=0;return t},d3.selection.prototype.moveToBack=function(){return this.each((function(){var e=this.parentNode.firstChild;e&&this.parentNode.insertBefore(this,e)}))};let C,j,L,T={},_=["lower-outer-area","lower-inner-area","median-line","upper-inner-area","upper-outer-area"],A=1;class O{constructor(e){this.data=e,this.swarm_features=Object.keys(this.data[0]),this.lineChart()}lineChart(){A=Math.ceil(Be.length/5e3);let e=100,t=10,n=Object.keys(Be[0]),r=n.indexOf("time");n.splice(r,1);let a=[];if(Be.length>5e3){let e=new Array(n.length).fill(0);for(let t=0;t<Be.length;t++){for(let r=0;r<n.length;r++)e[r]+=Be[t][n[r]];if(t%A==0){let r={time:t/A};for(let t=0;t<n.length;t++)e[t]=e[t]/A,r[n[t]]=e[t];a.push(r),e=new Array(n.length).fill(0)}}}else a=Be;m=d3.scaleLinear().domain([0,a.length]).range([0,5e3]),j=d3.scaleLinear().domain([0,a.length]).range([0,5e3]);let i=d3.scaleLinear().domain([0,a.length]).range([0,5e3]),o=d3.axisBottom(j).ticks(10).tickSize(10).tickPadding(5).tickFormat((function(e){return Math.floor(e*A/1500)%60+":"+Math.floor(e*A/parameters.fps)%60+"::"+e*A%parameters.fps}));L=d3.scaleLinear().domain([0,100]).range([500,0]);let l=d3.axisLeft(L).ticks(0).tickSize(10).tickPadding(5),d=function(){let e=d3.mouse(this);if(e[0]<t||e[0]>5e3||e[1]<0||e[1]>500)return;let n=d3.scaleLinear().domain(m.range()).range(m.domain());Z(Math.floor(n(e[0]-t)*A))},s=d3.zoom().scaleExtent([1,20]).translateExtent([[0,0],[5e3,500]]).extent([[0,0],[5e3,500]]).on("zoom",(function(){let e=d3.event.transform;m=j.domain(e.rescaleX(i).domain());for(let e in h)h.hasOwnProperty(e)&&C.select("#"+e+"Line").attr("d",h[e]);for(let e in T)if(T.hasOwnProperty(e))for(let t=0;t<_.length;t++)C.select("#"+e+"TrendChart ."+_[t]).attr("d",T[e][_[t]]);p.call(o)})),c=d3.select("#swarm-vis").classed("svg-line-chart-container",!0).append("svg").attr("preserveAspectRatio","xMinYMin meet").attr("viewBox","0 0 5000 "+(500+e)).classed("svg-content",!0);C=c.append("svg:g").attr("id","lineChartZoom").attr("transform","translate("+t+",0)");let p=C.append("g").attr("class","x axis-line-chart").attr("transform","translate(0,500)").call(o);C.append("g").attr("class","y axis-line-chart").call(l),C.append("line").attr("class","time-line").attr("id","lineChartTimeLine").attr("x1",0).attr("y1",0).attr("x2",0).attr("y2",500);let u=d3.scaleOrdinal(d3.schemeCategory10),h={};for(let e=0;e<n.length;e++){let t=d3.min(a,(function(t){return t[n[e]]})),r=d3.max(a,(function(t){return t[n[e]]})),i=d3.scaleLinear().domain([t,r]).range([0,100]),o=d3.line().x((function(e){return j(e.time)})).y((function(t){return L(i(t[n[e]]))}));h[n[e]]=o,C.append("path").data([a]).attr("id",n[e]+"Line").attr("class","line lineChartLine").style("stroke",u(e)).attr("d",o).attr("name",n[e])}$("#lineChartTimeLine").appendTo("#lineChartZoom"),C.append("rect").attr("class","zoom").attr("width",5e3).attr("height",500).call(s).on("click",d).call(d3.drag().on("drag",d));let f=d3.selectAll(".line");c.append("g").attr("id","lineChartLegend").attr("transform","translate("+e+",550)").selectAll("rect.legend").data(f._groups[0]).enter().each((function(e,t){d3.select(this).append("rect").attr("class","legend").attr("width",100).attr("height",50).attr("x",600*t+"px").style("fill",e.style.stroke),d3.select(this).append("text").attr("id",e.attributes.id.value+"LegendTitle").attr("class","line-chart-legend-text").attr("y",40).attr("x",600*t+100+10+"px").text(e.attributes.name.value+": "),d3.select(this).append("text").attr("id",e.attributes.id.value+"Value").attr("class","line-chart-legend-text").attr("y",40).attr("x",600*t+100+d3.select("#"+e.attributes.id.value+"LegendTitle").node().getComputedTextLength()+10+"px").text("0.0")})),c.append("g").attr("id","trendChartLegend").attr("transform","translate("+e+",550)").selectAll("rect.legend").data(["5% - 95%","25% - 75%","Median"]).enter().each((function(e,t){d3.select(this).append("rect").attr("class","legend").attr("width",100).attr("height",50).attr("x",800*t+"px").style("fill",(function(){return 0===t?"#74a9cf":1===t?"#045a8d":"#525252"})),d3.select(this).append("text").attr("class","line-chart-legend-text").attr("y",40).attr("x",800*t+100+10+"px").text(e)})),$("#trendChartLegend").hide(),this.initLineChartButtons(n)}initLineChartButtons(e){for(let t=0;t<e.length;t++){let n=e[t].split("_").join(" ");n=n.charAt(0).toUpperCase()+n.slice(1),$("#line-chart-feature-checkboxes").append('<tr><th> <div class="pretty p-switch p-fill p-bigger"><input type="checkbox" class="line-chart-check-box" id="draw-'+e[t]+'" data="#'+e[t]+'Line" /><div class="state"><label>'+n+"</label></div></div></th></tr>")}$(".line-chart-check-box").change((function(){let e=$(this);e.prop("checked")?$(e.attr("data")).show():$(e.attr("data")).hide()}))}}let M,S,E,z,D,B,U,R,N,P,I=0,G="black",H=-1,Y=[];function F(){let e=parameters.min.geometry.coordinates,t=parameters.max.geometry.coordinates;M=1.02*(t[0]-e[0]),S=1.02*(t[1]-e[1]);let n,i=d3.scaleLinear().domain([e[0],t[0]]).range([e[0],t[0]]),d=d3.axisBottom(i).ticks(10).tickSize(10).tickPadding(5),c=d3.scaleLinear().domain([e[1],t[1]]).range([e[1],t[1]]),p=d3.axisRight(c).ticks(7).tickSize(10).tickPadding(5),u=d3.zoom().scaleExtent([1,6]).on("zoom",(function(){d3.event.transform.x=Math.min(0,M*(d3.event.transform.k-1),Math.max(M*(1-d3.event.transform.k),d3.event.transform.x)),d3.event.transform.y=Math.min(0,S*(d3.event.transform.k-1),Math.max(S*(1-d3.event.transform.k),d3.event.transform.y)),n.attr("transform",d3.event.transform),f.call(d.scale(d3.event.transform.rescaleX(i))),m.call(p.scale(d3.event.transform.rescaleY(c)))}));z=d3.select("#main-vis").classed("svg-container",!0).append("svg").attr("preserveAspectRatio","xMinYMin meet").attr("viewBox","0 0 "+M+" "+S).classed("svg-content",!0).attr("id","main-vis-svg").call(u);let h=Math.ceil(S/M*100);$("#main-vis").append($("<style>#main-vis::after {padding-top: "+h+'%;display: block;content: "";}</style> ')),n=z.append("svg:g"),parameters.background_image&&n.append("image").attr("xlink:href","/"+parameters.background_image).attr("class","background-image").attr("height",S).attr("width",M).attr("x","0").attr("y","0"),D=n.append("svg:g").attr("class","tank").attr("transform",(function(){return"scale("+(parameters.inverted_x?-1:1)+","+(parameters.inverted_y?-1:1)+")"})),D.append("g").attr("id","g-centroid").append("circle").attr("class","centroid").attr("r",6).attr("cx",0).attr("cy",0),D.select("#g-centroid").append("svg:defs").append("svg:marker").attr("id","centroid-arrow").attr("refX",2).attr("refY",6).attr("markerWidth",13).attr("markerHeight",13).attr("orient","auto").append("svg:path").attr("d","M2,2 L2,11 L10,6 L2,2"),D.select("#g-centroid").append("line").attr("id","centroid-line").attr("marker-end","url(#centroid-arrow)"),D.append("g").attr("id","network-group"),D.append("g").attr("id","delaunay-triangulation-group"),D.append("g").attr("id","vornoi-group"),z.append("text").attr("class","frame-text").attr("x",30).attr("y",30).text("-- : -- : -- ");let f=z.append("g").attr("class","x axis").call(d),m=z.append("g").attr("class","y axis").call(p);var g,b;a=d3.select("div.tooltip").style("left","0px").style("top","0px").on("mouseover",(function(){a.style("opacity",1)})),function(){r=$("#slider").slider({min:0,max:Be.length,step:25,slide:function(e,t){Z(t.value),$("#play-button").hasClass("active")||V()}}),$("#network-slider").slider({range:"max",min:0,max:1,step:.01,value:.5,slide:function(e,t){Ce(t.value),$("#network-limit").val(t.value)}}),$("#network-limit").val(.5);let e=r.slider("option","max"),t=100/e;for(let n=0;n<e;n+=1500)$('<span class="ui-slider-tick"></span>').css("left",t*n+"%").appendTo(r)}(),o=d3.select("#main-vis-legend-div").append("svg").attr("id","main-vis-legend").attr("width",550).attr("height",60),d3.select(".colors-body").selectAll(".palette").data(d3.entries(colorbrewer)).enter().append("span").attr("class","palette").attr("title",(function(e){return e.key})).on("click",(function(e){$(".palette").removeClass("selected"),$('.palette[title="'+e.key+'"]').addClass("selected"),l.color=colorbrewer[e.key],s(),$("#play-button").hasClass("active")||(q(),V())})).selectAll(".swatch").data((function(e){return e.value})).enter().append("span").attr("class","swatch").style("background-color",(function(e){return e})),$('.palette[title="BuYlBu"]').addClass("selected"),v(),function(){let e=d3.zoom().scaleExtent([1,10]).on("zoom",(function(){d3.event.transform.x=Math.min(0,5e3*(d3.event.transform.k-1),Math.max(5e3*(1-d3.event.transform.k),d3.event.transform.x)),d3.event.transform.y=Math.min(0,5e3*(d3.event.transform.k-1),Math.max(5e3*(1-d3.event.transform.k),d3.event.transform.y)),B.attr("transform",d3.event.transform)})),t=d3.select("#dendrogram-panel").classed("svg-dendrogram-container",!0).append("svg").attr("preserveAspectRatio","xMinYMin meet").attr("viewBox","0 0 5000 5000").classed("svg-content-dendrogram",!0).call(e);(function(){let e,t,n=d3.select("#dendrogram-panel").append("svg").attr("id","dendrogram-legend").attr("width",550).attr("height",60);$("#dendrogram-legend").hide();let r=te.range();e=n.selectAll("rect.legend").data(r),t=n.selectAll("text.legend-text").data(["low","","","","","","","","high"]),e.enter().append("rect").attr("class","legend").attr("width",50).attr("height",20).attr("y",0).attr("x",(function(e,t){return 50*t+"px"})).style("fill",(function(e){return e})),t.enter().append("text").attr("class","legend-text").attr("y",40).attr("x",(function(e,t){return 50*t+"px"})).text((function(e){return e}))})(),B=t.append("g").attr("transform","translate(20,20)").append("svg:g"),U=d3.tree().size([4800,4800]),N=d3.select(".tank"),$("#dendrogram-panel-level-slider").slider({range:"max",min:2,max:2,step:1,value:Q.h0,slide:function(e,t){he($(".show-dendrogram.btn-primary").attr("data"),t.value),function(){let e=$(".show-dendrogram.btn-primary").attr("data"),t=$(".show-dendrogram.btn-primary").attr("name");$("#dendrogram-panel-name").text(t),$("#dendrogram-panel-level-slider").val(Q["h"+e]),$("#dendrogram-panel-level-text").text(Q["h"+e])}(),$("#play-button").hasClass("active")||(q(),V(),le())}}),R=d3.select("#dendrogram-tooltip").style("left","0px").style("top","0px").on("mouseover",(function(){R.style("opacity",1)}));let n=100*ne;P=d3.select("#hierarchy-legend-div").append("svg").attr("id","hierarchy-legend").attr("width",n).attr("height",60),N.append("defs").append("svg:pattern").attr("id","striped").attr("patternUnits","userSpaceOnUse").attr("width","20").attr("height","5").attr("patternTransform","rotate(60)").append("rect").attr("width",5).attr("height",10).attr("transform","translate(0,0)").style("fill","#67000d")}(),g=S,b=M,$((function(){$("#main-vis").draggable({containment:"parent"}).resizable({aspectRatio:!0,maxWidth:$("#main-vis-div").width()}).height(.6*g).width(.6*b)})),$("input[type=checkbox]").prop("checked",!1),$("#color-scale-linear").prop("checked",!0),$("#group-size-m").prop("checked",!0),$("#background-white").prop("checked",!0),$("#settings-div input[type=checkbox]").prop("checked",!0),$("#loading").hide(),$("#play-loading").hide(),$(".mdi-play").hide(),$("#metadata-input").hide(),$("#dendrogram-buttons-div").hide(),$("#g-centroid").hide(),$("#line-chart-feature-checkboxes input[type=checkbox]").prop("checked",!0),console.log(Object.values(Be));let y=Be.map(e=>Object.values({time:e.time,dist_cen:e.distance_centroid,speed:e.speed}));console.log(y);Object.values(y),new Date(2016,0,1),new Date(2016,1,1),new Date(2016,2,1),new Date(2016,3,1),new Date(2016,4,1),new Date(2016,5,1);V()}function V(){Be.map(e=>Object.values({time:e.time,dist_cen:e.distance_centroid,speed:e.speed})),new O(Be);let e=$('input[type="radio"].group-playback-rate:checked').val(),t=$('input[type="radio"].group-size:checked').val();E=ze.filter((function(e){return e.t===I})),setTimeout((function(){var e;le(),z.select(".frame-text").text(Math.floor(I/1500)%60+":"+Math.floor(I/parameters.fps)%60+"::"+I%parameters.fps),I%parameters.fps==0&&(e=I,r.slider("value",e));let n,i=D.selectAll("g.animal").data(E);if(I in Re){let e=Re[I];if(ie={},e=e.map((function(e){let t=E.filter((function(t){return t.a===e.s}))[0],n=E.filter((function(t){return t.a===e.e}))[0];return{node1:t.a,node2:n.a,start:t.p,end:n.p,val:e.v}})),e.forEach((function(e){$("#mc-"+e.node1+"-"+e.node2).css("fill",ke(e.val)),$("#mc-"+e.node2+"-"+e.node1).css("fill",ke(e.val))})),ve){let t=[];for(let n=0;n<e.length;n++)t.push(e[n].val);Ce(function(e){if(0===e.length)return 0;e.sort((function(e,t){return e-t}));let t=.05*(e.length-1),n=Math.floor(t),r=n+1,a=t%1;return r>=e.length?1-e[n]:1-(e[n]*(1-a)+e[r]*a)}(t))}e=e.filter((function(e){return e.val<=1-be})),n=D.select("#network-group").selectAll("line.network-edges").data(e),n.attr("x1",(function(e){return e.start[0]})).attr("y1",(function(e){return-e.start[1]})).attr("x2",(function(e){return e.end[0]})).attr("y2",(function(e){return-e.end[1]})).attr("stroke",(function(e){return ke(1-e.val)})).attr("stroke-opacity",(function(e){return 1-e.val})),n.enter().append("line").attr("class","network-edges").attr("x1",(function(e){return e.start[0]})).attr("y1",(function(e){return-e.start[1]})).attr("x2",(function(e){return e.end[0]})).attr("y2",(function(e){return-e.end[1]})).attr("stroke",(function(e){return ke(e.val)})).attr("stroke-opacity",(function(e){return e.val}))}else n=D.selectAll("line.network-edges").data([]);var o,l;n.exit().remove(),$("#draw-triangulation").is(":checked")?((o=D.select("#delaunay-triangulation-group").selectAll("path.delaunay-triangulation").data([Be[I].triangulation])).attr("d",(function(e){return e})),o.enter().append("path").attr("class","delaunay-triangulation").attr("d",(function(e){return e}))):o=D.selectAll("path.delaunay-triangulation").data([]),o.exit().remove(),$("#draw-voronoi").is(":checked")?((l=D.select("#vornoi-group").selectAll("path.voronoi").data(Be[I].voronoi.split(";"))).attr("d",(function(e){return e})),l.enter().append("path").attr("class","voronoi").attr("d",(function(e){return e}))):l=D.select("#vornoi-group").selectAll("path.voronoi").data([]),l.exit().remove();let s=i.enter().append("g").attr("class","animal").attr("id",(function(e){return"animal-"+e.a}));if(s.append("circle").attr("r",1.5*t).attr("cx",(function(e){return e.p[0]})).attr("cy",(function(e){return-e.p[1]})).on("mouseover",(function(e){!function(e){for(let t=0;t<De.length;t++)e.a===De[t].animal_id&&(a.style("left",d3.event.pageX+5+"px").style("top",d3.event.pageY-100+"px").style("opacity",1),a.select("#tooltip-animal-id").html(De[t].animal_id),a.select("#tooltip-species").html(De[t].species),a.select("#tooltip-sex").html(De[t].sex),a.select("#tooltip-size").html(De[t].size),a.select("#tooltip-weight").html(De[t].weight))}(e)})).on("mouseout",(function(){a.transition().duration(500).style("opacity",0)})).on("click",(function(e){Y.includes(e.a)?Y=Y.filter(t=>t!==e.a):Y.push(e.a),$("#play-button").hasClass("active")||(I--,V())})),i.select("circle").attr("cx",(function(e){return e.p[0]})).attr("cy",(function(e){return-e.p[1]})).attr("r",t),s.append("svg:defs").append("svg:marker").attr("id",(function(e){return"arrow-marker-"+e.a})).attr("refX",2).attr("refY",6).attr("markerWidth",13).attr("markerHeight",13).attr("orient","auto").append("svg:path").attr("d","M2,2 L2,11 L10,6 L2,2"),s.append("line").attr("class","arrow").attr("marker-end",(function(e){return"url(#arrow-marker-"+e.a+")"})),$("#draw-direction").is(":checked")?i.select("line").attr("x1",(function(e){return e.p[0]})).attr("y1",(function(e){return-e.p[1]})).attr("x2",(function(e){return e.p[0]+2*t})).attr("y2",(function(e){return-e.p[1]})).attr("transform",(function(e){return"rotate("+-e.direction+" "+e.p[0]+" "+-e.p[1]+")"})):$(".arrow").hide(),i.exit().remove(),$("#draw-convex-hull").is(":checked")){var p=D.selectAll("path.hull-path").data([Be[I].convex_hull]);p.attr("d",(function(e){return e})),p.enter().append("path").attr("class","hull-path").attr("d",(function(e){return e}))}else p=D.select("path.hull-path").data([]);if(p.exit().remove(),"black"!==G){var u=d();i.transition().duration(10).style("fill",(function(e){return u(e[G])})).attr("stroke",(function(e){return u(e[G])}))}else i.style("fill","#000").attr("stroke","#000"),$.isEmptyObject(c)||Object.keys(c).forEach((function(e){d3.select("#animal-"+e).style("fill",c[e]).attr("stroke",c[e])}));Y.length?(i.style("opacity",(function(e){return Y.includes(e.a)?1:.25})),$("#remove-active-selected-button").is(":disabled")&&($("#remove-active-selected-button").prop("disabled",!1),$("#visual-parameter-button").prop("disabled",!1)),h.trackingBoolean&&Object(h.addTrackedData)(E[0].t,Y)):($("#remove-active-selected-button").is(":disabled")||($("#remove-active-selected-button").prop("disabled",!0),$("#visual-parameter-button").prop("disabled",!0)),i.style("opacity",1)),d3.select(".centroid").attr("cx",(function(){return"centroid"in Be[0]?Be[I].centroid[0]:0})).attr("cy",(function(){return"centroid"in Be[0]?-Be[I].centroid[1]:0})),$("#draw-direction").is(":checked")&&Be[I].centroid&&$("#draw-centroid").is(":checked")?(d3.select("#centroid-line").classed("hidden",!1),d3.select("#centroid-line").attr("x1",(function(){return Be[I].centroid[0]})).attr("y1",(function(){return-Be[I].centroid[1]})).attr("x2",(function(){return Be[I].centroid[0]+2*t})).attr("y2",(function(){return-Be[I].centroid[1]})).attr("transform",(function(){return"rotate("+-Be[I].direction+" "+Be[I].centroid[0]+" "+-Be[I].centroid[1]+")"}))):d3.select("#centroid-line").attr("class","hidden"),-1!==H&&(d3.selectAll("#animal-"+H).classed("medoid",!1),H=Be[I].medoid,d3.selectAll("#animal-"+H).classed("medoid",!0)),I++,function(){if(d3.select("#lineChartTimeLine")&&Be[Math.ceil(I/A)]){let e=Math.ceil(I/A);I%25==0&&(d3.select("#convex_hull_areaLineValue").text(Be[e].convex_hull_area+"mm²"),d3.select("#speedLineValue").text(Be[e].speed+"mm/s"),d3.select("#accelerationLineValue").text(Be[e].acceleration+"mm/s²"),d3.select("#distance_centroidLineValue").text(Be[e].distance_centroid+"mm"),d3.select("#directionLineValue").text(Be[e].direction+"°"),d3.select("#polarisationLineValue").text(Be[e].polarisation)),d3.select("#lineChartTimeLine").attr("transform","translate("+m(e)+",0)")}}(),I>=Be.length?(I=0,V()):g&&V()}),e)}function Z(e){I="number"==typeof e&&I<=Be.length?e:0}function q(){I-=1}function J(e){G=e}function X(e){H=e}function W(e){Y=e}let K,Q={},ee="union",te=d3.scaleThreshold().domain([0,.1,.2,.3,.4,.5,.6,.7,.8,.9,1]).range(["#f7fbff","#deebf7","#c6dbef","#9ecae1","#6baed6","#4292c6","#2171b5","#08519c","#08306b"]);const ne=4;let re=[],ae={},ie={},oe=["#7fc97f","#386cb0","#e7298a","#ff9900"];function le(){if(K=$(".show-dendrogram.btn-primary").attr("data"),!$.isEmptyObject(Ne)&&K){let t=Ne["h"+K][I],n=d3.hierarchy(t,(function(e){return e.children}));if(n=n.children[0],n.children.forEach(de),n=U(n),console.log(n),$(".show-dendrogram.btn-primary").length){$("#dendrogram-panel-level-slider").slider("option","max",n.height-1).slider("value",Q["h"+K]);let t=B.selectAll("path.link").data(n.descendants().slice(1));t.enter().append("path").attr("class","link").attr("d",se),t.attr("d",se),t.exit().remove();let r=B.selectAll(".node").data(n.descendants());var e=r.enter().append("g").attr("class",(function(e){return"node"+(e.children?" node--internal":" node--leaf")})).attr("transform",(function(e){return"translate("+e.x+","+e.y+")"}));e.append("circle").attr("r",(function(e){return e.depth===Q["h"+K]?40+e.data.name.length:20+e.data.name.length})).attr("class",(function(e){if(e.depth===Q["h"+K])return"active-level"})).attr("id",(function(e){return"h"+e.data.name.toString().hashCode()})).on("click",ce).on("mouseover",(function(e){R.style("left",d3.event.pageX+5+"px").style("top",d3.event.pageY+5+"px").style("opacity",1),R.select(".tooltip-span").html(e.data.name.toString()),function(e){let t=[];for(let n=0;n<e.length;n++){let r=N.select("#animal-"+e[n]),a=r.data()[0].p;t.push([a[0],-a[1]]),r.classed("animal-highlight",!0)}N.append("path").attr("class","highlight-hierarchy").attr("d","M"+d3.polygonHull(t).join("L")+"Z")}(e.data.name)})).on("mouseout",(function(){R.transition().duration(500).style("opacity",0),d3.selectAll(".animal").classed("animal-highlight",!1),d3.selectAll(".highlight-hierarchy").remove()})),e.append("text").attr("class","dendrogram-text").attr("x",150).attr("y",-150).text((function(e){return e.data.name.length})),e.attr("transform",(function(e){return"translate("+e.x+","+e.y+")"})),r.attr("transform",(function(e){return"translate("+e.x+","+e.y+")"})).select("circle").attr("r",(function(e){return e.depth===Q["h"+K]?40+e.data.name.length:20+e.data.name.length})).attr("class",(function(e){return e.depth===Q["h"+K]?"active-level":""})).attr("id",(function(e){return"h"+e.data.name.toString().hashCode()})),r.select("text").text((function(e){return e.data.name.length})),r.exit().remove(),Object.keys(ie).length?("none"==$("#dendrogram-legend").css("display")&&$("#dendrogram-legend").show(),setTimeout((function(){r.select("circle").style("fill",(function(e){return"h"+e.data.name.toString().hashCode()in ie?te(function(e){if(e instanceof Array){let t=e.reduce((function(e,t){return e+t}),0)/e.length,n=e.map((function(e){return Math.pow(e-t,2)}));return Math.sqrt(n.reduce((function(e,t){return e+t}),0)/n.length)}}(ie["h"+e.data.name.toString().hashCode()])):e.depth!==Q["h"+K]?"":"#000"}))}),250)):"none"!==$("#dendrogram-legend").css("display")&&$("#dendrogram-legend").hide()}}$.isEmptyObject(Ne)||function(){let e=Object.keys(Ne).map((function(e){return e.replace("h","")})),t=[];for(let n=0;n<e.length;n++){let r=Ne["h"+e[n]][I],a=d3.hierarchy(r,(function(e){return e.children}));a=U(a);let i=a.children[0];me===e[n]&&(re=pe(i,e[n])),t.push(ue(pe(i,e[n])))}t.length;let n=N.selectAll("g.hierarchy-group").data(t);n.enter().append("g").attr("class",(function(t,n){return"intersection"===ee?"hierarchy-group intersection":"sym-difference"===ee?"hierarchy-group sym-difference":"hierarchy-group h"+e[n]})).style("fill",(function(t,n){return ae["h"+e[n]]})).attr("stroke",(function(t,n){return ae["h"+e[n]]})).moveToBack(),n.attr("class",(function(t,n){return"intersection"===ee?"hierarchy-group intersection":"sym-difference"===ee?"hierarchy-group sym-difference":"hierarchy-group h"+e[n]})),n.exit().remove();let r=n.selectAll("path.hierarchy-hull-path").data((function(e){return e}));r.enter().append("path").attr("class","hierarchy-hull-path").attr("d",(function(e){return"M"+e.join("L")+"Z"})),r.attr("d",(function(e){return"M"+e.join("L")+"Z"})),r.exit().remove()}()}function de(e){e.children&&e.depth<=Q["h"+K]?(e._children=e.children,e._children.forEach(de)):e.children=null}function se(e){return"M"+e.x+","+e.y+"V"+e.parent.y+"H"+e.parent.x}function ce(e){W(e.data.name),$("#play-button").hasClass("active")||(q(),V())}function pe(e,t){let n=[],r=Q["h"+t],a=e.children;for(let t=1;t<e.height;t++){if(a[0]&&a[0].depth===r){a.forEach((function(e){void 0!==e.data.name&&n.push(e.data.name)}));break}let e=[];a.forEach((function(t){void 0!==t.children&&(e=e.concat(t.children))})),a=e}return n}function ue(e){let t=[];return e.forEach((function(e){let n=[];for(let t=0;t<e.length;t++){let r=E.find(n=>n.a===e[t]);r&&n.push([r.p[0],-r.p[1]])}n.length>=3&&t.push(d3.polygonHull(n))})),t}function he(e,t){Q["h"+e]=t}function fe(){let e,t;0!==Object.keys(ae).length||0!==Object.keys(ye).length?$("#hierarchy-legend-div").show():$("#hierarchy-legend-div").hide();let n=[],r=[];if($(".show-dendrogram").each((function(e,t){null!=ae["h"+$(t).attr("data")]&&null!=$(t).attr("name")&&(n.push(ae["h"+$(t).attr("data")]),r.push($(t).attr("name")))})),0!==Object.keys(ye).length)for(let e in ye)-1===n.indexOf(ye[e])&&(n.push(ye[e]),r.push("Network"));e=P.selectAll("rect.legend").data(n),t=P.selectAll("text.legend-text").data(r),e.style("fill",(function(e){return e})),e.enter().append("rect").attr("class","legend").attr("width",50).attr("height",20).attr("y",0).attr("x",(function(e,t){return 50+2.5*t*50+"px"})).style("fill",(function(e){return e})),e.exit().remove(),t.text((function(e){return e})),t.enter().append("text").attr("class","legend-text").attr("y",40).attr("x",(function(e,t){return 50+2.5*t*50+"px"})).text((function(e){return e})),t.exit().remove()}let me,ge,ve=!1,be=.5,ye={},xe=!0,we=1,ke=d3.scaleThreshold().domain([0,.1,.2,.3,.4,.5,.6,.7,.8,.9,1]).range(["#f7fbff","#deebf7","#c6dbef","#9ecae1","#6baed6","#4292c6","#2171b5","#08519c","#08306b"]);function $e(e){ve=e}function Ce(e){be=e}function je(e){me=e}function Le(e){ge=e}function Te(e){e>=0?ye["h"+e]="#08306b":ye={},fe()}function _e(e){xe=e}let Ae="application/vnd.api+json";var Oe;function Me(){$.ajax({url:"/api/dataset/networks/"+parameters.id,dataType:"json",type:"GET",contentType:"application/json; charset=utf-8",headers:{Accept:Ae},success:function(e){!function(e){if(e.length)for(let t=0;t<e.length;t++)e[t].finished&&$("#networks-hierarchies-table tbody").append("<tr><td>"+e[t].name+'</td> <td> <button type="button" class="btn btn-default" data='+e[t].network_id+" name="+e[t].name+'><span class="mdi mdi-graphql" aria-hidden="true"></span></button></td> <td><div class="pretty p-switch p-fill"><input type="checkbox" class="hiearchy-checkbox" data="'+e[t].network_id+'" name="'+e[t].name+'"><div class="state p-success"><label></label></div></div></td><td>---</td>');else $("#networks-hierarchies-table").append("There is no network data for this dataset")}(e)}})}function Se(e){$.ajax({url:"/api/dataset/"+parameters.id+"/"+e,dataType:"json",type:"GET",contentType:"application/json; charset=utf-8",headers:{Accept:Ae},success:function(t){Fe(t,e),x()}})}function Ee(e){y(),$.ajax({url:"/api/dataset/"+parameters.id+"/"+e,dataType:"json",type:"GET",contentType:"application/json; charset=utf-8",headers:{Accept:Ae},success:function(t){Ye(t,e),x()}})}n(1);let ze=[],De=[],Be=[],Ue={},Re={},Ne={},Pe={};function Ie(e){ze=ze.concat(e)}function Ge(e){Ue=e}function He(e){De=e,function(){let e=["#fff","#e41a1c","#377eb8","#4daf4a","#984ea3","#ff7f00","#ffff33","#a65628"];if(De.length)for(let t=0;t<De.length;t++)$("#metadata-table").find("tbody").append($('<tr id="metadata-row-'+De[t].animal_id+'">').append($("<td>").append(De[t].animal_id)).append($("<td>").append(De[t].species)).append($("<td>").append(De[t].sex)).append($("<td>").append(De[t].size)).append($("<td>").append(De[t].weight)).append($("<td>").append('<div class="dropdown">\n                                              <a class="dropdown-toggle btn btn-default btn-color" data-toggle="dropdown" href="#">\n                                              <div id="preview" class="metadata-swatch" style="background-color:#fff"></div>\n                                              <input class="color-field" value="White" style="display:none;">\n                                              </a>\n                                              <ul class="dropdown-menu" role="menu" aria-labelledby="dLabel"> '+function(t){let n="";for(let r=0;r<e.length;r++)n+='<div class="metadata-swatch metadata-swatch-clickable" style="background-color:'+e[r]+'" value="'+t+'"></div>';return n}(De[t].animal_id)+"</ul></div>")));else $("#metadata-table").find("tbody").append("There is no metadata for this dataset")}()}function Ye(e,t){for(let n=0;n<e.length;n++)void 0===Be[n]&&Be.push({}),e[n]&&!isNaN(e[n])?Be[n][t]=+e[n]:Be[n][t]=e[n]}function Fe(e,t){for(let n=0;n<e.length;n++)void 0===ze[n]&&ze.push({}),ze[n][t]=+e[n]}function Ve(e){Re=e}function Ze(e,t){0===Object.keys(e).length&&e.constructor===Object?(delete Ne["h"+t],delete Q["h"+t],function(e){delete ae["h"+e]}(t)):(Ne["h"+t]=e,he(t,2),function(e){for(let t in ye)if(t==="h"+e)return void(ae["h"+e]=ye[t]);for(let t=0;t<oe.length;t++){let n=!0;for(let e in ae)ae.hasOwnProperty(e)&&ae[e]===oe[t]&&(n=!1);if(n){if(0===Object.keys(ye).length)return void(ae["h"+e]=oe[t]);for(let n in ye)if(ye[n]!==oe[t])return void(ae["h"+e]=oe[t])}}}(t)),fe()}function qe(e){Pe=e}$(document).ready((function(){window.EventSource?((Oe=new EventSource("/api/movement_only/"+parameters.id)).onmessage=function(e){"close"===e.data?(Oe.close(),window.setTimeout((function e(){$.active>0?window.setTimeout(e,100):F()}),100)):Ie(JSON.parse(e.data))},Oe.addEventListener("error",(function(e){e.readyState==EventSource.CLOSED&&alert("Streaming error")}),!1)):alert("Webbrowser does not support streaming"),function(){let e=[];$.ajax({url:"/api/percentile/"+parameters.id,dataType:"json",type:"GET",contentType:"application/json; charset=utf-8",headers:{Accept:Ae},success:function(t){for(let n=0;n<t.length;n++)e[t[n].feature]=[t[n].min,t[n].p1,t[n].p2,t[n].p3,t[n].p5,t[n].p7,t[n].p8,t[n].p9,t[n].max];Ge(e),k(e)}})}(),$.ajax({url:"/api/dataset/"+parameters.id+"/animal_ids",dataType:"json",type:"GET",contentType:"application/json; charset=utf-8",headers:{Accept:Ae},success:function(e){qe(e)}}),function(){const e=["swarm_time","swarm_speed","swarm_acceleration","swarm_convex_hull_area","swarm_distance_centroid","swarm_direction","swarm_polarisation"];for(let t=0;t<e.length;t++)$.ajax({url:"/api/dataset/"+parameters.id+"/"+e[t],dataType:"json",type:"GET",contentType:"application/json; charset=utf-8",headers:{Accept:Ae},success:function(n){Ye(n,e[t].replace("swarm_",""))}})}(),$.ajax({url:"/api/metadata/"+parameters.id,dataType:"json",type:"GET",contentType:"application/json; charset=utf-8",headers:{Accept:Ae},success:function(e){He(e)}}),Me()}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,