!function(t){var e={};function n(r){if(e[r])return e[r].exports;var a=e[r]={i:r,l:!1,exports:{}};return t[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)n.d(r,a,function(e){return t[e]}.bind(null,a));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=6)}([function(t,e){},function(t,e,n){var r=n(2);"string"==typeof r&&(r=[[t.i,r,""]]);var a={hmr:!0,transform:void 0,insertInto:void 0};n(4)(r,a);r.locals&&(t.exports=r.locals)},function(t,e,n){(e=n(3)(!1)).push([t.i,"/* Icons for bootstrap 4 */\r\n\r\n.mdi::before {\r\n    font-size: 24px;\r\n    line-height: 14px;\r\n}\r\n\r\n.btn .mdi::before {\r\n    position: relative;\r\n    top: 4px;\r\n}\r\n\r\n.btn-xs .mdi::before {\r\n    font-size: 18px;\r\n    top: 3px;\r\n}\r\n\r\n.btn-sm .mdi::before {\r\n    font-size: 18px;\r\n    top: 3px;\r\n}\r\n\r\n.dropdown-menu .mdi {\r\n    width: 18px;\r\n}\r\n\r\n.dropdown-menu .mdi::before {\r\n    position: relative;\r\n    top: 4px;\r\n    left: -8px;\r\n}\r\n\r\n.nav .mdi::before {\r\n    position: relative;\r\n    top: 4px;\r\n}\r\n\r\n.navbar .navbar-toggle .mdi::before {\r\n    position: relative;\r\n    top: 4px;\r\n    color: #FFF;\r\n}\r\n\r\n.breadcrumb .mdi::before {\r\n    position: relative;\r\n    top: 4px;\r\n}\r\n\r\n.breadcrumb a:hover {\r\n    text-decoration: none;\r\n}\r\n\r\n.breadcrumb a:hover span {\r\n    text-decoration: underline;\r\n}\r\n\r\n.alert .mdi::before {\r\n    position: relative;\r\n    top: 4px;\r\n    margin-right: 2px;\r\n}\r\n\r\n.input-group-addon .mdi::before {\r\n    position: relative;\r\n    top: 3px;\r\n}\r\n\r\n.navbar-brand .mdi::before {\r\n    position: relative;\r\n    top: 2px;\r\n    margin-right: 2px;\r\n}\r\n\r\n.list-group-item .mdi::before {\r\n    position: relative;\r\n    top: 3px;\r\n    left: -3px\r\n}\r\n\r\n/* SVG elements and text */\r\n\r\n#main-vis {\r\n    margin-bottom: 10px;\r\n}\r\n\r\n.svg-container {\r\n    display: inline-block;\r\n    position: relative;\r\n    width: 100%;\r\n    /* aspect ratio */\r\n    vertical-align: top;\r\n    overflow: visible;\r\n}\r\n\r\n.svg-content {\r\n    display: inline-block;\r\n    position: absolute;\r\n    border: 1px solid #000;\r\n}\r\n\r\n#main-vis-legend-div {\r\n    display: none;\r\n}\r\n\r\n#hierarchy-legend-div {\r\n    display: none;\r\n}\r\n\r\n#main-vis-legend {\r\n    float: right;\r\n    display: inline-block;\r\n    position: relative;\r\n    overflow: visible;\r\n    top: 10px;\r\n    left: 10px;\r\n}\r\n\r\n#hierarchy-legend {\r\n    float: left;\r\n    display: inline-block;\r\n    position: relative;\r\n    overflow: visible;\r\n    top: 10px;\r\n    left: 10px;\r\n}\r\n\r\n.svg-content-dendrogram {\r\n    display: inline-block;\r\n    border: 1px solid #000;\r\n}\r\n\r\n.svg-line-chart-container {\r\n    display: inline-block;\r\n    position: relative;\r\n    width: 100%;\r\n    height: auto;\r\n    /* depends on svg ratio */\r\n    padding-bottom: 17%;\r\n    /* aspect ratio */\r\n    vertical-align: top;\r\n    overflow: visible;\r\n}\r\n\r\n.svg-dendrogram-container {\r\n    display: inline-block;\r\n    position: relative;\r\n    height: auto;\r\n    vertical-align: top;\r\n    overflow: visible;\r\n}\r\n\r\n.axis path {\r\n    display: none;\r\n}\r\n\r\n.axis line {\r\n    stroke-opacity: 0.3;\r\n    shape-rendering: crispEdges;\r\n}\r\n\r\n.x {\r\n    font-size: 1em;\r\n}\r\n\r\n.y {\r\n    font-size: 1em;\r\n}\r\n\r\n.axis-line-chart path line {\r\n    fill: none;\r\n    stroke: #000;\r\n    shape-rendering: crispEdges;\r\n}\r\n\r\n.line {\r\n    fill: none;\r\n    stroke-width: 5px;\r\n}\r\n\r\n/* Time  */\r\n\r\n.frame-text {\r\n    margin-top: 0;\r\n    margin-bottom: 0;\r\n    font-size: 2em;\r\n    color: inherit;\r\n    font-weight: 500;\r\n    line-height: 1.1;\r\n}\r\n\r\n/* Slider ticks  */\r\n\r\n.ui-slider-tick {\r\n    display: inline-block;\r\n    width: 3px;\r\n    background: #337ab7;\r\n    height: 0.8em;\r\n    position: absolute;\r\n}\r\n\r\n/* Laoding gif   */\r\n\r\n#loading {\r\n    display: block;\r\n    text-align: center;\r\n}\r\n\r\n/* Color legend    */\r\n\r\n.legend {\r\n    font-size: 12px;\r\n    stroke: #000;\r\n}\r\n\r\n.legend-text {\r\n    font-size: 1.2em;\r\n    color: inherit;\r\n    line-height: 1.1;\r\n}\r\n\r\n.line-chart-legend-text {\r\n    font-size: 2em;\r\n    color: inherit;\r\n    line-height: 1.1;\r\n}\r\n\r\n.time-line {\r\n    fill: none;\r\n    stroke-width: 5px;\r\n    stroke: #000;\r\n}\r\n\r\n/*swarm features */\r\n\r\n.centroid {\r\n    fill-opacity: 0;\r\n    stroke: #e7298a;\r\n    stroke-width: 3px;\r\n}\r\n\r\n.medoid {\r\n    fill: #e7298a !important;\r\n    stroke: #e7298a !important;\r\n}\r\n\r\n.hull-path {\r\n    fill: #fff;\r\n    fill-opacity: 0;\r\n    stroke-width: 3;\r\n    stroke: #252525;\r\n    stroke-opacity: 0.5;\r\n}\r\n\r\n.hierarchy-group {\r\n    stroke-width: 10;\r\n    stroke-linejoin: round;\r\n    opacity: 0.2;\r\n}\r\n\r\n.delaunay-triangulation {\r\n    fill-opacity: 0;\r\n    stroke-width: 2;\r\n    stroke: #000;\r\n    stroke-opacity: 0.4;\r\n}\r\n\r\n/* Color brewer picker div */\r\n\r\n.palette {\r\n    cursor: pointer;\r\n    display: table;\r\n    vertical-align: bottom;\r\n    margin: 4px 0 4px 4px;\r\n    background: #fff;\r\n    border: solid 1px #aaa;\r\n}\r\n\r\n.swatch {\r\n    display: inline-block;\r\n    vertical-align: middle;\r\n    width: 22px;\r\n    height: 22px;\r\n}\r\n\r\n.voronoi {\r\n    fill-opacity: 0;\r\n    stroke-width: 3;\r\n    stroke: #000;\r\n    stroke-opacity: 0.2;\r\n}\r\n\r\n/* Tooltip */\r\n\r\ndiv.tooltip {\r\n    pointer-events: none;\r\n    opacity: 0;\r\n    background: rgb(255, 255, 255) !important;\r\n    border-left-color: #1b809e !important;\r\n    border: 1px solid #eee;\r\n    border-left-width: 5px;\r\n    border-radius: 3px;\r\n    position: absolute;\r\n}\r\n\r\ndiv.tooltip table td:nth-child(2) {\r\n    text-align: center;\r\n    font-weight: bold;\r\n}\r\n\r\n.tooltip-span {\r\n    display: block;\r\n    width: 150px;\r\n    word-wrap: break-word;\r\n    font-size: 1.5em;\r\n}\r\n\r\n.upper-outer-area, .lower-outer-area {\r\n    stroke-width: 1;\r\n    fill: #74a9cf;\r\n    stroke: #3690c0;\r\n}\r\n\r\n.upper-inner-area, .lower-inner-area {\r\n    stroke-width: 1;\r\n    fill: #045a8d;\r\n    stroke: #023858;\r\n}\r\n\r\n.median-line {\r\n    fill: none;\r\n    stroke: #525252;\r\n    stroke-width: 5;\r\n}\r\n\r\n.selected {\r\n    background: #999;\r\n    border: 4px solid #4d4d4d;\r\n    -moz-border-radius: 5px;\r\n    -webkit-border-radius: 5px;\r\n    box-shadow: 1px 2px 4px rgba(0, 0, 0, .4);\r\n}\r\n\r\n.zoom {\r\n    fill: none;\r\n    pointer-events: all;\r\n}\r\n\r\n.x.axis-line-chart>g>text {\r\n    font-size: 3em;\r\n    color: inherit;\r\n    line-height: 1.1;\r\n}\r\n\r\n.arrow {\r\n    stroke-width: 1;\r\n}\r\n\r\n#centroid-line {\r\n    stroke-width: 1;\r\n    stroke: #e7298a;\r\n}\r\n\r\n#centroid-arrow {\r\n    fill: #e7298a;\r\n}\r\n\r\n.metadata-swatch {\r\n    width: 30px;\r\n    height: 30px;\r\n    border-radius: 3px;\r\n    border: 2px solid #666;\r\n}\r\n\r\n.metadata-swatch-clickable:hover {\r\n    border: 2px solid #000;\r\n    cursor: pointer;\r\n}\r\n\r\n.dropdown-menu {\r\n    min-width: 40px;\r\n    padding: 5px;\r\n}\r\n\r\n.metadata-legend {\r\n    list-style: none;\r\n    margin-top: 10px;\r\n}\r\n\r\n.metadata-legend li {\r\n    float: left;\r\n    margin-right: 10px;\r\n}\r\n\r\n.metadata-legend span {\r\n    border: 2px solid #666;\r\n    float: left;\r\n    width: 30px;\r\n    height: 30px;\r\n}\r\n\r\n.metadata-legend .bl-avg {\r\n    background-color: #7fc97f;\r\n}\r\n\r\n.metadata-legend .avg {\r\n    background-color: #fdc086;\r\n}\r\n\r\n.metadata-legend .ab-avg {\r\n    background-color: #386cb0;\r\n}\r\n\r\n.network-edges {\r\n    fill-opacity: 0;\r\n    stroke-width: 2;\r\n}\r\n\r\n.network-background-edges {\r\n    fill-opacity: 0;\r\n    stroke-opacity: 0.25;\r\n    stroke: #737373;\r\n}\r\n\r\n.node text {\r\n    font: 12px sans-serif;\r\n}\r\n\r\n.node--internal text {\r\n    text-shadow: 0 1px 0 #fff, 0 -1px 0 #fff, 1px 0 0 #fff, -1px 0 0 #fff;\r\n}\r\n\r\n.link {\r\n    fill: none;\r\n    stroke: #636363;\r\n    stroke-width: 5px;\r\n}\r\n\r\n#active-network-name {\r\n    font-weight: bold;\r\n    color: #296292;\r\n}\r\n\r\n.active-level {\r\n    fill: #386cb0;\r\n}\r\n\r\n#dendrogram-panel {\r\n    position: initial;\r\n}\r\n\r\n#dendrogram-panel {\r\n    display: none\r\n}\r\n\r\n.show-dendrogram {\r\n    float: right;\r\n    border-radius: 3px;\r\n    border: 1px solid #D1D3D4;\r\n    font-weight: normal;\r\n}\r\n\r\n.show-dendrogram:hover {\r\n    background: #D1D3D4;\r\n}\r\n\r\n.dendrogram-text {\r\n    font-size: 10em !important;\r\n}\r\n\r\n.highlight-hierarchy {\r\n    fill: #252525;\r\n    stroke: #252525;\r\n    stroke-width: 10;\r\n    stroke-linejoin: round;\r\n    opacity: 0.3;\r\n}\r\n\r\n.animal-highlight {\r\n    fill: #c51b7d !important;\r\n}\r\n\r\n#dendrogram-buttons-div .btn span.glyphicon {\r\n    opacity: 0;\r\n}\r\n\r\n#dendrogram-buttons-div .btn.active span.glyphicon {\r\n    opacity: 1;\r\n}\r\n\r\n#dendrogram-buttons-div {\r\n    border: 2px solid #D1D3D4;\r\n    border-radius: 5px;\r\n}\r\n\r\n#dendrogram-legend {\r\n    margin-left: 20px;\r\n}\r\n\r\n.intersection {\r\n    fill: url(#striped) !important;\r\n    stroke: #67000d;\r\n}\r\n\r\n.sym-difference {\r\n    fill: url(#striped) !important;\r\n    stroke: #67000d;\r\n}\r\n\r\n.modal-lg {\r\n    max-width: 80%;\r\n}\r\n\r\n.background-image {\r\n    background: #fff;\r\n}",""]),t.exports=e},function(t,e,n){"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=function(t,e){var n=t[1]||"",r=t[3];if(!r)return n;if(e&&"function"==typeof btoa){var a=(o=r,s=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(l," */")),i=r.sources.map((function(t){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(t," */")}));return[n].concat(i).concat([a]).join("\n")}var o,s,l;return[n].join("\n")}(e,t);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,r){"string"==typeof t&&(t=[[null,t,""]]);var a={};if(r)for(var i=0;i<this.length;i++){var o=this[i][0];null!=o&&(a[o]=!0)}for(var s=0;s<t.length;s++){var l=[].concat(t[s]);r&&a[l[0]]||(n&&(l[2]?l[2]="".concat(n," and ").concat(l[2]):l[2]=n),e.push(l))}},e}},function(t,e,n){var r,a,i={},o=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===a&&(a=r.apply(this,arguments)),a}),s=function(t){return document.querySelector(t)},l=function(t){var e={};return function(t){if("function"==typeof t)return t();if(void 0===e[t]){var n=s.call(this,t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}}(),d=null,c=0,h=[],p=n(5);function u(t,e){for(var n=0;n<t.length;n++){var r=t[n],a=i[r.id];if(a){a.refs++;for(var o=0;o<a.parts.length;o++)a.parts[o](r.parts[o]);for(;o<r.parts.length;o++)a.parts.push(b(r.parts[o],e))}else{var s=[];for(o=0;o<r.parts.length;o++)s.push(b(r.parts[o],e));i[r.id]={id:r.id,refs:1,parts:s}}}}function f(t,e){for(var n=[],r={},a=0;a<t.length;a++){var i=t[a],o=e.base?i[0]+e.base:i[0],s={css:i[1],media:i[2],sourceMap:i[3]};r[o]?r[o].parts.push(s):n.push(r[o]={id:o,parts:[s]})}return n}function m(t,e){var n=l(t.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=h[h.length-1];if("top"===t.insertAt)r?r.nextSibling?n.insertBefore(e,r.nextSibling):n.appendChild(e):n.insertBefore(e,n.firstChild),h.push(e);else if("bottom"===t.insertAt)n.appendChild(e);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var a=l(t.insertInto+" "+t.insertAt.before);n.insertBefore(e,a)}}function g(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var e=h.indexOf(t);e>=0&&h.splice(e,1)}function v(t){var e=document.createElement("style");return void 0===t.attrs.type&&(t.attrs.type="text/css"),x(e,t.attrs),m(t,e),e}function x(t,e){Object.keys(e).forEach((function(n){t.setAttribute(n,e[n])}))}function b(t,e){var n,r,a,i;if(e.transform&&t.css){if(!(i=e.transform(t.css)))return function(){};t.css=i}if(e.singleton){var o=c++;n=d||(d=v(e)),r=w.bind(null,n,o,!1),a=w.bind(null,n,o,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(t){var e=document.createElement("link");return void 0===t.attrs.type&&(t.attrs.type="text/css"),t.attrs.rel="stylesheet",x(e,t.attrs),m(t,e),e}(e),r=T.bind(null,n,e),a=function(){g(n),n.href&&URL.revokeObjectURL(n.href)}):(n=v(e),r=$.bind(null,n),a=function(){g(n)});return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else a()}}t.exports=function(t,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=o()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var n=f(t,e);return u(n,e),function(t){for(var r=[],a=0;a<n.length;a++){var o=n[a];(s=i[o.id]).refs--,r.push(s)}t&&u(f(t,e),e);for(a=0;a<r.length;a++){var s;if(0===(s=r[a]).refs){for(var l=0;l<s.parts.length;l++)s.parts[l]();delete i[s.id]}}}};var y,k=(y=[],function(t,e){return y[t]=e,y.filter(Boolean).join("\n")});function w(t,e,n,r){var a=n?"":r.css;if(t.styleSheet)t.styleSheet.cssText=k(e,a);else{var i=document.createTextNode(a),o=t.childNodes;o[e]&&t.removeChild(o[e]),o.length?t.insertBefore(i,o[e]):t.appendChild(i)}}function $(t,e){var n=e.css,r=e.media;if(r&&t.setAttribute("media",r),t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}function T(t,e,n){var r=n.css,a=n.sourceMap,i=void 0===e.convertToAbsoluteUrls&&a;(e.convertToAbsoluteUrls||i)&&(r=p(r)),a&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */");var o=new Blob([r],{type:"text/css"}),s=t.href;t.href=URL.createObjectURL(o),s&&URL.revokeObjectURL(s)}},function(t,e){t.exports=function(t){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var n=e.protocol+"//"+e.host,r=n+e.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,(function(t,e){var a,i=e.trim().replace(/^"(.*)"$/,(function(t,e){return e})).replace(/^'(.*)'$/,(function(t,e){return e}));return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?t:(a=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(a)+")")}))}},function(t,e,n){"use strict";let r,a;function i(){let t=v,e=j;for(var n=d3.event.selection,r=0;r<ht.length;r++){var a=[t[r].p[0],t[r].p[1]];n[0][0]<=a[0]&&a[0]<=n[1][0]&&n[0][1]<=a[1]&&a[1]<=n[1][1]&&e.push(t[r].a)}B(e),$("#play-button").hasClass("active")||(D(),(void 0)()),$("#brushing-button").removeClass("active"),$(".brush").remove()}n.r(e),n.d(e,"dataset",(function(){return it})),n.d(e,"datasetMetadata",(function(){return ot})),n.d(e,"swarmData",(function(){return st})),n.d(e,"dataSetPercentile",(function(){return lt})),n.d(e,"networkData",(function(){return dt})),n.d(e,"networkHierarchy",(function(){return ct})),n.d(e,"animalIds",(function(){return ht})),n.d(e,"addToDataset",(function(){return pt})),n.d(e,"setDataSetPercentile",(function(){return ut})),n.d(e,"setMetaData",(function(){return ft})),n.d(e,"setSwarmData",(function(){return mt})),n.d(e,"setDatasetFeature",(function(){return gt})),n.d(e,"setNetworkData",(function(){return vt})),n.d(e,"setHierarchyData",(function(){return xt})),n.d(e,"setAnimalIds",(function(){return bt}));let o,s={type:"Linear",color:colorbrewer.BuYlBu};function l(){return"Linear"===s.type?d3.scaleLinear().domain(lt[A]).range(s.color):"Threshold"===s.type?d3.scaleThreshold().domain(lt[A]).range(s.color):void 0}function d(){d3.select(".colors-body").selectAll(".palette").data(d3.entries(colorbrewer)).enter().append("span").attr("class","palette").attr("title",(function(t){return t.key})).on("click",(function(t){$(".palette").removeClass("selected"),$('.palette[title="'+t.key+'"]').addClass("selected"),s.color=colorbrewer[t.key],function(){let t,e;if($("#main-vis-legend-div").show(),"black"!==A){var n=l();t=o.selectAll("rect.legend").data(n.range()),e=o.selectAll("text.legend-text").data(n.domain())}else t=o.selectAll("rect.legend").data([]),e=o.selectAll("text.legend-text").data([]),$("#main-vis-legend-div").hide();t.style("fill",(function(t){return t})),t.enter().append("rect").attr("class","legend").attr("width",50).attr("height",20).attr("y",0).attr("x",(function(t,e){return 50+50*e+"px"})).style("fill",(function(t){return t})),t.exit().remove(),e.text((function(t){return Math.ceil(2*t)/2})),e.enter().append("text").attr("class","legend-text").attr("y",40).attr("x",(function(t,e){return 50+50*e+5+"px"})).text((function(t){return Math.ceil(2*t)/2})),e.exit().remove()}(),$("#play-button").hasClass("active")||(D(),(void 0)())})).selectAll(".swatch").data((function(t){return t.value})).enter().append("span").attr("class","swatch").style("background-color",(function(t){return t})),$('.palette[title="BuYlBu"]').addClass("selected")}let c={};var h=n(0);let p=!0;function u(t){p="boolean"==typeof t&&t}function f(){u(!1),$("#play-button").removeClass("active"),$("#play-button").prop("disabled",!0),$("#play-icons").hide(),$("#play-loading").show()}function m(){u(!0),$("#play-button").addClass("active"),$("#play-button").prop("disabled",!1),$("#play-loading").hide(),$("#play-icons").show(),(void 0)()}function g(){$(".draw-details").click((function(){$(this).find("input:checkbox").prop("checked")?new(void 0)(this,st).disableLineChart():($(".trendChartData").hide(),$("#trendChartLegend").hide(),$("#lineChartLegend").show(),$(".lineChartButton").prop("checked",!0).prop("disabled",!1),$(".line-chart-check-box").attr("disabled",!1),$(".lineChartLine").attr("visibility","visible"))}))}String.prototype.hashCode=function(){var t,e=0;if(0===this.length)return e;for(t=0;t<this.length;t++)e=(e<<5)-e+this.charCodeAt(t),e|=0;return e},d3.selection.prototype.moveToBack=function(){return this.each((function(){var t=this.parentNode.firstChild;t&&this.parentNode.insertBefore(this,t)}))};let v,x,b,y,k,w,T,C,L,A="black",j=[],_={},S=1;class M{constructor(){this.indexTime=0,this.svgContainer=d3.select("#main-vis"),this.zoom=d3.zoom().scaleExtent([1,6]).on("zoom",()=>{d3.event.transform.x=Math.min(0,this.tankWidth*(d3.event.transform.k-1),Math.max(this.tankWidth*(1-d3.event.transform.k),d3.event.transform.x)),d3.event.transform.y=Math.min(0,this.tankHeight*(d3.event.transform.k-1),Math.max(this.tankHeight*(1-d3.event.transform.k),d3.event.transform.y)),this.zoomGroup.attr("transform",d3.event.transform),gXaxis.call(xAxis.scale(d3.event.transform.rescaleX(y))),gYaxis.call(yAxis.scale(d3.event.transform.rescaleY(k)))}),this.zoomGroup=this.svgContainer.append("svg:g"),this.tank=this.zoomGroup.append("svg:g").attr("class","tank").attr("transform",()=>"scale("+(parameters.inverted_x?-1:1)+","+(parameters.inverted_y?-1:1)+")"),this.activeScale="black",this.medoidAnimal=-1,this.activeAnimals=[],this.arrayAnimals=0,this.id=$(".show-dendrogram.btn-primary").attr("data"),this.playBoolean=!0}setIndexTime(t){"number"==typeof t&&this.indexTime<=st.length?this.indexTime=t:this.indexTime=0}updateLineChart(){if(d3.select("#lineChartTimeLine")&&st[Math.ceil(this.indexTime/S)]){let t=Math.ceil(this.indexTime/S);this.indexTime%25==0&&(d3.select("#convex_hull_areaLineValue").text(st[t].convex_hull_area+"mm²"),d3.select("#speedLineValue").text(st[t].speed+"mm/s"),d3.select("#accelerationLineValue").text(st[t].acceleration+"mm/s²"),d3.select("#distance_centroidLineValue").text(st[t].distance_centroid+"mm"),d3.select("#directionLineValue").text(st[t].direction+"°"),d3.select("#polarisationLineValue").text(st[t].polarisation)),d3.select("#lineChartTimeLine").attr("transform","translate("+w(t)+",0)")}}draw(){let t=$('input[type="radio"].group-playback-rate:checked').val(),e=$('input[type="radio"].group-size:checked').val();v=it.filter(t=>t.t===this.indexTime),setTimeout(()=>{var t;this.drawDendrogram(),this.svgContainer.select(".frame-text").text(Math.floor(this.indexTime/1500)%60+":"+Math.floor(this.indexTime/parameters.fps)%60+"::"+this.indexTime%parameters.fps),this.indexTime%parameters.fps==0&&(t=this.indexTime,r.slider("value",t));let n,i=this.tank.selectAll("g.animal").data(v);if(this.indexTime in dt){let t=dt[this.indexTime];if(R={},t=t.map((function(t){let e=v.filter((function(e){return e.a===t.s}))[0],n=v.filter((function(e){return e.a===t.e}))[0];return{node1:e.a,node2:n.a,start:e.p,end:n.p,val:t.v}})),t.forEach((function(t){$("#mc-"+t.node1+"-"+t.node2).css("fill",q(t.val)),$("#mc-"+t.node2+"-"+t.node1).css("fill",q(t.val))})),F){let e=[];for(let n=0;n<t.length;n++)e.push(t[n].val);K(function(t){if(0===t.length)return 0;t.sort((function(t,e){return t-e}));let e=.05*(t.length-1),n=Math.floor(e),r=n+1,a=e%1;return r>=t.length?1-t[n]:1-(t[n]*(1-a)+t[r]*a)}(e))}t=t.filter((function(t){return t.val<=1-J})),n=this.tank.select("#network-group").selectAll("line.network-edges").data(t),n.attr("x1",(function(t){return t.start[0]})).attr("y1",(function(t){return-t.start[1]})).attr("x2",(function(t){return t.end[0]})).attr("y2",(function(t){return-t.end[1]})).attr("stroke",(function(t){return q(1-t.val)})).attr("stroke-opacity",(function(t){return 1-t.val})),n.enter().append("line").attr("class","network-edges").attr("x1",(function(t){return t.start[0]})).attr("y1",(function(t){return-t.start[1]})).attr("x2",(function(t){return t.end[0]})).attr("y2",(function(t){return-t.end[1]})).attr("stroke",(function(t){return q(t.val)})).attr("stroke-opacity",(function(t){return t.val}))}else n=this.tank.selectAll("line.network-edges").data([]);var o,s;n.exit().remove(),$("#draw-triangulation").is(":checked")?((o=this.tank.select("#delaunay-triangulation-group").selectAll("path.delaunay-triangulation").data([st[this.indexTime].triangulation])).attr("d",t=>t),o.enter().append("path").attr("class","delaunay-triangulation").attr("d",t=>t)):o=this.tank.selectAll("path.delaunay-triangulation").data([]),o.exit().remove(),$("#draw-voronoi").is(":checked")?(console.log(this.indexTime),console.log(st[0]),(s=this.tank.select("#vornoi-group").selectAll("path.voronoi").data(st[this.indexTime].voronoi.split(" "))).attr("d",t=>t),s.enter().append("path").attr("class","voronoi").attr("d",t=>t)):s=this.tank.select("#vornoi-group").selectAll("path.voronoi").data([]),s.exit().remove();let d=i.enter().append("g").attr("class","animal").attr("id",t=>"animal-"+t.a);if(d.append("circle").attr("r",1.5*e).attr("cx",t=>t.p[0]).attr("cy",t=>-t.p[1]).on("mouseover",t=>{!function(t){for(let e=0;e<ot.length;e++)t.a===ot[e].animal_id&&(a.style("left",d3.event.pageX+5+"px").style("top",d3.event.pageY-100+"px").style("opacity",1),a.select("#tooltip-animal-id").html(ot[e].animal_id),a.select("#tooltip-species").html(ot[e].species),a.select("#tooltip-sex").html(ot[e].sex),a.select("#tooltip-size").html(ot[e].size),a.select("#tooltip-weight").html(ot[e].weight))}(t)}).on("mouseout",()=>{a.transition().duration(500).style("opacity",0)}).on("click",t=>{this.activeAnimals.includes(t.a)?this.activeAnimals=this.activeAnimals.filter(e=>e!==t.a):this.activeAnimals.push(t.a),$("#play-button").hasClass("active")||(this.indexTime--,this.draw())}),i.select("circle").attr("cx",t=>t.p[0]).attr("cy",t=>-t.p[1]).attr("r",e),d.append("svg:defs").append("svg:marker").attr("id",t=>"arrow-marker-"+t.a).attr("refX",2).attr("refY",6).attr("markerWidth",13).attr("markerHeight",13).attr("orient","auto").append("svg:path").attr("d","M2,2 L2,11 L10,6 L2,2"),d.append("line").attr("class","arrow").attr("marker-end",t=>"url(#arrow-marker-"+t.a+")"),$("#draw-direction").is(":checked")?i.select("line").attr("x1",t=>t.p[0]).attr("y1",t=>-t.p[1]).attr("x2",t=>t.p[0]+2*e).attr("y2",t=>-t.p[1]).attr("transform",t=>"rotate("+-t.direction+" "+t.p[0]+" "+-t.p[1]+")"):$(".arrow").hide(),i.exit().remove(),$("#draw-convex-hull").is(":checked")){var p=this.tank.selectAll("path.hull-path").data([st[this.indexTime].convex_hull]);p.attr("d",t=>t),p.enter().append("path").attr("class","hull-path").attr("d",t=>t)}else p=this.tank.select("path.hull-path").data([]);if(p.exit().remove(),"black"!==this.activeScale){var u=l();i.transition().duration(10).style("fill",(function(t){return u(t[this.activeScale])})).attr("stroke",(function(t){return u(t[this.activeScale])}))}else i.style("fill","#000").attr("stroke","#000"),$.isEmptyObject(c)||Object.keys(c).forEach((function(t){d3.select("#animal-"+t).style("fill",c[t]).attr("stroke",c[t])}));this.activeAnimals.length?(i.style("opacity",(function(t){return this.activeAnimals.includes(t.a)?1:.25})),$("#remove-active-selected-button").is(":disabled")&&($("#remove-active-selected-button").prop("disabled",!1),$("#visual-parameter-button").prop("disabled",!1)),h.trackingBoolean&&Object(h.addTrackedData)(v[0].t,this.activeAnimals)):($("#remove-active-selected-button").is(":disabled")||($("#remove-active-selected-button").prop("disabled",!0),$("#visual-parameter-button").prop("disabled",!0)),i.style("opacity",1)),d3.select(".centroid").attr("cx",()=>"centroid"in st[0]?st[this.indexTime].centroid[0]:0).attr("cy",()=>"centroid"in st[0]?-st[this.indexTime].centroid[1]:0),$("#draw-direction").is(":checked")&&st[this.indexTime].centroid&&$("#draw-centroid").is(":checked")?(d3.select("#centroid-line").classed("hidden",!1),d3.select("#centroid-line").attr("x1",()=>st[this.indexTime].centroid[0]).attr("y1",()=>-st[this.indexTime].centroid[1]).attr("x2",()=>st[this.indexTime].centroid[0]+2*e).attr("y2",()=>-st[this.indexTime].centroid[1]).attr("transform",()=>"rotate("+-st[this.indexTime].direction+" "+st[this.indexTime].centroid[0]+" "+-st[this.indexTime].centroid[1]+")")):d3.select("#centroid-line").attr("class","hidden"),-1!==this.medoidAnimal&&(d3.selectAll("#animal-"+this.medoidAnimal).classed("medoid",!1),this.medoidAnimal=st[this.indexTime].medoid,d3.selectAll("#animal-"+this.medoidAnimal).classed("medoid",!0)),this.indexTime++,this.updateLineChart(),this.indexTime>=st.length?(this.indexTime=0,this.draw()):this.playBoolean&&this.draw()},t)}drawDendrogram(){if(!$.isEmptyObject(void 0)&&this.id){let e=(void 0)["h"+this.id][this.indexTime],n=d3.hierarchy(e,(function(t){return t.children}));if(n=n.children[0],n.children.forEach(collapse),n=treemap(n),console.log(n),$(".show-dendrogram.btn-primary").length){$("#dendrogram-panel-level-slider").slider("option","max",n.height-1).slider("value",hierarchyLevels["h"+this.id]);let e=this.zoomGroup.selectAll("path.link").data(n.descendants().slice(1));e.enter().append("path").attr("class","link").attr("d",diagonalLines),e.attr("d",diagonalLines),e.exit().remove();let r=this.zoomGroup.selectAll(".node").data(n.descendants());var t=r.enter().append("g").attr("class",(function(t){return"node"+(t.children?" node--internal":" node--leaf")})).attr("transform",(function(t){return"translate("+t.x+","+t.y+")"}));t.append("circle").attr("r",t=>t.depth===hierarchyLevels["h"+this.id]?40+t.data.name.length:20+t.data.name.length).attr("class",t=>{if(t.depth===hierarchyLevels["h"+this.id])return"active-level"}).attr("id",t=>"h"+t.data.name.toString().hashCode()).on("click",click).on("mouseover",(function(t){tooltipDiv.style("left",d3.event.pageX+5+"px").style("top",d3.event.pageY+5+"px").style("opacity",1),tooltipDiv.select(".tooltip-span").html(t.data.name.toString()),addHighlightSpatialView(t.data.name)})).on("mouseout",(function(){tooltipDiv.transition().duration(500).style("opacity",0),removeHighlightSpatialView()})),t.append("text").attr("class","dendrogram-text").attr("x",150).attr("y",-150).text(t=>t.data.name.length),t.attr("transform",t=>"translate("+t.x+","+t.y+")"),r.attr("transform",t=>"translate("+t.x+","+t.y+")").select("circle").attr("r",t=>t.depth===hierarchyLevels["h"+this.id]?40+t.data.name.length:20+t.data.name.length).attr("class",t=>t.depth===hierarchyLevels["h"+this.id]?"active-level":"").attr("id",t=>"h"+t.data.name.toString().hashCode()),r.select("text").text(t=>t.data.name.length),r.exit().remove(),Object.keys(hierarchyGroupStdev).length?("none"==$("#dendrogram-legend").css("display")&&$("#dendrogram-legend").show(),setTimeout(()=>{r.select("circle").style("fill",(function(t){return"h"+t.data.name.toString().hashCode()in hierarchyGroupStdev?standardDeviationColorScale(standardDeviation(hierarchyGroupStdev["h"+t.data.name.toString().hashCode()])):t.depth!==hierarchyLevels["h"+this.id]?"":"#000"}))},250)):"none"!==$("#dendrogram-legend").css("display")&&$("#dendrogram-legend").hide()}}$.isEmptyObject(void 0)||function(){let t=Object.keys(ct).map((function(t){return t.replace("h","")})),e=[];for(let n=0;n<t.length;n++){let r=ct["h"+t[n]][void 0],a=d3.hierarchy(r,(function(t){return t.children}));a=T(a);let i=a.children[0];X===t[n]&&(U=N(i,t[n])),e.push(P(N(i,t[n])))}e.length;let n=C.selectAll("g.hierarchy-group").data(e);n.enter().append("g").attr("class",(function(e,n){return"intersection"===I?"hierarchy-group intersection":"sym-difference"===I?"hierarchy-group sym-difference":"hierarchy-group h"+t[n]})).style("fill",(function(e,n){return G["h"+t[n]]})).attr("stroke",(function(e,n){return G["h"+t[n]]})).moveToBack(),n.attr("class",(function(e,n){return"intersection"===I?"hierarchy-group intersection":"sym-difference"===I?"hierarchy-group sym-difference":"hierarchy-group h"+t[n]})),n.exit().remove();let r=n.selectAll("path.hierarchy-hull-path").data((function(t){return t}));r.enter().append("path").attr("class","hierarchy-hull-path").attr("d",(function(t){return"M"+t.join("L")+"Z"})),r.attr("d",(function(t){return"M"+t.join("L")+"Z"})),r.exit().remove()}()}decindexTime(){this.indexTime=this.indexTime-1}}class O extends M{constructor(t){super(t),this.spatialViewInit()}spatialViewInit(){let t=parameters.min.geometry.coordinates,e=parameters.max.geometry.coordinates;this.tankWidth=1.02*(e[0]-t[0]),this.tankHeight=1.02*(e[1]-t[1]);let n=d3.scaleLinear().domain([t[0],e[0]]).range([t[0],e[0]]),i=d3.axisBottom(n).ticks(10).tickSize(10).tickPadding(5),s=d3.scaleLinear().domain([t[1],e[1]]).range([t[1],e[1]]),l=d3.axisRight(s).ticks(7).tickSize(10).tickPadding(5),c=d3.zoom().scaleExtent([1,6]).on("zoom",()=>{d3.event.transform.x=Math.min(0,this.tankWidth*(d3.event.transform.k-1),Math.max(this.tankWidth*(1-d3.event.transform.k),d3.event.transform.x)),d3.event.transform.y=Math.min(0,this.tankHeight*(d3.event.transform.k-1),Math.max(this.tankHeight*(1-d3.event.transform.k),d3.event.transform.y)),this.zoomGroup.attr("transform",d3.event.transform),p.call(i.scale(d3.event.transform.rescaleX(n))),u.call(l.scale(d3.event.transform.rescaleY(s)))});this.svgContainer=d3.select("#main-vis").classed("svg-container",!0).append("svg").attr("preserveAspectRatio","xMinYMin meet").attr("viewBox","0 0 "+this.tankWidth+" "+this.tankHeight).classed("svg-content",!0).attr("id","main-vis-svg").call(c);let h=Math.ceil(this.tankHeight/this.tankWidth*100);$("#main-vis").append($("<style>#main-vis::after {padding-top: "+h+'%;display: block;content: "";}</style> ')),this.zoomGroup=this.svgContainer.append("svg:g"),parameters.background_image&&this.zoomGroup.append("image").attr("xlink:href","/"+parameters.background_image).attr("class","background-image").attr("height",this.tankHeight).attr("width",this.tankWidth).attr("x","0").attr("y","0"),this.tank=this.zoomGroup.append("svg:g").attr("class","tank").attr("transform",(function(){return"scale("+(parameters.inverted_x?-1:1)+","+(parameters.inverted_y?-1:1)+")"})),this.tank.append("g").attr("id","g-centroid").append("circle").attr("class","centroid").attr("r",6).attr("cx",0).attr("cy",0),this.tank.select("#g-centroid").append("svg:defs").append("svg:marker").attr("id","centroid-arrow").attr("refX",2).attr("refY",6).attr("markerWidth",13).attr("markerHeight",13).attr("orient","auto").append("svg:path").attr("d","M2,2 L2,11 L10,6 L2,2"),this.tank.select("#g-centroid").append("line").attr("id","centroid-line").attr("marker-end","url(#centroid-arrow)"),this.tank.append("g").attr("id","network-group"),this.tank.append("g").attr("id","delaunay-triangulation-group"),this.tank.append("g").attr("id","vornoi-group"),this.svgContainer.append("text").attr("class","frame-text").attr("x",30).attr("y",30).text("-- : -- : -- ");let p=this.svgContainer.append("g").attr("class","x axis").call(i),u=this.svgContainer.append("g").attr("class","y axis").call(l);a=d3.select("div.tooltip").style("left","0px").style("top","0px").on("mouseover",(function(){a.style("opacity",1)})),function(){r=$("#slider").slider({min:0,max:st.length,step:25,slide:function(t,e){(void 0)(e.value),$("#play-button").hasClass("active")||(void 0)()}}),$("#network-slider").slider({range:"max",min:0,max:1,step:.01,value:.5,slide:function(t,e){K(e.value),$("#network-limit").val(e.value)}}),$("#network-limit").val(.5);let t=r.slider("option","max"),e=100/t;for(let n=0;n<t;n+=1500)$('<span class="ui-slider-tick"></span>').css("left",e*n+"%").appendTo(r)}(),o=d3.select("#main-vis-legend-div").append("svg").attr("id","main-vis-legend").attr("width",550).attr("height",60),d();var f,m;new z(st);this.cp_listener(),this.sf_listeners(),f=this.tankHeight,m=this.tankWidth,$((function(){$("#main-vis").draggable({containment:"parent"}).resizable({aspectRatio:!0,maxWidth:$("#main-vis-div").width()}).height(.6*f).width(.6*m)})),$("input[type=checkbox]").prop("checked",!1),$("#color-scale-linear").prop("checked",!0),$("#group-size-m").prop("checked",!0),$("#background-white").prop("checked",!0),$("#settings-div input[type=checkbox]").prop("checked",!0),$("#loading").hide(),$("#play-loading").hide(),$(".mdi-play").hide(),$("#metadata-input").hide(),$("#dendrogram-buttons-div").hide(),$("#g-centroid").hide(),$("#line-chart-feature-checkboxes input[type=checkbox]").prop("checked",!0),this.draw()}setMedoidAnimal(t){this.medoidAnimal=t}cp_listener(){$("#play-button").click(()=>{!0===$("#play-button").hasClass("active")?(this.playBoolean=!1,$(".mdi-pause").hide(),$(".mdi-play").show()):(this.playBoolean=!0,$(".mdi-play").hide(),$(".mdi-pause").show(),this.setIndexTime(r.slider("value")),$(".brush").remove(),this.draw())}),$("#next-frame-button").click(()=>{!0===$("#play-button").hasClass("active")&&(this.playBoolean=!1),$("#play-button").removeClass("active"),this.draw()}),$("#brushing-button").click(()=>{this.playBoolean=!1,$("#play-button").removeClass("active"),$("#brushing-button").hasClass("active")?$(".brush").remove():(x=d3.brush().extent([[0,0],[this.tankWidth,this.tankHeight]]).on("end",i),d3.select("#main-vis-svg").append("g").attr("class","brush").call(x))}),$("#remove-active-selected-button").click(()=>{$("#remove-active-selected-button").is(":disabled")||($("#remove-active-selected-button").prop("disabled",!0),B([]),resetTrackedData(),$("#visual-parameter-button").prop("disabled",!0).removeClass("active"),$("#play-button").hasClass("active")||(this.decIndexTime(),this.draw()))}),$("#visual-parameter-button").click(()=>{!0===$("#visual-parameter-button").hasClass("active")?setTrackingBoolean(!1):setTrackingBoolean(!0)}),$("#calculate-parameter-button").click(()=>{$("#calculate-parameter-button").hasClass("active")||(setTrackingBoolean(!1),sendTrackedData(),$("#calculate-parameter-button").prop("disabled",!0),$("#calculate-parameter-button").removeClass("active"),$("#visual-parameter-button").removeClass("active"))}),$("#background-color").change((function(){let t=$('input[type="radio"].group-background:checked').val();$("#main-vis-svg").css("background-color",t)})),$("#draw-axis").on("change",(function(){this.checked?($("#main-vis g.x.axis").show(),$("#main-vis g.y.axis").show()):($("#main-vis g.x.axis").hide(),$("#main-vis g.y.axis").hide())})),$("#draw-time").on("change",(function(){this.checked?$("#main-vis .frame-text").show():$("#main-vis .frame-text").hide()})),$("#network-background").on("change",(function(){this.checked?setNetworkBackground(!0):setNetworkBackground(!1)})),$("#network-background-limit").val(1),$("#network-background-limit").on("change",(function(){let t=$(this).val();$.isNumeric(t)&&t>0?setNetworkBackgroundLimit(t):$(this).val(1)})),$("#color-scale-radio-form input").on("change",(function(){colorScale.type=$("input[name=color-scale-radio]:checked","#color-scale-radio-form").val(),$("#play-button").hasClass("active")||(this.decIndexTime(),this.draw())}))}sf_listeners(){$("#draw-direction").click(()=>{$("#draw-direction").is(":checked")?("direction"in it[0]||(f(),rt("direction")),$(".arrow").show()):$(".arrow").hide(),$("#play-button").hasClass("active")}),$("#draw-medoid").click(()=>{$("#draw-medoid").is(":checked")?("medoid"in st[0]||at("medoid"),this.setMedoidAnimal(st[this.indexTime].medoid),d3.selectAll("#animal-"+this.medoidAnimal).classed("medoid",!0)):(d3.selectAll("#animal-"+this.medoidAnimal).classed("medoid",!1),this.setMedoidAnimal(-1))}),$("#draw-centroid").click(()=>{$("#draw-centroid").is(":checked")?("centroid"in st[0]||at("centroid"),$("#g-centroid").show()):$("#g-centroid").hide()}),$("#draw-convex-hull").click(()=>{$("#draw-convex-hull").is(":checked")&&("hull"in st[0]||at("convex_hull"))}),$("#draw-triangulation").click(()=>{$("#draw-triangulation").is(":checked")&&("triangulation"in st[0]||at("triangulation"),$("#play-button").hasClass("active")||(this.decIndexTime(),this.draw()))}),$("#draw-voronoi").click(()=>{$("#draw-voronoi").is(":checked")&&("voronoi"in st[0]||at("voronoi"),$("#play-button").hasClass("active")||(this.decIndexTime(),this.draw()))})}}class E extends M{constructor(t){super(),this.swarmData=t,this.swarm_features=Object.keys(this.swarmData[0]),this.lineChartWidth=5e3,this.trendChartsElem=["lower-outer-area","lower-inner-area","median-line","upper-inner-area","upper-outer-area"]}}class z extends E{constructor(t){super(t),this.lineChart()}lineChart(){S=Math.ceil(this.swarmData.length/this.lineChartWidth);let t=100,e=10,n=this.swarm_features,r=n.indexOf("time");n.splice(r,1);let a=[];if(this.swarmData.length>this.lineChartWidth){let t=new Array(n.length).fill(0);for(let e=0;e<this.swarmData.length;e++){for(let r=0;r<n.length;r++)t[r]+=this.swarmData[e][n[r]];if(e%S==0){let r={time:e/S};for(let e=0;e<n.length;e++)t[e]=t[e]/S,r[n[e]]=t[e];a.push(r),t=new Array(n.length).fill(0)}}}else a=this.swarmData;w=d3.scaleLinear().domain([0,a.length]).range([0,this.lineChartWidth]),y=d3.scaleLinear().domain([0,a.length]).range([0,this.lineChartWidth]);let i=d3.scaleLinear().domain([0,a.length]).range([0,this.lineChartWidth]),o=d3.axisBottom(y).ticks(10).tickSize(10).tickPadding(5).tickFormat((function(t){return Math.floor(t*S/1500)%60+":"+Math.floor(t*S/parameters.fps)%60+"::"+t*S%parameters.fps}));k=d3.scaleLinear().domain([0,100]).range([500,0]);let s=d3.axisLeft(k).ticks(0).tickSize(10).tickPadding(5),l=function(){let t=d3.mouse(this);if(t[0]<e||t[0]>this.lineChartWidth||t[1]<0||t[1]>500)return;let n=d3.scaleLinear().domain(w.range()).range(w.domain());this.setIndexTime(Math.floor(n(t[0]-e)*S))},d=d3.zoom().scaleExtent([1,20]).translateExtent([[0,0],[this.lineChartWidth,500]]).extent([[0,0],[this.lineChartWidth,500]]).on("zoom",(function(){let t=d3.event.transform;w=y.domain(t.rescaleX(i).domain());for(let t in u)u.hasOwnProperty(t)&&b.select("#"+t+"Line").attr("d",u[t]);for(let t in _)if(_.hasOwnProperty(t))for(let e=0;e<this.trendChartsElem.length;e++)b.select("#"+t+"TrendChart ."+this.trendChartsElem[e]).attr("d",_[t][this.trendChartsElem[e]]);h.call(o)})),c=d3.select("#swarm-vis").classed("svg-line-chart-container",!0).append("svg").attr("preserveAspectRatio","xMinYMin meet").attr("viewBox","0 0 "+this.lineChartWidth+" "+(500+t)).classed("svg-content",!0);b=c.append("svg:g").attr("id","lineChartZoom").attr("transform","translate("+e+",0)");let h=b.append("g").attr("class","x axis-line-chart").attr("transform","translate(0,500)").call(o);b.append("g").attr("class","y axis-line-chart").call(s),b.append("line").attr("class","time-line").attr("id","lineChartTimeLine").attr("x1",0).attr("y1",0).attr("x2",0).attr("y2",500);let p=d3.scaleOrdinal(d3.schemeCategory10),u={};for(let t=0;t<n.length;t++){let e=d3.min(a,(function(e){return e[n[t]]})),r=d3.max(a,(function(e){return e[n[t]]})),i=d3.scaleLinear().domain([e,r]).range([0,100]),o=d3.line().x((function(t){return y(t.time)})).y((function(e){return k(i(e[n[t]]))}));u[n[t]]=o,b.append("path").data([a]).attr("id",n[t]+"Line").attr("class","line lineChartLine").style("stroke",p(t)).attr("d",o).attr("name",n[t])}$("#lineChartTimeLine").appendTo("#lineChartZoom"),b.append("rect").attr("class","zoom").attr("width",this.lineChartWidth).attr("height",500).call(d).on("click",l).call(d3.drag().on("drag",l));let f=d3.selectAll(".line");c.append("g").attr("id","lineChartLegend").attr("transform","translate("+t+",550)").selectAll("rect.legend").data(f._groups[0]).enter().each((function(t,e){d3.select(this).append("rect").attr("class","legend").attr("width",100).attr("height",50).attr("x",600*e+"px").style("fill",t.style.stroke),d3.select(this).append("text").attr("id",t.attributes.id.value+"LegendTitle").attr("class","line-chart-legend-text").attr("y",40).attr("x",600*e+100+10+"px").text(t.attributes.name.value+": "),d3.select(this).append("text").attr("id",t.attributes.id.value+"Value").attr("class","line-chart-legend-text").attr("y",40).attr("x",600*e+100+d3.select("#"+t.attributes.id.value+"LegendTitle").node().getComputedTextLength()+10+"px").text("0.0")})),c.append("g").attr("id","trendChartLegend").attr("transform","translate("+t+",550)").selectAll("rect.legend").data(["5% - 95%","25% - 75%","Median"]).enter().each((function(t,e){d3.select(this).append("rect").attr("class","legend").attr("width",100).attr("height",50).attr("x",800*e+"px").style("fill",(function(){return 0===e?"#74a9cf":1===e?"#045a8d":"#525252"})),d3.select(this).append("text").attr("class","line-chart-legend-text").attr("y",40).attr("x",800*e+100+10+"px").text(t)})),$("#trendChartLegend").hide(),this.initLineChartButtons()}initLineChartButtons(){for(let t=0;t<this.swarm_features.length;t++){let e=this.swarm_features[t].split("_").join(" ");e=e.charAt(0).toUpperCase()+e.slice(1),$("#line-chart-feature-checkboxes").append('<tr><th> <div class="pretty p-switch p-fill p-bigger"><input type="checkbox" class="line-chart-check-box" id="draw-'+this.swarm_features[t]+'" data="#'+this.swarm_features[t]+'Line" /><div class="state"><label>'+e+"</label></div></div></th></tr>")}$(".line-chart-check-box").change((function(){let t=$(this);t.prop("checked")?$(t.attr("data")).show():$(t.attr("data")).hide()}))}}function D(){indexTime-=1}function B(t){j=t}let W={},I="union";d3.scaleThreshold().domain([0,.1,.2,.3,.4,.5,.6,.7,.8,.9,1]).range(["#f7fbff","#deebf7","#c6dbef","#9ecae1","#6baed6","#4292c6","#2171b5","#08519c","#08306b"]);let U=[],G={},R={},H=["#7fc97f","#386cb0","#e7298a","#ff9900"];function N(t,e){let n=[],r=W["h"+e],a=t.children;for(let e=1;e<t.height;e++){if(a[0]&&a[0].depth===r){a.forEach((function(t){void 0!==t.data.name&&n.push(t.data.name)}));break}let t=[];a.forEach((function(e){void 0!==e.children&&(t=t.concat(e.children))})),a=t}return n}function P(t){let e=[];return t.forEach((function(t){let n=[];for(let e=0;e<t.length;e++){let r=v.find(n=>n.a===t[e]);r&&n.push([r.p[0],-r.p[1]])}n.length>=3&&e.push(d3.polygonHull(n))})),e}function V(t,e){W["h"+t]=e}function Y(){let t,e;0!==Object.keys(G).length||0!==Object.keys(Z).length?$("#hierarchy-legend-div").show():$("#hierarchy-legend-div").hide();let n=[],r=[];if($(".show-dendrogram").each((function(t,e){null!=G["h"+$(e).attr("data")]&&null!=$(e).attr("name")&&(n.push(G["h"+$(e).attr("data")]),r.push($(e).attr("name")))})),0!==Object.keys(Z).length)for(let t in Z)-1===n.indexOf(Z[t])&&(n.push(Z[t]),r.push("Network"));t=L.selectAll("rect.legend").data(n),e=L.selectAll("text.legend-text").data(r),t.style("fill",(function(t){return t})),t.enter().append("rect").attr("class","legend").attr("width",50).attr("height",20).attr("y",0).attr("x",(function(t,e){return 50+2.5*e*50+"px"})).style("fill",(function(t){return t})),t.exit().remove(),e.text((function(t){return t})),e.enter().append("text").attr("class","legend-text").attr("y",40).attr("x",(function(t,e){return 50+2.5*e*50+"px"})).text((function(t){return t})),e.exit().remove()}let X,F=!1,J=.5,Z={},q=d3.scaleThreshold().domain([0,.1,.2,.3,.4,.5,.6,.7,.8,.9,1]).range(["#f7fbff","#deebf7","#c6dbef","#9ecae1","#6baed6","#4292c6","#2171b5","#08519c","#08306b"]);function K(t){J=t}let Q="application/vnd.api+json";var tt;function et(){let t=[];$.ajax({url:"/api/percentile/"+parameters.id,dataType:"json",type:"GET",contentType:"application/json; charset=utf-8",headers:{Accept:Q},success:function(e){for(let n=0;n<e.length;n++)t[e[n].feature]=[e[n].min,e[n].p1,e[n].p2,e[n].p3,e[n].p5,e[n].p7,e[n].p8,e[n].p9,e[n].max];ut(t),function(t){for(var e in t)if(t.hasOwnProperty(e)){let t=e.split("_").join(" ");t=t.charAt(0).toUpperCase()+t.slice(1),$("#absolute-feature-checkboxes").append('<tr><th> <div class="pretty p-switch p-fill p-bigger"><input type="checkbox" id="draw-'+e+'"/><div class="state"><label>'+t+'</label></div></div><div class="float-right draw-details" id="draw-'+e+'-details"><div class="pretty p-icon p-toggle p-plain"><input type="checkbox" id="draw-'+e+'-input" /><div class="state p-success-o p-on"><i class="mdi mdi-image-area"></i><label></label></div><div class="state p-off"><i class="mdi mdi-image-off"></i><label></label></div></div></div></th></tr>')}$(".draw-details").hide(),g()}(t)}})}function nt(){$.ajax({url:"/api/dataset/networks/"+parameters.id,dataType:"json",type:"GET",contentType:"application/json; charset=utf-8",headers:{Accept:Q},success:function(t){!function(t){if(t.length)for(let e=0;e<t.length;e++)t[e].finished&&$("#networks-hierarchies-table tbody").append("<tr><td>"+t[e].name+'</td> <td> <button type="button" class="btn btn-default" data='+t[e].network_id+" name="+t[e].name+'><span class="mdi mdi-graphql" aria-hidden="true"></span></button></td> <td><div class="pretty p-switch p-fill"><input type="checkbox" class="hiearchy-checkbox" data="'+t[e].network_id+'" name="'+t[e].name+'"><div class="state p-success"><label></label></div></div></td><td>---</td>');else $("#networks-hierarchies-table").append("There is no network data for this dataset")}(t)}})}function rt(t){$.ajax({url:"/api/dataset/"+parameters.id+"/"+t,dataType:"json",type:"GET",contentType:"application/json; charset=utf-8",headers:{Accept:Q},success:function(e){gt(e,t),m()}})}function at(t){f(),$.ajax({url:"/api/dataset/"+parameters.id+"/"+t,dataType:"json",type:"GET",contentType:"application/json; charset=utf-8",headers:{Accept:Q},success:function(e){mt(e,t),m()}})}n(1);let it=[],ot=[],st=[],lt={},dt={},ct={},ht={};function pt(t){it=it.concat(t)}function ut(t){lt=t}function ft(t){ot=t,function(){let t=["#fff","#e41a1c","#377eb8","#4daf4a","#984ea3","#ff7f00","#ffff33","#a65628"];if(ot.length)for(let e=0;e<ot.length;e++)$("#metadata-table").find("tbody").append($('<tr id="metadata-row-'+ot[e].animal_id+'">').append($("<td>").append(ot[e].animal_id)).append($("<td>").append(ot[e].species)).append($("<td>").append(ot[e].sex)).append($("<td>").append(ot[e].size)).append($("<td>").append(ot[e].weight)).append($("<td>").append('<div class="dropdown">\n                                              <a class="dropdown-toggle btn btn-default btn-color" data-toggle="dropdown" href="#">\n                                              <div id="preview" class="metadata-swatch" style="background-color:#fff"></div>\n                                              <input class="color-field" value="White" style="display:none;">\n                                              </a>\n                                              <ul class="dropdown-menu" role="menu" aria-labelledby="dLabel"> '+function(e){let n="";for(let r=0;r<t.length;r++)n+='<div class="metadata-swatch metadata-swatch-clickable" style="background-color:'+t[r]+'" value="'+e+'"></div>';return n}(ot[e].animal_id)+"</ul></div>")));else $("#metadata-table").find("tbody").append("There is no metadata for this dataset")}()}function mt(t,e){for(let n=0;n<t.length;n++)void 0===st[n]&&st.push({}),t[n]&&!isNaN(t[n])?st[n][e]=+t[n]:st[n][e]=t[n]}function gt(t,e){for(let n=0;n<t.length;n++)void 0===it[n]&&it.push({}),it[n][e]=+t[n]}function vt(t){dt=t}function xt(t,e){0===Object.keys(t).length&&t.constructor===Object?(delete ct["h"+e],delete W["h"+e],function(t){delete G["h"+t]}(e)):(ct["h"+e]=t,V(e,2),function(t){for(let e in Z)if(e==="h"+t)return void(G["h"+t]=Z[e]);for(let e=0;e<H.length;e++){let n=!0;for(let t in G)G.hasOwnProperty(t)&&G[t]===H[e]&&(n=!1);if(n){if(0===Object.keys(Z).length)return void(G["h"+t]=H[e]);for(let n in Z)if(Z[n]!==H[e])return void(G["h"+t]=H[e])}}}(e)),Y()}function bt(t){ht=t}$(document).ready((function(){window.EventSource?((tt=new EventSource("/api/movement_only/"+parameters.id)).onmessage=function(t){"close"===t.data?(tt.close(),window.setTimeout((function t(){$.active>0?window.setTimeout(t,100):new O}),100)):pt(JSON.parse(t.data))},tt.addEventListener("error",(function(t){t.readyState==EventSource.CLOSED&&alert("Streaming error")}),!1)):alert("Webbrowser does not support streaming"),et(),$.ajax({url:"/api/dataset/"+parameters.id+"/animal_ids",dataType:"json",type:"GET",contentType:"application/json; charset=utf-8",headers:{Accept:Q},success:function(t){bt(t)}}),function(){const t=["swarm_time","swarm_speed","swarm_acceleration","swarm_convex_hull_area","swarm_distance_centroid","swarm_direction","swarm_polarisation"];for(let e=0;e<t.length;e++)$.ajax({url:"/api/dataset/"+parameters.id+"/"+t[e],dataType:"json",type:"GET",contentType:"application/json; charset=utf-8",headers:{Accept:Q},success:function(n){mt(n,t[e].replace("swarm_",""))}})}(),$.ajax({url:"/api/metadata/"+parameters.id,dataType:"json",type:"GET",contentType:"application/json; charset=utf-8",headers:{Accept:Q},success:function(t){ft(t)}}),nt()}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,