!function(t){var e={};function n(r){if(e[r])return e[r].exports;var a=e[r]={i:r,l:!1,exports:{}};return t[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)n.d(r,a,function(e){return t[e]}.bind(null,a));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=6)}([function(t,e){},function(t,e,n){var r=n(2);"string"==typeof r&&(r=[[t.i,r,""]]);var a={hmr:!0,transform:void 0,insertInto:void 0};n(4)(r,a);r.locals&&(t.exports=r.locals)},function(t,e,n){(e=n(3)(!1)).push([t.i,"/* Icons for bootstrap 4 */\r\n\r\n.mdi::before {\r\n    font-size: 24px;\r\n    line-height: 14px;\r\n}\r\n\r\n.btn .mdi::before {\r\n    position: relative;\r\n    top: 4px;\r\n}\r\n\r\n.btn-xs .mdi::before {\r\n    font-size: 18px;\r\n    top: 3px;\r\n}\r\n\r\n.btn-sm .mdi::before {\r\n    font-size: 18px;\r\n    top: 3px;\r\n}\r\n\r\n.dropdown-menu .mdi {\r\n    width: 18px;\r\n}\r\n\r\n.dropdown-menu .mdi::before {\r\n    position: relative;\r\n    top: 4px;\r\n    left: -8px;\r\n}\r\n\r\n.nav .mdi::before {\r\n    position: relative;\r\n    top: 4px;\r\n}\r\n\r\n.navbar .navbar-toggle .mdi::before {\r\n    position: relative;\r\n    top: 4px;\r\n    color: #FFF;\r\n}\r\n\r\n.breadcrumb .mdi::before {\r\n    position: relative;\r\n    top: 4px;\r\n}\r\n\r\n.breadcrumb a:hover {\r\n    text-decoration: none;\r\n}\r\n\r\n.breadcrumb a:hover span {\r\n    text-decoration: underline;\r\n}\r\n\r\n.alert .mdi::before {\r\n    position: relative;\r\n    top: 4px;\r\n    margin-right: 2px;\r\n}\r\n\r\n.input-group-addon .mdi::before {\r\n    position: relative;\r\n    top: 3px;\r\n}\r\n\r\n.navbar-brand .mdi::before {\r\n    position: relative;\r\n    top: 2px;\r\n    margin-right: 2px;\r\n}\r\n\r\n.list-group-item .mdi::before {\r\n    position: relative;\r\n    top: 3px;\r\n    left: -3px\r\n}\r\n\r\n/* SVG elements and text */\r\n\r\n#main-vis {\r\n    margin-bottom: 10px;\r\n}\r\n\r\n.svg-container {\r\n    display: inline-block;\r\n    position: relative;\r\n    width: 100%;\r\n    /* aspect ratio */\r\n    vertical-align: top;\r\n    overflow: visible;\r\n}\r\n\r\n.svg-content {\r\n    display: inline-block;\r\n    position: absolute;\r\n    border: 1px solid #000;\r\n}\r\n\r\n#main-vis-legend-div {\r\n    display: none;\r\n}\r\n\r\n#hierarchy-legend-div {\r\n    display: none;\r\n}\r\n\r\n#main-vis-legend {\r\n    float: right;\r\n    display: inline-block;\r\n    position: relative;\r\n    overflow: visible;\r\n    top: 10px;\r\n    left: 10px;\r\n}\r\n\r\n#hierarchy-legend {\r\n    float: left;\r\n    display: inline-block;\r\n    position: relative;\r\n    overflow: visible;\r\n    top: 10px;\r\n    left: 10px;\r\n}\r\n\r\n.svg-content-dendrogram {\r\n    display: inline-block;\r\n    border: 1px solid #000;\r\n}\r\n\r\n.svg-line-chart-container {\r\n    display: inline-block;\r\n    position: relative;\r\n    width: 100%;\r\n    height: auto;\r\n    /* depends on svg ratio */\r\n    padding-bottom: 17%;\r\n    /* aspect ratio */\r\n    vertical-align: top;\r\n    overflow: visible;\r\n}\r\n\r\n.svg-dendrogram-container {\r\n    display: inline-block;\r\n    position: relative;\r\n    height: auto;\r\n    vertical-align: top;\r\n    overflow: visible;\r\n}\r\n\r\n.axis path {\r\n    display: none;\r\n}\r\n\r\n.axis line {\r\n    stroke-opacity: 0.3;\r\n    shape-rendering: crispEdges;\r\n}\r\n\r\n.x {\r\n    font-size: 1em;\r\n}\r\n\r\n.y {\r\n    font-size: 1em;\r\n}\r\n\r\n.axis-line-chart path line {\r\n    fill: none;\r\n    stroke: #000;\r\n    shape-rendering: crispEdges;\r\n}\r\n\r\n.line {\r\n    fill: none;\r\n    stroke-width: 5px;\r\n}\r\n\r\n/* Time  */\r\n\r\n.frame-text {\r\n    margin-top: 0;\r\n    margin-bottom: 0;\r\n    font-size: 2em;\r\n    color: inherit;\r\n    font-weight: 500;\r\n    line-height: 1.1;\r\n}\r\n\r\n/* Slider ticks  */\r\n\r\n.ui-slider-tick {\r\n    display: inline-block;\r\n    width: 3px;\r\n    background: #337ab7;\r\n    height: 0.8em;\r\n    position: absolute;\r\n}\r\n\r\n/* Laoding gif   */\r\n\r\n#loading {\r\n    display: block;\r\n    text-align: center;\r\n}\r\n\r\n/* Color legend    */\r\n\r\n.legend {\r\n    font-size: 12px;\r\n    stroke: #000;\r\n}\r\n\r\n.legend-text {\r\n    font-size: 1.2em;\r\n    color: inherit;\r\n    line-height: 1.1;\r\n}\r\n\r\n.line-chart-legend-text {\r\n    font-size: 2em;\r\n    color: inherit;\r\n    line-height: 1.1;\r\n}\r\n\r\n.time-line {\r\n    fill: none;\r\n    stroke-width: 5px;\r\n    stroke: #000;\r\n}\r\n\r\n/*swarm features */\r\n\r\n.centroid {\r\n    fill-opacity: 0;\r\n    stroke: #e7298a;\r\n    stroke-width: 3px;\r\n}\r\n\r\n.medoid {\r\n    fill: #e7298a !important;\r\n    stroke: #e7298a !important;\r\n}\r\n\r\n.hull-path {\r\n    fill: #fff;\r\n    fill-opacity: 0;\r\n    stroke-width: 3;\r\n    stroke: #252525;\r\n    stroke-opacity: 0.5;\r\n}\r\n\r\n.hierarchy-group {\r\n    stroke-width: 10;\r\n    stroke-linejoin: round;\r\n    opacity: 0.2;\r\n}\r\n\r\n.delaunay-triangulation {\r\n    fill-opacity: 0;\r\n    stroke-width: 2;\r\n    stroke: #000;\r\n    stroke-opacity: 0.4;\r\n}\r\n\r\n/* Color brewer picker div */\r\n\r\n.palette {\r\n    cursor: pointer;\r\n    display: table;\r\n    vertical-align: bottom;\r\n    margin: 4px 0 4px 4px;\r\n    background: #fff;\r\n    border: solid 1px #aaa;\r\n}\r\n\r\n.swatch {\r\n    display: inline-block;\r\n    vertical-align: middle;\r\n    width: 22px;\r\n    height: 22px;\r\n}\r\n\r\n.voronoi {\r\n    fill-opacity: 0;\r\n    stroke-width: 3;\r\n    stroke: #000;\r\n    stroke-opacity: 0.2;\r\n}\r\n\r\n/* Tooltip */\r\n\r\ndiv.tooltip {\r\n    pointer-events: none;\r\n    opacity: 0;\r\n    background: rgb(255, 255, 255) !important;\r\n    border-left-color: #1b809e !important;\r\n    border: 1px solid #eee;\r\n    border-left-width: 5px;\r\n    border-radius: 3px;\r\n    position: absolute;\r\n}\r\n\r\ndiv.tooltip table td:nth-child(2) {\r\n    text-align: center;\r\n    font-weight: bold;\r\n}\r\n\r\n.tooltip-span {\r\n    display: block;\r\n    width: 150px;\r\n    word-wrap: break-word;\r\n    font-size: 1.5em;\r\n}\r\n\r\n.upper-outer-area, .lower-outer-area {\r\n    stroke-width: 1;\r\n    fill: #74a9cf;\r\n    stroke: #3690c0;\r\n}\r\n\r\n.upper-inner-area, .lower-inner-area {\r\n    stroke-width: 1;\r\n    fill: #045a8d;\r\n    stroke: #023858;\r\n}\r\n\r\n.median-line {\r\n    fill: none;\r\n    stroke: #525252;\r\n    stroke-width: 5;\r\n}\r\n\r\n.selected {\r\n    background: #999;\r\n    border: 4px solid #4d4d4d;\r\n    -moz-border-radius: 5px;\r\n    -webkit-border-radius: 5px;\r\n    box-shadow: 1px 2px 4px rgba(0, 0, 0, .4);\r\n}\r\n\r\n.zoom {\r\n    fill: none;\r\n    pointer-events: all;\r\n}\r\n\r\n.x.axis-line-chart>g>text {\r\n    font-size: 3em;\r\n    color: inherit;\r\n    line-height: 1.1;\r\n}\r\n\r\n.arrow {\r\n    stroke-width: 1;\r\n}\r\n\r\n#centroid-line {\r\n    stroke-width: 1;\r\n    stroke: #e7298a;\r\n}\r\n\r\n#centroid-arrow {\r\n    fill: #e7298a;\r\n}\r\n\r\n.metadata-swatch {\r\n    width: 30px;\r\n    height: 30px;\r\n    border-radius: 3px;\r\n    border: 2px solid #666;\r\n}\r\n\r\n.metadata-swatch-clickable:hover {\r\n    border: 2px solid #000;\r\n    cursor: pointer;\r\n}\r\n\r\n.dropdown-menu {\r\n    min-width: 40px;\r\n    padding: 5px;\r\n}\r\n\r\n.metadata-legend {\r\n    list-style: none;\r\n    margin-top: 10px;\r\n}\r\n\r\n.metadata-legend li {\r\n    float: left;\r\n    margin-right: 10px;\r\n}\r\n\r\n.metadata-legend span {\r\n    border: 2px solid #666;\r\n    float: left;\r\n    width: 30px;\r\n    height: 30px;\r\n}\r\n\r\n.metadata-legend .bl-avg {\r\n    background-color: #7fc97f;\r\n}\r\n\r\n.metadata-legend .avg {\r\n    background-color: #fdc086;\r\n}\r\n\r\n.metadata-legend .ab-avg {\r\n    background-color: #386cb0;\r\n}\r\n\r\n.network-edges {\r\n    fill-opacity: 0;\r\n    stroke-width: 2;\r\n}\r\n\r\n.network-background-edges {\r\n    fill-opacity: 0;\r\n    stroke-opacity: 0.25;\r\n    stroke: #737373;\r\n}\r\n\r\n.node text {\r\n    font: 12px sans-serif;\r\n}\r\n\r\n.node--internal text {\r\n    text-shadow: 0 1px 0 #fff, 0 -1px 0 #fff, 1px 0 0 #fff, -1px 0 0 #fff;\r\n}\r\n\r\n.link {\r\n    fill: none;\r\n    stroke: #636363;\r\n    stroke-width: 5px;\r\n}\r\n\r\n#active-network-name {\r\n    font-weight: bold;\r\n    color: #296292;\r\n}\r\n\r\n.active-level {\r\n    fill: #386cb0;\r\n}\r\n\r\n#dendrogram-panel {\r\n    position: initial;\r\n}\r\n\r\n#dendrogram-panel {\r\n    display: none\r\n}\r\n\r\n.show-dendrogram {\r\n    float: right;\r\n    border-radius: 3px;\r\n    border: 1px solid #D1D3D4;\r\n    font-weight: normal;\r\n}\r\n\r\n.show-dendrogram:hover {\r\n    background: #D1D3D4;\r\n}\r\n\r\n.dendrogram-text {\r\n    font-size: 10em !important;\r\n}\r\n\r\n.highlight-hierarchy {\r\n    fill: #252525;\r\n    stroke: #252525;\r\n    stroke-width: 10;\r\n    stroke-linejoin: round;\r\n    opacity: 0.3;\r\n}\r\n\r\n.animal-highlight {\r\n    fill: #c51b7d !important;\r\n}\r\n\r\n#dendrogram-buttons-div .btn span.glyphicon {\r\n    opacity: 0;\r\n}\r\n\r\n#dendrogram-buttons-div .btn.active span.glyphicon {\r\n    opacity: 1;\r\n}\r\n\r\n#dendrogram-buttons-div {\r\n    border: 2px solid #D1D3D4;\r\n    border-radius: 5px;\r\n}\r\n\r\n#dendrogram-legend {\r\n    margin-left: 20px;\r\n}\r\n\r\n.intersection {\r\n    fill: url(#striped) !important;\r\n    stroke: #67000d;\r\n}\r\n\r\n.sym-difference {\r\n    fill: url(#striped) !important;\r\n    stroke: #67000d;\r\n}\r\n\r\n.modal-lg {\r\n    max-width: 80%;\r\n}\r\n\r\n.background-image {\r\n    background: #fff;\r\n}",""]),t.exports=e},function(t,e,n){"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=function(t,e){var n=t[1]||"",r=t[3];if(!r)return n;if(e&&"function"==typeof btoa){var a=(o=r,s=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(l," */")),i=r.sources.map((function(t){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(t," */")}));return[n].concat(i).concat([a]).join("\n")}var o,s,l;return[n].join("\n")}(e,t);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,r){"string"==typeof t&&(t=[[null,t,""]]);var a={};if(r)for(var i=0;i<this.length;i++){var o=this[i][0];null!=o&&(a[o]=!0)}for(var s=0;s<t.length;s++){var l=[].concat(t[s]);r&&a[l[0]]||(n&&(l[2]?l[2]="".concat(n," and ").concat(l[2]):l[2]=n),e.push(l))}},e}},function(t,e,n){var r,a,i={},o=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===a&&(a=r.apply(this,arguments)),a}),s=function(t){return document.querySelector(t)},l=function(t){var e={};return function(t){if("function"==typeof t)return t();if(void 0===e[t]){var n=s.call(this,t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}}(),d=null,c=0,p=[],h=n(5);function u(t,e){for(var n=0;n<t.length;n++){var r=t[n],a=i[r.id];if(a){a.refs++;for(var o=0;o<a.parts.length;o++)a.parts[o](r.parts[o]);for(;o<r.parts.length;o++)a.parts.push(y(r.parts[o],e))}else{var s=[];for(o=0;o<r.parts.length;o++)s.push(y(r.parts[o],e));i[r.id]={id:r.id,refs:1,parts:s}}}}function f(t,e){for(var n=[],r={},a=0;a<t.length;a++){var i=t[a],o=e.base?i[0]+e.base:i[0],s={css:i[1],media:i[2],sourceMap:i[3]};r[o]?r[o].parts.push(s):n.push(r[o]={id:o,parts:[s]})}return n}function m(t,e){var n=l(t.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=p[p.length-1];if("top"===t.insertAt)r?r.nextSibling?n.insertBefore(e,r.nextSibling):n.appendChild(e):n.insertBefore(e,n.firstChild),p.push(e);else if("bottom"===t.insertAt)n.appendChild(e);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var a=l(t.insertInto+" "+t.insertAt.before);n.insertBefore(e,a)}}function g(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var e=p.indexOf(t);e>=0&&p.splice(e,1)}function v(t){var e=document.createElement("style");return void 0===t.attrs.type&&(t.attrs.type="text/css"),x(e,t.attrs),m(t,e),e}function x(t,e){Object.keys(e).forEach((function(n){t.setAttribute(n,e[n])}))}function y(t,e){var n,r,a,i;if(e.transform&&t.css){if(!(i=e.transform(t.css)))return function(){};t.css=i}if(e.singleton){var o=c++;n=d||(d=v(e)),r=w.bind(null,n,o,!1),a=w.bind(null,n,o,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(t){var e=document.createElement("link");return void 0===t.attrs.type&&(t.attrs.type="text/css"),t.attrs.rel="stylesheet",x(e,t.attrs),m(t,e),e}(e),r=T.bind(null,n,e),a=function(){g(n),n.href&&URL.revokeObjectURL(n.href)}):(n=v(e),r=$.bind(null,n),a=function(){g(n)});return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else a()}}t.exports=function(t,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=o()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var n=f(t,e);return u(n,e),function(t){for(var r=[],a=0;a<n.length;a++){var o=n[a];(s=i[o.id]).refs--,r.push(s)}t&&u(f(t,e),e);for(a=0;a<r.length;a++){var s;if(0===(s=r[a]).refs){for(var l=0;l<s.parts.length;l++)s.parts[l]();delete i[s.id]}}}};var b,k=(b=[],function(t,e){return b[t]=e,b.filter(Boolean).join("\n")});function w(t,e,n,r){var a=n?"":r.css;if(t.styleSheet)t.styleSheet.cssText=k(e,a);else{var i=document.createTextNode(a),o=t.childNodes;o[e]&&t.removeChild(o[e]),o.length?t.insertBefore(i,o[e]):t.appendChild(i)}}function $(t,e){var n=e.css,r=e.media;if(r&&t.setAttribute("media",r),t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}function T(t,e,n){var r=n.css,a=n.sourceMap,i=void 0===e.convertToAbsoluteUrls&&a;(e.convertToAbsoluteUrls||i)&&(r=h(r)),a&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */");var o=new Blob([r],{type:"text/css"}),s=t.href;t.href=URL.createObjectURL(o),s&&URL.revokeObjectURL(s)}},function(t,e){t.exports=function(t){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var n=e.protocol+"//"+e.host,r=n+e.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,(function(t,e){var a,i=e.trim().replace(/^"(.*)"$/,(function(t,e){return e})).replace(/^'(.*)'$/,(function(t,e){return e}));return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?t:(a=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(a)+")")}))}},function(t,e,n){"use strict";let r,a;n.r(e),n.d(e,"dataset",(function(){return q})),n.d(e,"datasetMetadata",(function(){return K})),n.d(e,"swarmData",(function(){return Q})),n.d(e,"dataSetPercentile",(function(){return tt})),n.d(e,"networkData",(function(){return et})),n.d(e,"networkHierarchy",(function(){return nt})),n.d(e,"animalIds",(function(){return rt})),n.d(e,"addToDataset",(function(){return at})),n.d(e,"setDataSetPercentile",(function(){return it})),n.d(e,"setMetaData",(function(){return ot})),n.d(e,"setSwarmData",(function(){return st})),n.d(e,"setDatasetFeature",(function(){return lt})),n.d(e,"setNetworkData",(function(){return dt})),n.d(e,"setHierarchyData",(function(){return ct})),n.d(e,"setAnimalIds",(function(){return pt}));let i,o={type:"Linear",color:colorbrewer.BuYlBu};function s(){return"Linear"===o.type?d3.scaleLinear().domain(tt[k]).range(o.color):"Threshold"===o.type?d3.scaleThreshold().domain(tt[k]).range(o.color):void 0}function l(){let t,e;if($("#main-vis-legend-div").show(),"black"!==k){var n=s();t=i.selectAll("rect.legend").data(n.range()),e=i.selectAll("text.legend-text").data(n.domain())}else t=i.selectAll("rect.legend").data([]),e=i.selectAll("text.legend-text").data([]),$("#main-vis-legend-div").hide();t.style("fill",(function(t){return t})),t.enter().append("rect").attr("class","legend").attr("width",50).attr("height",20).attr("y",0).attr("x",(function(t,e){return 50+50*e+"px"})).style("fill",(function(t){return t})),t.exit().remove(),e.text((function(t){return Math.ceil(2*t)/2})),e.enter().append("text").attr("class","legend-text").attr("y",40).attr("x",(function(t,e){return 50+50*e+5+"px"})).text((function(t){return Math.ceil(2*t)/2})),e.exit().remove()}let d={};var c=n(0);let p=!0;function h(){$(".draw-details").click((function(){$(this).find("input:checkbox").prop("checked")?new(void 0)(this,Q).disableLineChart():($(".trendChartData").hide(),$("#trendChartLegend").hide(),$("#lineChartLegend").show(),$(".lineChartButton").prop("checked",!0).prop("disabled",!1),$(".line-chart-check-box").attr("disabled",!1),$(".lineChartLine").attr("visibility","visible"))}))}String.prototype.hashCode=function(){var t,e=0;if(0===this.length)return e;for(t=0;t<this.length;t++)e=(e<<5)-e+this.charCodeAt(t),e|=0;return e},d3.selection.prototype.moveToBack=function(){return this.each((function(){var t=this.parentNode.firstChild;t&&this.parentNode.insertBefore(this,t)}))};let u,f,m,g,v,x,y,b,k="black",w={},T=1,C=d3.zoom().scaleExtent([1,6]).on("zoom",()=>{d3.event.transform.x=Math.min(0,(void 0).tankWidth*(d3.event.transform.k-1),Math.max((void 0).tankWidth*(1-d3.event.transform.k),d3.event.transform.x)),d3.event.transform.y=Math.min(0,(void 0).tankHeight*(d3.event.transform.k-1),Math.max((void 0).tankHeight*(1-d3.event.transform.k),d3.event.transform.y)),(void 0).zoomGroup.attr("transform",d3.event.transform),gXaxis.call(xAxis.scale(d3.event.transform.rescaleX(m))),gYaxis.call(yAxis.scale(d3.event.transform.rescaleY(g)))});class L{constructor(){this.indexTime=0,this.svgContainer=d3.select("#main-vis").classed("svg-container",!0).append("svg").attr("preserveAspectRatio","xMinYMin meet").attr("viewBox","0 0 "+this.tankWidth+" "+this.tankHeight).classed("svg-content",!0).attr("id","main-vis-svg").call(C),this.zoom=d3.zoom().scaleExtent([1,6]).on("zoom",()=>{d3.event.transform.x=Math.min(0,this.tankWidth*(d3.event.transform.k-1),Math.max(this.tankWidth*(1-d3.event.transform.k),d3.event.transform.x)),d3.event.transform.y=Math.min(0,this.tankHeight*(d3.event.transform.k-1),Math.max(this.tankHeight*(1-d3.event.transform.k),d3.event.transform.y)),this.zoomGroup.attr("transform",d3.event.transform),gXaxis.call(xAxis.scale(d3.event.transform.rescaleX(m))),gYaxis.call(yAxis.scale(d3.event.transform.rescaleY(g)))}),this.zoomGroup=this.svgContainer.append("svg:g"),this.tank=this.zoomGroup.append("svg:g").attr("class","tank").attr("transform",()=>"scale("+(parameters.inverted_x?-1:1)+","+(parameters.inverted_y?-1:1)+")"),this.activeScale="black",this.medoidAnimal=-1,this.activeAnimals=[],this.arrayAnimals=0,this.id=$(".show-dendrogram.btn-primary").attr("data")}setIndexTime(t){"number"==typeof t&&this.indexTime<=Q.length?this.indexTime=t:this.indexTime=0}updateLineChart(){if(d3.select("#lineChartTimeLine")&&Q[Math.ceil(this.indexTime/T)]){let t=Math.ceil(this.indexTime/T);this.indexTime%25==0&&(d3.select("#convex_hull_areaLineValue").text(Q[t].convex_hull_area+"mm²"),d3.select("#speedLineValue").text(Q[t].speed+"mm/s"),d3.select("#accelerationLineValue").text(Q[t].acceleration+"mm/s²"),d3.select("#distance_centroidLineValue").text(Q[t].distance_centroid+"mm"),d3.select("#directionLineValue").text(Q[t].direction+"°"),d3.select("#polarisationLineValue").text(Q[t].polarisation)),d3.select("#lineChartTimeLine").attr("transform","translate("+v(t)+",0)")}}draw(){let t=$('input[type="radio"].group-playback-rate:checked').val(),e=$('input[type="radio"].group-size:checked').val();u=q.filter(t=>t.t===this.indexTime),setTimeout(()=>{var t;this.drawDendrogram(),this.svgContainer.select(".frame-text").text(Math.floor(this.indexTime/1500)%60+":"+Math.floor(this.indexTime/parameters.fps)%60+"::"+this.indexTime%parameters.fps),this.indexTime%parameters.fps==0&&(t=this.indexTime,r.slider("value",t));let n,i=this.tank.selectAll("g.animal").data(u);if(this.indexTime in et){let t=et[this.indexTime];if(D={},t=t.map((function(t){let e=u.filter((function(e){return e.a===t.s}))[0],n=u.filter((function(e){return e.a===t.e}))[0];return{node1:e.a,node2:n.a,start:e.p,end:n.p,val:t.v}})),t.forEach((function(t){$("#mc-"+t.node1+"-"+t.node2).css("fill",Y(t.val)),$("#mc-"+t.node2+"-"+t.node1).css("fill",Y(t.val))})),I){let e=[];for(let n=0;n<t.length;n++)e.push(t[n].val);V(function(t){if(0===t.length)return 0;t.sort((function(t,e){return t-e}));let e=.05*(t.length-1),n=Math.floor(e),r=n+1,a=e%1;return r>=t.length?1-t[n]:1-(t[n]*(1-a)+t[r]*a)}(e))}t=t.filter((function(t){return t.val<=1-N})),n=this.tank.select("#network-group").selectAll("line.network-edges").data(t),n.attr("x1",(function(t){return t.start[0]})).attr("y1",(function(t){return-t.start[1]})).attr("x2",(function(t){return t.end[0]})).attr("y2",(function(t){return-t.end[1]})).attr("stroke",(function(t){return Y(1-t.val)})).attr("stroke-opacity",(function(t){return 1-t.val})),n.enter().append("line").attr("class","network-edges").attr("x1",(function(t){return t.start[0]})).attr("y1",(function(t){return-t.start[1]})).attr("x2",(function(t){return t.end[0]})).attr("y2",(function(t){return-t.end[1]})).attr("stroke",(function(t){return Y(t.val)})).attr("stroke-opacity",(function(t){return t.val}))}else n=this.tank.selectAll("line.network-edges").data([]);var o,l;n.exit().remove(),$("#draw-triangulation").is(":checked")?((o=this.tank.select("#delaunay-triangulation-group").selectAll("path.delaunay-triangulation").data([Q[this.indexTime].triangulation])).attr("d",(function(t){return t})),o.enter().append("path").attr("class","delaunay-triangulation").attr("d",(function(t){return t}))):o=this.tank.selectAll("path.delaunay-triangulation").data([]),o.exit().remove(),$("#draw-voronoi").is(":checked")?((l=this.tank.select("#vornoi-group").selectAll("path.voronoi").data(Q[this.indexTime].voronoi.split(";"))).attr("d",(function(t){return t})),l.enter().append("path").attr("class","voronoi").attr("d",(function(t){return t}))):l=this.tank.select("#vornoi-group").selectAll("path.voronoi").data([]),l.exit().remove();let h=i.enter().append("g").attr("class","animal").attr("id",(function(t){return"animal-"+t.a}));if(h.append("circle").attr("r",1.5*e).attr("cx",(function(t){return t.p[0]})).attr("cy",(function(t){return-t.p[1]})).on("mouseover",(function(t){!function(t){for(let e=0;e<K.length;e++)t.a===K[e].animal_id&&(a.style("left",d3.event.pageX+5+"px").style("top",d3.event.pageY-100+"px").style("opacity",1),a.select("#tooltip-animal-id").html(K[e].animal_id),a.select("#tooltip-species").html(K[e].species),a.select("#tooltip-sex").html(K[e].sex),a.select("#tooltip-size").html(K[e].size),a.select("#tooltip-weight").html(K[e].weight))}(t)})).on("mouseout",(function(){a.transition().duration(500).style("opacity",0)})).on("click",(function(t){this.activeAnimals.includes(t.a)?this.activeAnimals=this.activeAnimals.filter(e=>e!==t.a):this.activeAnimals.push(t.a),$("#play-button").hasClass("active")||(this.indexTime--,this.draw())})),i.select("circle").attr("cx",(function(t){return t.p[0]})).attr("cy",(function(t){return-t.p[1]})).attr("r",e),h.append("svg:defs").append("svg:marker").attr("id",(function(t){return"arrow-marker-"+t.a})).attr("refX",2).attr("refY",6).attr("markerWidth",13).attr("markerHeight",13).attr("orient","auto").append("svg:path").attr("d","M2,2 L2,11 L10,6 L2,2"),h.append("line").attr("class","arrow").attr("marker-end",(function(t){return"url(#arrow-marker-"+t.a+")"})),$("#draw-direction").is(":checked")?i.select("line").attr("x1",(function(t){return t.p[0]})).attr("y1",(function(t){return-t.p[1]})).attr("x2",(function(t){return t.p[0]+2*e})).attr("y2",(function(t){return-t.p[1]})).attr("transform",(function(t){return"rotate("+-t.direction+" "+t.p[0]+" "+-t.p[1]+")"})):$(".arrow").hide(),i.exit().remove(),$("#draw-convex-hull").is(":checked")){var f=this.tank.selectAll("path.hull-path").data([Q[this.indexTime].convex_hull]);f.attr("d",(function(t){return t})),f.enter().append("path").attr("class","hull-path").attr("d",(function(t){return t}))}else f=this.tank.select("path.hull-path").data([]);if(f.exit().remove(),"black"!==this.activeScale){var m=s();i.transition().duration(10).style("fill",(function(t){return m(t[this.activeScale])})).attr("stroke",(function(t){return m(t[this.activeScale])}))}else i.style("fill","#000").attr("stroke","#000"),$.isEmptyObject(d)||Object.keys(d).forEach((function(t){d3.select("#animal-"+t).style("fill",d[t]).attr("stroke",d[t])}));this.activeAnimals.length?(i.style("opacity",(function(t){return this.activeAnimals.includes(t.a)?1:.25})),$("#remove-active-selected-button").is(":disabled")&&($("#remove-active-selected-button").prop("disabled",!1),$("#visual-parameter-button").prop("disabled",!1)),c.trackingBoolean&&Object(c.addTrackedData)(u[0].t,this.activeAnimals)):($("#remove-active-selected-button").is(":disabled")||($("#remove-active-selected-button").prop("disabled",!0),$("#visual-parameter-button").prop("disabled",!0)),i.style("opacity",1)),d3.select(".centroid").attr("cx",(function(){return"centroid"in Q[0]?Q[this.indexTime].centroid[0]:0})).attr("cy",(function(){return"centroid"in Q[0]?-Q[this.indexTime].centroid[1]:0})),$("#draw-direction").is(":checked")&&Q[this.indexTime].centroid&&$("#draw-centroid").is(":checked")?(d3.select("#centroid-line").classed("hidden",!1),d3.select("#centroid-line").attr("x1",(function(){return Q[this.indexTime].centroid[0]})).attr("y1",(function(){return-Q[this.indexTime].centroid[1]})).attr("x2",(function(){return Q[this.indexTime].centroid[0]+2*e})).attr("y2",(function(){return-Q[this.indexTime].centroid[1]})).attr("transform",(function(){return"rotate("+-Q[this.indexTime].direction+" "+Q[this.indexTime].centroid[0]+" "+-Q[this.indexTime].centroid[1]+")"}))):d3.select("#centroid-line").attr("class","hidden"),-1!==this.medoidAnimal&&(d3.selectAll("#animal-"+this.medoidAnimal).classed("medoid",!1),this.medoidAnimal=Q[this.indexTime].medoid,d3.selectAll("#animal-"+this.medoidAnimal).classed("medoid",!0)),this.indexTime++,this.updateLineChart(),this.indexTime>=Q.length?(this.indexTime=0,this.draw()):p&&this.draw()},t)}drawDendrogram(){if(!$.isEmptyObject(void 0)&&this.id){let e=(void 0)["h"+this.id][this.indexTime],n=d3.hierarchy(e,(function(t){return t.children}));if(n=n.children[0],n.children.forEach(collapse),n=treemap(n),console.log(n),$(".show-dendrogram.btn-primary").length){$("#dendrogram-panel-level-slider").slider("option","max",n.height-1).slider("value",hierarchyLevels["h"+this.id]);let e=this.zoomGroup.selectAll("path.link").data(n.descendants().slice(1));e.enter().append("path").attr("class","link").attr("d",diagonalLines),e.attr("d",diagonalLines),e.exit().remove();let r=this.zoomGroup.selectAll(".node").data(n.descendants());var t=r.enter().append("g").attr("class",(function(t){return"node"+(t.children?" node--internal":" node--leaf")})).attr("transform",(function(t){return"translate("+t.x+","+t.y+")"}));t.append("circle").attr("r",t=>t.depth===hierarchyLevels["h"+this.id]?40+t.data.name.length:20+t.data.name.length).attr("class",t=>{if(t.depth===hierarchyLevels["h"+this.id])return"active-level"}).attr("id",t=>"h"+t.data.name.toString().hashCode()).on("click",click).on("mouseover",(function(t){tooltipDiv.style("left",d3.event.pageX+5+"px").style("top",d3.event.pageY+5+"px").style("opacity",1),tooltipDiv.select(".tooltip-span").html(t.data.name.toString()),addHighlightSpatialView(t.data.name)})).on("mouseout",(function(){tooltipDiv.transition().duration(500).style("opacity",0),removeHighlightSpatialView()})),t.append("text").attr("class","dendrogram-text").attr("x",150).attr("y",-150).text(t=>t.data.name.length),t.attr("transform",t=>"translate("+t.x+","+t.y+")"),r.attr("transform",t=>"translate("+t.x+","+t.y+")").select("circle").attr("r",t=>t.depth===hierarchyLevels["h"+this.id]?40+t.data.name.length:20+t.data.name.length).attr("class",t=>t.depth===hierarchyLevels["h"+this.id]?"active-level":"").attr("id",t=>"h"+t.data.name.toString().hashCode()),r.select("text").text(t=>t.data.name.length),r.exit().remove(),Object.keys(hierarchyGroupStdev).length?("none"==$("#dendrogram-legend").css("display")&&$("#dendrogram-legend").show(),setTimeout(()=>{r.select("circle").style("fill",(function(t){return"h"+t.data.name.toString().hashCode()in hierarchyGroupStdev?standardDeviationColorScale(standardDeviation(hierarchyGroupStdev["h"+t.data.name.toString().hashCode()])):t.depth!==hierarchyLevels["h"+this.id]?"":"#000"}))},250)):"none"!==$("#dendrogram-legend").css("display")&&$("#dendrogram-legend").hide()}}$.isEmptyObject(void 0)||function(){let t=Object.keys(nt).map((function(t){return t.replace("h","")})),e=[];for(let n=0;n<t.length;n++){let r=nt["h"+t[n]][void 0],a=d3.hierarchy(r,(function(t){return t.children}));a=x(a);let i=a.children[0];R===t[n]&&(O=B(i,t[n])),e.push(U(B(i,t[n])))}e.length;let n=y.selectAll("g.hierarchy-group").data(e);n.enter().append("g").attr("class",(function(e,n){return"intersection"===z?"hierarchy-group intersection":"sym-difference"===z?"hierarchy-group sym-difference":"hierarchy-group h"+t[n]})).style("fill",(function(e,n){return E["h"+t[n]]})).attr("stroke",(function(e,n){return E["h"+t[n]]})).moveToBack(),n.attr("class",(function(e,n){return"intersection"===z?"hierarchy-group intersection":"sym-difference"===z?"hierarchy-group sym-difference":"hierarchy-group h"+t[n]})),n.exit().remove();let r=n.selectAll("path.hierarchy-hull-path").data((function(t){return t}));r.enter().append("path").attr("class","hierarchy-hull-path").attr("d",(function(t){return"M"+t.join("L")+"Z"})),r.attr("d",(function(t){return"M"+t.join("L")+"Z"})),r.exit().remove()}()}decindexTime(){this.indexTime=this.indexTime-1}}class A extends L{constructor(t){super(t),this.tankWidth=0,this.tankHeight=0,this.spatialViewInit()}spatialViewInit(){let t=parameters.min.geometry.coordinates,e=parameters.max.geometry.coordinates;this.tankWidth=1.02*(e[0]-t[0]),this.tankHeight=1.02*(e[1]-t[1]);let n=d3.scaleLinear().domain([t[0],e[0]]).range([t[0],e[0]]),s=d3.axisBottom(n).ticks(10).tickSize(10).tickPadding(5),d=d3.scaleLinear().domain([t[1],e[1]]).range([t[1],e[1]]),c=d3.axisRight(d).ticks(7).tickSize(10).tickPadding(5),p=(d3.zoom().scaleExtent([1,6]).on("zoom",()=>{d3.event.transform.x=Math.min(0,this.tankWidth*(d3.event.transform.k-1),Math.max(this.tankWidth*(1-d3.event.transform.k),d3.event.transform.x)),d3.event.transform.y=Math.min(0,this.tankHeight*(d3.event.transform.k-1),Math.max(this.tankHeight*(1-d3.event.transform.k),d3.event.transform.y)),this.zoomGroup.attr("transform",d3.event.transform),h.call(s.scale(d3.event.transform.rescaleX(n))),u.call(c.scale(d3.event.transform.rescaleY(d)))}),Math.ceil(this.tankHeight/this.tankWidth*100));$("#main-vis").append($("<style>#main-vis::after {padding-top: "+p+'%;display: block;content: "";}</style> ')),this.zoomGroup=this.svgContainer.append("svg:g"),parameters.background_image&&this.zoomGroup.append("image").attr("xlink:href","/"+parameters.background_image).attr("class","background-image").attr("height",this.tankHeight).attr("width",this.tankWidth).attr("x","0").attr("y","0"),this.tank=this.zoomGroup.append("svg:g").attr("class","tank").attr("transform",(function(){return"scale("+(parameters.inverted_x?-1:1)+","+(parameters.inverted_y?-1:1)+")"})),this.tank.append("g").attr("id","g-centroid").append("circle").attr("class","centroid").attr("r",6).attr("cx",0).attr("cy",0),this.tank.select("#g-centroid").append("svg:defs").append("svg:marker").attr("id","centroid-arrow").attr("refX",2).attr("refY",6).attr("markerWidth",13).attr("markerHeight",13).attr("orient","auto").append("svg:path").attr("d","M2,2 L2,11 L10,6 L2,2"),this.tank.select("#g-centroid").append("line").attr("id","centroid-line").attr("marker-end","url(#centroid-arrow)"),this.tank.append("g").attr("id","network-group"),this.tank.append("g").attr("id","delaunay-triangulation-group"),this.tank.append("g").attr("id","vornoi-group"),this.svgContainer.append("text").attr("class","frame-text").attr("x",30).attr("y",30).text("-- : -- : -- ");let h=this.svgContainer.append("g").attr("class","x axis").call(s),u=this.svgContainer.append("g").attr("class","y axis").call(c);a=d3.select("div.tooltip").style("left","0px").style("top","0px").on("mouseover",(function(){a.style("opacity",1)})),function(){r=$("#slider").slider({min:0,max:Q.length,step:25,slide:function(t,e){(void 0)(e.value),$("#play-button").hasClass("active")||(void 0)()}}),$("#network-slider").slider({range:"max",min:0,max:1,step:.01,value:.5,slide:function(t,e){V(e.value),$("#network-limit").val(e.value)}}),$("#network-limit").val(.5);let t=r.slider("option","max"),e=100/t;for(let n=0;n<t;n+=1500)$('<span class="ui-slider-tick"></span>').css("left",e*n+"%").appendTo(r)}(),i=d3.select("#main-vis-legend-div").append("svg").attr("id","main-vis-legend").attr("width",550).attr("height",60),d3.select(".colors-body").selectAll(".palette").data(d3.entries(colorbrewer)).enter().append("span").attr("class","palette").attr("title",(function(t){return t.key})).on("click",(function(t){$(".palette").removeClass("selected"),$('.palette[title="'+t.key+'"]').addClass("selected"),o.color=colorbrewer[t.key],l(),$("#play-button").hasClass("active")||(S(),(void 0)())})).selectAll(".swatch").data((function(t){return t.value})).enter().append("span").attr("class","swatch").style("background-color",(function(t){return t})),$('.palette[title="BuYlBu"]').addClass("selected");var f,m;new M(Q);f=this.tankHeight,m=this.tankWidth,$((function(){$("#main-vis").draggable({containment:"parent"}).resizable({aspectRatio:!0,maxWidth:$("#main-vis-div").width()}).height(.6*f).width(.6*m)})),$("input[type=checkbox]").prop("checked",!1),$("#color-scale-linear").prop("checked",!0),$("#group-size-m").prop("checked",!0),$("#background-white").prop("checked",!0),$("#settings-div input[type=checkbox]").prop("checked",!0),$("#loading").hide(),$("#play-loading").hide(),$(".mdi-play").hide(),$("#metadata-input").hide(),$("#dendrogram-buttons-div").hide(),$("#g-centroid").hide(),$("#line-chart-feature-checkboxes input[type=checkbox]").prop("checked",!0),this.draw()}}class j extends L{constructor(t){super(),this.swarmData=t,this.swarm_features=Object.keys(this.swarmData[0]),this.lineChartWidth=5e3,this.trendChartsElem=["lower-outer-area","lower-inner-area","median-line","upper-inner-area","upper-outer-area"]}}class M extends j{constructor(t){super(t),this.lineChart()}lineChart(){T=Math.ceil(this.swarmData.length/this.lineChartWidth);let t=100,e=10,n=this.swarm_features,r=n.indexOf("time");n.splice(r,1);let a=[];if(this.swarmData.length>this.lineChartWidth){let t=new Array(n.length).fill(0);for(let e=0;e<this.swarmData.length;e++){for(let r=0;r<n.length;r++)t[r]+=this.swarmData[e][n[r]];if(e%T==0){let r={time:e/T};for(let e=0;e<n.length;e++)t[e]=t[e]/T,r[n[e]]=t[e];a.push(r),t=new Array(n.length).fill(0)}}}else a=this.swarmData;v=d3.scaleLinear().domain([0,a.length]).range([0,this.lineChartWidth]),m=d3.scaleLinear().domain([0,a.length]).range([0,this.lineChartWidth]);let i=d3.scaleLinear().domain([0,a.length]).range([0,this.lineChartWidth]),o=d3.axisBottom(m).ticks(10).tickSize(10).tickPadding(5).tickFormat((function(t){return Math.floor(t*T/1500)%60+":"+Math.floor(t*T/parameters.fps)%60+"::"+t*T%parameters.fps}));g=d3.scaleLinear().domain([0,100]).range([500,0]);let s=d3.axisLeft(g).ticks(0).tickSize(10).tickPadding(5),l=function(){let t=d3.mouse(this);if(t[0]<e||t[0]>this.lineChartWidth||t[1]<0||t[1]>500)return;let n=d3.scaleLinear().domain(v.range()).range(v.domain());this.setIndexTime(Math.floor(n(t[0]-e)*T))},d=d3.zoom().scaleExtent([1,20]).translateExtent([[0,0],[this.lineChartWidth,500]]).extent([[0,0],[this.lineChartWidth,500]]).on("zoom",(function(){let t=d3.event.transform;v=m.domain(t.rescaleX(i).domain());for(let t in u)u.hasOwnProperty(t)&&f.select("#"+t+"Line").attr("d",u[t]);for(let t in w)if(w.hasOwnProperty(t))for(let e=0;e<this.trendChartsElem.length;e++)f.select("#"+t+"TrendChart ."+this.trendChartsElem[e]).attr("d",w[t][this.trendChartsElem[e]]);p.call(o)})),c=d3.select("#swarm-vis").classed("svg-line-chart-container",!0).append("svg").attr("preserveAspectRatio","xMinYMin meet").attr("viewBox","0 0 "+this.lineChartWidth+" "+(500+t)).classed("svg-content",!0);f=c.append("svg:g").attr("id","lineChartZoom").attr("transform","translate("+e+",0)");let p=f.append("g").attr("class","x axis-line-chart").attr("transform","translate(0,500)").call(o);f.append("g").attr("class","y axis-line-chart").call(s),f.append("line").attr("class","time-line").attr("id","lineChartTimeLine").attr("x1",0).attr("y1",0).attr("x2",0).attr("y2",500);let h=d3.scaleOrdinal(d3.schemeCategory10),u={};for(let t=0;t<n.length;t++){let e=d3.min(a,(function(e){return e[n[t]]})),r=d3.max(a,(function(e){return e[n[t]]})),i=d3.scaleLinear().domain([e,r]).range([0,100]),o=d3.line().x((function(t){return m(t.time)})).y((function(e){return g(i(e[n[t]]))}));u[n[t]]=o,f.append("path").data([a]).attr("id",n[t]+"Line").attr("class","line lineChartLine").style("stroke",h(t)).attr("d",o).attr("name",n[t])}$("#lineChartTimeLine").appendTo("#lineChartZoom"),f.append("rect").attr("class","zoom").attr("width",this.lineChartWidth).attr("height",500).call(d).on("click",l).call(d3.drag().on("drag",l));let x=d3.selectAll(".line");c.append("g").attr("id","lineChartLegend").attr("transform","translate("+t+",550)").selectAll("rect.legend").data(x._groups[0]).enter().each((function(t,e){d3.select(this).append("rect").attr("class","legend").attr("width",100).attr("height",50).attr("x",600*e+"px").style("fill",t.style.stroke),d3.select(this).append("text").attr("id",t.attributes.id.value+"LegendTitle").attr("class","line-chart-legend-text").attr("y",40).attr("x",600*e+100+10+"px").text(t.attributes.name.value+": "),d3.select(this).append("text").attr("id",t.attributes.id.value+"Value").attr("class","line-chart-legend-text").attr("y",40).attr("x",600*e+100+d3.select("#"+t.attributes.id.value+"LegendTitle").node().getComputedTextLength()+10+"px").text("0.0")})),c.append("g").attr("id","trendChartLegend").attr("transform","translate("+t+",550)").selectAll("rect.legend").data(["5% - 95%","25% - 75%","Median"]).enter().each((function(t,e){d3.select(this).append("rect").attr("class","legend").attr("width",100).attr("height",50).attr("x",800*e+"px").style("fill",(function(){return 0===e?"#74a9cf":1===e?"#045a8d":"#525252"})),d3.select(this).append("text").attr("class","line-chart-legend-text").attr("y",40).attr("x",800*e+100+10+"px").text(t)})),$("#trendChartLegend").hide(),this.initLineChartButtons()}initLineChartButtons(){for(let t=0;t<this.swarm_features.length;t++){let e=this.swarm_features[t].split("_").join(" ");e=e.charAt(0).toUpperCase()+e.slice(1),$("#line-chart-feature-checkboxes").append('<tr><th> <div class="pretty p-switch p-fill p-bigger"><input type="checkbox" class="line-chart-check-box" id="draw-'+this.swarm_features[t]+'" data="#'+this.swarm_features[t]+'Line" /><div class="state"><label>'+e+"</label></div></div></th></tr>")}$(".line-chart-check-box").change((function(){let t=$(this);t.prop("checked")?$(t.attr("data")).show():$(t.attr("data")).hide()}))}}function S(){indexTime-=1}let _={},z="union";d3.scaleThreshold().domain([0,.1,.2,.3,.4,.5,.6,.7,.8,.9,1]).range(["#f7fbff","#deebf7","#c6dbef","#9ecae1","#6baed6","#4292c6","#2171b5","#08519c","#08306b"]);let O=[],E={},D={},W=["#7fc97f","#386cb0","#e7298a","#ff9900"];function B(t,e){let n=[],r=_["h"+e],a=t.children;for(let e=1;e<t.height;e++){if(a[0]&&a[0].depth===r){a.forEach((function(t){void 0!==t.data.name&&n.push(t.data.name)}));break}let t=[];a.forEach((function(e){void 0!==e.children&&(t=t.concat(e.children))})),a=t}return n}function U(t){let e=[];return t.forEach((function(t){let n=[];for(let e=0;e<t.length;e++){let r=u.find(n=>n.a===t[e]);r&&n.push([r.p[0],-r.p[1]])}n.length>=3&&e.push(d3.polygonHull(n))})),e}function G(t,e){_["h"+t]=e}function H(){let t,e;0!==Object.keys(E).length||0!==Object.keys(P).length?$("#hierarchy-legend-div").show():$("#hierarchy-legend-div").hide();let n=[],r=[];if($(".show-dendrogram").each((function(t,e){null!=E["h"+$(e).attr("data")]&&null!=$(e).attr("name")&&(n.push(E["h"+$(e).attr("data")]),r.push($(e).attr("name")))})),0!==Object.keys(P).length)for(let t in P)-1===n.indexOf(P[t])&&(n.push(P[t]),r.push("Network"));t=b.selectAll("rect.legend").data(n),e=b.selectAll("text.legend-text").data(r),t.style("fill",(function(t){return t})),t.enter().append("rect").attr("class","legend").attr("width",50).attr("height",20).attr("y",0).attr("x",(function(t,e){return 50+2.5*e*50+"px"})).style("fill",(function(t){return t})),t.exit().remove(),e.text((function(t){return t})),e.enter().append("text").attr("class","legend-text").attr("y",40).attr("x",(function(t,e){return 50+2.5*e*50+"px"})).text((function(t){return t})),e.exit().remove()}let R,I=!1,N=.5,P={},Y=d3.scaleThreshold().domain([0,.1,.2,.3,.4,.5,.6,.7,.8,.9,1]).range(["#f7fbff","#deebf7","#c6dbef","#9ecae1","#6baed6","#4292c6","#2171b5","#08519c","#08306b"]);function V(t){N=t}let X="application/vnd.api+json";var F;function J(){let t=[];$.ajax({url:"/api/percentile/"+parameters.id,dataType:"json",type:"GET",contentType:"application/json; charset=utf-8",headers:{Accept:X},success:function(e){for(let n=0;n<e.length;n++)t[e[n].feature]=[e[n].min,e[n].p1,e[n].p2,e[n].p3,e[n].p5,e[n].p7,e[n].p8,e[n].p9,e[n].max];it(t),function(t){for(var e in t)if(t.hasOwnProperty(e)){let t=e.split("_").join(" ");t=t.charAt(0).toUpperCase()+t.slice(1),$("#absolute-feature-checkboxes").append('<tr><th> <div class="pretty p-switch p-fill p-bigger"><input type="checkbox" id="draw-'+e+'"/><div class="state"><label>'+t+'</label></div></div><div class="float-right draw-details" id="draw-'+e+'-details"><div class="pretty p-icon p-toggle p-plain"><input type="checkbox" id="draw-'+e+'-input" /><div class="state p-success-o p-on"><i class="mdi mdi-image-area"></i><label></label></div><div class="state p-off"><i class="mdi mdi-image-off"></i><label></label></div></div></div></th></tr>')}$(".draw-details").hide(),h()}(t)}})}function Z(){$.ajax({url:"/api/dataset/networks/"+parameters.id,dataType:"json",type:"GET",contentType:"application/json; charset=utf-8",headers:{Accept:X},success:function(t){!function(t){if(t.length)for(let e=0;e<t.length;e++)t[e].finished&&$("#networks-hierarchies-table tbody").append("<tr><td>"+t[e].name+'</td> <td> <button type="button" class="btn btn-default" data='+t[e].network_id+" name="+t[e].name+'><span class="mdi mdi-graphql" aria-hidden="true"></span></button></td> <td><div class="pretty p-switch p-fill"><input type="checkbox" class="hiearchy-checkbox" data="'+t[e].network_id+'" name="'+t[e].name+'"><div class="state p-success"><label></label></div></div></td><td>---</td>');else $("#networks-hierarchies-table").append("There is no network data for this dataset")}(t)}})}n(1);let q=[],K=[],Q=[],tt={},et={},nt={},rt={};function at(t){q=q.concat(t)}function it(t){tt=t}function ot(t){K=t,function(){let t=["#fff","#e41a1c","#377eb8","#4daf4a","#984ea3","#ff7f00","#ffff33","#a65628"];if(K.length)for(let e=0;e<K.length;e++)$("#metadata-table").find("tbody").append($('<tr id="metadata-row-'+K[e].animal_id+'">').append($("<td>").append(K[e].animal_id)).append($("<td>").append(K[e].species)).append($("<td>").append(K[e].sex)).append($("<td>").append(K[e].size)).append($("<td>").append(K[e].weight)).append($("<td>").append('<div class="dropdown">\n                                              <a class="dropdown-toggle btn btn-default btn-color" data-toggle="dropdown" href="#">\n                                              <div id="preview" class="metadata-swatch" style="background-color:#fff"></div>\n                                              <input class="color-field" value="White" style="display:none;">\n                                              </a>\n                                              <ul class="dropdown-menu" role="menu" aria-labelledby="dLabel"> '+function(e){let n="";for(let r=0;r<t.length;r++)n+='<div class="metadata-swatch metadata-swatch-clickable" style="background-color:'+t[r]+'" value="'+e+'"></div>';return n}(K[e].animal_id)+"</ul></div>")));else $("#metadata-table").find("tbody").append("There is no metadata for this dataset")}()}function st(t,e){for(let n=0;n<t.length;n++)void 0===Q[n]&&Q.push({}),t[n]&&!isNaN(t[n])?Q[n][e]=+t[n]:Q[n][e]=t[n]}function lt(t,e){for(let n=0;n<t.length;n++)void 0===q[n]&&q.push({}),q[n][e]=+t[n]}function dt(t){et=t}function ct(t,e){0===Object.keys(t).length&&t.constructor===Object?(delete nt["h"+e],delete _["h"+e],function(t){delete E["h"+t]}(e)):(nt["h"+e]=t,G(e,2),function(t){for(let e in P)if(e==="h"+t)return void(E["h"+t]=P[e]);for(let e=0;e<W.length;e++){let n=!0;for(let t in E)E.hasOwnProperty(t)&&E[t]===W[e]&&(n=!1);if(n){if(0===Object.keys(P).length)return void(E["h"+t]=W[e]);for(let n in P)if(P[n]!==W[e])return void(E["h"+t]=W[e])}}}(e)),H()}function pt(t){rt=t}$(document).ready((function(){window.EventSource?((F=new EventSource("/api/movement_only/"+parameters.id)).onmessage=function(t){"close"===t.data?(F.close(),window.setTimeout((function t(){$.active>0?window.setTimeout(t,100):new A}),100)):at(JSON.parse(t.data))},F.addEventListener("error",(function(t){t.readyState==EventSource.CLOSED&&alert("Streaming error")}),!1)):alert("Webbrowser does not support streaming"),J(),$.ajax({url:"/api/dataset/"+parameters.id+"/animal_ids",dataType:"json",type:"GET",contentType:"application/json; charset=utf-8",headers:{Accept:X},success:function(t){pt(t)}}),function(){const t=["swarm_time","swarm_speed","swarm_acceleration","swarm_convex_hull_area","swarm_distance_centroid","swarm_direction","swarm_polarisation"];for(let e=0;e<t.length;e++)$.ajax({url:"/api/dataset/"+parameters.id+"/"+t[e],dataType:"json",type:"GET",contentType:"application/json; charset=utf-8",headers:{Accept:X},success:function(n){st(n,t[e].replace("swarm_",""))}})}(),$.ajax({url:"/api/metadata/"+parameters.id,dataType:"json",type:"GET",contentType:"application/json; charset=utf-8",headers:{Accept:X},success:function(t){ot(t)}}),Z()}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vZXhwbG9yZS9leHBsb3JlLmNzcz9lNzJlIiwid2VicGFjazovLy8uL2V4cGxvcmUvZXhwbG9yZS5jc3MiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvdXJscy5qcyIsIndlYnBhY2s6Ly8vLi9leHBsb3JlL3NwYXRpYWxfdmlldy9pbnRlcmFjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9leHBsb3JlL3NwYXRpYWxfdmlldy9jb2xvcl9waWNrZXIuanMiLCJ3ZWJwYWNrOi8vLy4vZXhwbG9yZS9zcGF0aWFsX3ZpZXcvbGVnZW5kLmpzIiwid2VicGFjazovLy8uL2V4cGxvcmUvbWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vZXhwbG9yZS9saXN0ZW5lci5qcyIsIndlYnBhY2s6Ly8vLi9leHBsb3JlL2hlbHBlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vZXhwbG9yZS9zcGF0aWFsX3ZpZXcvc3BhdGlhbF92aWV3LmpzIiwid2VicGFjazovLy8uL2V4cGxvcmUvaGllcmFyY2h5LmpzIiwid2VicGFjazovLy8uL2V4cGxvcmUvbmV0d29yay5qcyIsIndlYnBhY2s6Ly8vLi9leHBsb3JlL2FqYXhfcXVlcmllcy5qcyIsIndlYnBhY2s6Ly8vLi9leHBsb3JlL2V4cGxvcmUuanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJjb250ZW50Iiwib3B0aW9ucyIsInRyYW5zZm9ybSIsInVuZGVmaW5lZCIsImxvY2FscyIsIl9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyIsInB1c2giLCJ1c2VTb3VyY2VNYXAiLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNzc01hcHBpbmciLCJidG9hIiwic291cmNlTWFwcGluZyIsInNvdXJjZU1hcCIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJjb25jYXQiLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZSIsInNvdXJjZVJvb3QiLCJqb2luIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsIm1lZGlhUXVlcnkiLCJkZWR1cGUiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwibGVuZ3RoIiwiaWQiLCJfaSIsImZuIiwibWVtbyIsInN0eWxlc0luRG9tIiwiaXNPbGRJRSIsIndpbmRvdyIsImRvY3VtZW50IiwiYWxsIiwiYXRvYiIsImFwcGx5IiwiYXJndW1lbnRzIiwiZ2V0VGFyZ2V0IiwidGFyZ2V0IiwicXVlcnlTZWxlY3RvciIsImdldEVsZW1lbnQiLCJzdHlsZVRhcmdldCIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImUiLCJzaW5nbGV0b24iLCJzaW5nbGV0b25Db3VudGVyIiwic3R5bGVzSW5zZXJ0ZWRBdFRvcCIsImZpeFVybHMiLCJhZGRTdHlsZXNUb0RvbSIsInN0eWxlcyIsImRvbVN0eWxlIiwicmVmcyIsImoiLCJwYXJ0cyIsImFkZFN0eWxlIiwibGlzdFRvU3R5bGVzIiwibmV3U3R5bGVzIiwiYmFzZSIsInBhcnQiLCJjc3MiLCJtZWRpYSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlIiwiaW5zZXJ0SW50byIsIkVycm9yIiwibGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AiLCJpbnNlcnRBdCIsIm5leHRTaWJsaW5nIiwiaW5zZXJ0QmVmb3JlIiwiYXBwZW5kQ2hpbGQiLCJmaXJzdENoaWxkIiwiYmVmb3JlIiwicmVtb3ZlU3R5bGVFbGVtZW50IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiaWR4IiwiaW5kZXhPZiIsInNwbGljZSIsImNyZWF0ZVN0eWxlRWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJhdHRycyIsInR5cGUiLCJhZGRBdHRycyIsImVsIiwia2V5cyIsImZvckVhY2giLCJzZXRBdHRyaWJ1dGUiLCJvYmoiLCJ1cGRhdGUiLCJyZW1vdmUiLCJyZXN1bHQiLCJzdHlsZUluZGV4IiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsInJldm9rZU9iamVjdFVSTCIsIkJsb2IiLCJsaW5rIiwicmVsIiwiY3JlYXRlTGlua0VsZW1lbnQiLCJ1cGRhdGVMaW5rIiwiaHJlZiIsImFwcGx5VG9UYWciLCJuZXdPYmoiLCJERUJVRyIsIm5ld0xpc3QiLCJtYXlSZW1vdmUiLCJ0ZXh0U3RvcmUiLCJyZXBsYWNlVGV4dCIsImluZGV4IiwicmVwbGFjZW1lbnQiLCJmaWx0ZXIiLCJCb29sZWFuIiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJjc3NOb2RlIiwiY3JlYXRlVGV4dE5vZGUiLCJjaGlsZE5vZGVzIiwiYXV0b0ZpeFVybHMiLCJjb252ZXJ0VG9BYnNvbHV0ZVVybHMiLCJibG9iIiwib2xkU3JjIiwibG9jYXRpb24iLCJiYXNlVXJsIiwicHJvdG9jb2wiLCJob3N0IiwiY3VycmVudERpciIsInBhdGhuYW1lIiwicmVwbGFjZSIsImZ1bGxNYXRjaCIsIm9yaWdVcmwiLCJuZXdVcmwiLCJ1bnF1b3RlZE9yaWdVcmwiLCJ0cmltIiwiJDEiLCJ0ZXN0Iiwic2xpZGVyIiwidG9vbHRpcCIsInN2Z0xlZ2VuZCIsImNvbG9yU2NhbGUiLCJjb2xvciIsImNvbG9yYnJld2VyIiwiQnVZbEJ1IiwicmV0dXJuQ29sb3JTY2FsZSIsImQzIiwic2NhbGVMaW5lYXIiLCJkb21haW4iLCJyYW5nZSIsInNjYWxlVGhyZXNob2xkIiwiY2hhbmdlTGVnZW5kIiwibGVnZW5kIiwibGVnZW5kVGV4dCIsIiQiLCJzaG93IiwiYWN0aXZlU2NhbGUiLCJ0bXBTY2FsZSIsInNlbGVjdEFsbCIsImhpZGUiLCJlbnRlciIsImFwcGVuZCIsImF0dHIiLCJleGl0IiwidGV4dCIsIk1hdGgiLCJjZWlsIiwibWV0YWRhdGFDb2xvciIsInBsYXlCb29sZWFuIiwiaW5pdFRyZW5kQ2hhcnRMaXN0ZW5lciIsImNsaWNrIiwiZmluZCIsInByb3AiLCJzd2FybURhdGEiLCJkaXNhYmxlTGluZUNoYXJ0IiwiU3RyaW5nIiwiaGFzaENvZGUiLCJoYXNoIiwiY2hhckNvZGVBdCIsInNlbGVjdGlvbiIsIm1vdmVUb0JhY2siLCJlYWNoIiwic3BhdGlhbFZpZXciLCJ6b29tIiwic2NhbGVFeHRlbnQiLCJvbiIsImV2ZW50IiwieCIsIm1pbiIsInRhbmtXaWR0aCIsImsiLCJtYXgiLCJ5IiwidGFua0hlaWdodCIsInpvb21Hcm91cCIsImdYYXhpcyIsInhBeGlzIiwic2NhbGUiLCJyZXNjYWxlWCIsImdZYXhpcyIsInlBeGlzIiwicmVzY2FsZVkiLCJpbmRleFRpbWUiLCJzdmdDb250YWluZXIiLCJzZWxlY3QiLCJjbGFzc2VkIiwidGFuayIsInBhcmFtZXRlcnMiLCJpbnZlcnRlZF94IiwiaW52ZXJ0ZWRfeSIsIm1lZG9pZEFuaW1hbCIsImFjdGl2ZUFuaW1hbHMiLCJhcnJheUFuaW1hbHMiLCJ0bXAiLCJ0aW1lVG9XYWl0IiwidmFsIiwiYW5pbWFsU2NhbGUiLCJkYXRhc2V0Iiwic2V0VGltZW91dCIsImRyYXdEZW5kcm9ncmFtIiwiZmxvb3IiLCJuZXR3b3JrVmlzIiwic3ZnQW5pbWFscyIsIm5ldHdvcmtEYXRhIiwibmV0d29yayIsImFuaW1hbDEiLCJhbmltYWwyIiwibmV0d29ya0NvbG9yU2NhbGUiLCJuZXR3b3JrQXV0byIsInRtcEFycmF5Iiwic2V0TmV0d29yTGltaXQiLCJhcnIiLCJzb3J0IiwiYSIsImIiLCJsb3dlciIsInVwcGVyIiwid2VpZ2h0IiwicGVyY2VudGlsZXMiLCJuZXR3b3JrTGltaXQiLCJ0cmlhbmd1bGF0aW9uIiwidm9yb25vaSIsImlzIiwic3BsaXQiLCJhbmltYWxHcm91cGluZ3MiLCJkYXRhc2V0TWV0YWRhdGEiLCJwYWdlWCIsInBhZ2VZIiwiaHRtbCIsInRvb2x0aXBGdW5jdGlvbiIsInRyYW5zaXRpb24iLCJkdXJhdGlvbiIsImluY2x1ZGVzIiwiaGFzQ2xhc3MiLCJkcmF3IiwiaHVsbFBhdGgiLCJpc0VtcHR5T2JqZWN0IiwiY2VudHJvaWQiLCJ1cGRhdGVMaW5lQ2hhcnQiLCJ0cmVlRGF0YSIsIm5vZGVzIiwiaGllcmFyY2h5IiwiY2hpbGRyZW4iLCJjb2xsYXBzZSIsInRyZWVtYXAiLCJjb25zb2xlIiwibG9nIiwiaGllcmFyY2h5TGV2ZWxzIiwiZGVzY2VuZGFudHMiLCJzbGljZSIsImRpYWdvbmFsTGluZXMiLCJub2RlIiwibm9kZUVudGVyIiwidG9vbHRpcERpdiIsImFkZEhpZ2hsaWdodFNwYXRpYWxWaWV3IiwicmVtb3ZlSGlnaGxpZ2h0U3BhdGlhbFZpZXciLCJoaWVyYXJjaHlHcm91cFN0ZGV2Iiwic3RhbmRhcmREZXZpYXRpb25Db2xvclNjYWxlIiwic3RhbmRhcmREZXZpYXRpb24iLCJoaWVyYXJjaHlJZHMiLCJuZXR3b3JrSGllcmFyY2h5IiwiaGllcmFyY2h5VmVydGljZXMiLCJyb290Iiwic2hvd05ldHdvcmtIaWVyYXJjaHkiLCJuZXR3b3JrSGllcmFyY2h5SWRzIiwiZ2V0SGllcmFyY2h5TGV2ZWwiLCJnZXRIaWVyYXJjaHlWZXJ0aWNlcyIsImhpZXJhcmNoaWVzIiwic2V0T3BlcmF0aW9uIiwiaGllcmFyY2h5Q29sb3JzIiwiaGllcmFyeUh1bGxzIiwiZHJhd0hpZXJhcmNoeSIsInN1cGVyIiwic3BhdGlhbFZpZXdJbml0IiwibWluUG9pbnQiLCJtYXhQb2ludCIsImF4aXNCb3R0b20iLCJ0aWNrcyIsInRpY2tTaXplIiwidGlja1BhZGRpbmciLCJheGlzUmlnaHQiLCJwZXJjZW50YWdlIiwiYmFja2dyb3VuZF9pbWFnZSIsInN0ZXAiLCJzbGlkZSIsInVpIiwic3BhY2UiLCJhcHBlbmRUbyIsImluaXRTbGlkZXJzIiwiZW50cmllcyIsInJlbW92ZUNsYXNzIiwiYWRkQ2xhc3MiLCJoZWlnaHQiLCJ3aWR0aCIsIkxpbmVDaGFydCIsImRyYWdnYWJsZSIsImNvbnRhaW5tZW50IiwicmVzaXphYmxlIiwiYXNwZWN0UmF0aW8iLCJtYXhXaWR0aCIsIkNoYXJ0Iiwic3dhcm1fZmVhdHVyZXMiLCJsaW5lQ2hhcnRXaWR0aCIsInRyZW5kQ2hhcnRzRWxlbSIsImxpbmVDaGFydCIsIm1hcmdpbiIsImxpbmVDaGFydERhdGEiLCJBcnJheSIsImZpbGwiLCJ0bXBfb2JqZWN0IiwieDIiLCJ0aWNrRm9ybWF0IiwiYXhpc0xlZnQiLCJkcmFnZ2VkIiwiY29vcmRzIiwibW91c2UiLCJzZXRJbmRleFRpbWUiLCJ0cmFuc2xhdGVFeHRlbnQiLCJleHRlbnQiLCJsaW5lcyIsInN3YXJtTGluZUNoYXJ0IiwibGluZV9jb2xvcnMiLCJzY2FsZU9yZGluYWwiLCJzY2hlbWVDYXRlZ29yeTEwIiwibm9ybWFsaXphdGlvblNjYWxlIiwibGluZSIsImRyYWciLCJjaGFydExpbmVzIiwiX2dyb3VwcyIsInN0cm9rZSIsImF0dHJpYnV0ZXMiLCJnZXRDb21wdXRlZFRleHRMZW5ndGgiLCJpbml0TGluZUNoYXJ0QnV0dG9ucyIsImNhcGl0YWxpemVkX2ZlYXR1cmVfc3RyaW5nIiwiY2hhckF0IiwidG9VcHBlckNhc2UiLCJjaGFuZ2UiLCJjaGVja2JveCIsImRlY0luZGV4VGltZSIsImxldmVsIiwidG1wX25vZGVzIiwiY2x1c3RlciIsInZlcnRpY2VzIiwiZ3JvdXBNZW1iZXIiLCJwb2x5Z29uSHVsbCIsInNldEhpZXJhcmNoeUxldmVsIiwiY2hhbmdlSGllcmFyY2h5TGVnZW5kIiwibmV0d29ya0NvbG9yIiwibGVnZW5kRGF0YSIsImxlZ2VuZFRleHREYXRhIiwiSlNPTkFQSV9NSU1FVFlQRSIsImdldFBlcmNlbnRpbGUiLCJkYXRhU2V0UGVyY2VudGlsZSIsImFqYXgiLCJ1cmwiLCJkYXRhVHlwZSIsImNvbnRlbnRUeXBlIiwiaGVhZGVycyIsInN1Y2Nlc3MiLCJzZXREYXRhU2V0UGVyY2VudGlsZSIsImFkZEFic29sdXRlRmVhdHVyZUJ1dHRvbnMiLCJnZXROZXR3b3JrRGF0YUJ1dHRvbiIsImFkZE5ldHdvcmtCdXR0b25zIiwiYWRkVG9EYXRhc2V0Iiwic2V0TWV0YURhdGEiLCJjb2xvcnMiLCJyZXN1bHRTdHJpbmciLCJpbml0aWFsaXplTWV0YWRkYXRhIiwic2V0U3dhcm1EYXRhIiwiZmVhdHVyZSIsImlzTmFOIiwic2V0RGF0YXNldEZlYXR1cmUiLCJzZXROZXR3b3JrRGF0YSIsInNldEhpZXJhcmNoeURhdGEiLCJuZXR3b3JrX2lkIiwiY29uc3RydWN0b3IiLCJyZW1vdmVIaWVyYXJjaHlDb2xvciIsInRtcF9ib29sZWFuIiwic2V0SGllcmFyY2h5Q29sb3IiLCJzZXRBbmltYWxJZHMiLCJyZWFkeSIsIkV2ZW50U291cmNlIiwib25tZXNzYWdlIiwiY2xvc2UiLCJjaGVja1BlbmRpbmdSZXF1ZXN0IiwiYWN0aXZlIiwicGFyc2UiLCJhZGRFdmVudExpc3RlbmVyIiwicmVhZHlTdGF0ZSIsIkNMT1NFRCIsImFsZXJ0Il0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFD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QUFtQixzQkFJbEQsSUFBSyxJQUFJMVcsRUFBSSxFQUFHQSxFQUFJMFcsRUFBZXpTLE9BQVFqRSxJQUN2Q21NLEVBQUUyTixLQUFLLENBQ0hDLElBQUssZ0JBQWtCdkssV0FBZSxHQUFJLElBQU1rSCxFQUFlMVcsR0FDL0RnYSxTQUFVLE9BQ1ZwUyxLQUFNLE1BQ05xUyxZQUFhLGtDQUNiQyxRQUFTLENBQ0wsT0FBVVAsR0FFZFEsUUFBUyxTQUFTN1csR0FHZHVYLEdBQWF2WCxFQUZDb1QsRUFBZTFXLEdBQUcySyxRQUFRLFNBQVUsUUNyRTlELEdEaUZBd0IsRUFBRTJOLEtBQUssQ0FDSEMsSUFBSyxpQkFBbUJ2SyxXQUFlLEdBQ3ZDd0ssU0FBVSxPQUNWcFMsS0FBTSxNQUNOcVMsWUFBYSxrQ0FDYkMsUUFBUyxDQUNMLE9BQVVQLEdBRWRRLFFBQVMsU0FBUzdXLEdBQ2RtWCxHQUFZblgsTUNwRnBCIiwiZmlsZSI6ImV4cGxvcmUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gNik7XG4iLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9leHBsb3JlLmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9leHBsb3JlLmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vZXhwbG9yZS5jc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCIvLyBJbXBvcnRzXG52YXIgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fID0gcmVxdWlyZShcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIik7XG5leHBvcnRzID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLyogSWNvbnMgZm9yIGJvb3RzdHJhcCA0ICovXFxyXFxuXFxyXFxuLm1kaTo6YmVmb3JlIHtcXHJcXG4gICAgZm9udC1zaXplOiAyNHB4O1xcclxcbiAgICBsaW5lLWhlaWdodDogMTRweDtcXHJcXG59XFxyXFxuXFxyXFxuLmJ0biAubWRpOjpiZWZvcmUge1xcclxcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxuICAgIHRvcDogNHB4O1xcclxcbn1cXHJcXG5cXHJcXG4uYnRuLXhzIC5tZGk6OmJlZm9yZSB7XFxyXFxuICAgIGZvbnQtc2l6ZTogMThweDtcXHJcXG4gICAgdG9wOiAzcHg7XFxyXFxufVxcclxcblxcclxcbi5idG4tc20gLm1kaTo6YmVmb3JlIHtcXHJcXG4gICAgZm9udC1zaXplOiAxOHB4O1xcclxcbiAgICB0b3A6IDNweDtcXHJcXG59XFxyXFxuXFxyXFxuLmRyb3Bkb3duLW1lbnUgLm1kaSB7XFxyXFxuICAgIHdpZHRoOiAxOHB4O1xcclxcbn1cXHJcXG5cXHJcXG4uZHJvcGRvd24tbWVudSAubWRpOjpiZWZvcmUge1xcclxcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxuICAgIHRvcDogNHB4O1xcclxcbiAgICBsZWZ0OiAtOHB4O1xcclxcbn1cXHJcXG5cXHJcXG4ubmF2IC5tZGk6OmJlZm9yZSB7XFxyXFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG4gICAgdG9wOiA0cHg7XFxyXFxufVxcclxcblxcclxcbi5uYXZiYXIgLm5hdmJhci10b2dnbGUgLm1kaTo6YmVmb3JlIHtcXHJcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgICB0b3A6IDRweDtcXHJcXG4gICAgY29sb3I6ICNGRkY7XFxyXFxufVxcclxcblxcclxcbi5icmVhZGNydW1iIC5tZGk6OmJlZm9yZSB7XFxyXFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG4gICAgdG9wOiA0cHg7XFxyXFxufVxcclxcblxcclxcbi5icmVhZGNydW1iIGE6aG92ZXIge1xcclxcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxyXFxufVxcclxcblxcclxcbi5icmVhZGNydW1iIGE6aG92ZXIgc3BhbiB7XFxyXFxuICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xcclxcbn1cXHJcXG5cXHJcXG4uYWxlcnQgLm1kaTo6YmVmb3JlIHtcXHJcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgICB0b3A6IDRweDtcXHJcXG4gICAgbWFyZ2luLXJpZ2h0OiAycHg7XFxyXFxufVxcclxcblxcclxcbi5pbnB1dC1ncm91cC1hZGRvbiAubWRpOjpiZWZvcmUge1xcclxcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxuICAgIHRvcDogM3B4O1xcclxcbn1cXHJcXG5cXHJcXG4ubmF2YmFyLWJyYW5kIC5tZGk6OmJlZm9yZSB7XFxyXFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG4gICAgdG9wOiAycHg7XFxyXFxuICAgIG1hcmdpbi1yaWdodDogMnB4O1xcclxcbn1cXHJcXG5cXHJcXG4ubGlzdC1ncm91cC1pdGVtIC5tZGk6OmJlZm9yZSB7XFxyXFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG4gICAgdG9wOiAzcHg7XFxyXFxuICAgIGxlZnQ6IC0zcHhcXHJcXG59XFxyXFxuXFxyXFxuLyogU1ZHIGVsZW1lbnRzIGFuZCB0ZXh0ICovXFxyXFxuXFxyXFxuI21haW4tdmlzIHtcXHJcXG4gICAgbWFyZ2luLWJvdHRvbTogMTBweDtcXHJcXG59XFxyXFxuXFxyXFxuLnN2Zy1jb250YWluZXIge1xcclxcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxyXFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG4gICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgIC8qIGFzcGVjdCByYXRpbyAqL1xcclxcbiAgICB2ZXJ0aWNhbC1hbGlnbjogdG9wO1xcclxcbiAgICBvdmVyZmxvdzogdmlzaWJsZTtcXHJcXG59XFxyXFxuXFxyXFxuLnN2Zy1jb250ZW50IHtcXHJcXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcclxcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICAgIGJvcmRlcjogMXB4IHNvbGlkICMwMDA7XFxyXFxufVxcclxcblxcclxcbiNtYWluLXZpcy1sZWdlbmQtZGl2IHtcXHJcXG4gICAgZGlzcGxheTogbm9uZTtcXHJcXG59XFxyXFxuXFxyXFxuI2hpZXJhcmNoeS1sZWdlbmQtZGl2IHtcXHJcXG4gICAgZGlzcGxheTogbm9uZTtcXHJcXG59XFxyXFxuXFxyXFxuI21haW4tdmlzLWxlZ2VuZCB7XFxyXFxuICAgIGZsb2F0OiByaWdodDtcXHJcXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcclxcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxuICAgIG92ZXJmbG93OiB2aXNpYmxlO1xcclxcbiAgICB0b3A6IDEwcHg7XFxyXFxuICAgIGxlZnQ6IDEwcHg7XFxyXFxufVxcclxcblxcclxcbiNoaWVyYXJjaHktbGVnZW5kIHtcXHJcXG4gICAgZmxvYXQ6IGxlZnQ7XFxyXFxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXHJcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgICBvdmVyZmxvdzogdmlzaWJsZTtcXHJcXG4gICAgdG9wOiAxMHB4O1xcclxcbiAgICBsZWZ0OiAxMHB4O1xcclxcbn1cXHJcXG5cXHJcXG4uc3ZnLWNvbnRlbnQtZGVuZHJvZ3JhbSB7XFxyXFxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXHJcXG4gICAgYm9yZGVyOiAxcHggc29saWQgIzAwMDtcXHJcXG59XFxyXFxuXFxyXFxuLnN2Zy1saW5lLWNoYXJ0LWNvbnRhaW5lciB7XFxyXFxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXHJcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgICB3aWR0aDogMTAwJTtcXHJcXG4gICAgaGVpZ2h0OiBhdXRvO1xcclxcbiAgICAvKiBkZXBlbmRzIG9uIHN2ZyByYXRpbyAqL1xcclxcbiAgICBwYWRkaW5nLWJvdHRvbTogMTclO1xcclxcbiAgICAvKiBhc3BlY3QgcmF0aW8gKi9cXHJcXG4gICAgdmVydGljYWwtYWxpZ246IHRvcDtcXHJcXG4gICAgb3ZlcmZsb3c6IHZpc2libGU7XFxyXFxufVxcclxcblxcclxcbi5zdmctZGVuZHJvZ3JhbS1jb250YWluZXIge1xcclxcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxyXFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG4gICAgaGVpZ2h0OiBhdXRvO1xcclxcbiAgICB2ZXJ0aWNhbC1hbGlnbjogdG9wO1xcclxcbiAgICBvdmVyZmxvdzogdmlzaWJsZTtcXHJcXG59XFxyXFxuXFxyXFxuLmF4aXMgcGF0aCB7XFxyXFxuICAgIGRpc3BsYXk6IG5vbmU7XFxyXFxufVxcclxcblxcclxcbi5heGlzIGxpbmUge1xcclxcbiAgICBzdHJva2Utb3BhY2l0eTogMC4zO1xcclxcbiAgICBzaGFwZS1yZW5kZXJpbmc6IGNyaXNwRWRnZXM7XFxyXFxufVxcclxcblxcclxcbi54IHtcXHJcXG4gICAgZm9udC1zaXplOiAxZW07XFxyXFxufVxcclxcblxcclxcbi55IHtcXHJcXG4gICAgZm9udC1zaXplOiAxZW07XFxyXFxufVxcclxcblxcclxcbi5heGlzLWxpbmUtY2hhcnQgcGF0aCBsaW5lIHtcXHJcXG4gICAgZmlsbDogbm9uZTtcXHJcXG4gICAgc3Ryb2tlOiAjMDAwO1xcclxcbiAgICBzaGFwZS1yZW5kZXJpbmc6IGNyaXNwRWRnZXM7XFxyXFxufVxcclxcblxcclxcbi5saW5lIHtcXHJcXG4gICAgZmlsbDogbm9uZTtcXHJcXG4gICAgc3Ryb2tlLXdpZHRoOiA1cHg7XFxyXFxufVxcclxcblxcclxcbi8qIFRpbWUgICovXFxyXFxuXFxyXFxuLmZyYW1lLXRleHQge1xcclxcbiAgICBtYXJnaW4tdG9wOiAwO1xcclxcbiAgICBtYXJnaW4tYm90dG9tOiAwO1xcclxcbiAgICBmb250LXNpemU6IDJlbTtcXHJcXG4gICAgY29sb3I6IGluaGVyaXQ7XFxyXFxuICAgIGZvbnQtd2VpZ2h0OiA1MDA7XFxyXFxuICAgIGxpbmUtaGVpZ2h0OiAxLjE7XFxyXFxufVxcclxcblxcclxcbi8qIFNsaWRlciB0aWNrcyAgKi9cXHJcXG5cXHJcXG4udWktc2xpZGVyLXRpY2sge1xcclxcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxyXFxuICAgIHdpZHRoOiAzcHg7XFxyXFxuICAgIGJhY2tncm91bmQ6ICMzMzdhYjc7XFxyXFxuICAgIGhlaWdodDogMC44ZW07XFxyXFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG59XFxyXFxuXFxyXFxuLyogTGFvZGluZyBnaWYgICAqL1xcclxcblxcclxcbiNsb2FkaW5nIHtcXHJcXG4gICAgZGlzcGxheTogYmxvY2s7XFxyXFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXHJcXG59XFxyXFxuXFxyXFxuLyogQ29sb3IgbGVnZW5kICAgICovXFxyXFxuXFxyXFxuLmxlZ2VuZCB7XFxyXFxuICAgIGZvbnQtc2l6ZTogMTJweDtcXHJcXG4gICAgc3Ryb2tlOiAjMDAwO1xcclxcbn1cXHJcXG5cXHJcXG4ubGVnZW5kLXRleHQge1xcclxcbiAgICBmb250LXNpemU6IDEuMmVtO1xcclxcbiAgICBjb2xvcjogaW5oZXJpdDtcXHJcXG4gICAgbGluZS1oZWlnaHQ6IDEuMTtcXHJcXG59XFxyXFxuXFxyXFxuLmxpbmUtY2hhcnQtbGVnZW5kLXRleHQge1xcclxcbiAgICBmb250LXNpemU6IDJlbTtcXHJcXG4gICAgY29sb3I6IGluaGVyaXQ7XFxyXFxuICAgIGxpbmUtaGVpZ2h0OiAxLjE7XFxyXFxufVxcclxcblxcclxcbi50aW1lLWxpbmUge1xcclxcbiAgICBmaWxsOiBub25lO1xcclxcbiAgICBzdHJva2Utd2lkdGg6IDVweDtcXHJcXG4gICAgc3Ryb2tlOiAjMDAwO1xcclxcbn1cXHJcXG5cXHJcXG4vKnN3YXJtIGZlYXR1cmVzICovXFxyXFxuXFxyXFxuLmNlbnRyb2lkIHtcXHJcXG4gICAgZmlsbC1vcGFjaXR5OiAwO1xcclxcbiAgICBzdHJva2U6ICNlNzI5OGE7XFxyXFxuICAgIHN0cm9rZS13aWR0aDogM3B4O1xcclxcbn1cXHJcXG5cXHJcXG4ubWVkb2lkIHtcXHJcXG4gICAgZmlsbDogI2U3Mjk4YSAhaW1wb3J0YW50O1xcclxcbiAgICBzdHJva2U6ICNlNzI5OGEgIWltcG9ydGFudDtcXHJcXG59XFxyXFxuXFxyXFxuLmh1bGwtcGF0aCB7XFxyXFxuICAgIGZpbGw6ICNmZmY7XFxyXFxuICAgIGZpbGwtb3BhY2l0eTogMDtcXHJcXG4gICAgc3Ryb2tlLXdpZHRoOiAzO1xcclxcbiAgICBzdHJva2U6ICMyNTI1MjU7XFxyXFxuICAgIHN0cm9rZS1vcGFjaXR5OiAwLjU7XFxyXFxufVxcclxcblxcclxcbi5oaWVyYXJjaHktZ3JvdXAge1xcclxcbiAgICBzdHJva2Utd2lkdGg6IDEwO1xcclxcbiAgICBzdHJva2UtbGluZWpvaW46IHJvdW5kO1xcclxcbiAgICBvcGFjaXR5OiAwLjI7XFxyXFxufVxcclxcblxcclxcbi5kZWxhdW5heS10cmlhbmd1bGF0aW9uIHtcXHJcXG4gICAgZmlsbC1vcGFjaXR5OiAwO1xcclxcbiAgICBzdHJva2Utd2lkdGg6IDI7XFxyXFxuICAgIHN0cm9rZTogIzAwMDtcXHJcXG4gICAgc3Ryb2tlLW9wYWNpdHk6IDAuNDtcXHJcXG59XFxyXFxuXFxyXFxuLyogQ29sb3IgYnJld2VyIHBpY2tlciBkaXYgKi9cXHJcXG5cXHJcXG4ucGFsZXR0ZSB7XFxyXFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXHJcXG4gICAgZGlzcGxheTogdGFibGU7XFxyXFxuICAgIHZlcnRpY2FsLWFsaWduOiBib3R0b207XFxyXFxuICAgIG1hcmdpbjogNHB4IDAgNHB4IDRweDtcXHJcXG4gICAgYmFja2dyb3VuZDogI2ZmZjtcXHJcXG4gICAgYm9yZGVyOiBzb2xpZCAxcHggI2FhYTtcXHJcXG59XFxyXFxuXFxyXFxuLnN3YXRjaCB7XFxyXFxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXHJcXG4gICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcXHJcXG4gICAgd2lkdGg6IDIycHg7XFxyXFxuICAgIGhlaWdodDogMjJweDtcXHJcXG59XFxyXFxuXFxyXFxuLnZvcm9ub2kge1xcclxcbiAgICBmaWxsLW9wYWNpdHk6IDA7XFxyXFxuICAgIHN0cm9rZS13aWR0aDogMztcXHJcXG4gICAgc3Ryb2tlOiAjMDAwO1xcclxcbiAgICBzdHJva2Utb3BhY2l0eTogMC4yO1xcclxcbn1cXHJcXG5cXHJcXG4vKiBUb29sdGlwICovXFxyXFxuXFxyXFxuZGl2LnRvb2x0aXAge1xcclxcbiAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcXHJcXG4gICAgb3BhY2l0eTogMDtcXHJcXG4gICAgYmFja2dyb3VuZDogcmdiKDI1NSwgMjU1LCAyNTUpICFpbXBvcnRhbnQ7XFxyXFxuICAgIGJvcmRlci1sZWZ0LWNvbG9yOiAjMWI4MDllICFpbXBvcnRhbnQ7XFxyXFxuICAgIGJvcmRlcjogMXB4IHNvbGlkICNlZWU7XFxyXFxuICAgIGJvcmRlci1sZWZ0LXdpZHRoOiA1cHg7XFxyXFxuICAgIGJvcmRlci1yYWRpdXM6IDNweDtcXHJcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbn1cXHJcXG5cXHJcXG5kaXYudG9vbHRpcCB0YWJsZSB0ZDpudGgtY2hpbGQoMikge1xcclxcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xcclxcbn1cXHJcXG5cXHJcXG4udG9vbHRpcC1zcGFuIHtcXHJcXG4gICAgZGlzcGxheTogYmxvY2s7XFxyXFxuICAgIHdpZHRoOiAxNTBweDtcXHJcXG4gICAgd29yZC13cmFwOiBicmVhay13b3JkO1xcclxcbiAgICBmb250LXNpemU6IDEuNWVtO1xcclxcbn1cXHJcXG5cXHJcXG4udXBwZXItb3V0ZXItYXJlYSwgLmxvd2VyLW91dGVyLWFyZWEge1xcclxcbiAgICBzdHJva2Utd2lkdGg6IDE7XFxyXFxuICAgIGZpbGw6ICM3NGE5Y2Y7XFxyXFxuICAgIHN0cm9rZTogIzM2OTBjMDtcXHJcXG59XFxyXFxuXFxyXFxuLnVwcGVyLWlubmVyLWFyZWEsIC5sb3dlci1pbm5lci1hcmVhIHtcXHJcXG4gICAgc3Ryb2tlLXdpZHRoOiAxO1xcclxcbiAgICBmaWxsOiAjMDQ1YThkO1xcclxcbiAgICBzdHJva2U6ICMwMjM4NTg7XFxyXFxufVxcclxcblxcclxcbi5tZWRpYW4tbGluZSB7XFxyXFxuICAgIGZpbGw6IG5vbmU7XFxyXFxuICAgIHN0cm9rZTogIzUyNTI1MjtcXHJcXG4gICAgc3Ryb2tlLXdpZHRoOiA1O1xcclxcbn1cXHJcXG5cXHJcXG4uc2VsZWN0ZWQge1xcclxcbiAgICBiYWNrZ3JvdW5kOiAjOTk5O1xcclxcbiAgICBib3JkZXI6IDRweCBzb2xpZCAjNGQ0ZDRkO1xcclxcbiAgICAtbW96LWJvcmRlci1yYWRpdXM6IDVweDtcXHJcXG4gICAgLXdlYmtpdC1ib3JkZXItcmFkaXVzOiA1cHg7XFxyXFxuICAgIGJveC1zaGFkb3c6IDFweCAycHggNHB4IHJnYmEoMCwgMCwgMCwgLjQpO1xcclxcbn1cXHJcXG5cXHJcXG4uem9vbSB7XFxyXFxuICAgIGZpbGw6IG5vbmU7XFxyXFxuICAgIHBvaW50ZXItZXZlbnRzOiBhbGw7XFxyXFxufVxcclxcblxcclxcbi54LmF4aXMtbGluZS1jaGFydD5nPnRleHQge1xcclxcbiAgICBmb250LXNpemU6IDNlbTtcXHJcXG4gICAgY29sb3I6IGluaGVyaXQ7XFxyXFxuICAgIGxpbmUtaGVpZ2h0OiAxLjE7XFxyXFxufVxcclxcblxcclxcbi5hcnJvdyB7XFxyXFxuICAgIHN0cm9rZS13aWR0aDogMTtcXHJcXG59XFxyXFxuXFxyXFxuI2NlbnRyb2lkLWxpbmUge1xcclxcbiAgICBzdHJva2Utd2lkdGg6IDE7XFxyXFxuICAgIHN0cm9rZTogI2U3Mjk4YTtcXHJcXG59XFxyXFxuXFxyXFxuI2NlbnRyb2lkLWFycm93IHtcXHJcXG4gICAgZmlsbDogI2U3Mjk4YTtcXHJcXG59XFxyXFxuXFxyXFxuLm1ldGFkYXRhLXN3YXRjaCB7XFxyXFxuICAgIHdpZHRoOiAzMHB4O1xcclxcbiAgICBoZWlnaHQ6IDMwcHg7XFxyXFxuICAgIGJvcmRlci1yYWRpdXM6IDNweDtcXHJcXG4gICAgYm9yZGVyOiAycHggc29saWQgIzY2NjtcXHJcXG59XFxyXFxuXFxyXFxuLm1ldGFkYXRhLXN3YXRjaC1jbGlja2FibGU6aG92ZXIge1xcclxcbiAgICBib3JkZXI6IDJweCBzb2xpZCAjMDAwO1xcclxcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxufVxcclxcblxcclxcbi5kcm9wZG93bi1tZW51IHtcXHJcXG4gICAgbWluLXdpZHRoOiA0MHB4O1xcclxcbiAgICBwYWRkaW5nOiA1cHg7XFxyXFxufVxcclxcblxcclxcbi5tZXRhZGF0YS1sZWdlbmQge1xcclxcbiAgICBsaXN0LXN0eWxlOiBub25lO1xcclxcbiAgICBtYXJnaW4tdG9wOiAxMHB4O1xcclxcbn1cXHJcXG5cXHJcXG4ubWV0YWRhdGEtbGVnZW5kIGxpIHtcXHJcXG4gICAgZmxvYXQ6IGxlZnQ7XFxyXFxuICAgIG1hcmdpbi1yaWdodDogMTBweDtcXHJcXG59XFxyXFxuXFxyXFxuLm1ldGFkYXRhLWxlZ2VuZCBzcGFuIHtcXHJcXG4gICAgYm9yZGVyOiAycHggc29saWQgIzY2NjtcXHJcXG4gICAgZmxvYXQ6IGxlZnQ7XFxyXFxuICAgIHdpZHRoOiAzMHB4O1xcclxcbiAgICBoZWlnaHQ6IDMwcHg7XFxyXFxufVxcclxcblxcclxcbi5tZXRhZGF0YS1sZWdlbmQgLmJsLWF2ZyB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICM3ZmM5N2Y7XFxyXFxufVxcclxcblxcclxcbi5tZXRhZGF0YS1sZWdlbmQgLmF2ZyB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmZGMwODY7XFxyXFxufVxcclxcblxcclxcbi5tZXRhZGF0YS1sZWdlbmQgLmFiLWF2ZyB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMzODZjYjA7XFxyXFxufVxcclxcblxcclxcbi5uZXR3b3JrLWVkZ2VzIHtcXHJcXG4gICAgZmlsbC1vcGFjaXR5OiAwO1xcclxcbiAgICBzdHJva2Utd2lkdGg6IDI7XFxyXFxufVxcclxcblxcclxcbi5uZXR3b3JrLWJhY2tncm91bmQtZWRnZXMge1xcclxcbiAgICBmaWxsLW9wYWNpdHk6IDA7XFxyXFxuICAgIHN0cm9rZS1vcGFjaXR5OiAwLjI1O1xcclxcbiAgICBzdHJva2U6ICM3MzczNzM7XFxyXFxufVxcclxcblxcclxcbi5ub2RlIHRleHQge1xcclxcbiAgICBmb250OiAxMnB4IHNhbnMtc2VyaWY7XFxyXFxufVxcclxcblxcclxcbi5ub2RlLS1pbnRlcm5hbCB0ZXh0IHtcXHJcXG4gICAgdGV4dC1zaGFkb3c6IDAgMXB4IDAgI2ZmZiwgMCAtMXB4IDAgI2ZmZiwgMXB4IDAgMCAjZmZmLCAtMXB4IDAgMCAjZmZmO1xcclxcbn1cXHJcXG5cXHJcXG4ubGluayB7XFxyXFxuICAgIGZpbGw6IG5vbmU7XFxyXFxuICAgIHN0cm9rZTogIzYzNjM2MztcXHJcXG4gICAgc3Ryb2tlLXdpZHRoOiA1cHg7XFxyXFxufVxcclxcblxcclxcbiNhY3RpdmUtbmV0d29yay1uYW1lIHtcXHJcXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxyXFxuICAgIGNvbG9yOiAjMjk2MjkyO1xcclxcbn1cXHJcXG5cXHJcXG4uYWN0aXZlLWxldmVsIHtcXHJcXG4gICAgZmlsbDogIzM4NmNiMDtcXHJcXG59XFxyXFxuXFxyXFxuI2RlbmRyb2dyYW0tcGFuZWwge1xcclxcbiAgICBwb3NpdGlvbjogaW5pdGlhbDtcXHJcXG59XFxyXFxuXFxyXFxuI2RlbmRyb2dyYW0tcGFuZWwge1xcclxcbiAgICBkaXNwbGF5OiBub25lXFxyXFxufVxcclxcblxcclxcbi5zaG93LWRlbmRyb2dyYW0ge1xcclxcbiAgICBmbG9hdDogcmlnaHQ7XFxyXFxuICAgIGJvcmRlci1yYWRpdXM6IDNweDtcXHJcXG4gICAgYm9yZGVyOiAxcHggc29saWQgI0QxRDNENDtcXHJcXG4gICAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcXHJcXG59XFxyXFxuXFxyXFxuLnNob3ctZGVuZHJvZ3JhbTpob3ZlciB7XFxyXFxuICAgIGJhY2tncm91bmQ6ICNEMUQzRDQ7XFxyXFxufVxcclxcblxcclxcbi5kZW5kcm9ncmFtLXRleHQge1xcclxcbiAgICBmb250LXNpemU6IDEwZW0gIWltcG9ydGFudDtcXHJcXG59XFxyXFxuXFxyXFxuLmhpZ2hsaWdodC1oaWVyYXJjaHkge1xcclxcbiAgICBmaWxsOiAjMjUyNTI1O1xcclxcbiAgICBzdHJva2U6ICMyNTI1MjU7XFxyXFxuICAgIHN0cm9rZS13aWR0aDogMTA7XFxyXFxuICAgIHN0cm9rZS1saW5lam9pbjogcm91bmQ7XFxyXFxuICAgIG9wYWNpdHk6IDAuMztcXHJcXG59XFxyXFxuXFxyXFxuLmFuaW1hbC1oaWdobGlnaHQge1xcclxcbiAgICBmaWxsOiAjYzUxYjdkICFpbXBvcnRhbnQ7XFxyXFxufVxcclxcblxcclxcbiNkZW5kcm9ncmFtLWJ1dHRvbnMtZGl2IC5idG4gc3Bhbi5nbHlwaGljb24ge1xcclxcbiAgICBvcGFjaXR5OiAwO1xcclxcbn1cXHJcXG5cXHJcXG4jZGVuZHJvZ3JhbS1idXR0b25zLWRpdiAuYnRuLmFjdGl2ZSBzcGFuLmdseXBoaWNvbiB7XFxyXFxuICAgIG9wYWNpdHk6IDE7XFxyXFxufVxcclxcblxcclxcbiNkZW5kcm9ncmFtLWJ1dHRvbnMtZGl2IHtcXHJcXG4gICAgYm9yZGVyOiAycHggc29saWQgI0QxRDNENDtcXHJcXG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xcclxcbn1cXHJcXG5cXHJcXG4jZGVuZHJvZ3JhbS1sZWdlbmQge1xcclxcbiAgICBtYXJnaW4tbGVmdDogMjBweDtcXHJcXG59XFxyXFxuXFxyXFxuLmludGVyc2VjdGlvbiB7XFxyXFxuICAgIGZpbGw6IHVybCgjc3RyaXBlZCkgIWltcG9ydGFudDtcXHJcXG4gICAgc3Ryb2tlOiAjNjcwMDBkO1xcclxcbn1cXHJcXG5cXHJcXG4uc3ltLWRpZmZlcmVuY2Uge1xcclxcbiAgICBmaWxsOiB1cmwoI3N0cmlwZWQpICFpbXBvcnRhbnQ7XFxyXFxuICAgIHN0cm9rZTogIzY3MDAwZDtcXHJcXG59XFxyXFxuXFxyXFxuLm1vZGFsLWxnIHtcXHJcXG4gICAgbWF4LXdpZHRoOiA4MCU7XFxyXFxufVxcclxcblxcclxcbi5iYWNrZ3JvdW5kLWltYWdlIHtcXHJcXG4gICAgYmFja2dyb3VuZDogI2ZmZjtcXHJcXG59XCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1c2VTb3VyY2VNYXApIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApO1xuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICByZXR1cm4gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGNvbnRlbnQsIFwifVwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbignJyk7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiAobW9kdWxlcywgbWVkaWFRdWVyeSwgZGVkdXBlKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSAnc3RyaW5nJykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCAnJ11dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG4gICAgICAgIHZhciBpZCA9IHRoaXNbaV1bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbW9kdWxlcy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2ldKTtcblxuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250aW51ZVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1lZGlhUXVlcnkpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhUXVlcnk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsyXSA9IFwiXCIuY29uY2F0KG1lZGlhUXVlcnksIFwiIGFuZCBcIikuY29uY2F0KGl0ZW1bMl0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59O1xuXG5mdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV0gfHwgJyc7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuXG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh1c2VTb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IHRvQ29tbWVudChjc3NNYXBwaW5nKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8ICcnKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKCdcXG4nKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbignXFxuJyk7XG59IC8vIEFkYXB0ZWQgZnJvbSBjb252ZXJ0LXNvdXJjZS1tYXAgKE1JVClcblxuXG5mdW5jdGlvbiB0b0NvbW1lbnQoc291cmNlTWFwKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKTtcbiAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICByZXR1cm4gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xufSIsIi8qXG5cdE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5cbnZhciBzdHlsZXNJbkRvbSA9IHt9O1xuXG52YXJcdG1lbW9pemUgPSBmdW5jdGlvbiAoZm4pIHtcblx0dmFyIG1lbW87XG5cblx0cmV0dXJuIGZ1bmN0aW9uICgpIHtcblx0XHRpZiAodHlwZW9mIG1lbW8gPT09IFwidW5kZWZpbmVkXCIpIG1lbW8gPSBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHRcdHJldHVybiBtZW1vO1xuXHR9O1xufTtcblxudmFyIGlzT2xkSUUgPSBtZW1vaXplKGZ1bmN0aW9uICgpIHtcblx0Ly8gVGVzdCBmb3IgSUUgPD0gOSBhcyBwcm9wb3NlZCBieSBCcm93c2VyaGFja3Ncblx0Ly8gQHNlZSBodHRwOi8vYnJvd3NlcmhhY2tzLmNvbS8jaGFjay1lNzFkODY5MmY2NTMzNDE3M2ZlZTcxNWMyMjJjYjgwNVxuXHQvLyBUZXN0cyBmb3IgZXhpc3RlbmNlIG9mIHN0YW5kYXJkIGdsb2JhbHMgaXMgdG8gYWxsb3cgc3R5bGUtbG9hZGVyXG5cdC8vIHRvIG9wZXJhdGUgY29ycmVjdGx5IGludG8gbm9uLXN0YW5kYXJkIGVudmlyb25tZW50c1xuXHQvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyL2lzc3Vlcy8xNzdcblx0cmV0dXJuIHdpbmRvdyAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5hbGwgJiYgIXdpbmRvdy5hdG9iO1xufSk7XG5cbnZhciBnZXRUYXJnZXQgPSBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7XG59O1xuXG52YXIgZ2V0RWxlbWVudCA9IChmdW5jdGlvbiAoZm4pIHtcblx0dmFyIG1lbW8gPSB7fTtcblxuXHRyZXR1cm4gZnVuY3Rpb24odGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgcGFzc2luZyBmdW5jdGlvbiBpbiBvcHRpb25zLCB0aGVuIHVzZSBpdCBmb3IgcmVzb2x2ZSBcImhlYWRcIiBlbGVtZW50LlxuICAgICAgICAgICAgICAgIC8vIFVzZWZ1bCBmb3IgU2hhZG93IFJvb3Qgc3R5bGUgaS5lXG4gICAgICAgICAgICAgICAgLy8ge1xuICAgICAgICAgICAgICAgIC8vICAgaW5zZXJ0SW50bzogZnVuY3Rpb24gKCkgeyByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNmb29cIikuc2hhZG93Um9vdCB9XG4gICAgICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGFyZ2V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGFyZ2V0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0XHR2YXIgc3R5bGVUYXJnZXQgPSBnZXRUYXJnZXQuY2FsbCh0aGlzLCB0YXJnZXQpO1xuXHRcdFx0Ly8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblx0XHRcdGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHQvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuXHRcdFx0XHRcdC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG5cdFx0XHRcdFx0c3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcblx0XHRcdFx0fSBjYXRjaChlKSB7XG5cdFx0XHRcdFx0c3R5bGVUYXJnZXQgPSBudWxsO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcblx0XHR9XG5cdFx0cmV0dXJuIG1lbW9bdGFyZ2V0XVxuXHR9O1xufSkoKTtcblxudmFyIHNpbmdsZXRvbiA9IG51bGw7XG52YXJcdHNpbmdsZXRvbkNvdW50ZXIgPSAwO1xudmFyXHRzdHlsZXNJbnNlcnRlZEF0VG9wID0gW107XG5cbnZhclx0Zml4VXJscyA9IHJlcXVpcmUoXCIuL3VybHNcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obGlzdCwgb3B0aW9ucykge1xuXHRpZiAodHlwZW9mIERFQlVHICE9PSBcInVuZGVmaW5lZFwiICYmIERFQlVHKSB7XG5cdFx0aWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gXCJvYmplY3RcIikgdGhyb3cgbmV3IEVycm9yKFwiVGhlIHN0eWxlLWxvYWRlciBjYW5ub3QgYmUgdXNlZCBpbiBhIG5vbi1icm93c2VyIGVudmlyb25tZW50XCIpO1xuXHR9XG5cblx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0b3B0aW9ucy5hdHRycyA9IHR5cGVvZiBvcHRpb25zLmF0dHJzID09PSBcIm9iamVjdFwiID8gb3B0aW9ucy5hdHRycyA6IHt9O1xuXG5cdC8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxuXHQvLyB0YWdzIGl0IHdpbGwgYWxsb3cgb24gYSBwYWdlXG5cdGlmICghb3B0aW9ucy5zaW5nbGV0b24gJiYgdHlwZW9mIG9wdGlvbnMuc2luZ2xldG9uICE9PSBcImJvb2xlYW5cIikgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7XG5cblx0Ly8gQnkgZGVmYXVsdCwgYWRkIDxzdHlsZT4gdGFncyB0byB0aGUgPGhlYWQ+IGVsZW1lbnRcbiAgICAgICAgaWYgKCFvcHRpb25zLmluc2VydEludG8pIG9wdGlvbnMuaW5zZXJ0SW50byA9IFwiaGVhZFwiO1xuXG5cdC8vIEJ5IGRlZmF1bHQsIGFkZCA8c3R5bGU+IHRhZ3MgdG8gdGhlIGJvdHRvbSBvZiB0aGUgdGFyZ2V0XG5cdGlmICghb3B0aW9ucy5pbnNlcnRBdCkgb3B0aW9ucy5pbnNlcnRBdCA9IFwiYm90dG9tXCI7XG5cblx0dmFyIHN0eWxlcyA9IGxpc3RUb1N0eWxlcyhsaXN0LCBvcHRpb25zKTtcblxuXHRhZGRTdHlsZXNUb0RvbShzdHlsZXMsIG9wdGlvbnMpO1xuXG5cdHJldHVybiBmdW5jdGlvbiB1cGRhdGUgKG5ld0xpc3QpIHtcblx0XHR2YXIgbWF5UmVtb3ZlID0gW107XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGl0ZW0gPSBzdHlsZXNbaV07XG5cdFx0XHR2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcblxuXHRcdFx0ZG9tU3R5bGUucmVmcy0tO1xuXHRcdFx0bWF5UmVtb3ZlLnB1c2goZG9tU3R5bGUpO1xuXHRcdH1cblxuXHRcdGlmKG5ld0xpc3QpIHtcblx0XHRcdHZhciBuZXdTdHlsZXMgPSBsaXN0VG9TdHlsZXMobmV3TGlzdCwgb3B0aW9ucyk7XG5cdFx0XHRhZGRTdHlsZXNUb0RvbShuZXdTdHlsZXMsIG9wdGlvbnMpO1xuXHRcdH1cblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbWF5UmVtb3ZlLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgZG9tU3R5bGUgPSBtYXlSZW1vdmVbaV07XG5cblx0XHRcdGlmKGRvbVN0eWxlLnJlZnMgPT09IDApIHtcblx0XHRcdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykgZG9tU3R5bGUucGFydHNbal0oKTtcblxuXHRcdFx0XHRkZWxldGUgc3R5bGVzSW5Eb21bZG9tU3R5bGUuaWRdO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn07XG5cbmZ1bmN0aW9uIGFkZFN0eWxlc1RvRG9tIChzdHlsZXMsIG9wdGlvbnMpIHtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgaXRlbSA9IHN0eWxlc1tpXTtcblx0XHR2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcblxuXHRcdGlmKGRvbVN0eWxlKSB7XG5cdFx0XHRkb21TdHlsZS5yZWZzKys7XG5cblx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRkb21TdHlsZS5wYXJ0c1tqXShpdGVtLnBhcnRzW2pdKTtcblx0XHRcdH1cblxuXHRcdFx0Zm9yKDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0ZG9tU3R5bGUucGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciBwYXJ0cyA9IFtdO1xuXG5cdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRwYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcblx0XHRcdH1cblxuXHRcdFx0c3R5bGVzSW5Eb21baXRlbS5pZF0gPSB7aWQ6IGl0ZW0uaWQsIHJlZnM6IDEsIHBhcnRzOiBwYXJ0c307XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGxpc3RUb1N0eWxlcyAobGlzdCwgb3B0aW9ucykge1xuXHR2YXIgc3R5bGVzID0gW107XG5cdHZhciBuZXdTdHlsZXMgPSB7fTtcblxuXHRmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgaXRlbSA9IGxpc3RbaV07XG5cdFx0dmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG5cdFx0dmFyIGNzcyA9IGl0ZW1bMV07XG5cdFx0dmFyIG1lZGlhID0gaXRlbVsyXTtcblx0XHR2YXIgc291cmNlTWFwID0gaXRlbVszXTtcblx0XHR2YXIgcGFydCA9IHtjc3M6IGNzcywgbWVkaWE6IG1lZGlhLCBzb3VyY2VNYXA6IHNvdXJjZU1hcH07XG5cblx0XHRpZighbmV3U3R5bGVzW2lkXSkgc3R5bGVzLnB1c2gobmV3U3R5bGVzW2lkXSA9IHtpZDogaWQsIHBhcnRzOiBbcGFydF19KTtcblx0XHRlbHNlIG5ld1N0eWxlc1tpZF0ucGFydHMucHVzaChwYXJ0KTtcblx0fVxuXG5cdHJldHVybiBzdHlsZXM7XG59XG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudCAob3B0aW9ucywgc3R5bGUpIHtcblx0dmFyIHRhcmdldCA9IGdldEVsZW1lbnQob3B0aW9ucy5pbnNlcnRJbnRvKVxuXG5cdGlmICghdGFyZ2V0KSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnRJbnRvJyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG5cdH1cblxuXHR2YXIgbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AgPSBzdHlsZXNJbnNlcnRlZEF0VG9wW3N0eWxlc0luc2VydGVkQXRUb3AubGVuZ3RoIC0gMV07XG5cblx0aWYgKG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwidG9wXCIpIHtcblx0XHRpZiAoIWxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wKSB7XG5cdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCB0YXJnZXQuZmlyc3RDaGlsZCk7XG5cdFx0fSBlbHNlIGlmIChsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcC5uZXh0U2libGluZykge1xuXHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AubmV4dFNpYmxpbmcpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuXHRcdH1cblx0XHRzdHlsZXNJbnNlcnRlZEF0VG9wLnB1c2goc3R5bGUpO1xuXHR9IGVsc2UgaWYgKG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwiYm90dG9tXCIpIHtcblx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBvcHRpb25zLmluc2VydEF0ID09PSBcIm9iamVjdFwiICYmIG9wdGlvbnMuaW5zZXJ0QXQuYmVmb3JlKSB7XG5cdFx0dmFyIG5leHRTaWJsaW5nID0gZ2V0RWxlbWVudChvcHRpb25zLmluc2VydEludG8gKyBcIiBcIiArIG9wdGlvbnMuaW5zZXJ0QXQuYmVmb3JlKTtcblx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBuZXh0U2libGluZyk7XG5cdH0gZWxzZSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiW1N0eWxlIExvYWRlcl1cXG5cXG4gSW52YWxpZCB2YWx1ZSBmb3IgcGFyYW1ldGVyICdpbnNlcnRBdCcgKCdvcHRpb25zLmluc2VydEF0JykgZm91bmQuXFxuIE11c3QgYmUgJ3RvcCcsICdib3R0b20nLCBvciBPYmplY3QuXFxuIChodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlciNpbnNlcnRhdClcXG5cIik7XG5cdH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50IChzdHlsZSkge1xuXHRpZiAoc3R5bGUucGFyZW50Tm9kZSA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXHRzdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTtcblxuXHR2YXIgaWR4ID0gc3R5bGVzSW5zZXJ0ZWRBdFRvcC5pbmRleE9mKHN0eWxlKTtcblx0aWYoaWR4ID49IDApIHtcblx0XHRzdHlsZXNJbnNlcnRlZEF0VG9wLnNwbGljZShpZHgsIDEpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVN0eWxlRWxlbWVudCAob3B0aW9ucykge1xuXHR2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG5cblx0aWYob3B0aW9ucy5hdHRycy50eXBlID09PSB1bmRlZmluZWQpIHtcblx0XHRvcHRpb25zLmF0dHJzLnR5cGUgPSBcInRleHQvY3NzXCI7XG5cdH1cblxuXHRhZGRBdHRycyhzdHlsZSwgb3B0aW9ucy5hdHRycyk7XG5cdGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zLCBzdHlsZSk7XG5cblx0cmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVMaW5rRWxlbWVudCAob3B0aW9ucykge1xuXHR2YXIgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpO1xuXG5cdGlmKG9wdGlvbnMuYXR0cnMudHlwZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0b3B0aW9ucy5hdHRycy50eXBlID0gXCJ0ZXh0L2Nzc1wiO1xuXHR9XG5cdG9wdGlvbnMuYXR0cnMucmVsID0gXCJzdHlsZXNoZWV0XCI7XG5cblx0YWRkQXR0cnMobGluaywgb3B0aW9ucy5hdHRycyk7XG5cdGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zLCBsaW5rKTtcblxuXHRyZXR1cm4gbGluaztcbn1cblxuZnVuY3Rpb24gYWRkQXR0cnMgKGVsLCBhdHRycykge1xuXHRPYmplY3Qua2V5cyhhdHRycykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG5cdFx0ZWwuc2V0QXR0cmlidXRlKGtleSwgYXR0cnNba2V5XSk7XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBhZGRTdHlsZSAob2JqLCBvcHRpb25zKSB7XG5cdHZhciBzdHlsZSwgdXBkYXRlLCByZW1vdmUsIHJlc3VsdDtcblxuXHQvLyBJZiBhIHRyYW5zZm9ybSBmdW5jdGlvbiB3YXMgZGVmaW5lZCwgcnVuIGl0IG9uIHRoZSBjc3Ncblx0aWYgKG9wdGlvbnMudHJhbnNmb3JtICYmIG9iai5jc3MpIHtcblx0ICAgIHJlc3VsdCA9IG9wdGlvbnMudHJhbnNmb3JtKG9iai5jc3MpO1xuXG5cdCAgICBpZiAocmVzdWx0KSB7XG5cdCAgICBcdC8vIElmIHRyYW5zZm9ybSByZXR1cm5zIGEgdmFsdWUsIHVzZSB0aGF0IGluc3RlYWQgb2YgdGhlIG9yaWdpbmFsIGNzcy5cblx0ICAgIFx0Ly8gVGhpcyBhbGxvd3MgcnVubmluZyBydW50aW1lIHRyYW5zZm9ybWF0aW9ucyBvbiB0aGUgY3NzLlxuXHQgICAgXHRvYmouY3NzID0gcmVzdWx0O1xuXHQgICAgfSBlbHNlIHtcblx0ICAgIFx0Ly8gSWYgdGhlIHRyYW5zZm9ybSBmdW5jdGlvbiByZXR1cm5zIGEgZmFsc3kgdmFsdWUsIGRvbid0IGFkZCB0aGlzIGNzcy5cblx0ICAgIFx0Ly8gVGhpcyBhbGxvd3MgY29uZGl0aW9uYWwgbG9hZGluZyBvZiBjc3Ncblx0ICAgIFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHQgICAgXHRcdC8vIG5vb3Bcblx0ICAgIFx0fTtcblx0ICAgIH1cblx0fVxuXG5cdGlmIChvcHRpb25zLnNpbmdsZXRvbikge1xuXHRcdHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrO1xuXG5cdFx0c3R5bGUgPSBzaW5nbGV0b24gfHwgKHNpbmdsZXRvbiA9IGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKSk7XG5cblx0XHR1cGRhdGUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIGZhbHNlKTtcblx0XHRyZW1vdmUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIHRydWUpO1xuXG5cdH0gZWxzZSBpZiAoXG5cdFx0b2JqLnNvdXJjZU1hcCAmJlxuXHRcdHR5cGVvZiBVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBVUkwuY3JlYXRlT2JqZWN0VVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgVVJMLnJldm9rZU9iamVjdFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIEJsb2IgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCJcblx0KSB7XG5cdFx0c3R5bGUgPSBjcmVhdGVMaW5rRWxlbWVudChvcHRpb25zKTtcblx0XHR1cGRhdGUgPSB1cGRhdGVMaW5rLmJpbmQobnVsbCwgc3R5bGUsIG9wdGlvbnMpO1xuXHRcdHJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG5cblx0XHRcdGlmKHN0eWxlLmhyZWYpIFVSTC5yZXZva2VPYmplY3RVUkwoc3R5bGUuaHJlZik7XG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHRzdHlsZSA9IGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKTtcblx0XHR1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGUpO1xuXHRcdHJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG5cdFx0fTtcblx0fVxuXG5cdHVwZGF0ZShvYmopO1xuXG5cdHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZSAobmV3T2JqKSB7XG5cdFx0aWYgKG5ld09iaikge1xuXHRcdFx0aWYgKFxuXHRcdFx0XHRuZXdPYmouY3NzID09PSBvYmouY3NzICYmXG5cdFx0XHRcdG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmXG5cdFx0XHRcdG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXBcblx0XHRcdCkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHVwZGF0ZShvYmogPSBuZXdPYmopO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZW1vdmUoKTtcblx0XHR9XG5cdH07XG59XG5cbnZhciByZXBsYWNlVGV4dCA9IChmdW5jdGlvbiAoKSB7XG5cdHZhciB0ZXh0U3RvcmUgPSBbXTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gKGluZGV4LCByZXBsYWNlbWVudCkge1xuXHRcdHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudDtcblxuXHRcdHJldHVybiB0ZXh0U3RvcmUuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJ1xcbicpO1xuXHR9O1xufSkoKTtcblxuZnVuY3Rpb24gYXBwbHlUb1NpbmdsZXRvblRhZyAoc3R5bGUsIGluZGV4LCByZW1vdmUsIG9iaikge1xuXHR2YXIgY3NzID0gcmVtb3ZlID8gXCJcIiA6IG9iai5jc3M7XG5cblx0aWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcblx0XHRzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKTtcblx0fSBlbHNlIHtcblx0XHR2YXIgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcyk7XG5cdFx0dmFyIGNoaWxkTm9kZXMgPSBzdHlsZS5jaGlsZE5vZGVzO1xuXG5cdFx0aWYgKGNoaWxkTm9kZXNbaW5kZXhdKSBzdHlsZS5yZW1vdmVDaGlsZChjaGlsZE5vZGVzW2luZGV4XSk7XG5cblx0XHRpZiAoY2hpbGROb2Rlcy5sZW5ndGgpIHtcblx0XHRcdHN0eWxlLmluc2VydEJlZm9yZShjc3NOb2RlLCBjaGlsZE5vZGVzW2luZGV4XSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHN0eWxlLmFwcGVuZENoaWxkKGNzc05vZGUpO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBhcHBseVRvVGFnIChzdHlsZSwgb2JqKSB7XG5cdHZhciBjc3MgPSBvYmouY3NzO1xuXHR2YXIgbWVkaWEgPSBvYmoubWVkaWE7XG5cblx0aWYobWVkaWEpIHtcblx0XHRzdHlsZS5zZXRBdHRyaWJ1dGUoXCJtZWRpYVwiLCBtZWRpYSlcblx0fVxuXG5cdGlmKHN0eWxlLnN0eWxlU2hlZXQpIHtcblx0XHRzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG5cdH0gZWxzZSB7XG5cdFx0d2hpbGUoc3R5bGUuZmlyc3RDaGlsZCkge1xuXHRcdFx0c3R5bGUucmVtb3ZlQ2hpbGQoc3R5bGUuZmlyc3RDaGlsZCk7XG5cdFx0fVxuXG5cdFx0c3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG5cdH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlTGluayAobGluaywgb3B0aW9ucywgb2JqKSB7XG5cdHZhciBjc3MgPSBvYmouY3NzO1xuXHR2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuXHQvKlxuXHRcdElmIGNvbnZlcnRUb0Fic29sdXRlVXJscyBpc24ndCBkZWZpbmVkLCBidXQgc291cmNlbWFwcyBhcmUgZW5hYmxlZFxuXHRcdGFuZCB0aGVyZSBpcyBubyBwdWJsaWNQYXRoIGRlZmluZWQgdGhlbiBsZXRzIHR1cm4gY29udmVydFRvQWJzb2x1dGVVcmxzXG5cdFx0b24gYnkgZGVmYXVsdC4gIE90aGVyd2lzZSBkZWZhdWx0IHRvIHRoZSBjb252ZXJ0VG9BYnNvbHV0ZVVybHMgb3B0aW9uXG5cdFx0ZGlyZWN0bHlcblx0Ki9cblx0dmFyIGF1dG9GaXhVcmxzID0gb3B0aW9ucy5jb252ZXJ0VG9BYnNvbHV0ZVVybHMgPT09IHVuZGVmaW5lZCAmJiBzb3VyY2VNYXA7XG5cblx0aWYgKG9wdGlvbnMuY29udmVydFRvQWJzb2x1dGVVcmxzIHx8IGF1dG9GaXhVcmxzKSB7XG5cdFx0Y3NzID0gZml4VXJscyhjc3MpO1xuXHR9XG5cblx0aWYgKHNvdXJjZU1hcCkge1xuXHRcdC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzI2NjAzODc1XG5cdFx0Y3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIiArIGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSkgKyBcIiAqL1wiO1xuXHR9XG5cblx0dmFyIGJsb2IgPSBuZXcgQmxvYihbY3NzXSwgeyB0eXBlOiBcInRleHQvY3NzXCIgfSk7XG5cblx0dmFyIG9sZFNyYyA9IGxpbmsuaHJlZjtcblxuXHRsaW5rLmhyZWYgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xuXG5cdGlmKG9sZFNyYykgVVJMLnJldm9rZU9iamVjdFVSTChvbGRTcmMpO1xufVxuIiwiXG4vKipcbiAqIFdoZW4gc291cmNlIG1hcHMgYXJlIGVuYWJsZWQsIGBzdHlsZS1sb2FkZXJgIHVzZXMgYSBsaW5rIGVsZW1lbnQgd2l0aCBhIGRhdGEtdXJpIHRvXG4gKiBlbWJlZCB0aGUgY3NzIG9uIHRoZSBwYWdlLiBUaGlzIGJyZWFrcyBhbGwgcmVsYXRpdmUgdXJscyBiZWNhdXNlIG5vdyB0aGV5IGFyZSByZWxhdGl2ZSB0byBhXG4gKiBidW5kbGUgaW5zdGVhZCBvZiB0aGUgY3VycmVudCBwYWdlLlxuICpcbiAqIE9uZSBzb2x1dGlvbiBpcyB0byBvbmx5IHVzZSBmdWxsIHVybHMsIGJ1dCB0aGF0IG1heSBiZSBpbXBvc3NpYmxlLlxuICpcbiAqIEluc3RlYWQsIHRoaXMgZnVuY3Rpb24gXCJmaXhlc1wiIHRoZSByZWxhdGl2ZSB1cmxzIHRvIGJlIGFic29sdXRlIGFjY29yZGluZyB0byB0aGUgY3VycmVudCBwYWdlIGxvY2F0aW9uLlxuICpcbiAqIEEgcnVkaW1lbnRhcnkgdGVzdCBzdWl0ZSBpcyBsb2NhdGVkIGF0IGB0ZXN0L2ZpeFVybHMuanNgIGFuZCBjYW4gYmUgcnVuIHZpYSB0aGUgYG5wbSB0ZXN0YCBjb21tYW5kLlxuICpcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3MpIHtcbiAgLy8gZ2V0IGN1cnJlbnQgbG9jYXRpb25cbiAgdmFyIGxvY2F0aW9uID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB3aW5kb3cubG9jYXRpb247XG5cbiAgaWYgKCFsb2NhdGlvbikge1xuICAgIHRocm93IG5ldyBFcnJvcihcImZpeFVybHMgcmVxdWlyZXMgd2luZG93LmxvY2F0aW9uXCIpO1xuICB9XG5cblx0Ly8gYmxhbmsgb3IgbnVsbD9cblx0aWYgKCFjc3MgfHwgdHlwZW9mIGNzcyAhPT0gXCJzdHJpbmdcIikge1xuXHQgIHJldHVybiBjc3M7XG4gIH1cblxuICB2YXIgYmFzZVVybCA9IGxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICsgbG9jYXRpb24uaG9zdDtcbiAgdmFyIGN1cnJlbnREaXIgPSBiYXNlVXJsICsgbG9jYXRpb24ucGF0aG5hbWUucmVwbGFjZSgvXFwvW15cXC9dKiQvLCBcIi9cIik7XG5cblx0Ly8gY29udmVydCBlYWNoIHVybCguLi4pXG5cdC8qXG5cdFRoaXMgcmVndWxhciBleHByZXNzaW9uIGlzIGp1c3QgYSB3YXkgdG8gcmVjdXJzaXZlbHkgbWF0Y2ggYnJhY2tldHMgd2l0aGluXG5cdGEgc3RyaW5nLlxuXG5cdCAvdXJsXFxzKlxcKCAgPSBNYXRjaCBvbiB0aGUgd29yZCBcInVybFwiIHdpdGggYW55IHdoaXRlc3BhY2UgYWZ0ZXIgaXQgYW5kIHRoZW4gYSBwYXJlbnNcblx0ICAgKCAgPSBTdGFydCBhIGNhcHR1cmluZyBncm91cFxuXHQgICAgICg/OiAgPSBTdGFydCBhIG5vbi1jYXB0dXJpbmcgZ3JvdXBcblx0ICAgICAgICAgW14pKF0gID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgIHwgID0gT1Jcblx0ICAgICAgICAgXFwoICA9IE1hdGNoIGEgc3RhcnQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICg/OiAgPSBTdGFydCBhbm90aGVyIG5vbi1jYXB0dXJpbmcgZ3JvdXBzXG5cdCAgICAgICAgICAgICAgICAgW14pKF0rICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgIHwgID0gT1Jcblx0ICAgICAgICAgICAgICAgICBcXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgICAgICBbXikoXSogID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgXFwpICA9IE1hdGNoIGEgZW5kIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICApICA9IEVuZCBHcm91cFxuICAgICAgICAgICAgICAqXFwpID0gTWF0Y2ggYW55dGhpbmcgYW5kIHRoZW4gYSBjbG9zZSBwYXJlbnNcbiAgICAgICAgICApICA9IENsb3NlIG5vbi1jYXB0dXJpbmcgZ3JvdXBcbiAgICAgICAgICAqICA9IE1hdGNoIGFueXRoaW5nXG4gICAgICAgKSAgPSBDbG9zZSBjYXB0dXJpbmcgZ3JvdXBcblx0IFxcKSAgPSBNYXRjaCBhIGNsb3NlIHBhcmVuc1xuXG5cdCAvZ2kgID0gR2V0IGFsbCBtYXRjaGVzLCBub3QgdGhlIGZpcnN0LiAgQmUgY2FzZSBpbnNlbnNpdGl2ZS5cblx0ICovXG5cdHZhciBmaXhlZENzcyA9IGNzcy5yZXBsYWNlKC91cmxcXHMqXFwoKCg/OlteKShdfFxcKCg/OlteKShdK3xcXChbXikoXSpcXCkpKlxcKSkqKVxcKS9naSwgZnVuY3Rpb24oZnVsbE1hdGNoLCBvcmlnVXJsKSB7XG5cdFx0Ly8gc3RyaXAgcXVvdGVzIChpZiB0aGV5IGV4aXN0KVxuXHRcdHZhciB1bnF1b3RlZE9yaWdVcmwgPSBvcmlnVXJsXG5cdFx0XHQudHJpbSgpXG5cdFx0XHQucmVwbGFjZSgvXlwiKC4qKVwiJC8sIGZ1bmN0aW9uKG8sICQxKXsgcmV0dXJuICQxOyB9KVxuXHRcdFx0LnJlcGxhY2UoL14nKC4qKSckLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pO1xuXG5cdFx0Ly8gYWxyZWFkeSBhIGZ1bGwgdXJsPyBubyBjaGFuZ2Vcblx0XHRpZiAoL14oI3xkYXRhOnxodHRwOlxcL1xcL3xodHRwczpcXC9cXC98ZmlsZTpcXC9cXC9cXC98XFxzKiQpL2kudGVzdCh1bnF1b3RlZE9yaWdVcmwpKSB7XG5cdFx0ICByZXR1cm4gZnVsbE1hdGNoO1xuXHRcdH1cblxuXHRcdC8vIGNvbnZlcnQgdGhlIHVybCB0byBhIGZ1bGwgdXJsXG5cdFx0dmFyIG5ld1VybDtcblxuXHRcdGlmICh1bnF1b3RlZE9yaWdVcmwuaW5kZXhPZihcIi8vXCIpID09PSAwKSB7XG5cdFx0ICBcdC8vVE9ETzogc2hvdWxkIHdlIGFkZCBwcm90b2NvbD9cblx0XHRcdG5ld1VybCA9IHVucXVvdGVkT3JpZ1VybDtcblx0XHR9IGVsc2UgaWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiL1wiKSA9PT0gMCkge1xuXHRcdFx0Ly8gcGF0aCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gdGhlIGJhc2UgdXJsXG5cdFx0XHRuZXdVcmwgPSBiYXNlVXJsICsgdW5xdW90ZWRPcmlnVXJsOyAvLyBhbHJlYWR5IHN0YXJ0cyB3aXRoICcvJ1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZSB0byBjdXJyZW50IGRpcmVjdG9yeVxuXHRcdFx0bmV3VXJsID0gY3VycmVudERpciArIHVucXVvdGVkT3JpZ1VybC5yZXBsYWNlKC9eXFwuXFwvLywgXCJcIik7IC8vIFN0cmlwIGxlYWRpbmcgJy4vJ1xuXHRcdH1cblxuXHRcdC8vIHNlbmQgYmFjayB0aGUgZml4ZWQgdXJsKC4uLilcblx0XHRyZXR1cm4gXCJ1cmwoXCIgKyBKU09OLnN0cmluZ2lmeShuZXdVcmwpICsgXCIpXCI7XG5cdH0pO1xuXG5cdC8vIHNlbmQgYmFjayB0aGUgZml4ZWQgY3NzXG5cdHJldHVybiBmaXhlZENzcztcbn07XG4iLCIvKmVzbGludC1kaXNhYmxlIG5vLXVudXNlZC1sZXRzKi9cclxuLypnbG9iYWwgd2luZG93LCBkMywgJCovXHJcbmltcG9ydCB7XHJcbiAgICBkYXRhc2V0TWV0YWRhdGEsXHJcbiAgICBzd2FybURhdGEsXHJcbiAgICBhbmltYWxJZHNcclxufSBmcm9tICcuLi9leHBsb3JlLmpzJztcclxuXHJcbmltcG9ydCAqIGFzIFNQViBmcm9tICcuL3NwYXRpYWxfdmlldy5qcyc7XHJcblxyXG5pbXBvcnQgKiBhcyBOZXR3b3JrIGZyb20gJy4uL25ldHdvcmsuanMnO1xyXG5cclxuZXhwb3J0IGxldCBzbGlkZXI7IC8vIHRpbWUgc2xpZGVyIG9mIHRoZSBhcHBcclxuZXhwb3J0IGxldCB0b29sdGlwOyAvLyB0b29sdGlwIGZ1bmN0aW9uXHJcblxyXG4vKipcclxuICogQnJ1c2ggZW5kIGZ1bmN0aW9uXHJcbiAqIGFkZCBhY3RpdmUgYW5pbWFscyB0byB0aGUgYXJyYXkgb3IgcmVtb3ZlIHRoZW1cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBicnVzaGVuZCgpIHtcclxuICAgIGxldCBhcnJheUFuaW1hbHMgPSBTUFYuYXJyYXlBbmltYWxzO1xyXG4gICAgbGV0IGFjdGl2ZUFuaW1hbHMgPSBTUFYuYWN0aXZlQW5pbWFscztcclxuICAgIHZhciByZWN0ID0gZDMuZXZlbnQuc2VsZWN0aW9uO1xyXG4gICAgLy9pdGVyYXRlIG92ZXIgdGhlIDE1MSBmaXNoIHRvIGNoZWNrIHdoaWNoIGFyZSBpbiB0aGUgYnJ1c2hcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYW5pbWFsSWRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgdmFyIHBvaW50ID0gW2FycmF5QW5pbWFsc1tpXVsncCddWzBdLCBhcnJheUFuaW1hbHNbaV1bJ3AnXVsxXV07XHJcbiAgICAgICAgLy9jaGVjayB3aGljaCBmaXNoIGFyZSBpbiAgdGhlIGJydXNoZWQgYXJlYVxyXG4gICAgICAgIGlmICgocmVjdFswXVswXSA8PSBwb2ludFswXSkgJiYgKHBvaW50WzBdIDw9IHJlY3RbMV1bMF0pICYmXHJcbiAgICAgICAgICAgIChyZWN0WzBdWzFdIDw9IHBvaW50WzFdKSAmJiAocG9pbnRbMV0gPD0gcmVjdFsxXVsxXSkpIHtcclxuICAgICAgICAgICAgLy8gUG9pbnQgaXMgaW4gdGhlIGJydXNoXHJcbiAgICAgICAgICAgIGFjdGl2ZUFuaW1hbHMucHVzaChhcnJheUFuaW1hbHNbaV1bJ2EnXSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgU1BWLnNldEFjdGl2ZUFuaW1hbHMoYWN0aXZlQW5pbWFscyk7XHJcbiAgICBpZiAoISQoJyNwbGF5LWJ1dHRvbicpXHJcbiAgICAgICAgLmhhc0NsYXNzKCdhY3RpdmUnKSkge1xyXG4gICAgICAgIC8vZ28gYmFjayBvbmUgc2Vjb25kIGFuZCBkcmF3IHRoZSBuZXh0IGZyYW1lXHJcbiAgICAgICAgLy90aGlzIGFwcGx5cyB0aGUgY2hhbmdlc1xyXG4gICAgICAgIFNQVi5kZWNJbmRleFRpbWUoKTtcclxuICAgICAgICBTUFYuZHJhdygpO1xyXG4gICAgfVxyXG4gICAgJCgnI2JydXNoaW5nLWJ1dHRvbicpXHJcbiAgICAgICAgLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcclxuICAgIC8vIHJlbW92ZSB0aGUgYnJ1c2hcclxuICAgICQoJy5icnVzaCcpXHJcbiAgICAgICAgLnJlbW92ZSgpO1xyXG59XHJcblxyXG4vKipcclxuICogSW5pdGlhbGl6ZSB0aGUgdG9vbHRpcFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGluaXRUb29sdGlwKCkge1xyXG4gICAgdG9vbHRpcCA9IGQzLnNlbGVjdCgnZGl2LnRvb2x0aXAnKVxyXG4gICAgICAgIC5zdHlsZSgnbGVmdCcsIDAgKyAncHgnKVxyXG4gICAgICAgIC5zdHlsZSgndG9wJywgMCArICdweCcpXHJcbiAgICAgICAgLm9uKCdtb3VzZW92ZXInLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdG9vbHRpcFxyXG4gICAgICAgICAgICAgICAgLnN0eWxlKCdvcGFjaXR5JywgMSk7XHJcbiAgICAgICAgfSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUb29sdGlwIGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBkIC0gZDMgZGF0YSBvYmplY3Qgd2l0aCB0aGUgbWV0YWRhdGEgaW5mb3JtYXRpb25cclxuICpcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB0b29sdGlwRnVuY3Rpb24oZCkge1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhc2V0TWV0YWRhdGEubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBpZiAoZFsnYSddID09PSBkYXRhc2V0TWV0YWRhdGFbaV1bJ2FuaW1hbF9pZCddKSB7XHJcbiAgICAgICAgICAgIHRvb2x0aXBcclxuICAgICAgICAgICAgICAgIC5zdHlsZSgnbGVmdCcsIChkMy5ldmVudC5wYWdlWCArIDUpICsgJ3B4JylcclxuICAgICAgICAgICAgICAgIC5zdHlsZSgndG9wJywgKGQzLmV2ZW50LnBhZ2VZIC0gMTAwKSArICdweCcpXHJcbiAgICAgICAgICAgICAgICAuc3R5bGUoJ29wYWNpdHknLCAxKTtcclxuICAgICAgICAgICAgLy8gc2V0IHRoZSB2YWx1ZXNcclxuICAgICAgICAgICAgLy8gVE9ETyBtYWtlIHRoaXMgbW9kdWxhclxyXG4gICAgICAgICAgICB0b29sdGlwLnNlbGVjdCgnI3Rvb2x0aXAtYW5pbWFsLWlkJylcclxuICAgICAgICAgICAgICAgIC5odG1sKGRhdGFzZXRNZXRhZGF0YVtpXVsnYW5pbWFsX2lkJ10pO1xyXG4gICAgICAgICAgICB0b29sdGlwLnNlbGVjdCgnI3Rvb2x0aXAtc3BlY2llcycpXHJcbiAgICAgICAgICAgICAgICAuaHRtbChkYXRhc2V0TWV0YWRhdGFbaV1bJ3NwZWNpZXMnXSk7XHJcbiAgICAgICAgICAgIHRvb2x0aXAuc2VsZWN0KCcjdG9vbHRpcC1zZXgnKVxyXG4gICAgICAgICAgICAgICAgLmh0bWwoZGF0YXNldE1ldGFkYXRhW2ldWydzZXgnXSk7XHJcbiAgICAgICAgICAgIHRvb2x0aXAuc2VsZWN0KCcjdG9vbHRpcC1zaXplJylcclxuICAgICAgICAgICAgICAgIC5odG1sKGRhdGFzZXRNZXRhZGF0YVtpXVsnc2l6ZSddKTtcclxuICAgICAgICAgICAgdG9vbHRpcC5zZWxlY3QoJyN0b29sdGlwLXdlaWdodCcpXHJcbiAgICAgICAgICAgICAgICAuaHRtbChkYXRhc2V0TWV0YWRhdGFbaV1bJ3dlaWdodCddKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG4vKipcclxuICogSW5pdGlhbGl6ZSB0aGUgdGltZSBzbGlkZXIgYW5kIHRoZSBkeW5hbWljIG5ldHdvcmsgc2xpZGVyXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaW5pdFNsaWRlcnMoKSB7XHJcbiAgICAvLyB0aW1lIHNsaWRlclxyXG4gICAgc2xpZGVyID0gJCgnI3NsaWRlcicpXHJcbiAgICAgICAgLnNsaWRlcih7XHJcbiAgICAgICAgICAgIG1pbjogMCxcclxuICAgICAgICAgICAgbWF4OiBzd2FybURhdGEubGVuZ3RoLFxyXG4gICAgICAgICAgICBzdGVwOiAyNSxcclxuICAgICAgICAgICAgc2xpZGU6IGZ1bmN0aW9uKGV2ZW50LCB1aSkge1xyXG4gICAgICAgICAgICAgICAgU1BWLnNldEluZGV4VGltZSh1aS52YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAvLyBpZiBwYXVzZWQgYXBwbHkgY2hhbmdlc1xyXG4gICAgICAgICAgICAgICAgaWYgKCEkKCcjcGxheS1idXR0b24nKS5oYXNDbGFzcygnYWN0aXZlJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAvL3RoaXMgYXBwbHlzIHRoZSBjaGFuZ2VzXHJcbiAgICAgICAgICAgICAgICAgICAgU1BWLmRyYXcoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgLy8gaW5pdGlhbGl6ZSB0aGUgTmV0d29yayBzbGlkZXJcclxuICAgICQoJyNuZXR3b3JrLXNsaWRlcicpXHJcbiAgICAgICAgLnNsaWRlcih7XHJcbiAgICAgICAgICAgIHJhbmdlOiAnbWF4JyxcclxuICAgICAgICAgICAgbWluOiAwLFxyXG4gICAgICAgICAgICBtYXg6IDEsXHJcbiAgICAgICAgICAgIHN0ZXA6IDAuMDEsXHJcbiAgICAgICAgICAgIHZhbHVlOiAwLjUsXHJcbiAgICAgICAgICAgIHNsaWRlOiBmdW5jdGlvbihldmVudCwgdWkpIHtcclxuICAgICAgICAgICAgICAgIE5ldHdvcmsuc2V0TmV0d29yTGltaXQodWkudmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgJCgnI25ldHdvcmstbGltaXQnKS52YWwodWkudmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAvLyBzZXQgdGV4dCBmb3IgdGhlIGZpcnN0IGluaXRpYWxpemF0aW9uXHJcbiAgICAkKCcjbmV0d29yay1saW1pdCcpLnZhbCgwLjUpO1xyXG5cclxuICAgIC8vIGdldCB0aGUgbWF4IGZyb20gdGhlIHNsaWRlciB0aGlzIGlzIG5lZWRlZCB0byBjYWxjdWxhdGUgdGhlIHRpY2tzXHJcbiAgICBsZXQgbWF4ID0gc2xpZGVyLnNsaWRlcignb3B0aW9uJywgJ21heCcpO1xyXG4gICAgbGV0IHNwYWNlID0gMTAwIC8gbWF4O1xyXG4gICAgLy9hcHBlbmQgdGhlIG1pbnV0ZSB0aWNrc1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtYXg7IGkgPSBpICsgMTUwMCkge1xyXG4gICAgICAgICQoJzxzcGFuIGNsYXNzPVwidWktc2xpZGVyLXRpY2tcIj48L3NwYW4+JylcclxuICAgICAgICAgICAgLmNzcygnbGVmdCcsIChzcGFjZSAqIGkpICsgJyUnKVxyXG4gICAgICAgICAgICAuYXBwZW5kVG8oc2xpZGVyKTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gICAgU2V0dGVyXHJcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuLyoqXHJcbiAqIFNldCB0aGUgdGltZSBzbGlkZXIgdG8gYSBuZXcgdmFsdWVcclxuICogQHBhcmFtIHtOdW1iZXJ9IHZhbHVlIC0gbmV3IHZhbHVlIGZvciB0aGUgdGltZSBzbGlkZXJcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXRUaW1lU2xpZGVyKHZhbHVlKSB7XHJcbiAgICBzbGlkZXIuc2xpZGVyKCd2YWx1ZScsIHZhbHVlKTtcclxufSIsIi8qZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLWxldHMqL1xyXG4vKmdsb2JhbCB3aW5kb3csIGQzLCAkLCBjb2xvcmJyZXdlciovXHJcbmltcG9ydCAqIGFzIFNQViBmcm9tICcuL3NwYXRpYWxfdmlldy5qcyc7XHJcblxyXG5pbXBvcnQge1xyXG4gICAgY2hhbmdlTGVnZW5kXHJcbn0gZnJvbSAnLi9sZWdlbmQuanMnO1xyXG5cclxuaW1wb3J0IHtcclxuICAgIGRhdGFTZXRQZXJjZW50aWxlXHJcbn0gZnJvbSAnLi4vZXhwbG9yZS5qcyc7XHJcblxyXG5leHBvcnQgbGV0IGNvbG9yU2NhbGUgPSB7XHJcbiAgICB0eXBlOiAnTGluZWFyJyxcclxuICAgIGNvbG9yOiBjb2xvcmJyZXdlci5CdVlsQnVcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBjb2xvciBzY2FsZVxyXG4gKiBAcmV0dXJuIHtjb2xvclNjYWxlfSBhY3RpdmUgY29sb3Igc2NhbGUgaXMgaW4gbGluZWFyIG9yIHRocmVzaG9sZFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHJldHVybkNvbG9yU2NhbGUoKSB7XHJcbiAgICAvL2lmIGxpbmVhciBpcyBjaG9vc2VuXHJcbiAgICBpZiAoY29sb3JTY2FsZVsndHlwZSddID09PSAnTGluZWFyJykge1xyXG4gICAgICAgIHJldHVybiBkMy5zY2FsZUxpbmVhcigpXHJcbiAgICAgICAgICAgIC5kb21haW4oXHJcbiAgICAgICAgICAgICAgICBkYXRhU2V0UGVyY2VudGlsZVtTUFYuYWN0aXZlU2NhbGVdXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICAgICAgLnJhbmdlKGNvbG9yU2NhbGVbJ2NvbG9yJ10pO1xyXG4gICAgfSAvL1RocmVzaG9sZCBjb2xvciBzY2FsZVxyXG4gICAgZWxzZSBpZiAoY29sb3JTY2FsZVsndHlwZSddID09PSAnVGhyZXNob2xkJykge1xyXG4gICAgICAgIHJldHVybiBkMy5zY2FsZVRocmVzaG9sZCgpXHJcbiAgICAgICAgICAgIC5kb21haW4oXHJcbiAgICAgICAgICAgICAgICBkYXRhU2V0UGVyY2VudGlsZVtTUFYuYWN0aXZlU2NhbGVdXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICAgICAgLnJhbmdlKGNvbG9yU2NhbGVbJ2NvbG9yJ10pO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogSW5pdGlhbGl6ZSB0aGUgY29sb3IgcGlja2VyXHJcbiAqIHdpdGggYWxsIGxpc3RlbmVycyBpbmNsdWRlZFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGluaXRDb2xvclBpY2tlcigpIHtcclxuICAgIGQzLnNlbGVjdCgnLmNvbG9ycy1ib2R5JylcclxuICAgICAgICAuc2VsZWN0QWxsKCcucGFsZXR0ZScpXHJcbiAgICAgICAgLmRhdGEoZDMuZW50cmllcyhjb2xvcmJyZXdlcikpXHJcbiAgICAgICAgLmVudGVyKClcclxuICAgICAgICAuYXBwZW5kKCdzcGFuJylcclxuICAgICAgICAuYXR0cignY2xhc3MnLCAncGFsZXR0ZScpXHJcbiAgICAgICAgLmF0dHIoJ3RpdGxlJywgZnVuY3Rpb24oZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZC5rZXk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAub24oJ2NsaWNrJywgZnVuY3Rpb24oZCkge1xyXG4gICAgICAgICAgICAvLyBoaWdodGxpZ2h0IHRoZSByaWdodCBwYWxldHRlXHJcbiAgICAgICAgICAgICQoJy5wYWxldHRlJykucmVtb3ZlQ2xhc3MoJ3NlbGVjdGVkJyk7XHJcbiAgICAgICAgICAgICQoJy5wYWxldHRlW3RpdGxlPVwiJyArIGQua2V5ICsgJ1wiXScpLmFkZENsYXNzKCdzZWxlY3RlZCcpO1xyXG4gICAgICAgICAgICBjb2xvclNjYWxlLmNvbG9yID0gY29sb3JicmV3ZXJbZC5rZXldO1xyXG4gICAgICAgICAgICBjaGFuZ2VMZWdlbmQoKTtcclxuICAgICAgICAgICAgaWYgKCEkKCcjcGxheS1idXR0b24nKVxyXG4gICAgICAgICAgICAgICAgLmhhc0NsYXNzKCdhY3RpdmUnKSkge1xyXG4gICAgICAgICAgICAgICAgLy9nbyBiYWNrIG9uZSBzZWNvbmQgYW5kIGRyYXcgdGhlIG5leHQgZnJhbWVcclxuICAgICAgICAgICAgICAgIC8vdGhpcyBhcHBseXMgdGhlIGNoYW5nZXNcclxuICAgICAgICAgICAgICAgIFNQVi5kZWNJbmRleFRpbWUoKTtcclxuICAgICAgICAgICAgICAgIFNQVi5kcmF3KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICAgIC5zZWxlY3RBbGwoJy5zd2F0Y2gnKVxyXG4gICAgICAgIC5kYXRhKGZ1bmN0aW9uKGQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGQudmFsdWU7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuZW50ZXIoKVxyXG4gICAgICAgIC5hcHBlbmQoJ3NwYW4nKVxyXG4gICAgICAgIC5hdHRyKCdjbGFzcycsICdzd2F0Y2gnKVxyXG4gICAgICAgIC5zdHlsZSgnYmFja2dyb3VuZC1jb2xvcicsIGZ1bmN0aW9uKGQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGQ7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgLy8gaGlnaGxpZ2h0IHRoZSBzZWxlY3RlZCBjb2xvciBzY2hlbWVcclxuICAgICQoJy5wYWxldHRlW3RpdGxlPVwiQnVZbEJ1XCJdJykuYWRkQ2xhc3MoJ3NlbGVjdGVkJyk7XHJcbn1cclxuIiwiLyplc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtbGV0cyovXHJcbi8qZ2xvYmFsIHdpbmRvdywgZDMsICQqL1xyXG5cclxuaW1wb3J0IHtcclxuICAgIGFjdGl2ZVNjYWxlXHJcbn0gZnJvbSAnLi9zcGF0aWFsX3ZpZXcuanMnO1xyXG5cclxuaW1wb3J0IHtcclxuICAgIHJldHVybkNvbG9yU2NhbGVcclxufSBmcm9tICcuL2NvbG9yX3BpY2tlci5qcyc7XHJcblxyXG5sZXQgc3ZnTGVnZW5kOyAvLyBzdmcgY29udGFpbmVyIGZvciB0aGUgbGVnZW5kXHJcblxyXG4vKipcclxuICogQWRkIHRoZSBncm91cCB0byB0aGUgc3ZnIHdoZXJlIHRoZSBsZWdlbmQgZm9yIHRoZSBjb2xvciBsZWdlbmQgaXNcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBhZGRTcGF0aWFsVmlld0dyb3VwKCkge1xyXG4gICAgbGV0IGxlZ2VuZFdpZHRoID0gNTUwO1xyXG4gICAgbGV0IGxlZ2VuZEhlaWdodCA9IDYwO1xyXG5cclxuICAgIHN2Z0xlZ2VuZCA9IGQzLnNlbGVjdCgnI21haW4tdmlzLWxlZ2VuZC1kaXYnKVxyXG4gICAgICAgIC5hcHBlbmQoJ3N2ZycpXHJcbiAgICAgICAgLmF0dHIoJ2lkJywgJ21haW4tdmlzLWxlZ2VuZCcpXHJcbiAgICAgICAgLmF0dHIoJ3dpZHRoJywgbGVnZW5kV2lkdGgpXHJcbiAgICAgICAgLmF0dHIoJ2hlaWdodCcsIGxlZ2VuZEhlaWdodCk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDaGFuZ2UgdGhlIGNvbG9yIGxlZ2VuZFxyXG4gKlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNoYW5nZUxlZ2VuZCgpIHtcclxuICAgIGxldCBsZWdlbmQ7IC8vIHRoZSBjb2xvciBsZWdlbmRcclxuICAgIGxldCBsZWdlbmRUZXh0OyAvLyBjb2xvciBsZWdlbmQgdGV4dFxyXG4gICAgLy8gdmFycyBmb3IgdGhlIGxlZ2VuZFxyXG4gICAgbGV0IGxlZ2VuZFN3YXRjaFdpZHRoID0gNTA7XHJcbiAgICBsZXQgbGVnZW5kU3dhdGNoSGVpZ2h0ID0gMjA7XHJcbiAgICAvLyBsZXQgZGlmZmVyZW50Q29sb3JzID0gMDtcclxuXHJcbiAgICAvLyBTaG93IHRoZSBzdmcgZmlyc3Qgb2YgYWxsXHJcbiAgICAkKCcjbWFpbi12aXMtbGVnZW5kLWRpdicpXHJcbiAgICAgICAgLnNob3coKTtcclxuXHJcbiAgICAvL2NoYW5nZSB0aGUgY29sb3JzIG9mIHRoZSBhbmltYWxzXHJcbiAgICBpZiAoYWN0aXZlU2NhbGUgIT09ICdibGFjaycpIHtcclxuICAgICAgICB2YXIgdG1wU2NhbGUgPSByZXR1cm5Db2xvclNjYWxlKCk7XHJcbiAgICAgICAgLy8gb25jZSB0aGUgZmlsbCBmb3IgdGhlIGhlYWRzIGFuZCB0aGUgc3Ryb2tlIGZvciB0aGUgcGF0aFxyXG4gICAgICAgIGxlZ2VuZCA9IHN2Z0xlZ2VuZC5zZWxlY3RBbGwoJ3JlY3QubGVnZW5kJylcclxuICAgICAgICAgICAgLmRhdGEodG1wU2NhbGUucmFuZ2UoKSk7XHJcblxyXG4gICAgICAgIGxlZ2VuZFRleHQgPSBzdmdMZWdlbmQuc2VsZWN0QWxsKCd0ZXh0LmxlZ2VuZC10ZXh0JylcclxuICAgICAgICAgICAgLmRhdGEodG1wU2NhbGUuZG9tYWluKCkpO1xyXG4gICAgICAgIC8vIGRpZmZlcmVudENvbG9ycyA9IHRtcFNjYWxlLnJhbmdlKClcclxuICAgICAgICAvLyAubGVuZ3RoO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBsZWdlbmQgPSBzdmdMZWdlbmQuc2VsZWN0QWxsKCdyZWN0LmxlZ2VuZCcpXHJcbiAgICAgICAgICAgIC5kYXRhKFtdKTtcclxuICAgICAgICBsZWdlbmRUZXh0ID0gc3ZnTGVnZW5kLnNlbGVjdEFsbCgndGV4dC5sZWdlbmQtdGV4dCcpXHJcbiAgICAgICAgICAgIC5kYXRhKFtdKTtcclxuICAgICAgICAvLyBoaWRlIHRoZSBkaXYgYWdhaW5cclxuICAgICAgICAkKCcjbWFpbi12aXMtbGVnZW5kLWRpdicpXHJcbiAgICAgICAgICAgIC5oaWRlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tIExlZ2VuZCBzd2F0Y2hlcyAgLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgLy8gVVBEQVRFIC0gbGVnZW5kXHJcbiAgICBsZWdlbmQuc3R5bGUoJ2ZpbGwnLCBmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgcmV0dXJuIGQ7XHJcbiAgICB9KTtcclxuICAgIC8vIEVOVEVSIC0gbGVnZW5kXHJcbiAgICBsZWdlbmRcclxuICAgICAgICAuZW50ZXIoKVxyXG4gICAgICAgIC5hcHBlbmQoJ3JlY3QnKVxyXG4gICAgICAgIC5hdHRyKCdjbGFzcycsICdsZWdlbmQnKVxyXG4gICAgICAgIC5hdHRyKCd3aWR0aCcsIGxlZ2VuZFN3YXRjaFdpZHRoKVxyXG4gICAgICAgIC5hdHRyKCdoZWlnaHQnLCBsZWdlbmRTd2F0Y2hIZWlnaHQpXHJcbiAgICAgICAgLmF0dHIoJ3knLCAwKVxyXG4gICAgICAgIC5hdHRyKCd4JywgZnVuY3Rpb24oZCwgaSkge1xyXG4gICAgICAgICAgICByZXR1cm4gKGxlZ2VuZFN3YXRjaFdpZHRoICsgaSAqIGxlZ2VuZFN3YXRjaFdpZHRoKSArICdweCc7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuc3R5bGUoJ2ZpbGwnLCBmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBkO1xyXG4gICAgICAgIH0pO1xyXG4gICAgLy8gRVhJVCAtIGxlZ2VuZFxyXG4gICAgbGVnZW5kLmV4aXQoKVxyXG4gICAgICAgIC5yZW1vdmUoKTtcclxuXHJcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0gVGV4dCAgLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgLy8gVVBEQVRFIC0gbGVnZW5kIHRleHRcclxuICAgIGxlZ2VuZFRleHQudGV4dChmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgcmV0dXJuIE1hdGguY2VpbChkICogMikgLyAyO1xyXG4gICAgfSk7XHJcbiAgICAvLyBFTlRFUiAtIGxlZ2VuZCB0ZXh0XHJcbiAgICBsZWdlbmRUZXh0XHJcbiAgICAgICAgLmVudGVyKClcclxuICAgICAgICAuYXBwZW5kKCd0ZXh0JylcclxuICAgICAgICAuYXR0cignY2xhc3MnLCAnbGVnZW5kLXRleHQnKVxyXG4gICAgICAgIC5hdHRyKCd5JywgMiAqIGxlZ2VuZFN3YXRjaEhlaWdodClcclxuICAgICAgICAuYXR0cigneCcsIGZ1bmN0aW9uKGQsIGkpIHtcclxuICAgICAgICAgICAgLy8gcGx1cyA1IGhhcyB0byBiZSBjaGFuZ2VkXHJcbiAgICAgICAgICAgIHJldHVybiAobGVnZW5kU3dhdGNoV2lkdGggKyBpICogbGVnZW5kU3dhdGNoV2lkdGggKyA1KSArICdweCc7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAudGV4dChmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBNYXRoLmNlaWwoZCAqIDIpIC8gMjtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAvLyBFWElUIC0gbGVnZW5kIHRleHRcclxuICAgIGxlZ2VuZFRleHQuZXhpdCgpXHJcbiAgICAgICAgLnJlbW92ZSgpO1xyXG59IiwiLyplc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtbGV0cyovXHJcbi8qZ2xvYmFsIHdpbmRvdywgJCwgKi9cclxuLy8gaW1wb3J0ICogYXMgc3B2IGZyb20gJy4vc3BhdGlhbF92aWV3LmpzJztcclxuXHJcbmltcG9ydCB7XHJcbiAgICBkYXRhc2V0TWV0YWRhdGFcclxufSBmcm9tICcuL2V4cGxvcmUuanMnO1xyXG5cclxuXHJcbmV4cG9ydCBsZXQgbWV0YWRhdGFDb2xvciA9IHt9OyAvLyBzYXZlIHRoZSBtZXRhZGF0YSBjb2xvcmluZ1xyXG5cclxuLyoqXHJcbiAqIEluaXQgTWV0YWRhdGEgYnV0dG9ucyBcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpbml0aWFsaXplTWV0YWRkYXRhKCkge1xyXG4gICAgbGV0IGNvbG9ycyA9IFsnI2ZmZicsICcjZTQxYTFjJywgJyMzNzdlYjgnLCAnIzRkYWY0YScsICcjOTg0ZWEzJywgJyNmZjdmMDAnLCAnI2ZmZmYzMycsICcjYTY1NjI4J107XHJcbiAgICAvLyBhZGQgdGhlIGRhdGEgdG8gdGhlIG1ldGFkYXRhIG1vZGFsXHJcbiAgICBpZiAoZGF0YXNldE1ldGFkYXRhLmxlbmd0aCkge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YXNldE1ldGFkYXRhLmxlbmd0aDsgaSsrKSB7XHJcblxyXG4gICAgICAgICAgICAkKCcjbWV0YWRhdGEtdGFibGUnKS5maW5kKCd0Ym9keScpXHJcbiAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzx0ciBpZD1cIm1ldGFkYXRhLXJvdy0nICsgZGF0YXNldE1ldGFkYXRhW2ldWydhbmltYWxfaWQnXSArICdcIj4nKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHRkPicpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoZGF0YXNldE1ldGFkYXRhW2ldWydhbmltYWxfaWQnXSkpXHJcbiAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8dGQ+JylcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZChkYXRhc2V0TWV0YWRhdGFbaV1bJ3NwZWNpZXMnXSkpXHJcbiAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8dGQ+JylcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZChkYXRhc2V0TWV0YWRhdGFbaV1bJ3NleCddKSlcclxuICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzx0ZD4nKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKGRhdGFzZXRNZXRhZGF0YVtpXVsnc2l6ZSddKSlcclxuICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzx0ZD4nKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKGRhdGFzZXRNZXRhZGF0YVtpXVsnd2VpZ2h0J10pKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHRkPicpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoYDxkaXYgY2xhc3M9XCJkcm9wZG93blwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XCJkcm9wZG93bi10b2dnbGUgYnRuIGJ0bi1kZWZhdWx0IGJ0bi1jb2xvclwiIGRhdGEtdG9nZ2xlPVwiZHJvcGRvd25cIiBocmVmPVwiI1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD1cInByZXZpZXdcIiBjbGFzcz1cIm1ldGFkYXRhLXN3YXRjaFwiIHN0eWxlPVwiYmFja2dyb3VuZC1jb2xvcjojZmZmXCI+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9XCJjb2xvci1maWVsZFwiIHZhbHVlPVwiV2hpdGVcIiBzdHlsZT1cImRpc3BsYXk6bm9uZTtcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz1cImRyb3Bkb3duLW1lbnVcIiByb2xlPVwibWVudVwiIGFyaWEtbGFiZWxsZWRieT1cImRMYWJlbFwiPiBgICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJlc3VsdFN0cmluZyA9ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29sb3JzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFN0cmluZyArPSAnPGRpdiBjbGFzcz1cIm1ldGFkYXRhLXN3YXRjaCBtZXRhZGF0YS1zd2F0Y2gtY2xpY2thYmxlXCIgc3R5bGU9XCJiYWNrZ3JvdW5kLWNvbG9yOicgKyBjb2xvcnNbaV0gKyAnXCIgdmFsdWU9XCInICsgaWQgKyAnXCI+PC9kaXY+JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdFN0cmluZztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0oZGF0YXNldE1ldGFkYXRhW2ldWydhbmltYWxfaWQnXSkgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzwvdWw+PC9kaXY+JylcclxuICAgICAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgJCgnI21ldGFkYXRhLXRhYmxlJykuZmluZCgndGJvZHknKVxyXG4gICAgICAgICAgICAuYXBwZW5kKCdUaGVyZSBpcyBubyBtZXRhZGF0YSBmb3IgdGhpcyBkYXRhc2V0Jyk7XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG4vKipcclxuICogU2l6ZSBhbmQgd2VpZ2h0IGNvbG9yaW5nIGZvciB0aGUgbWV0YWRhdGFcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjb2xvck1ldGFkYXRhKCkge1xyXG4gICAgcmVzZXRJbmRpdmlkdWFsTWV0YWRhdGEoKTtcclxuICAgIC8vIGdldCB0aGUgaW5wdXQgdmFsdWVzXHJcbiAgICBsZXQgdmFsdWUgPSAkKCcjZ3JvdXAtbWV0YWRhdGEgLmJ0bi5idG4tZGVmYXVsdC5hY3RpdmUgaW5wdXQnKVxyXG4gICAgICAgIC5hdHRyKCd2YWx1ZScpO1xyXG4gICAgbGV0IGJsQXZnID0gJCgnI2JsLWF2ZycpLnZhbCgpO1xyXG4gICAgbGV0IGFiQXZnID0gJCgnI2FiLWF2ZycpLnZhbCgpO1xyXG4gICAgLy8gY29sb3Igc2NoZW1lIGZvciB0aGUgaW5wdXRzXHJcbiAgICBsZXQgY29sb3JzID0gWycjN2ZjOTdmJywgJyNmZGMwODYnLCAnIzM4NmNiMCddO1xyXG4gICAgLy8gY29sb3IgdGhlIGFuaW1hbHNcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YXNldE1ldGFkYXRhLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgaWYgKGRhdGFzZXRNZXRhZGF0YVtpXVt2YWx1ZV0gPCBibEF2Zykge1xyXG4gICAgICAgICAgICBtZXRhZGF0YUNvbG9yW2RhdGFzZXRNZXRhZGF0YVtpXVsnYW5pbWFsX2lkJ11dID0gY29sb3JzWzBdO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoZGF0YXNldE1ldGFkYXRhW2ldW3ZhbHVlXSA+IGFiQXZnKSB7XHJcbiAgICAgICAgICAgIG1ldGFkYXRhQ29sb3JbZGF0YXNldE1ldGFkYXRhW2ldWydhbmltYWxfaWQnXV0gPSBjb2xvcnNbMl07XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbWV0YWRhdGFDb2xvcltkYXRhc2V0TWV0YWRhdGFbaV1bJ2FuaW1hbF9pZCddXSA9IGNvbG9yc1sxXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogTWV0YWRhdGEgcmVzZXQgYWxsIGluZGl2aWR1YWwgbWV0YWRhdGEgaW5wdXQgZmllbGRzXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcmVzZXRJbmRpdmlkdWFsTWV0YWRhdGEoKSB7XHJcbiAgICBtZXRhZGF0YUNvbG9yID0ge307XHJcbiAgICAkKCcuZHJvcGRvd24gI3ByZXZpZXcnKVxyXG4gICAgICAgIC5jc3MoJ2JhY2tncm91bmQtY29sb3InLCAncmdiKDI1NSwgMjU1LCAyNTUpJyk7XHJcbn1cclxuIiwiLyplc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtbGV0cyovXHJcbi8qZ2xvYmFsIHdpbmRvdywgZDMsICQsIFNldCovXHJcblxyXG5pbXBvcnQgKiBhcyBTUFYgZnJvbSAnLi9zcGF0aWFsX3ZpZXcvc3BhdGlhbF92aWV3LmpzJztcclxuXHJcbmltcG9ydCB7XHJcbiAgICBkaXNhYmxlUGxheUJ1dHRvblxyXG59IGZyb20gJy4vaGVscGVycy5qcyc7XHJcblxyXG5pbXBvcnQge1xyXG4gICAgYnJ1c2hlbmQsXHJcbiAgICBzbGlkZXJcclxufSBmcm9tICcuL3NwYXRpYWxfdmlldy9pbnRlcmFjdGlvbi5qcyc7XHJcblxyXG5pbXBvcnQge1xyXG4gICAgY2hhbmdlTGVnZW5kLFxyXG59IGZyb20gJy4vc3BhdGlhbF92aWV3L2xlZ2VuZC5qcyc7XHJcblxyXG5pbXBvcnQge1xyXG4gICAgbWV0YWRhdGFDb2xvcixcclxuICAgIHJlc2V0SW5kaXZpZHVhbE1ldGFkYXRhLFxyXG4gICAgY29sb3JNZXRhZGF0YVxyXG59IGZyb20gJy4vbWV0YWRhdGEuanMnO1xyXG5cclxuXHJcbmltcG9ydCB7XHJcbiAgICBzZXROZXR3b3JrQXV0byxcclxuICAgIHNldE5ldHdvckxpbWl0LFxyXG4gICAgc2V0TmV0d29ya0hpZXJhcmNoeSxcclxuICAgIHNldG5ldHdvcmtDb2xvcixcclxuICAgIHNldE5ldHdvcmtJRCxcclxuICAgIHNldE5ldHdvcmtCYWNrZ3JvdW5kLFxyXG4gICAgc2V0TmV0d29ya0JhY2tncm91bmRMaW1pdFxyXG59IGZyb20gJy4vbmV0d29yay5qcyc7XHJcblxyXG5pbXBvcnQge1xyXG4gICAgZGF0YXNldCxcclxuICAgIHN3YXJtRGF0YSxcclxuICAgIGRhdGFzZXRNZXRhZGF0YSxcclxuICAgIHNldE5ldHdvcmtEYXRhLFxyXG4gICAgc2V0SGllcmFyY2h5RGF0YVxyXG59IGZyb20gJy4vZXhwbG9yZS5qcyc7XHJcblxyXG5pbXBvcnQge1xyXG4gICAgZ2V0RGF0YXNldEZlYXR1cmUsXHJcbiAgICBnZXROZXR3b3JrRGF0YSxcclxuICAgIGdldFN3YXJtRGF0YXNldEZlYXR1cmUsXHJcbiAgICBnZXROZXR3b3JrSGllcmFyY2h5RGF0YVxyXG59IGZyb20gJy4vYWpheF9xdWVyaWVzLmpzJztcclxuXHJcbmltcG9ydCB7XHJcbiAgICBjb2xvclNjYWxlXHJcbn0gZnJvbSAnLi9zcGF0aWFsX3ZpZXcvY29sb3JfcGlja2VyJztcclxuXHJcbmltcG9ydCB7XHJcbiAgICBhZGRIaWVyYXJjaHlCdXR0b24sXHJcbiAgICByZW1vdmVIaWVyYXJjaHlCdXR0b24sXHJcbiAgICBtYXhOdW1iZXJIaWVyYXJjaGllcyxcclxuICAgIHNldFNldE9wZXJhdGlvbixcclxuICAgIERyYXdlcixcclxuICAgIERlbmRyb2dyYW1cclxufSBmcm9tICcuL2hpZXJhcmNoeS5qcyc7XHJcblxyXG5pbXBvcnQge1xyXG4gICAgc2V0VHJhY2tpbmdCb29sZWFuLFxyXG4gICAgcmVzZXRUcmFja2VkRGF0YSxcclxuICAgIHNlbmRUcmFja2VkRGF0YVxyXG59IGZyb20gJy4vdmlzdWFsX3BhcmFtZXRlci5qcyc7XHJcblxyXG5sZXQgYnJ1c2g7IC8vIGJydXNoaW5nIHZhcmlhYmxlXHJcbmV4cG9ydCBsZXQgcGxheUJvb2xlYW4gPSB0cnVlOyAvLyBwYXVzZSBhbmQgcGxheSBib29sZWFuXHJcblxyXG5leHBvcnQgY2xhc3MgTGlzdGVuZXIgZXh0ZW5kcyBEcmF3ZXIge1xyXG4gIGNvbnN0cnVjdG9yKCl7XHJcbiAgICB0aGlzLmNwX2xpc3RlbmVyKCk7XHJcbiAgICB0aGlzLnNmX2xpc3RlbmVycygpO1xyXG4gICAgdGhpcy5hZl9saXN0ZW5lcnMoKTtcclxuICAgIHRoaXMubWRfbGlzdGVuZXJzKCk7XHJcbiAgICB0aGlzLm5fbGlzdGVuZXJzKCk7XHJcbiAgICB0aGlzLmhfbGlzdGVuZXJzKCk7XHJcbiAgfVxyXG5cclxuICBjcF9saXN0ZW5lcigpIHtcclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBQbGF5IG9yIHN0b3AgdGhlIGFuaW1hdGlvblxyXG4gICAgICAgKi9cclxuICAgICAgJCgnI3BsYXktYnV0dG9uJykuY2xpY2soZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBpZiAoJCgnI3BsYXktYnV0dG9uJykuaGFzQ2xhc3MoJ2FjdGl2ZScpID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgcGxheUJvb2xlYW4gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAkKCcubWRpLXBhdXNlJykuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICQoJy5tZGktcGxheScpLnNob3coKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgcGxheUJvb2xlYW4gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICQoJy5tZGktcGxheScpLmhpZGUoKTtcclxuICAgICAgICAgICAgICAkKCcubWRpLXBhdXNlJykuc2hvdygpO1xyXG4gICAgICAgICAgICAgIFNQVi5zZXRJbmRleFRpbWUoc2xpZGVyLnNsaWRlcigndmFsdWUnKSk7XHJcbiAgICAgICAgICAgICAgJCgnLmJydXNoJykucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgICAgdGhpcy5kcmF3KCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIFBhdXNlIHRoZSBhbmltYXRpb24gYW5kIHNob3cgb25seSB0aGUgbmV4dCBmcmFtZVxyXG4gICAgICAgKi9cclxuICAgICAgJCgnI25leHQtZnJhbWUtYnV0dG9uJykuY2xpY2soZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBpZiAoJCgnI3BsYXktYnV0dG9uJykuaGFzQ2xhc3MoJ2FjdGl2ZScpID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgcGxheUJvb2xlYW4gPSBmYWxzZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgICQoJyNwbGF5LWJ1dHRvbicpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcclxuICAgICAgICAgIHRoaXMuZHJhdygpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBCcnVzaGluZyBidXR0b25cclxuICAgICAgICovXHJcbiAgICAgICQoJyNicnVzaGluZy1idXR0b24nKS5jbGljayhmdW5jdGlvbigpIHtcclxuICAgICAgICAgIC8vc3RvcCB0aGUgYW5pbWF0aW9uXHJcbiAgICAgICAgICBwbGF5Qm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgICAgICAgJCgnI3BsYXktYnV0dG9uJykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgaWYgKCEkKCcjYnJ1c2hpbmctYnV0dG9uJykuaGFzQ2xhc3MoJ2FjdGl2ZScpKSB7XHJcbiAgICAgICAgICAgICAgLy9kZWZpbmUgdGhlIGJydXNoXHJcbiAgICAgICAgICAgICAgYnJ1c2ggPSBkMy5icnVzaCgpXHJcbiAgICAgICAgICAgICAgICAgIC5leHRlbnQoW1xyXG4gICAgICAgICAgICAgICAgICAgICAgWzAsIDBdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgW1NQVi50YW5rV2lkdGgsIFNQVi50YW5rSGVpZ2h0XVxyXG4gICAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICAgICAgICAub24oJ2VuZCcsIGJydXNoZW5kKTtcclxuICAgICAgICAgICAgICAvL2FkZCB0aGUgYnJ1c2hcclxuICAgICAgICAgICAgICBkMy5zZWxlY3QoJyNtYWluLXZpcy1zdmcnKVxyXG4gICAgICAgICAgICAgICAgICAuYXBwZW5kKCdnJylcclxuICAgICAgICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2JydXNoJylcclxuICAgICAgICAgICAgICAgICAgLmNhbGwoYnJ1c2gpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAvLyByZW1vdmUgdGhlIGJydXNoXHJcbiAgICAgICAgICAgICAgJCgnLmJydXNoJykucmVtb3ZlKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIFVuc2VsZWN0IGFsbCBidXR0b25cclxuICAgICAgICovXHJcbiAgICAgICQoJyNyZW1vdmUtYWN0aXZlLXNlbGVjdGVkLWJ1dHRvbicpLmNsaWNrKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgaWYgKCEkKCcjcmVtb3ZlLWFjdGl2ZS1zZWxlY3RlZC1idXR0b24nKS5pcygnOmRpc2FibGVkJykpIHtcclxuICAgICAgICAgICAgICAkKCcjcmVtb3ZlLWFjdGl2ZS1zZWxlY3RlZC1idXR0b24nKS5wcm9wKCdkaXNhYmxlZCcsIHRydWUpO1xyXG4gICAgICAgICAgICAgIFNQVi5zZXRBY3RpdmVBbmltYWxzKFtdKTtcclxuICAgICAgICAgICAgICAvLyB0cmFja2luZyBvZiBkYXRhIGZvciB2aXN1YWwgcGFyYW1ldGVyIHN1Z2dlc3Rpb25cclxuICAgICAgICAgICAgICByZXNldFRyYWNrZWREYXRhKCk7XHJcbiAgICAgICAgICAgICAgJCgnI3Zpc3VhbC1wYXJhbWV0ZXItYnV0dG9uJykucHJvcCgnZGlzYWJsZWQnLCB0cnVlKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XHJcblxyXG4gICAgICAgICAgICAgIGlmICghJCgnI3BsYXktYnV0dG9uJykuaGFzQ2xhc3MoJ2FjdGl2ZScpKSB7XHJcbiAgICAgICAgICAgICAgICAgIC8vZ28gYmFjayBvbmUgc2Vjb25kIGFuZCBkcmF3IHRoZSBuZXh0IGZyYW1lXHJcbiAgICAgICAgICAgICAgICAgIC8vdGhpcyBhcHBseXMgdGhlIGNoYW5nZXNcclxuXHJcbiAgICAgICAgICAgICAgICAgIHRoaXMuZGVjSW5kZXhUaW1lKCk7XHJcbiAgICAgICAgICAgICAgICAgIHRoaXMuZHJhdygpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgfSk7XHJcblxyXG4gICAgICAvKipcclxuICAgICAgICogVHJhY2sgdmlzdWFsIHBhcmFtZXRlciBidXR0b25cclxuICAgICAgICovXHJcbiAgICAgICQoJyN2aXN1YWwtcGFyYW1ldGVyLWJ1dHRvbicpLmNsaWNrKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgaWYgKCQoJyN2aXN1YWwtcGFyYW1ldGVyLWJ1dHRvbicpLmhhc0NsYXNzKCdhY3RpdmUnKSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgIHNldFRyYWNraW5nQm9vbGVhbihmYWxzZSk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIHNldFRyYWNraW5nQm9vbGVhbih0cnVlKTtcclxuICAgICAgICAgIH1cclxuICAgICAgfSk7XHJcblxyXG4gICAgICAvKipcclxuICAgICAgICogU2VuZCB0aGUgdHJhY2tlZCB2aWEgYSBhamF4IHF1ZXJ5IHRvIHRoZSBzZXJ2ZXIgdG8gY2FsY3VsYXRlIHRoZSBwYXJhbWV0ZXJzXHJcbiAgICAgICAqL1xyXG4gICAgICAkKCcjY2FsY3VsYXRlLXBhcmFtZXRlci1idXR0b24nKS5jbGljayhmdW5jdGlvbigpIHtcclxuICAgICAgICAgIGlmICghJCgnI2NhbGN1bGF0ZS1wYXJhbWV0ZXItYnV0dG9uJykuaGFzQ2xhc3MoJ2FjdGl2ZScpKSB7XHJcbiAgICAgICAgICAgICAgc2V0VHJhY2tpbmdCb29sZWFuKGZhbHNlKTtcclxuICAgICAgICAgICAgICBzZW5kVHJhY2tlZERhdGEoKTtcclxuXHJcbiAgICAgICAgICAgICAgLy8gZGlzYWJsZSBib3RoIGJ1dHRvbnMgYW5kIHJlbW92ZSB0aGUgYWN0aXZlIG9uZVxyXG4gICAgICAgICAgICAgICQoJyNjYWxjdWxhdGUtcGFyYW1ldGVyLWJ1dHRvbicpLnByb3AoJ2Rpc2FibGVkJywgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgJCgnI2NhbGN1bGF0ZS1wYXJhbWV0ZXItYnV0dG9uJykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICAgICQoJyN2aXN1YWwtcGFyYW1ldGVyLWJ1dHRvbicpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcclxuICAgICAgICAgIH1cclxuICAgICAgfSk7XHJcblxyXG4gICAgICAvKipcclxuICAgICAgICogU3BhdGlhbCB2aWV3IGJhY2tncm91bmQgY29sb3JcclxuICAgICAgICovXHJcbiAgICAgICQoJyNiYWNrZ3JvdW5kLWNvbG9yJykuY2hhbmdlKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgbGV0IGNvbG9yID0gJCgnaW5wdXRbdHlwZT1cInJhZGlvXCJdLmdyb3VwLWJhY2tncm91bmQ6Y2hlY2tlZCcpLnZhbCgpO1xyXG4gICAgICAgICAgJCgnI21haW4tdmlzLXN2ZycpLmNzcygnYmFja2dyb3VuZC1jb2xvcicsIGNvbG9yKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICAvKipcclxuICAgICAgICogU2hvdyB0aGUgc3BhdGlhbCB2aWV3IGF4aXMgYnV0dG9uXHJcbiAgICAgICAqL1xyXG4gICAgICAkKCcjZHJhdy1heGlzJykub24oJ2NoYW5nZScsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgaWYgKHRoaXMuY2hlY2tlZCkge1xyXG4gICAgICAgICAgICAgICQoJyNtYWluLXZpcyBnLnguYXhpcycpLnNob3coKTtcclxuICAgICAgICAgICAgICAkKCcjbWFpbi12aXMgZy55LmF4aXMnKS5zaG93KCk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICQoJyNtYWluLXZpcyBnLnguYXhpcycpLmhpZGUoKTtcclxuICAgICAgICAgICAgICAkKCcjbWFpbi12aXMgZy55LmF4aXMnKS5oaWRlKCk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBTaG93IHRoZSBmcmFtZSAodGltZSkgbnVtYmVyIGluIHRoZSBzcGF0aWFsIHZpZXcgYnV0dG9uXHJcbiAgICAgICAqL1xyXG4gICAgICAkKCcjZHJhdy10aW1lJykub24oJ2NoYW5nZScsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgaWYgKHRoaXMuY2hlY2tlZCkge1xyXG4gICAgICAgICAgICAgICQoJyNtYWluLXZpcyAuZnJhbWUtdGV4dCcpLnNob3coKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgJCgnI21haW4tdmlzIC5mcmFtZS10ZXh0JykuaGlkZSgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBEcmF3IHRoZSBuZXR3b3JrIGJhY2tncm91bmQgY29sb3JcclxuICAgICAgICovXHJcbiAgICAgICQoJyNuZXR3b3JrLWJhY2tncm91bmQnKS5vbignY2hhbmdlJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBpZiAodGhpcy5jaGVja2VkKSB7XHJcbiAgICAgICAgICAgICAgc2V0TmV0d29ya0JhY2tncm91bmQodHJ1ZSk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIHNldE5ldHdvcmtCYWNrZ3JvdW5kKGZhbHNlKTtcclxuICAgICAgICAgIH1cclxuICAgICAgfSk7XHJcblxyXG4gICAgICAvKipcclxuICAgICAgICogU2V0IHRoZSBuZXR3b3JrIGJhY2tncm91bmQgZWRnZSBsaW1pdFxyXG4gICAgICAgKi9cclxuICAgICAgJCgnI25ldHdvcmstYmFja2dyb3VuZC1saW1pdCcpLnZhbCgxKTtcclxuICAgICAgJCgnI25ldHdvcmstYmFja2dyb3VuZC1saW1pdCcpLm9uKCdjaGFuZ2UnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIGxldCB2YWwgPSAkKHRoaXMpLnZhbCgpO1xyXG4gICAgICAgICAgaWYgKCQuaXNOdW1lcmljKHZhbCkgJiYgdmFsID4gMCkge1xyXG4gICAgICAgICAgICAgIHNldE5ldHdvcmtCYWNrZ3JvdW5kTGltaXQodmFsKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgJCh0aGlzKS52YWwoMSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIENvbG9yIFNjYWxlIEZ1bmN0aW9uIFJhZGlvIGJ1dHRvbnNcclxuICAgICAgICovXHJcbiAgICAgICQoJyNjb2xvci1zY2FsZS1yYWRpby1mb3JtIGlucHV0Jykub24oJ2NoYW5nZScsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgY29sb3JTY2FsZVsndHlwZSddID0gJCgnaW5wdXRbbmFtZT1jb2xvci1zY2FsZS1yYWRpb106Y2hlY2tlZCcsICcjY29sb3Itc2NhbGUtcmFkaW8tZm9ybScpLnZhbCgpO1xyXG4gICAgICAgICAgaWYgKCEkKCcjcGxheS1idXR0b24nKS5oYXNDbGFzcygnYWN0aXZlJykpIHtcclxuICAgICAgICAgICAgICAvL2dvIGJhY2sgb25lIHNlY29uZCBhbmQgZHJhdyB0aGUgbmV4dCBmcmFtZVxyXG4gICAgICAgICAgICAgIC8vdGhpcyBhcHBseXMgdGhlIGNoYW5nZXNcclxuICAgICAgICAgICAgICB0aGlzLmRlY0luZGV4VGltZSgpO1xyXG4gICAgICAgICAgICAgIHRoaXMuZHJhdygpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICogSW5pdCBzd2FybSBmZWF0dXJlcyBsaXN0ZW5lcnNcclxuICAgKi9cclxuICBzZl9saXN0ZW5lcnMoKSB7XHJcblxyXG4gICAgICAvKipcclxuICAgICAgICogRHJhdyBkaXJlY3Rpb24gYXJyb3cgb2YgdGhlIGFuaW1hbFxyXG4gICAgICAgKi9cclxuICAgICAgJCgnI2RyYXctZGlyZWN0aW9uJykuY2xpY2soZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBpZiAoJCgnI2RyYXctZGlyZWN0aW9uJykuaXMoJzpjaGVja2VkJykpIHtcclxuICAgICAgICAgICAgICBpZiAoISgnZGlyZWN0aW9uJyBpbiBkYXRhc2V0WzBdKSkge1xyXG4gICAgICAgICAgICAgICAgICBkaXNhYmxlUGxheUJ1dHRvbigpO1xyXG4gICAgICAgICAgICAgICAgICAvLyBhamF4IHF1ZXJ5IHRvIGdldCBkaXJlY3Rpb24gZGF0YVxyXG4gICAgICAgICAgICAgICAgICBnZXREYXRhc2V0RmVhdHVyZSgnZGlyZWN0aW9uJyk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICQoJy5hcnJvdycpLnNob3coKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgJCgnLmFycm93JykuaGlkZSgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaWYgKCEkKCcjcGxheS1idXR0b24nKS5oYXNDbGFzcygnYWN0aXZlJykpIHtcclxuICAgICAgICAgICAgICAvL2dvIGJhY2sgb25lIHNlY29uZCBhbmQgZHJhdyB0aGUgbmV4dCBmcmFtZVxyXG4gICAgICAgICAgICAgIC8vdGhpcyBhcHBseXMgdGhlIGNoYW5nZXNcclxuICAgICAgICAgICAgICB0aGlzLmRlY0luZGV4VGltZSgpO1xyXG4gICAgICAgICAgICAgIHRoaXMuZHJhdygpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBEcmF3IG1lZG9pZCBpbiBjb2xvciBidXR0b25cclxuICAgICAgICovXHJcbiAgICAgICQoJyNkcmF3LW1lZG9pZCcpLmNsaWNrKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgaWYgKCQoJyNkcmF3LW1lZG9pZCcpLmlzKCc6Y2hlY2tlZCcpKSB7XHJcblxyXG4gICAgICAgICAgICAgIGlmICghKCdtZWRvaWQnIGluIHN3YXJtRGF0YVswXSkpIHtcclxuICAgICAgICAgICAgICAgICAgZ2V0U3dhcm1EYXRhc2V0RmVhdHVyZSgnbWVkb2lkJyk7XHJcblxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBTUFYuc2V0TWVkb2lkQW5pbWFsKHN3YXJtRGF0YVtTUFYuaW5kZXhUaW1lXVsnbWVkb2lkJ10pO1xyXG4gICAgICAgICAgICAgIC8vIGRpc3BsYXkgdGhlIG1lZG9pZFxyXG4gICAgICAgICAgICAgIGQzLnNlbGVjdEFsbCgnI2FuaW1hbC0nICsgU1BWLm1lZG9pZEFuaW1hbClcclxuICAgICAgICAgICAgICAgICAgLmNsYXNzZWQoJ21lZG9pZCcsIHRydWUpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAvLyBkbyBub3QgZGlzcGxheSB0aGUgbWVkb2lkIGZpc2hcclxuICAgICAgICAgICAgICBkMy5zZWxlY3RBbGwoJyNhbmltYWwtJyArIFNQVi5tZWRvaWRBbmltYWwpXHJcbiAgICAgICAgICAgICAgICAgIC5jbGFzc2VkKCdtZWRvaWQnLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgU1BWLnNldE1lZG9pZEFuaW1hbCgtMSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIERyYXcgY2VudHJvaWQgYnV0dG9uXHJcbiAgICAgICAqL1xyXG4gICAgICAkKCcjZHJhdy1jZW50cm9pZCcpLmNsaWNrKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgaWYgKCQoJyNkcmF3LWNlbnRyb2lkJykuaXMoJzpjaGVja2VkJykpIHtcclxuICAgICAgICAgICAgICBpZiAoISgnY2VudHJvaWQnIGluIHN3YXJtRGF0YVswXSkpIHtcclxuICAgICAgICAgICAgICAgICAgZ2V0U3dhcm1EYXRhc2V0RmVhdHVyZSgnY2VudHJvaWQnKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgLy8gZGlzcGxheSB0aGUgY2VudHJvaWRcclxuICAgICAgICAgICAgICAkKCcjZy1jZW50cm9pZCcpLnNob3coKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgLy8gaGlkZSB0aGUgY2VudHJvaWRcclxuICAgICAgICAgICAgICAkKCcjZy1jZW50cm9pZCcpLmhpZGUoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgfSk7XHJcblxyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIERyYXcgY29udmV4IGh1bGwgaW4gY29sb3IgYnV0dG9uXHJcbiAgICAgICAqL1xyXG4gICAgICAkKCcjZHJhdy1jb252ZXgtaHVsbCcpLmNsaWNrKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgaWYgKCQoJyNkcmF3LWNvbnZleC1odWxsJykuaXMoJzpjaGVja2VkJykpIHtcclxuICAgICAgICAgICAgICBpZiAoISgnaHVsbCcgaW4gc3dhcm1EYXRhWzBdKSkge1xyXG4gICAgICAgICAgICAgICAgICBnZXRTd2FybURhdGFzZXRGZWF0dXJlKCdjb252ZXhfaHVsbCcpO1xyXG5cclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG5cclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBEcmF3IHRyaWFuZ3VsYXRpb25cclxuICAgICAgICovXHJcbiAgICAgICQoJyNkcmF3LXRyaWFuZ3VsYXRpb24nKS5jbGljayhmdW5jdGlvbigpIHtcclxuICAgICAgICAgIGlmICgkKCcjZHJhdy10cmlhbmd1bGF0aW9uJykuaXMoJzpjaGVja2VkJykpIHtcclxuICAgICAgICAgICAgICBpZiAoISgndHJpYW5ndWxhdGlvbicgaW4gc3dhcm1EYXRhWzBdKSkge1xyXG4gICAgICAgICAgICAgICAgICBnZXRTd2FybURhdGFzZXRGZWF0dXJlKCd0cmlhbmd1bGF0aW9uJyk7XHJcblxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBpZiAoISQoJyNwbGF5LWJ1dHRvbicpLmhhc0NsYXNzKCdhY3RpdmUnKSkge1xyXG4gICAgICAgICAgICAgICAgICAvL2dvIGJhY2sgb25lIHNlY29uZCBhbmQgZHJhdyB0aGUgbmV4dCBmcmFtZVxyXG4gICAgICAgICAgICAgICAgICAvL3RoaXMgYXBwbHlzIHRoZSBjaGFuZ2VzXHJcbiAgICAgICAgICAgICAgICAgIHRoaXMuZGVjSW5kZXhUaW1lKCk7XHJcbiAgICAgICAgICAgICAgICAgIHRoaXMuZHJhdygpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgfSk7XHJcblxyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIERyYXcgdm9yb25vaVxyXG4gICAgICAgKi9cclxuICAgICAgJCgnI2RyYXctdm9yb25vaScpLmNsaWNrKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgaWYgKCQoJyNkcmF3LXZvcm9ub2knKS5pcygnOmNoZWNrZWQnKSkge1xyXG4gICAgICAgICAgICAgIGlmICghKCd2b3Jvbm9pJyBpbiBzd2FybURhdGFbMF0pKSB7XHJcbiAgICAgICAgICAgICAgICAgIGdldFN3YXJtRGF0YXNldEZlYXR1cmUoJ3Zvcm9ub2knKTtcclxuXHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIGlmICghJCgnI3BsYXktYnV0dG9uJykuaGFzQ2xhc3MoJ2FjdGl2ZScpKSB7XHJcbiAgICAgICAgICAgICAgICAgIC8vZ28gYmFjayBvbmUgc2Vjb25kIGFuZCBkcmF3IHRoZSBuZXh0IGZyYW1lXHJcbiAgICAgICAgICAgICAgICAgIC8vdGhpcyBhcHBseXMgdGhlIGNoYW5nZXNcclxuICAgICAgICAgICAgICAgICAgdGhpcy5kZWNJbmRleFRpbWUoKTtcclxuICAgICAgICAgICAgICAgICAgdGhpcy5kcmF3KCk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICB9KTtcclxuXHJcblxyXG4gIH1cclxuICAvKipcclxuICAgKiBJbml0IGFic29sdXRlIGZlYXR1cmUgbGlzdGVuZXJzXHJcbiAgICovXHJcbiAgYWZfbGlzdGVuZXJzKCkge1xyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIERyYXcgU3BlZWQgYnV0dG9uXHJcbiAgICAgICAqL1xyXG4gICAgICAkKCcjZHJhdy1zcGVlZCcpLmNsaWNrKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgJCgnLmRyYXctZGV0YWlscycpLmhpZGUoKVxyXG4gICAgICAgICAgICAgIC5maW5kKCdpbnB1dDpjaGVja2JveCcpLnByb3AoJ2NoZWNrZWQnLCB0cnVlKS5jbGljaygpO1xyXG4gICAgICAgICAgaWYgKCQoJyNkcmF3LXNwZWVkJykuaXMoJzpjaGVja2VkJykpIHtcclxuICAgICAgICAgICAgICAvLyBsb2FkIGFic29sdXRlIGZlYXR1cmUgc3BlZWQgZGF0YSBvbmNlXHJcbiAgICAgICAgICAgICAgaWYgKCEoJ3NwZWVkJyBpbiBkYXRhc2V0WzBdKSkge1xyXG4gICAgICAgICAgICAgICAgICBkaXNhYmxlUGxheUJ1dHRvbigpO1xyXG4gICAgICAgICAgICAgICAgICAvLyBhamF4IHF1ZXJ5IHRvIGdldCB0aGUgYWJzb2x1dGUgZmVhdHVyZSBzcGVlZFxyXG4gICAgICAgICAgICAgICAgICBnZXREYXRhc2V0RmVhdHVyZSgnc3BlZWQnKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgLy8gJCgnLmRyYXctZGV0YWlscycpLmhpZGUoKTtcclxuICAgICAgICAgICAgICAkKCcjZHJhdy1zcGVlZC1kZXRhaWxzJykuc2hvdygpO1xyXG4gICAgICAgICAgICAgICQoJyNkcmF3LWFjY2VsZXJhdGlvbicpLnByb3AoJ2NoZWNrZWQnLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgJCgnI2RyYXctZGlzdGFuY2VfY2VudHJvaWQnKS5wcm9wKCdjaGVja2VkJywgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICQoJyNkcmF3LW1pZGxpbmVfb2Zmc2V0JykucHJvcCgnY2hlY2tlZCcsIGZhbHNlKTtcclxuICAgICAgICAgICAgICBTUFYuc2V0QWN0aXZlU2NhbGUoJ3NwZWVkJyk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICQoJyNkcmF3LXNwZWVkLWRldGFpbHMnKS5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgU1BWLnNldEFjdGl2ZVNjYWxlKCdibGFjaycpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgLy9jaGFuZ2UgY29sb3IgbGVnZW5kXHJcbiAgICAgICAgICBkMy5zZWxlY3RBbGwoJy5jb2xvckxlZ2VuZCAqJykucmVtb3ZlKCk7XHJcbiAgICAgICAgICBjaGFuZ2VMZWdlbmQoKTtcclxuXHJcbiAgICAgICAgICBpZiAoISQoJyNwbGF5LWJ1dHRvbicpLmhhc0NsYXNzKCdhY3RpdmUnKSkge1xyXG4gICAgICAgICAgICAgIC8vZ28gYmFjayBvbmUgc2Vjb25kIGFuZCBkcmF3IHRoZSBuZXh0IGZyYW1lXHJcbiAgICAgICAgICAgICAgLy90aGlzIGFwcGx5cyB0aGUgY2hhbmdlc1xyXG4gICAgICAgICAgICAgIHRoaXMuZGVjSW5kZXhUaW1lKCk7XHJcbiAgICAgICAgICAgICAgdGhpcy5kcmF3KCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIERyYXcgYWNjZWxlcmF0aW9uIGJ1dHRvblxyXG4gICAgICAgKi9cclxuICAgICAgJCgnI2RyYXctYWNjZWxlcmF0aW9uJykuY2xpY2soZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAkKCcuZHJhdy1kZXRhaWxzJykuaGlkZSgpXHJcbiAgICAgICAgICAgICAgLmZpbmQoJ2lucHV0OmNoZWNrYm94JykucHJvcCgnY2hlY2tlZCcsIHRydWUpLmNsaWNrKCk7XHJcbiAgICAgICAgICBpZiAoJCgnI2RyYXctYWNjZWxlcmF0aW9uJykuaXMoJzpjaGVja2VkJykpIHtcclxuICAgICAgICAgICAgICAvLyBsb2FkIGFic29sdXRlIGZlYXR1cmUgYWNjZWxlcmF0aW9uIGRhdGEgb25jZVxyXG4gICAgICAgICAgICAgIGlmICghKCdhY2NlbGVyYXRpb24nIGluIGRhdGFzZXRbMF0pKSB7XHJcbiAgICAgICAgICAgICAgICAgIGRpc2FibGVQbGF5QnV0dG9uKCk7XHJcbiAgICAgICAgICAgICAgICAgIC8vIGFqYXggcXVlcnkgdG8gZ2V0IHRoZSBhYnNvbHV0ZSBmZWF0dXJlIGFjY2VsZXJhdGlvblxyXG4gICAgICAgICAgICAgICAgICBnZXREYXRhc2V0RmVhdHVyZSgnYWNjZWxlcmF0aW9uJyk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICQoJyNkcmF3LWFjY2VsZXJhdGlvbi1kZXRhaWxzJykuc2hvdygpO1xyXG4gICAgICAgICAgICAgICQoJyNkcmF3LXNwZWVkJykucHJvcCgnY2hlY2tlZCcsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAkKCcjZHJhdy1kaXN0YW5jZV9jZW50cm9pZCcpLnByb3AoJ2NoZWNrZWQnLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgJCgnI2RyYXctbWlkbGluZV9vZmZzZXQnKS5wcm9wKCdjaGVja2VkJywgZmFsc2UpO1xyXG4gICAgICAgICAgICAgIFNQVi5zZXRBY3RpdmVTY2FsZSgnYWNjZWxlcmF0aW9uJyk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICQoJyNkcmF3LWFjY2VsZXJhdGlvbi1kZXRhaWxzJykuaGlkZSgpO1xyXG4gICAgICAgICAgICAgIFNQVi5zZXRBY3RpdmVTY2FsZSgnYmxhY2snKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgICQoJy5kcmF3LWRldGFpbHMuYWN0aXZlJykuY2xpY2soKTtcclxuICAgICAgICAgIC8vY2hhbmdlIGNvbG9yIGxlZ2VuZFxyXG4gICAgICAgICAgZDMuc2VsZWN0QWxsKCcuY29sb3JMZWdlbmQgKicpLnJlbW92ZSgpO1xyXG4gICAgICAgICAgY2hhbmdlTGVnZW5kKCk7XHJcblxyXG4gICAgICAgICAgaWYgKCEkKCcjcGxheS1idXR0b24nKS5oYXNDbGFzcygnYWN0aXZlJykpIHtcclxuICAgICAgICAgICAgICAvL2dvIGJhY2sgb25lIHNlY29uZCBhbmQgZHJhdyB0aGUgbmV4dCBmcmFtZVxyXG4gICAgICAgICAgICAgIC8vdGhpcyBhcHBseXMgdGhlIGNoYW5nZXNcclxuICAgICAgICAgICAgICB0aGlzLmRlY0luZGV4VGltZSgpO1xyXG4gICAgICAgICAgICAgIHRoaXMuZHJhdygpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBEcmF3IGRpc3RhbmNlIHRvIGNlbnRyb2lkIGJ1dHRvblxyXG4gICAgICAgKi9cclxuICAgICAgJCgnI2RyYXctZGlzdGFuY2VfY2VudHJvaWQnKS5jbGljayhmdW5jdGlvbigpIHtcclxuICAgICAgICAgICQoJy5kcmF3LWRldGFpbHMnKS5oaWRlKClcclxuICAgICAgICAgICAgICAuZmluZCgnaW5wdXQ6Y2hlY2tib3gnKS5wcm9wKCdjaGVja2VkJywgdHJ1ZSkuY2xpY2soKTtcclxuICAgICAgICAgIGlmICgkKCcjZHJhdy1kaXN0YW5jZV9jZW50cm9pZCcpLmlzKCc6Y2hlY2tlZCcpKSB7XHJcbiAgICAgICAgICAgICAgLy8gbG9hZCBhYnNvbHV0ZSBmZWF0dXJlIGRpc3RhbmNlX2NlbnRyb2lkIGRhdGEgb25jZVxyXG4gICAgICAgICAgICAgIGlmICghKCdkaXN0YW5jZV9jZW50cm9pZCcgaW4gZGF0YXNldFswXSkpIHtcclxuICAgICAgICAgICAgICAgICAgZGlzYWJsZVBsYXlCdXR0b24oKTtcclxuICAgICAgICAgICAgICAgICAgLy8gYWpheCBxdWVyeSB0byBnZXQgdGhlIGFic29sdXRlIGZlYXR1cmUgZGlzdGFuY2VfY2VudHJvaWRcclxuICAgICAgICAgICAgICAgICAgZ2V0RGF0YXNldEZlYXR1cmUoJ2Rpc3RhbmNlX2NlbnRyb2lkJyk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICQoJyNkcmF3LWRpc3RhbmNlX2NlbnRyb2lkLWRldGFpbHMnKS5zaG93KCk7XHJcbiAgICAgICAgICAgICAgJCgnI2RyYXctc3BlZWQnKS5wcm9wKCdjaGVja2VkJywgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICQoJyNkcmF3LWFjY2VsZXJhdGlvbicpLnByb3AoJ2NoZWNrZWQnLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgJCgnI2RyYXctbWlkbGluZV9vZmZzZXQnKS5wcm9wKCdjaGVja2VkJywgZmFsc2UpO1xyXG4gICAgICAgICAgICAgIFNQVi5zZXRBY3RpdmVTY2FsZSgnZGlzdGFuY2VfY2VudHJvaWQnKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgJCgnI2RyYXctZGlzdGFuY2VfY2VudHJvaWQtZGV0YWlscycpLmhpZGUoKTtcclxuICAgICAgICAgICAgICBTUFYuc2V0QWN0aXZlU2NhbGUoJ2JsYWNrJyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICAkKCcuZHJhdy1kZXRhaWxzLmFjdGl2ZScpLmNsaWNrKCk7XHJcbiAgICAgICAgICAvL2NoYW5nZSBjb2xvciBsZWdlbmRcclxuICAgICAgICAgIGQzLnNlbGVjdEFsbCgnLmNvbG9yTGVnZW5kIConKS5yZW1vdmUoKTtcclxuICAgICAgICAgIGNoYW5nZUxlZ2VuZCgpO1xyXG5cclxuICAgICAgICAgIGlmICghJCgnI3BsYXktYnV0dG9uJykuaGFzQ2xhc3MoJ2FjdGl2ZScpKSB7XHJcbiAgICAgICAgICAgICAgLy9nbyBiYWNrIG9uZSBzZWNvbmQgYW5kIGRyYXcgdGhlIG5leHQgZnJhbWVcclxuICAgICAgICAgICAgICAvL3RoaXMgYXBwbHlzIHRoZSBjaGFuZ2VzXHJcbiAgICAgICAgICAgICAgdGhpcy5kZWNJbmRleFRpbWUoKTtcclxuICAgICAgICAgICAgICB0aGlzLmRyYXcoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgfSk7XHJcblxyXG4gICAgICAvKipcclxuICAgICAgICogRHJhdyBtaWRsaW5lIG9mZnNldFxyXG4gICAgICAgKi9cclxuICAgICAgJCgnI2RyYXctbWlkbGluZV9vZmZzZXQnKS5jbGljayhmdW5jdGlvbigpIHtcclxuICAgICAgICAgICQoJy5kcmF3LWRldGFpbHMnKS5oaWRlKClcclxuICAgICAgICAgICAgICAuZmluZCgnaW5wdXQ6Y2hlY2tib3gnKS5wcm9wKCdjaGVja2VkJywgdHJ1ZSkuY2xpY2soKTtcclxuICAgICAgICAgIGlmICgkKCcjZHJhdy1taWRsaW5lX29mZnNldCcpLmlzKCc6Y2hlY2tlZCcpKSB7XHJcbiAgICAgICAgICAgICAgLy8gbG9hZCBhYnNvbHV0ZSBmZWF0dXJlIGRyYXctbWlkbGluZV9vZmZzZXQgZGF0YSBvbmNlXHJcbiAgICAgICAgICAgICAgaWYgKCEoJ2RyYXctbWlkbGluZV9vZmZzZXQnIGluIGRhdGFzZXRbMF0pKSB7XHJcbiAgICAgICAgICAgICAgICAgIGRpc2FibGVQbGF5QnV0dG9uKCk7XHJcbiAgICAgICAgICAgICAgICAgIC8vIGFqYXggcXVlcnkgdG8gZ2V0IHRoZSBhYnNvbHV0ZSBmZWF0dXJlIG1pZGxpbmVfb2Zmc2V0XHJcbiAgICAgICAgICAgICAgICAgIGdldERhdGFzZXRGZWF0dXJlKCdtaWRsaW5lX29mZnNldCcpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAkKCcjZHJhdy1taWRsaW5lX29mZnNldC1kZXRhaWxzJykuc2hvdygpO1xyXG4gICAgICAgICAgICAgICQoJyNkcmF3LXNwZWVkJykucHJvcCgnY2hlY2tlZCcsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAkKCcjZHJhdy1hY2NlbGVyYXRpb24nKS5wcm9wKCdjaGVja2VkJywgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICQoJyNkcmF3LWRpc3RhbmNlX2NlbnRyb2lkJykucHJvcCgnY2hlY2tlZCcsIGZhbHNlKTtcclxuICAgICAgICAgICAgICBTUFYuc2V0QWN0aXZlU2NhbGUoJ21pZGxpbmVfb2Zmc2V0Jyk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIFNQVi5zZXRBY3RpdmVTY2FsZSgnYmxhY2snKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgICQoJy5kcmF3LWRldGFpbHMuYWN0aXZlJykuY2xpY2soKTtcclxuICAgICAgICAgIC8vY2hhbmdlIGNvbG9yIGxlZ2VuZFxyXG4gICAgICAgICAgZDMuc2VsZWN0QWxsKCcuY29sb3JMZWdlbmQgKicpLnJlbW92ZSgpO1xyXG4gICAgICAgICAgY2hhbmdlTGVnZW5kKCk7XHJcblxyXG4gICAgICAgICAgaWYgKCEkKCcjcGxheS1idXR0b24nKS5oYXNDbGFzcygnYWN0aXZlJykpIHtcclxuICAgICAgICAgICAgICAvL2dvIGJhY2sgb25lIHNlY29uZCBhbmQgZHJhdyB0aGUgbmV4dCBmcmFtZVxyXG4gICAgICAgICAgICAgIC8vdGhpcyBhcHBseXMgdGhlIGNoYW5nZXNcclxuICAgICAgICAgICAgICB0aGlzLmRlY0luZGV4VGltZSgpO1xyXG4gICAgICAgICAgICAgIHRoaXMuZHJhdygpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICB9KTtcclxuXHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEluaXQgbmV0d29yayBsaXN0ZWVuZXJzXHJcbiAgICovXHJcbiAgbl9saXN0ZW5lcnMoKSB7XHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBOZXR3b3JrIGJ1dHRvbnMgY2xpY2tlZCAtIGdldCB0aGUgZGF0YVxyXG4gICAgICAgKi9cclxuICAgICAgJCgnI25ldHdvcmtzLW1vZGFsLWJvZHkgYnV0dG9uJykuY2xpY2soZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBsZXQgbmV0d29ya19pZCA9ICQodGhpcykuYXR0cignZGF0YScpO1xyXG5cclxuICAgICAgICAgIC8vIGFkZCB0aGUgbmFtZSBvZiB0aGUgY2hvb3NlbiBuZXR3b3JrIHRvIHRoZSBOZXR3b3JrIG1vZGFsXHJcbiAgICAgICAgICAkKCcjYWN0aXZlLW5ldHdvcmstbmFtZScpLnRleHQoJCh0aGlzKS5hdHRyKCduYW1lJykpO1xyXG5cclxuICAgICAgICAgIGRpc2FibGVQbGF5QnV0dG9uKCk7XHJcbiAgICAgICAgICBnZXROZXR3b3JrRGF0YShuZXR3b3JrX2lkKTtcclxuICAgICAgICAgIC8vIHNldCB0aGUgY29sb3Igb2YgdGhlIG5ldHdvcmtcclxuICAgICAgICAgIHNldG5ldHdvcmtDb2xvcihuZXR3b3JrX2lkKTtcclxuICAgICAgICAgICQoJyNuZXR3b3JrLWRpdicpLm1vZGFsKCd0b2dnbGUnKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICAvKipcclxuICAgICAgICogTmV0d29yayBidXR0b25zIGNsaWNrZWQgLSBnZXQgdGhlIGRhdGFcclxuICAgICAgICovXHJcbiAgICAgICQoJyNuZXR3b3JrLXJlbW92ZScpLmNsaWNrKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgc2V0TmV0d29ya0RhdGEoe30pO1xyXG4gICAgICAgICAgc2V0TmV0d29ya0lEKC0xKTtcclxuICAgICAgICAgIC8vIHJlbW92ZSB0aGUgbmV0d29yayBjb2xvclxyXG4gICAgICAgICAgc2V0bmV0d29ya0NvbG9yKC0xKTtcclxuICAgICAgICAgICQoJyNhY3RpdmUtbmV0d29yay1uYW1lJykudGV4dCgnJyk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIE5ldHdvcmsgYXV0byBidXR0b24gc2V0IGFjaXZlIG9yIHJlbW92ZVxyXG4gICAgICAgKi9cclxuICAgICAgJCgnI25ldHdvcmstYXV0by1zdWdnZXN0JykuY2xpY2soZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBpZiAoISQoJyNuZXR3b3JrLWF1dG8tc3VnZ2VzdCcpLmhhc0NsYXNzKCdhY3RpdmUnKSkge1xyXG4gICAgICAgICAgICAgICQoJyNuZXR3b3JrLWxpbWl0LXAnKS5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgJCgnI25ldHdvcmstc2xpZGVyJykuaGlkZSgpO1xyXG5cclxuICAgICAgICAgICAgICBzZXROZXR3b3JrQXV0byh0cnVlKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgJCgnI25ldHdvcmstbGltaXQtcCcpLnNob3coKTtcclxuICAgICAgICAgICAgICAkKCcjbmV0d29yay1zbGlkZXInKS5zaG93KCk7XHJcbiAgICAgICAgICAgICAgc2V0TmV0d29ya0F1dG8oZmFsc2UpO1xyXG4gICAgICAgICAgICAgIGxldCBsaW1pdCA9ICQoJyNuZXR3b3JrLXNsaWRlcicpLnNsaWRlcigndmFsdWUnKTtcclxuICAgICAgICAgICAgICBzZXROZXR3b3JMaW1pdChsaW1pdCk7XHJcbiAgICAgICAgICAgICAgJCgnI25ldHdvcmstbGltaXQnKS52YWwobGltaXQpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICB9KTtcclxuXHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEluaXQgbWV0YWRhdGEgbGlzdGVuZXJzXHJcbiAgICovXHJcbiAgbWRfbGlzdGVuZXJzKCkge1xyXG4gICAgICAvKipcclxuICAgICAgICogTWV0YWRhdGEgc3dhdGNoIGZ1bmN0aW9ucyBjb2xvcmluZyBpbmRpdmlkdWFsIGFuaW1hbHNcclxuICAgICAgICovXHJcbiAgICAgICQoJy5tZXRhZGF0YS1zd2F0Y2gubWV0YWRhdGEtc3dhdGNoLWNsaWNrYWJsZScpLmNsaWNrKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgbGV0IGlkID0gJCh0aGlzKS5hdHRyKCd2YWx1ZScpO1xyXG4gICAgICAgICAgbGV0IGNvbG9yUkdCID0gJCh0aGlzKS5jc3MoJ2JhY2tncm91bmQtY29sb3InKTtcclxuICAgICAgICAgIC8vIHNldCB0aGUgY29sb3Igb2YgdGhlIHN3YXRjaCBwcmV2aWV3XHJcbiAgICAgICAgICAkKCcjbWV0YWRhdGEtcm93LScgKyBpZCArICcgI3ByZXZpZXcnKVxyXG4gICAgICAgICAgICAgIC5jc3MoJ2JhY2tncm91bmQtY29sb3InLCBjb2xvclJHQik7XHJcbiAgICAgICAgICAvLyBpZiB3aGl0ZSB0aGFuIHJlc2V0IHRoZSBjb2xvclxyXG4gICAgICAgICAgaWYgKGNvbG9yUkdCID09PSAncmdiKDI1NSwgMjU1LCAyNTUpJykge1xyXG4gICAgICAgICAgICAgIGlmIChtZXRhZGF0YUNvbG9yW2lkXSkge1xyXG4gICAgICAgICAgICAgICAgICBkZWxldGUgbWV0YWRhdGFDb2xvcltpZF07XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICBtZXRhZGF0YUNvbG9yW2lkXSA9IGNvbG9yUkdCO1xyXG4gICAgICAgICAgfVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBNZXRhZGF0YSBncm91cCBtZXRhZGF0YSBmdW5jdGlvbnMgZm9yIGluc3RhbmNlIGNvbG9yIHNleFxyXG4gICAgICAgKi9cclxuICAgICAgJCgnI2dyb3VwLW1ldGFkYXRhIDppbnB1dCcpLmNoYW5nZShmdW5jdGlvbigpIHtcclxuICAgICAgICAgIC8vIHJlc2V0IHRoZSBtZXRhZGF0IGFjb2xvcmluZ1xyXG4gICAgICAgICAgcmVzZXRJbmRpdmlkdWFsTWV0YWRhdGEoKTtcclxuXHJcbiAgICAgICAgICBsZXQgdmFsdWUgPSAkKHRoaXMpLmF0dHIoJ3ZhbHVlJyk7XHJcbiAgICAgICAgICBsZXQgdG1wID0gW107XHJcblxyXG4gICAgICAgICAgLy8gbWV0YWRhdGEgc2V4IGlzIGNob29zZW4gLSBjb2xvcmluZyBiYXNlZCBvbiBtIGFuZCBmXHJcbiAgICAgICAgICBpZiAodmFsdWUgPT09ICdzZXgnKSB7XHJcbiAgICAgICAgICAgICAgJCgnI21ldGFkYXRhLWRpdicpLm1vZGFsKCd0b2dnbGUnKTtcclxuICAgICAgICAgICAgICAvLyBjbG9zZSBhbmQgY29sb3IgaGVyZVxyXG4gICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YXNldE1ldGFkYXRhLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgIHRtcC5wdXNoKGRhdGFzZXRNZXRhZGF0YVtpXVt2YWx1ZV0udG9Mb3dlckNhc2UoKSk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIC8vIGNyZWF0ZSBhIHNldCBvZiBpbmRpdmlkdWFsIHN0cmluZ3MgaW4gc2V4XHJcbiAgICAgICAgICAgICAgdG1wID0gQXJyYXkuZnJvbShuZXcgU2V0KHRtcCkpO1xyXG4gICAgICAgICAgICAgIGxldCBjb2xvcnMgPSBbJyM3ZmM5N2YnLCAnIzM4NmNiMCddO1xyXG5cclxuICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGFzZXRNZXRhZGF0YS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRtcC5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGFzZXRNZXRhZGF0YVtpXVt2YWx1ZV0udG9Mb3dlckNhc2UoKSA9PT0gdG1wW2pdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWRkIHRoZSBjb2xvcmluZyB0byB0aGUgbWV0YWRhdGFjb2xvciBvYmplY3RcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRhZGF0YUNvbG9yW2RhdGFzZXRNZXRhZGF0YVtpXVsnYW5pbWFsX2lkJ11dID0gY29sb3JzW2pdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICQoJyNtZXRhZGF0YS1pbnB1dCcpLmhpZGUoKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgJCgnI21ldGFkYXRhLWlucHV0Jykuc2hvdygpO1xyXG4gICAgICAgICAgICAgIC8vIHNldCB2YWx1ZXMgb2YgaW5wdXRzXHJcbiAgICAgICAgICAgICAgLy8gaGVyZSBhcmUgYXV0b21hdGljYWxseSBpbnB1dCB2YWx1ZXMgY2FsY3VsYXRlZFxyXG4gICAgICAgICAgICAgIC8vIC4yNSBhbmQgLjc1IHBlcmNlbnRpbGVzIGFyZSB1c2VkXHJcbiAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhc2V0TWV0YWRhdGEubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgdG1wLnB1c2goZGF0YXNldE1ldGFkYXRhW2ldW3ZhbHVlXSk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIGxldCBibEF2ZyA9IGQzLnF1YW50aWxlKHRtcCwgMC4yNSk7IC8vIGJlbG93IGF2ZXJhZ2UgdmFsdWVcclxuICAgICAgICAgICAgICBsZXQgYWJBdmcgPSBkMy5xdWFudGlsZSh0bXAsIDAuNzUpOyAvLyBhYm92ZSBhdmVyYWdlXHJcbiAgICAgICAgICAgICAgJCgnI2JsLWF2ZycpLnZhbChibEF2Zyk7XHJcbiAgICAgICAgICAgICAgJCgnI2FiLWF2ZycpLnZhbChhYkF2Zyk7XHJcbiAgICAgICAgICAgICAgLy8gY29sb3IgdGhlIGFuaW1hbHNcclxuICAgICAgICAgICAgICBjb2xvck1ldGFkYXRhKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIE1ldGFkYXRhIGdyb3VwIG1ldGFkYXRhIGlucHV0IHNwaW5uZXJcclxuICAgICAgICogKy8tIDAuMSB0byB0aGUgaW5wdXQgdmFsdWVcclxuICAgICAgICovXHJcbiAgICAgICQoJy5udW1iZXItc3Bpbm5lciBidXR0b24nKS5jbGljayhmdW5jdGlvbigpIHtcclxuICAgICAgICAgIGxldCBidG4gPSAkKHRoaXMpLFxyXG4gICAgICAgICAgICAgIG9sZFZhbHVlID0gYnRuLmNsb3Nlc3QoJy5udW1iZXItc3Bpbm5lcicpLmZpbmQoJ2lucHV0JykudmFsKCkudHJpbSgpLFxyXG4gICAgICAgICAgICAgIG5ld1ZhbCA9IDA7XHJcblxyXG4gICAgICAgICAgaWYgKGJ0bi5hdHRyKCdkYXRhLWRpcicpID09ICd1cCcpIHtcclxuICAgICAgICAgICAgICBuZXdWYWwgPSBwYXJzZUZsb2F0KG9sZFZhbHVlKSArIDAuMTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgaWYgKG9sZFZhbHVlID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICBuZXdWYWwgPSBwYXJzZUZsb2F0KG9sZFZhbHVlKSAtIDAuMTtcclxuICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICBuZXdWYWwgPSAwO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIG5ld1ZhbCA9IE1hdGgucm91bmQobmV3VmFsICogMTAwKSAvIDEwMDsgLVxyXG4gICAgICAgICAgYnRuLmNsb3Nlc3QoJy5udW1iZXItc3Bpbm5lcicpLmZpbmQoJ2lucHV0JykudmFsKG5ld1ZhbCk7XHJcbiAgICAgICAgICAvLyBjaGFuZ2UgdGhlIGNvbG9yaW5nXHJcbiAgICAgICAgICBjb2xvck1ldGFkYXRhKCk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIE1ldGFkYXRhIGlucHV0IGZpZWxkcyBjaGFuZ2VcclxuICAgICAgICovXHJcbiAgICAgICQoJy5udW1iZXItc3Bpbm5lciBpbnB1dCcpLm9uKCdpbnB1dCcsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgY29sb3JNZXRhZGF0YSgpO1xyXG4gICAgICB9KTtcclxuXHJcblxyXG4gICAgICAvKipcclxuICAgICAgICogUmVzZXQgYWxsIG1ldGFkYXRhIGlucHV0IHBhcmFtZXRlcnNcclxuICAgICAgICovXHJcbiAgICAgICQoJyNtZXRhZGF0YS1yZXNldCcpLmNsaWNrKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgJCgnI21ldGFkYXRhLWlucHV0JykuaGlkZSgpO1xyXG4gICAgICAgICAgcmVzZXRJbmRpdmlkdWFsTWV0YWRhdGEoKTtcclxuICAgICAgfSk7XHJcblxyXG4gIH1cclxuICAvKipcclxuICAgKiBJbml0aWFsaXplIGhpZXJhcmNoeS9kZW5kZ3JvZ3JhbSBsaXN0ZW5lcnNcclxuICAgKi9cclxuICBoX2xpc3RlbmVycygpIHtcclxuICAgICAgLyoqXHJcbiAgICAgICAqIFNob3cgZGVuZGdyb2dyYW0gc2xpZGluZyBidXR0b25cclxuICAgICAgICovXHJcbiAgICAgIGZ1bmN0aW9uIGluaXRTaG93RGVuZHJvZ3JhbUxpc3RlbmVyKGlkKSB7XHJcblxyXG4gICAgICAgICAgJCgnI3Nob3ctZGVuZHJvZ3JhbS0nICsgaWQpLmNsaWNrKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgIGxldCBjbGlja2VkQnV0dG9uSUQgPSAkKHRoaXMpLmF0dHIoJ2lkJyk7XHJcbiAgICAgICAgICAgICAgLy8gaXRlcmF0ZSBvdmVyIGFsbCBidXR0b25zIGFuZCBjdXN0b20gaGlnaGxpZ2h0IGp1c3Qgb25lIG9yIG5vbmVcclxuICAgICAgICAgICAgICAkKCcuc2hvdy1kZW5kcm9ncmFtJykuZWFjaChmdW5jdGlvbihpLCBidXR0b24pIHtcclxuICAgICAgICAgICAgICAgICAgLy8gYWN0aXZlIGZvdW5kIGJ1dHRvblxyXG4gICAgICAgICAgICAgICAgICBpZiAoJChidXR0b24pLmF0dHIoJ2lkJykgPT09IGNsaWNrZWRCdXR0b25JRCAmJiAkKGJ1dHRvbikuaGFzQ2xhc3MoJ2J0bi1wcmltYXJ5JykgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAkKGJ1dHRvbikuYWRkQ2xhc3MoJ2J0bi1wcmltYXJ5Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAkKGJ1dHRvbikuZmluZCgnI2J0bi1sZWZ0JykuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgJChidXR0b24pLmZpbmQoJyNidG4tcmlnaHQnKS5zaG93KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAvLyBUT0RPIGFkZCBoZXJlIGEgcmVzaXplIG9mIHRoZSBtYWluIHZpc1xyXG4gICAgICAgICAgICAgICAgICAgICAgLy8gJCgnI2RlbmRyb2dyYW0tcGFuZWwnKS5pbnNlcnRBZnRlcigkKHRoaXMpKTtcclxuICAgICAgICAgICAgICAgICAgfSAvLyByZW1vdmUgaGlnaGxpZ2h0XHJcbiAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgJChidXR0b24pLnJlbW92ZUNsYXNzKCdidG4tcHJpbWFyeScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgJChidXR0b24pLmZpbmQoJyNidG4tbGVmdCcpLnNob3coKTtcclxuICAgICAgICAgICAgICAgICAgICAgICQoYnV0dG9uKS5maW5kKCcjYnRuLXJpZ2h0JykuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgIC8vIHNob3cgZGVuZHJvZ3JhbVxyXG4gICAgICAgICAgICAgIGlmICgkKCcuc2hvdy1kZW5kcm9ncmFtLmJ0bi1wcmltYXJ5JykubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICQoJyNkZW5kcm9ncmFtLXBhbmVsJykuc2hvdygpO1xyXG4gICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICQoJyNkZW5kcm9ncmFtLXBhbmVsJykuaGlkZSgpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBpZiAoISQoJyNwbGF5LWJ1dHRvbicpLmhhc0NsYXNzKCdhY3RpdmUnKSkge1xyXG4gICAgICAgICAgICAgICAgICAvL2dvIGJhY2sgb25lIHNlY29uZCBhbmQgZHJhdyB0aGUgbmV4dCBmcmFtZVxyXG4gICAgICAgICAgICAgICAgICAvL3RoaXMgYXBwbHlzIHRoZSBjaGFuZ2VzXHJcbiAgICAgICAgICAgICAgICAgIHRoaXMuZGVjSW5kZXhUaW1lKCk7XHJcbiAgICAgICAgICAgICAgICAgIHRoaXMuZHJhdygpO1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLmRyYXdEZW5kcm9ncmFtKCk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBIaWVyYXJjaHkgYnV0dG9uIGluIG5ldHdvcmsgbW9kYWwgb24gY2hhbmdlXHJcbiAgICAgICAqIExvYWQgZGF0YSBvciByZW1vdmUgaXRcclxuICAgICAgICovXHJcbiAgICAgICQoJy5oaWVhcmNoeS1jaGVja2JveCcpLm9uKCdjaGFuZ2UnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIGxldCBjaGVja2JveCA9ICQodGhpcyk7XHJcblxyXG4gICAgICAgICAgbGV0IGlkID0gY2hlY2tib3guYXR0cignZGF0YScpO1xyXG4gICAgICAgICAgbGV0IG5hbWUgPSBjaGVja2JveC5hdHRyKCduYW1lJyk7XHJcbiAgICAgICAgICBsZXQgY2hlY2tlZCA9IGNoZWNrYm94LnByb3AoJ2NoZWNrZWQnKTtcclxuXHJcbiAgICAgICAgICBpZiAoY2hlY2tlZCAmJiAkKCcuc2hvdy1kZW5kcm9ncmFtJykubGVuZ3RoIDwgbWF4TnVtYmVySGllcmFyY2hpZXMpIHtcclxuICAgICAgICAgICAgICBkaXNhYmxlUGxheUJ1dHRvbigpO1xyXG4gICAgICAgICAgICAgIGdldE5ldHdvcmtIaWVyYXJjaHlEYXRhKGlkKTtcclxuXHJcbiAgICAgICAgICAgICAgYWRkSGllcmFyY2h5QnV0dG9uKGlkLCBuYW1lKTtcclxuICAgICAgICAgICAgICBpbml0U2hvd0RlbmRyb2dyYW1MaXN0ZW5lcihpZCk7XHJcbiAgICAgICAgICAgICAgJCgnI2RlbmRyb2dyYW0tYnV0dG9ucy1kaXYnKS5zaG93KCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICAvLyBlbHNlIGlmICgkKCcuc2hvdy1kZW5kcm9ncmFtJykubGVuZ3RoID09PSBtYXhOdW1iZXJIaWVyYXJjaGllcykge1xyXG4gICAgICAgICAgLy8gY29uc29sZS5sb2coJ01heCBudW1iZXIgb2YgaGllcmFyY2hpZXMgaXM6ICcgKyBtYXhOdW1iZXJIaWVyYXJjaGllcyk7XHJcbiAgICAgICAgICAvL1RPRE8gaW1wbGVtZW50IHRoaXMgaGVyZVxyXG4gICAgICAgICAgLy8gbm90aWNlIHVzZXIgdGhhdCBpdCBpcyBub3QgcG9zc2libGUgdG8gc2hvdyBtb3JlIHRoYW4gbiBoaWVyYXJjaGllc1xyXG4gICAgICAgICAgLy8gICAgICAgICAgPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cclxuICAgICAgICAgIC8vICAgPHN0cm9uZz5JbmZvITwvc3Ryb25nPiBBdHRlbnRpb24gdXNlciAuXHJcbiAgICAgICAgICAvLyA8L2Rpdj5cclxuICAgICAgICAgIC8vIH1cclxuICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgIC8vIHRtcCB2YXJpYWJsZSB0byBzYXZlIGlmIHRoZSBidXR0b24gd2hpY2ggaXMgZ29pbmcgdG8gYmUgcmVtb3ZlZFxyXG4gICAgICAgICAgICAgIC8vIHdhcyBhY3RpdmVcclxuICAgICAgICAgICAgICBsZXQgdG1wQWN0aXZlID0gJCgnI3Nob3ctZGVuZHJvZ3JhbS0nICsgaWQpLmhhc0NsYXNzKCdidG4tcHJpbWFyeScpO1xyXG4gICAgICAgICAgICAgIHNldEhpZXJhcmNoeURhdGEoe30sIGlkKTtcclxuXHJcbiAgICAgICAgICAgICAgcmVtb3ZlSGllcmFyY2h5QnV0dG9uKGlkKTtcclxuICAgICAgICAgICAgICAvLyBUT0RPIGZpbmQgYmV0dGVyIHdheSBoZXJlXHJcbiAgICAgICAgICAgICAgZDMuc2VsZWN0KCdnLmgnICsgaWQpLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICAgIC8vIHJlbW92ZSB0aGUgZGVuZHJvZ3JhbSBhbmQgdGhlIHBhbmVsIGlmIHRoZSByZW1vdmVkIGVsZW1lbnQgd2FzIGNoZWNrZWRcclxuICAgICAgICAgICAgICBpZiAodG1wQWN0aXZlID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICQoJyNkZW5kcm9ncmFtLXBhbmVsJykuaGlkZSgpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBpZiAoJCgnLnNob3ctZGVuZHJvZ3JhbScpLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAkKCcjZGVuZHJvZ3JhbS1idXR0b25zLWRpdicpLmhpZGUoKTtcclxuICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgLy8gcmVzaXplIHRoZSBtYWluIHN2Z1xyXG4gICAgICAgICAgaWYgKCQoJy5zaG93LWRlbmRyb2dyYW0nKS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAkKCcjbWFpbi12aXMtZGl2JykucmVtb3ZlQ2xhc3MoJ2NvbC1tZC0xMicpO1xyXG4gICAgICAgICAgICAgICQoJyNtYWluLXZpcy1kaXYnKS5hZGRDbGFzcygnY29sLW1kLTgnKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgJCgnI21haW4tdmlzLWRpdicpLnJlbW92ZUNsYXNzKCdjb2wtbWQtOCcpO1xyXG4gICAgICAgICAgICAgICQoJyNtYWluLXZpcy1kaXYnKS5hZGRDbGFzcygnY29sLW1kLTEyJyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIFZpc3VhbGl6ZSB0aGUgbmV0d29yayBvbmx5IGluIHRoZSBjaG9vc2VuIGhpZXJhcmNoeVxyXG4gICAgICAgKi9cclxuICAgICAgJCgnLm5ldHdvcmstaGllcmFyY2h5LWNoZWNrYm94Jykub24oJ2NoYW5nZScsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgLy8gZ2V0IHRoZSBpbmZvIGZvciB0aGUgY2xpY2tlZCBidXR0b25cclxuICAgICAgICAgIGxldCBjaGVja2JveCA9ICQodGhpcyk7XHJcblxyXG4gICAgICAgICAgLy8gcmVzZXQgYWxsIHRoZSBvdGhlciBhY3RpdmUgY2hlY2tib3hlc1xyXG4gICAgICAgICAgJCgnLm5ldHdvcmstaGllcmFyY2h5LWNoZWNrYm94JykucHJvcCgnY2hlY2tlZCcsIGZhbHNlKTtcclxuICAgICAgICAgIGNoZWNrYm94LnByb3AoJ2NoZWNrZWQnLCB0cnVlKTtcclxuXHJcbiAgICAgICAgICBpZiAoY2hlY2tib3gucHJvcCgnY2hlY2tlZCcpKSB7XHJcbiAgICAgICAgICAgICAgLy8gc2V0IHRoZSBuZXR3b3JrIGlkXHJcbiAgICAgICAgICAgICAgc2V0TmV0d29ya0hpZXJhcmNoeShjaGVja2JveC5hdHRyKCdkYXRhJykpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICBzZXROZXR3b3JrSGllcmFyY2h5KHVuZGVmaW5lZCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG5cclxufVxyXG5cclxuXHJcbn1cclxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gICAgR2V0dGVyIGFuZCBzZXR0ZXJcclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG4vKipcclxuICogU2V0IHBsYXkgYm9vbGVhblxyXG4gKiBAcGFyYW0ge0Jvb2xlYW59IHZhbHVlIC0gcGF1c2UgKGZhbHNlKSBvciBwbGF5ICh0cnVlKVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNldFBsYXlCb29sZWFuKHZhbHVlKSB7XHJcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicpIHtcclxuICAgICAgICBwbGF5Qm9vbGVhbiA9IHZhbHVlO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBwbGF5Qm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgfVxyXG59XHJcbiIsIi8qZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLWxldHMqL1xyXG4vKmdsb2JhbCB3aW5kb3csJCwgZDMsKi9cclxuLy8gaW1wb3J0ICogYXMgc3B2IGZyb20gJy4vc3BhdGlhbF92aWV3LmpzJztcclxuXHJcbmltcG9ydCB7XHJcbiAgICBkcmF3XHJcbn0gZnJvbSAnLi9zcGF0aWFsX3ZpZXcvc3BhdGlhbF92aWV3LmpzJztcclxuXHJcbmltcG9ydCB7XHJcbiAgICBzZXRQbGF5Qm9vbGVhblxyXG59IGZyb20gJy4vbGlzdGVuZXIuanMnO1xyXG5cclxuaW1wb3J0IHtcclxuICAvL2luaXRUcmVuZENoYXJ0TGlzdGVuZXIsXHJcbiAgVHJlbmRDaGFydFxyXG59IGZyb20gJy4vbGluZV9jaGFydC5qcyc7XHJcbmltcG9ydCB7XHJcbiAgICBzd2FybURhdGFcclxufSBmcm9tICcuL2V4cGxvcmUuanMnO1xyXG4vKipcclxuICogRGlzYWJsZSB0aGUgcGxheSBidXR0b24gLS0+IExvYWRpbmcgc3ltYm9sXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZGlzYWJsZVBsYXlCdXR0b24oKSB7XHJcbiAgICBzZXRQbGF5Qm9vbGVhbihmYWxzZSk7XHJcbiAgICAkKCcjcGxheS1idXR0b24nKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XHJcbiAgICAkKCcjcGxheS1idXR0b24nKS5wcm9wKCdkaXNhYmxlZCcsIHRydWUpO1xyXG4gICAgJCgnI3BsYXktaWNvbnMnKS5oaWRlKCk7XHJcbiAgICAkKCcjcGxheS1sb2FkaW5nJykuc2hvdygpO1xyXG5cclxufVxyXG5cclxuLyoqXHJcbiAqIEVuYWJsZSB0aGUgcGxheSBidXR0b24gcmVtb3ZlIGxvYWRpbmcgc3ltYm9sXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZW5hYmxlUGxheUJ1dHRvbigpIHtcclxuICAgIHNldFBsYXlCb29sZWFuKHRydWUpO1xyXG4gICAgJCgnI3BsYXktYnV0dG9uJykuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgJCgnI3BsYXktYnV0dG9uJykucHJvcCgnZGlzYWJsZWQnLCBmYWxzZSk7XHJcbiAgICAkKCcjcGxheS1sb2FkaW5nJykuaGlkZSgpO1xyXG4gICAgJCgnI3BsYXktaWNvbnMnKS5zaG93KCk7XHJcbiAgICBkcmF3KCk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm4gIC4wNSBwZXJjZW50aWxlcyBvZiB0aGUgYXJyYXlcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBwZXJjZW50aWxlcyhhcnIpIHtcclxuICAgIGxldCBwID0gMC4wNTtcclxuICAgIGlmIChhcnIubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuIDA7XHJcbiAgICB9XHJcbiAgICBhcnIuc29ydChmdW5jdGlvbihhLCBiKSB7XHJcbiAgICAgICAgcmV0dXJuIGEgLSBiO1xyXG4gICAgfSk7XHJcbiAgICBsZXQgaW5kZXggPSAoYXJyLmxlbmd0aCAtIDEpICogcDtcclxuICAgIGxldCBsb3dlciA9IE1hdGguZmxvb3IoaW5kZXgpO1xyXG4gICAgbGV0IHVwcGVyID0gbG93ZXIgKyAxO1xyXG4gICAgbGV0IHdlaWdodCA9IGluZGV4ICUgMTtcclxuICAgIGlmICh1cHBlciA+PSBhcnIubGVuZ3RoKSB7XHJcbiAgICAgICAgcmV0dXJuIDEgLSBhcnJbbG93ZXJdO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gMSAtIChhcnJbbG93ZXJdICogKDEgLSB3ZWlnaHQpICsgYXJyW3VwcGVyXSAqIHdlaWdodCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm4gdGhlIDA1LCAyNSwgNTAsIDc1LCA5NSBwZXJjZW50aWxlcyBvZiB0aGUgYXJyYXlcclxuICpcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBwZXJjZW50aWxlc0xpbmVDaGFydChhcnIpIHtcclxuICAgIGxldCBwID0gWzAuMDUsIDAuMjUsIDAuNSwgMC43NSwgMC45NV07XHJcbiAgICBsZXQgcmVzdWx0ID0gW107XHJcbiAgICBpZiAoYXJyLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIHJldHVybiAwO1xyXG4gICAgfVxyXG4gICAgYXJyLnNvcnQoZnVuY3Rpb24oYSwgYikge1xyXG4gICAgICAgIHJldHVybiBhIC0gYjtcclxuICAgIH0pO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgbGV0IGluZGV4ID0gKGFyci5sZW5ndGggLSAxKSAqIHBbaV07XHJcbiAgICAgICAgbGV0IGxvd2VyID0gTWF0aC5mbG9vcihpbmRleCk7XHJcbiAgICAgICAgbGV0IHVwcGVyID0gbG93ZXIgKyAxO1xyXG4gICAgICAgIGxldCB3ZWlnaHQgPSBpbmRleCAlIDE7XHJcbiAgICAgICAgaWYgKHVwcGVyID49IGFyci5sZW5ndGgpIHtcclxuICAgICAgICAgICAgcmVzdWx0LnB1c2goYXJyW2xvd2VyXSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmVzdWx0LnB1c2goYXJyW2xvd2VyXSAqICgxIC0gd2VpZ2h0KSArIGFyclt1cHBlcl0gKiB3ZWlnaHQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBMaW5lIGNoYXJ0IGRldGFpbHMgY2xpY2sgbGlzdGVuZXJcclxuICovXHJcbmZ1bmN0aW9uIGluaXRUcmVuZENoYXJ0TGlzdGVuZXIoKSB7XHJcbiAgICAkKCcuZHJhdy1kZXRhaWxzJykuY2xpY2soZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKCQodGhpcykuZmluZCgnaW5wdXQ6Y2hlY2tib3gnKS5wcm9wKCdjaGVja2VkJykpIHtcclxuICAgICAgICAgICAgLy9kaXNhYmxlTGluZUNoYXJ0KCk7XHJcbiAgICAgICAgICAgIHZhciB0cmVuZGNoYXJ0ID0gbmV3IFRyZW5kQ2hhcnQodGhpcywgc3dhcm1EYXRhKTtcclxuICAgICAgICAgICAgdHJlbmRjaGFydC5kaXNhYmxlTGluZUNoYXJ0KCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmVtb3ZlVHJlbmRDaGFydCgpO1xyXG4gICAgICAgICAgICBlbmFibGVMaW5lQ2hhcnQoKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufVxyXG5cclxuLyoqXHJcbiAqIExpbmUgY2hhcnQgZGV0YWlscyBjbGljayBsaXN0ZW5lclxyXG4gKi9cclxuZnVuY3Rpb24gZGlzYWJsZUxpbmVDaGFydCgpIHtcclxuICAgICQoJy5saW5lQ2hhcnRCdXR0b24nKS5wcm9wKCdjaGVja2VkJywgZmFsc2UpLnByb3AoJ2Rpc2FibGVkJywgdHJ1ZSk7XHJcbiAgICAkKCcubGluZS1jaGFydC1jaGVjay1ib3gnKS5hdHRyKCdkaXNhYmxlZCcsIHRydWUpO1xyXG4gICAgJCgnLmxpbmVDaGFydExpbmUnKS5hdHRyKCd2aXNpYmlsaXR5JywgJ2hpZGRlbicpO1xyXG59XHJcblxyXG4vKipcclxuICogTGluZSBjaGFydCBkZXRhaWxzIGNsaWNrIGxpc3RlbmVyXHJcbiAqL1xyXG5mdW5jdGlvbiBlbmFibGVMaW5lQ2hhcnQoKSB7XHJcbiAgICAkKCcubGluZUNoYXJ0QnV0dG9uJykucHJvcCgnY2hlY2tlZCcsIHRydWUpLnByb3AoJ2Rpc2FibGVkJywgZmFsc2UpO1xyXG4gICAgJCgnLmxpbmUtY2hhcnQtY2hlY2stYm94JykuYXR0cignZGlzYWJsZWQnLCBmYWxzZSk7XHJcbiAgICAkKCcubGluZUNoYXJ0TGluZScpLmF0dHIoJ3Zpc2liaWxpdHknLCAndmlzaWJsZScpO1xyXG59XHJcblxyXG4vKipcclxuICogSGlkZSB0aGUgdHJlbmQgY2hhcnRcclxuICovXHJcbmZ1bmN0aW9uIHJlbW92ZVRyZW5kQ2hhcnQoKSB7XHJcbiAgICAkKCcudHJlbmRDaGFydERhdGEnKS5oaWRlKCk7XHJcbiAgICAkKCcjdHJlbmRDaGFydExlZ2VuZCcpLmhpZGUoKTtcclxuICAgICQoJyNsaW5lQ2hhcnRMZWdlbmQnKS5zaG93KCk7XHJcbn1cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIEFkZCB0aGUgYWJzb2x1dGUgZmVhdHVyZSBjaGVja2JveGVzIGluIHRoZSBmZWF0dXJlIHBhbmVsIGV4cG9ydCB0byBhamF4XHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gYWRkQWJzb2x1dGVGZWF0dXJlQnV0dG9ucyhkYXRhU2V0UGVyY2VudGlsZSkge1xyXG4gICAgLy8gaXRlcmF0ZSBvdmVyIHRoZSBvYmplY3RcclxuICAgIGZvciAodmFyIGtleSBpbiBkYXRhU2V0UGVyY2VudGlsZSkge1xyXG4gICAgICAgIGlmIChkYXRhU2V0UGVyY2VudGlsZS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XHJcbiAgICAgICAgICAgIC8vIGdlbmVyYXRlIHRleHQgZm9yIHRoZSBkaXNwbGF5ZWQgYnV0dG9uXHJcbiAgICAgICAgICAgIGxldCBjYXBpdGFsaXplZF9mZWF0dXJlX3N0cmluZyA9IGtleS5zcGxpdCgnXycpLmpvaW4oJyAnKTtcclxuICAgICAgICAgICAgY2FwaXRhbGl6ZWRfZmVhdHVyZV9zdHJpbmcgPSBjYXBpdGFsaXplZF9mZWF0dXJlX3N0cmluZy5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIGNhcGl0YWxpemVkX2ZlYXR1cmVfc3RyaW5nLnNsaWNlKDEpO1xyXG4gICAgICAgICAgICAvLyBhZGQgdGhlIGJ1dHRvblxyXG4gICAgICAgICAgICAkKCcjYWJzb2x1dGUtZmVhdHVyZS1jaGVja2JveGVzJykuYXBwZW5kKCc8dHI+PHRoPicgK1xyXG4gICAgICAgICAgICAgICAgJyA8ZGl2IGNsYXNzPVwicHJldHR5IHAtc3dpdGNoIHAtZmlsbCBwLWJpZ2dlclwiPjxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBpZD1cImRyYXctJyArIGtleSArXHJcbiAgICAgICAgICAgICAgICAnXCIvPjxkaXYgY2xhc3M9XCJzdGF0ZVwiPjxsYWJlbD4nICsgY2FwaXRhbGl6ZWRfZmVhdHVyZV9zdHJpbmcgKyAnPC9sYWJlbD48L2Rpdj48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgIC8vIHF1YW50aWxlIGdyYXBoXHJcbiAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cImZsb2F0LXJpZ2h0IGRyYXctZGV0YWlsc1wiIGlkPVwiZHJhdy0nICsga2V5ICsgJy1kZXRhaWxzXCI+PGRpdiBjbGFzcz1cInByZXR0eSBwLWljb24gcC10b2dnbGUgcC1wbGFpblwiPjxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBpZD1cImRyYXctJyArIGtleSArICctaW5wdXRcIiAvPicgK1xyXG4gICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzdGF0ZSBwLXN1Y2Nlc3MtbyBwLW9uXCI+PGkgY2xhc3M9XCJtZGkgbWRpLWltYWdlLWFyZWFcIj48L2k+PGxhYmVsPjwvbGFiZWw+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cInN0YXRlIHAtb2ZmXCI+PGkgY2xhc3M9XCJtZGkgbWRpLWltYWdlLW9mZlwiPjwvaT48bGFiZWw+PC9sYWJlbD48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICc8L2Rpdj48L2Rpdj48L3RoPjwvdHI+Jyk7XHJcblxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIGhpZGUgdGhlIGVsZW1lbnRzXHJcbiAgICAkKCcuZHJhdy1kZXRhaWxzJykuaGlkZSgpO1xyXG4gICAgLy8gaW5pdCB0aGUgbGlzdGVybmVyc1xyXG4gIGluaXRUcmVuZENoYXJ0TGlzdGVuZXIoKTtcclxuXHJcbn1cclxuXHJcbi8vIGdlbmVyYXRlIGhhc2ggY29kZXMgZnJvbSBzdHJpbmdzXHJcbi8vIHNvdXJjZTogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNzYxNjQ2MS9nZW5lcmF0ZS1hLWhhc2gtZnJvbS1zdHJpbmctaW4tamF2YXNjcmlwdC1qcXVlcnlcclxuU3RyaW5nLnByb3RvdHlwZS5oYXNoQ29kZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIGhhc2ggPSAwLFxyXG4gICAgICAgIGksIGNocjtcclxuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIGhhc2g7XHJcbiAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGNociA9IHRoaXMuY2hhckNvZGVBdChpKTtcclxuICAgICAgICBoYXNoID0gKChoYXNoIDw8IDUpIC0gaGFzaCkgKyBjaHI7XHJcbiAgICAgICAgaGFzaCB8PSAwOyAvLyBDb252ZXJ0IHRvIDMyYml0IGludGVnZXJcclxuICAgIH1cclxuICAgIHJldHVybiBoYXNoO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIENhbGN1bGF0ZSB0aGUgc3RhbmRhcmREZXZpYXRpb24gb2YgYW4gYXJyYXkgb2YgbnVtYmVyc1xyXG4gKiBAcGFyYW0ge0FycmF5fSBhcnIgLSBhcnJheSBvZiBudW1iZXJzXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc3RhbmRhcmREZXZpYXRpb24oYXJyKSB7XHJcbiAgICBpZiAoYXJyIGluc3RhbmNlb2YgQXJyYXkpIHtcclxuICAgICAgICBsZXQgbWVhbiA9IGFyci5yZWR1Y2UoZnVuY3Rpb24ocHYsIGN2KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBwdiArIGN2O1xyXG4gICAgICAgIH0sIDApIC8gYXJyLmxlbmd0aDtcclxuICAgICAgICBsZXQgdG1wID0gYXJyLm1hcChmdW5jdGlvbihudW0pIHtcclxuICAgICAgICAgICAgcmV0dXJuIE1hdGgucG93KG51bSAtIG1lYW4sIDIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBNYXRoLnNxcnQodG1wLnJlZHVjZShmdW5jdGlvbihwdiwgY3YpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHB2ICsgY3Y7XHJcbiAgICAgICAgfSwgMCkgLyB0bXAubGVuZ3RoKTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIE1vdmUgZWxlbWVudCBpbiBTVkcgaW50byBiYWNrZ3JvdW5kIGRvbmUgYnkgbW92aW5nIGl0IHRvIGZpcnN0IGVsZW1lbnRcclxuICovXHJcbmQzLnNlbGVjdGlvbi5wcm90b3R5cGUubW92ZVRvQmFjayA9IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgZmlyc3RDaGlsZCA9IHRoaXMucGFyZW50Tm9kZS5maXJzdENoaWxkO1xyXG4gICAgICAgIGlmIChmaXJzdENoaWxkKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpcywgZmlyc3RDaGlsZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn07XHJcblxyXG4vKipcclxuICogTWFrZSB0aGUgbWFpbiB2aXMgc3BhdGlhbCB2aWV3IHJlc2l6YWJsZVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VSZXNpemFibGUoaGVpZ2h0LCB3aWR0aCkge1xyXG4gICAgJChmdW5jdGlvbigpIHtcclxuICAgICAgICAkKCcjbWFpbi12aXMnKVxyXG4gICAgICAgICAgICAuZHJhZ2dhYmxlKHtcclxuICAgICAgICAgICAgICAgIGNvbnRhaW5tZW50OiAncGFyZW50J1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAucmVzaXphYmxlKHtcclxuICAgICAgICAgICAgICAgIGFzcGVjdFJhdGlvOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgbWF4V2lkdGg6ICQoJyNtYWluLXZpcy1kaXYnKS53aWR0aCgpXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5oZWlnaHQoaGVpZ2h0ICogMC42KVxyXG4gICAgICAgICAgICAud2lkdGgod2lkdGggKiAwLjYpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXNldCB0aGUgYnV0dG9ucyBhbmQgY2hlY2tib3hlc1xyXG4gKiBIaWRlIGljb25zIC0gbmVlZGVkIGJlY2F1c2Ugb2YgYm9vdHN0cmFwIGJ1Z1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRDb25maWcoKSB7XHJcbiAgICAkKCdpbnB1dFt0eXBlPWNoZWNrYm94XScpLnByb3AoJ2NoZWNrZWQnLCBmYWxzZSk7XHJcbiAgICAvL3NldCB0aGUgY29sb3Igc2NhbGUgZnVuY3Rpb24gdG8gbGluZWFyXHJcbiAgICAkKCcjY29sb3Itc2NhbGUtbGluZWFyJylcclxuICAgICAgICAucHJvcCgnY2hlY2tlZCcsIHRydWUpO1xyXG4gICAgJCgnI2dyb3VwLXNpemUtbScpXHJcbiAgICAgICAgLnByb3AoJ2NoZWNrZWQnLCB0cnVlKTtcclxuICAgICQoJyNiYWNrZ3JvdW5kLXdoaXRlJylcclxuICAgICAgICAucHJvcCgnY2hlY2tlZCcsIHRydWUpO1xyXG4gICAgJCgnI3NldHRpbmdzLWRpdiBpbnB1dFt0eXBlPWNoZWNrYm94XScpXHJcbiAgICAgICAgLnByb3AoJ2NoZWNrZWQnLCB0cnVlKTtcclxuICAgIC8vaGlkZSB0aGUgbG9hZGluZyBnaWZcclxuICAgICQoJyNsb2FkaW5nJylcclxuICAgICAgICAuaGlkZSgpO1xyXG4gICAgLy8gbmVlZGVkIGR1ZSB0byBqUXVlcnkgaW5jb21wYXRpYmlsaXR5XHJcbiAgICAkKCcjcGxheS1sb2FkaW5nJykuaGlkZSgpO1xyXG4gICAgJCgnLm1kaS1wbGF5JykuaGlkZSgpO1xyXG4gICAgJCgnI21ldGFkYXRhLWlucHV0JykuaGlkZSgpO1xyXG4gICAgJCgnI2RlbmRyb2dyYW0tYnV0dG9ucy1kaXYnKS5oaWRlKCk7XHJcbiAgICAkKCcjZy1jZW50cm9pZCcpLmhpZGUoKTtcclxuICAgIC8vY2hlY2sgbGluZSBjaGFydCBkcmF3IGFsbCBsaW5lc1xyXG4gICAgJCgnI2xpbmUtY2hhcnQtZmVhdHVyZS1jaGVja2JveGVzIGlucHV0W3R5cGU9Y2hlY2tib3hdJylcclxuICAgICAgICAucHJvcCgnY2hlY2tlZCcsIHRydWUpO1xyXG59XHJcbiIsIi8qZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLWxldHMqL1xyXG4vKmdsb2JhbCB3aW5kb3csICQsZDMsIHBhcmFtZXRlcnMsIFNldCAqL1xyXG4ndXNlIHN0cmljdCc7XHJcbmltcG9ydCB7XHJcbiAgICBkYXRhc2V0LFxyXG4gICAgbmV0d29ya0RhdGEsXHJcbiAgICBzd2FybURhdGFcclxufSBmcm9tICcuLi9leHBsb3JlLmpzJztcclxuXHJcbmltcG9ydCB7XHJcbiAgICBuZXR3b3JrQ29sb3JTY2FsZSxcclxuICAgIG5ldHdvcmtBdXRvLFxyXG4gICAgc2V0TmV0d29yTGltaXQsXHJcbiAgICBuZXR3b3JrTGltaXQsXHJcbiAgICBuZXR3b3JrSGllcmFyY2h5XHJcbiAgICAvLyBzaG93TmV0d29ya0hpZXJhcmNoeSxcclxuICAgIC8vIG5ldHdvcmtJRCxcclxuICAgIC8vIG5ldHdvcmtCYWNrZ3JvdW5kLFxyXG4gICAgLy8gbmV0d29ya0JhY2tncm91bmRMaW1pdFxyXG59IGZyb20gJy4uL25ldHdvcmsuanMnO1xyXG5cclxuXHJcblxyXG5pbXBvcnQge1xyXG4gICAgcGVyY2VudGlsZXMsXHJcbiAgICBtYWtlUmVzaXphYmxlLFxyXG4gICAgZGVmYXVsdENvbmZpZ1xyXG59IGZyb20gJy4uL2hlbHBlcnMuanMnO1xyXG5cclxuaW1wb3J0IHtcclxuICAgIHNldFRpbWVTbGlkZXIsXHJcbiAgICBpbml0VG9vbHRpcCxcclxuICAgIHRvb2x0aXBGdW5jdGlvbixcclxuICAgIGluaXRTbGlkZXJzLFxyXG4gICAgdG9vbHRpcFxyXG59IGZyb20gJy4vaW50ZXJhY3Rpb24uanMnO1xyXG5cclxuaW1wb3J0IHtcclxuICAgIG1ldGFkYXRhQ29sb3JcclxufSBmcm9tICcuLi9tZXRhZGF0YS5qcyc7XHJcblxyXG5pbXBvcnQge1xyXG4gICAgaW5pdENvbG9yUGlja2VyLFxyXG4gICAgcmV0dXJuQ29sb3JTY2FsZVxyXG59IGZyb20gJy4vY29sb3JfcGlja2VyLmpzJztcclxuXHJcbmltcG9ydCB7XHJcbiAgICBpbml0TGlzdGVuZXJzLFxyXG4gICAgcGxheUJvb2xlYW4sXHJcbiAgICBMaXN0ZW5lclxyXG59IGZyb20gJy4uL2xpc3RlbmVyLmpzJztcclxuXHJcbmltcG9ydCB7XHJcbiAgICBhZGRTcGF0aWFsVmlld0dyb3VwXHJcbn0gZnJvbSAnLi9sZWdlbmQuanMnO1xyXG5cclxuaW1wb3J0IHtcclxuICAgIHVwZGF0ZURlbmRyb2dyYW0sXHJcbiAgICBzZXRIaWVyYXJjaHlMZXZlbCxcclxuICAgIGRyYXdIaWVyYXJjaHksXHJcbiAgICBpbml0RGVuZHJvZ3JhbUxlZ2VuZCxcclxuICAgIC8vIG5ldHdvcmtIaWVyYXJjaHlJZHMsXHJcbiAgICAvLyBzZXRoaWVyYXJjaHlHcm91cFN0ZGV2LFxyXG4gICAgcmVzZXRoaWVyYXJjaHlHcm91cFN0ZGV2LFxyXG4gICAgRGVuZHJvZ3JhbVxyXG59IGZyb20gJy4uL2hpZXJhcmNoeS5qcyc7XHJcblxyXG5pbXBvcnQge1xyXG4gICAgdHJhY2tpbmdCb29sZWFuLFxyXG4gICAgYWRkVHJhY2tlZERhdGFcclxufSBmcm9tICcuLi92aXN1YWxfcGFyYW1ldGVyLmpzJztcclxuXHJcblxyXG5cclxuXHJcbiAvLyBzdmcgY29udGFpbmVyIGZvciB0aGUgc3BhdGlhbCB2aWV3XHJcbiAvLyBzdmcgZ3JvdXAgZm9yIHRoZSBzcGF0aWFsIHZpZXcgdGFua1xyXG4vLyBsZXQgbmV0d29ya0Jha0RhdGEgPSB7fTtcclxuXHJcbi8vZXhwb3J0IGxldCBpbmRleFRpbWUgPSAwOyAvLyBhY3R1YWwgdGltZSBtb21lbnQgaW4gdGhlIGFuaW1hdGlvblxyXG5cclxuLy8gYXJyYXkgb2YgYW5pbWFscyBmb3IgdGhlIHNwZWNpZmljIHRpbWUgZnJhbWVcclxuXHJcbmV4cG9ydCBsZXQgYWN0aXZlU2NhbGUgPSAnYmxhY2snOyAvLyBjYW4gYmUgc3BlZWQsIGFjY2VsZXJhdGlvbiwgLi4gYW5kIGJsYWNrIChtZWFuaW5nIG5vIGFjdGl2ZSBzY2FsZSlcclxuZXhwb3J0IGxldCBtZWRvaWRBbmltYWwgPSAtMTsgLy8gd2hpY2ggYW5pbWFsIGlzIHRoZSBtZWRvaWQgKC0xIGlzIG5vIGFuaW1hbClcclxuZXhwb3J0IGxldCBhY3RpdmVBbmltYWxzID0gW107IC8vIGFjdGl2ZSBzZWxlY3RlZCBhbmltYWxzXHJcbmV4cG9ydCBsZXQgYXJyYXlBbmltYWxzO1xyXG5cclxuXHJcbmxldCB0cmVuZENoYXJ0c1pvb20gPSB7fTtcclxuLy9sZXQgdGhpcy50cmVuZENoYXJ0c0VsZW0gPSBbJ2xvd2VyLW91dGVyLWFyZWEnLCAnbG93ZXItaW5uZXItYXJlYScsICdtZWRpYW4tbGluZScsICd1cHBlci1pbm5lci1hcmVhJywgJ3VwcGVyLW91dGVyLWFyZWEnXTtcclxuLy9sZXQgbGluZUNoYXJ0V2lkdGggPSA1MDAwO1xyXG5sZXQgcmF0aW8gPSAxO1xyXG5sZXQgem9vbUdyb3VwO1xyXG5sZXQgeDtcclxubGV0IHk7XHJcbmV4cG9ydCBsZXQgem9vbUZ1bmN0aW9uO1xyXG5cclxuXHJcblxyXG5sZXQgem9vbSA9IGQzLnpvb20oKVxyXG4gICAgLnNjYWxlRXh0ZW50KFsxLCA2XSlcclxuICAgIC5vbignem9vbScsICgpPT57XHJcbiAgICAgICAgLy9jb25zdHJhaW5lZCB6b29taW5nXHJcbiAgICAgICAgLy8gbW9kaWZ5IHRoZSB0cmFuc2xhdGUgc28gdGhhdCBpdCBuZXZlciBleGl0cyB0aGUgdGFua1xyXG4gICAgICAgIGQzLmV2ZW50LnRyYW5zZm9ybS54ID0gTWF0aC5taW4oMCwgdGhpcy50YW5rV2lkdGggKiAoZDMuZXZlbnQudHJhbnNmb3JtLmsgLSAxKSxcclxuICAgICAgICAgICAgTWF0aC5tYXgodGhpcy50YW5rV2lkdGggKiAoMSAtIGQzLmV2ZW50LnRyYW5zZm9ybS5rKSwgZDMuZXZlbnQudHJhbnNmb3JtLngpKTtcclxuXHJcbiAgICAgICAgZDMuZXZlbnQudHJhbnNmb3JtLnkgPSBNYXRoLm1pbigwLCB0aGlzLnRhbmtIZWlnaHQgKiAoZDMuZXZlbnQudHJhbnNmb3JtLmsgLSAxKSxcclxuICAgICAgICAgICAgTWF0aC5tYXgodGhpcy50YW5rSGVpZ2h0ICogKDEgLSBkMy5ldmVudC50cmFuc2Zvcm0uayksIGQzLmV2ZW50LnRyYW5zZm9ybS55KSk7XHJcblxyXG4gICAgICAgIC8vIHRyYW5zbGF0ZSBhbmQgc2NhbGVcclxuICAgICAgICB0aGlzLnpvb21Hcm91cC5hdHRyKCd0cmFuc2Zvcm0nLCBkMy5ldmVudC50cmFuc2Zvcm0pO1xyXG5cclxuICAgICAgICAvLyByZXNjYWxlIHRoZSBheGlzXHJcbiAgICAgICAgZ1hheGlzLmNhbGwoeEF4aXMuc2NhbGUoZDMuZXZlbnQudHJhbnNmb3JtLnJlc2NhbGVYKHgpKSk7XHJcbiAgICAgICAgZ1lheGlzLmNhbGwoeUF4aXMuc2NhbGUoZDMuZXZlbnQudHJhbnNmb3JtLnJlc2NhbGVZKHkpKSk7XHJcbiAgICB9KTtcclxuLyoqXHJcbiogQmFzZSBjbGFzcyBkcmF3ZXJcclxuKi9cclxuXHJcbi8qKlxyXG4gKiBJbml0aWFsaXplIHRoZSBzcGF0aWFsIHZpZXcgd2l0aCBhbGwgdGhlIGltcG9ydGFudCBmYWN0b3JzXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgRHJhd2VyIHtcclxuICAgY29uc3RydWN0b3IoKXtcclxuICAgICB0aGlzLmluZGV4VGltZT0wO1xyXG4gICAgIC8vIFRhbmsgQmFzZVxyXG5cclxuICAgICB0aGlzLnN2Z0NvbnRhaW5lciA9IGQzLnNlbGVjdCgnI21haW4tdmlzJylcclxuICAgICAgICAgICAuY2xhc3NlZCgnc3ZnLWNvbnRhaW5lcicsIHRydWUpXHJcbiAgICAgICAgICAgLy8gdG8gbWFrZSBpdCByZXNwb25zaXZlIHdpdGggY3NzXHJcbiAgICAgICAgICAgLmFwcGVuZCgnc3ZnJylcclxuICAgICAgICAgICAuYXR0cigncHJlc2VydmVBc3BlY3RSYXRpbycsICd4TWluWU1pbiBtZWV0JylcclxuICAgICAgICAgICAuYXR0cigndmlld0JveCcsICcwIDAgJyArIHRoaXMudGFua1dpZHRoICsgJyAnICsgdGhpcy50YW5rSGVpZ2h0KVxyXG4gICAgICAgICAgIC8vIGFkZCB0aGUgY2xhc3Mgc3ZnLWNvbnRlbnRcclxuICAgICAgICAgICAuY2xhc3NlZCgnc3ZnLWNvbnRlbnQnLCB0cnVlKVxyXG4gICAgICAgICAgIC5hdHRyKCdpZCcsICdtYWluLXZpcy1zdmcnKVxyXG4gICAgICAgICAgIC5jYWxsKHpvb20pO1xyXG4gICAgIHRoaXMuem9vbSA9IGQzLnpvb20oKVxyXG4gICAgICAgICAuc2NhbGVFeHRlbnQoWzEsIDZdKVxyXG4gICAgICAgICAub24oJ3pvb20nLCAoKT0+e1xyXG4gICAgICAgICAgICAgLy9jb25zdHJhaW5lZCB6b29taW5nXHJcbiAgICAgICAgICAgICAvLyBtb2RpZnkgdGhlIHRyYW5zbGF0ZSBzbyB0aGF0IGl0IG5ldmVyIGV4aXRzIHRoZSB0YW5rXHJcbiAgICAgICAgICAgICBkMy5ldmVudC50cmFuc2Zvcm0ueCA9IE1hdGgubWluKDAsIHRoaXMudGFua1dpZHRoICogKGQzLmV2ZW50LnRyYW5zZm9ybS5rIC0gMSksXHJcbiAgICAgICAgICAgICAgICAgTWF0aC5tYXgodGhpcy50YW5rV2lkdGggKiAoMSAtIGQzLmV2ZW50LnRyYW5zZm9ybS5rKSwgZDMuZXZlbnQudHJhbnNmb3JtLngpKTtcclxuXHJcbiAgICAgICAgICAgICBkMy5ldmVudC50cmFuc2Zvcm0ueSA9IE1hdGgubWluKDAsIHRoaXMudGFua0hlaWdodCAqIChkMy5ldmVudC50cmFuc2Zvcm0uayAtIDEpLFxyXG4gICAgICAgICAgICAgICAgIE1hdGgubWF4KHRoaXMudGFua0hlaWdodCAqICgxIC0gZDMuZXZlbnQudHJhbnNmb3JtLmspLCBkMy5ldmVudC50cmFuc2Zvcm0ueSkpO1xyXG5cclxuICAgICAgICAgICAgIC8vIHRyYW5zbGF0ZSBhbmQgc2NhbGVcclxuICAgICAgICAgICAgIHRoaXMuem9vbUdyb3VwLmF0dHIoJ3RyYW5zZm9ybScsIGQzLmV2ZW50LnRyYW5zZm9ybSk7XHJcblxyXG4gICAgICAgICAgICAgLy8gcmVzY2FsZSB0aGUgYXhpc1xyXG4gICAgICAgICAgICAgZ1hheGlzLmNhbGwoeEF4aXMuc2NhbGUoZDMuZXZlbnQudHJhbnNmb3JtLnJlc2NhbGVYKHgpKSk7XHJcbiAgICAgICAgICAgICBnWWF4aXMuY2FsbCh5QXhpcy5zY2FsZShkMy5ldmVudC50cmFuc2Zvcm0ucmVzY2FsZVkoeSkpKTtcclxuICAgICAgICAgfSk7XHJcbiAgICAgdGhpcy56b29tR3JvdXAgPSB0aGlzLnN2Z0NvbnRhaW5lci5hcHBlbmQoJ3N2ZzpnJyk7XHJcbiAgICAgdGhpcy50YW5rID0gdGhpcy56b29tR3JvdXAuYXBwZW5kKCdzdmc6ZycpXHJcbiAgICAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsICd0YW5rJylcclxuICAgICAgICAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsICgpPT57XHJcbiAgICAgICAgICAgICAgICAgICBsZXQgeCA9IHBhcmFtZXRlcnMuaW52ZXJ0ZWRfeCA/IC0xIDogMTtcclxuICAgICAgICAgICAgICAgICAgIGxldCB5ID0gcGFyYW1ldGVycy5pbnZlcnRlZF95ID8gLTEgOiAxO1xyXG4gICAgICAgICAgICAgICAgICAgcmV0dXJuICdzY2FsZSgnICsgeCArICcsJyArIHkgKyAnKSc7XHJcbiAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgIC8vIGFjdHVhbCB0aW1lIG1vbWVudCBpbiB0aGUgYW5pbWF0aW9uXHJcblxyXG4gICAgIHRoaXMuYWN0aXZlU2NhbGUgPSAnYmxhY2snOyAvLyBjYW4gYmUgc3BlZWQsIGFjY2VsZXJhdGlvbiwgLi4gYW5kIGJsYWNrIChtZWFuaW5nIG5vIGFjdGl2ZSBzY2FsZSlcclxuICAgICB0aGlzLm1lZG9pZEFuaW1hbCA9IC0xOyAvLyB3aGljaCBhbmltYWwgaXMgdGhlIG1lZG9pZCAoLTEgaXMgbm8gYW5pbWFsKVxyXG4gICAgIHRoaXMuYWN0aXZlQW5pbWFscyA9IFtdOyAvLyBhY3RpdmUgc2VsZWN0ZWQgYW5pbWFsc1xyXG4gICAgIHRoaXMuYXJyYXlBbmltYWxzID0gMCAvLyBhcnJheSBvZiBhbmltYWxzIGZvciB0aGUgc3BlY2lmaWMgdGltZSBmcmFtZVxyXG4gICAgIHRoaXMuaWQgPSAkKCcuc2hvdy1kZW5kcm9ncmFtLmJ0bi1wcmltYXJ5JykuYXR0cignZGF0YScpO1xyXG5cclxuXHJcbiAgIH1cclxuICAgc2V0SW5kZXhUaW1lKHZhbHVlKSB7XHJcbiAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiAodGhpcy5pbmRleFRpbWUgPD0gc3dhcm1EYXRhLmxlbmd0aCkpIHtcclxuICAgICAgICAgICB0aGlzLmluZGV4VGltZSA9IHZhbHVlO1xyXG4gICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICB0aGlzLmluZGV4VGltZSA9IDA7XHJcbiAgICAgICB9XHJcbiAgIH1cclxuXHJcbiAgIHVwZGF0ZUxpbmVDaGFydCgpIHtcclxuICAgICAgIGlmIChkMy5zZWxlY3QoJyNsaW5lQ2hhcnRUaW1lTGluZScpICYmIHN3YXJtRGF0YVtNYXRoLmNlaWwodGhpcy5pbmRleFRpbWUgLyByYXRpbyldKSB7XHJcbiAgICAgICAgICAgbGV0IHRtcCA9IE1hdGguY2VpbCh0aGlzLmluZGV4VGltZSAvIHJhdGlvKTtcclxuICAgICAgICAgICAvL3VwZGF0ZSB0aGUgbGluZSBjaGFydCBsZWdlbmQgdGV4dCB2YWx1ZXMgcGVyIHNlY29uZFxyXG4gICAgICAgICAgIGlmICh0aGlzLmluZGV4VGltZSAlIDI1ID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgIC8vIFRPRE8gY2hhbmdlIHRoaXMgdG8gYSBtb3JlIG1vZHVsYXIgd2F5XHJcbiAgICAgICAgICAgICAgIGQzLnNlbGVjdCgnI2NvbnZleF9odWxsX2FyZWFMaW5lVmFsdWUnKVxyXG4gICAgICAgICAgICAgICAgICAgLnRleHQoKHN3YXJtRGF0YVt0bXBdWydjb252ZXhfaHVsbF9hcmVhJ10pICsgJ21twrInKTtcclxuICAgICAgICAgICAgICAgZDMuc2VsZWN0KCcjc3BlZWRMaW5lVmFsdWUnKVxyXG4gICAgICAgICAgICAgICAgICAgLnRleHQoc3dhcm1EYXRhW3RtcF1bJ3NwZWVkJ10gKyAnbW0vcycpO1xyXG4gICAgICAgICAgICAgICBkMy5zZWxlY3QoJyNhY2NlbGVyYXRpb25MaW5lVmFsdWUnKVxyXG4gICAgICAgICAgICAgICAgICAgLnRleHQoc3dhcm1EYXRhW3RtcF1bJ2FjY2VsZXJhdGlvbiddICsgJ21tL3PCsicpO1xyXG4gICAgICAgICAgICAgICBkMy5zZWxlY3QoJyNkaXN0YW5jZV9jZW50cm9pZExpbmVWYWx1ZScpXHJcbiAgICAgICAgICAgICAgICAgICAudGV4dChzd2FybURhdGFbdG1wXVsnZGlzdGFuY2VfY2VudHJvaWQnXSArICdtbScpO1xyXG4gICAgICAgICAgICAgICBkMy5zZWxlY3QoJyNkaXJlY3Rpb25MaW5lVmFsdWUnKVxyXG4gICAgICAgICAgICAgICAgICAgLnRleHQoc3dhcm1EYXRhW3RtcF1bJ2RpcmVjdGlvbiddICsgJ8KwJyk7XHJcbiAgICAgICAgICAgICAgIGQzLnNlbGVjdCgnI3BvbGFyaXNhdGlvbkxpbmVWYWx1ZScpXHJcbiAgICAgICAgICAgICAgICAgICAudGV4dChzd2FybURhdGFbdG1wXVsncG9sYXJpc2F0aW9uJ10pO1xyXG4gICAgICAgICAgIH1cclxuICAgICAgICAgICBkMy5zZWxlY3QoJyNsaW5lQ2hhcnRUaW1lTGluZScpXHJcbiAgICAgICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKCcgKyB6b29tRnVuY3Rpb24odG1wKSArICcsMCknKTtcclxuICAgICAgIH1cclxuICAgfVxyXG4gICBkcmF3KCkge1xyXG4gICAgICAgLy91cGRhdGUgdGltZSB0byB3YWl0IGFrYSBzcGVlZCBvZiByZXBsYXlcclxuICAgICAgIGxldCB0aW1lVG9XYWl0ID0gJCgnaW5wdXRbdHlwZT1cInJhZGlvXCJdLmdyb3VwLXBsYXliYWNrLXJhdGU6Y2hlY2tlZCcpXHJcbiAgICAgICAgICAgLnZhbCgpO1xyXG4gICAgICAgLy9zY2FsZSB0aGUgc2l6ZSBieSB0aGlzIG51bWJlclxyXG4gICAgICAgbGV0IGFuaW1hbFNjYWxlID0gJCgnaW5wdXRbdHlwZT1cInJhZGlvXCJdLmdyb3VwLXNpemU6Y2hlY2tlZCcpXHJcbiAgICAgICAgICAgLnZhbCgpO1xyXG5cclxuICAgICAgIC8vZ2V0IHRoZSBuZXh0IGFuaW1hbHNcclxuICAgICAgIGFycmF5QW5pbWFscyA9IGRhdGFzZXQuZmlsdGVyKChkKT0+e1xyXG4gICAgICAgICAgIHJldHVybiBkWyd0J10gPT09IHRoaXMuaW5kZXhUaW1lO1xyXG4gICAgICAgfSk7XHJcblxyXG4gICAgICAgLy90aGUgdGltZW91dCBpcyBzZXQgYWZ0ZXIgb25lIHVwZGF0ZSAzMCBtc1xyXG4gICAgICAgc2V0VGltZW91dCgoKT0+e1xyXG4gICAgICAgICAgICAgICAvLyBkcmF3IGhpZXJhcmNoeVxyXG4gICAgICAgICAgICAgICB0aGlzLmRyYXdEZW5kcm9ncmFtKCk7XHJcbiAgICAgICAgICAgICAgIC8vY2hhbmdlIHRoZSB0aW1lIGZyYW1lIHRleHRcclxuICAgICAgICAgICAgICAgdGhpcy5zdmdDb250YWluZXIuc2VsZWN0KCcuZnJhbWUtdGV4dCcpXHJcbiAgICAgICAgICAgICAgICAgICAudGV4dChNYXRoLmZsb29yKHRoaXMuaW5kZXhUaW1lIC8gMTUwMCkgJSA2MCArICc6JyArIE1hdGguZmxvb3IodGhpcy5pbmRleFRpbWUgLyBwYXJhbWV0ZXJzWydmcHMnXSkgJSA2MCArICc6OicgKyB0aGlzLmluZGV4VGltZSAlIHBhcmFtZXRlcnNbJ2ZwcyddKTtcclxuICAgICAgICAgICAgICAgLy8gaWYgYSBzZWNvbmQgaGFzIGNoYW5nZWQgbW92ZSB0aGUgc2xpZGVyXHJcbiAgICAgICAgICAgICAgIGlmICh0aGlzLmluZGV4VGltZSAlIHBhcmFtZXRlcnNbJ2ZwcyddID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICBzZXRUaW1lU2xpZGVyKHRoaXMuaW5kZXhUaW1lKTtcclxuICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgbGV0IHN2Z0FuaW1hbHMgPSB0aGlzLnRhbmsuc2VsZWN0QWxsKCdnLmFuaW1hbCcpXHJcbiAgICAgICAgICAgICAgICAgICAuZGF0YShhcnJheUFuaW1hbHMpO1xyXG5cclxuICAgICAgICAgICAgICAgLy8gTmV0d29yayB2aXNcclxuICAgICAgICAgICAgICAgbGV0IG5ldHdvcmtWaXM7XHJcbiAgICAgICAgICAgICAgIC8vIGxldCBuZXR3b3JrVmlzQmFrO1xyXG4gICAgICAgICAgICAgICBpZiAodGhpcy5pbmRleFRpbWUgaW4gbmV0d29ya0RhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgIGxldCBuZXR3b3JrID0gbmV0d29ya0RhdGFbdGhpcy5pbmRleFRpbWVdO1xyXG4gICAgICAgICAgICAgICAgICAgLy8gcmVzZXQgdGhlIGdyb3VwIHN0YW5kYXJkIGRldmlhdGlvbiBmb3IgdGhlIGhpZXJhcmhjeVxyXG4gICAgICAgICAgICAgICAgICAgLy8gbmVlZGVkIGZvciBjb2xvcmluZyBvZiB0aGUgZGVuZHJvZ3JhbSBub2RlcyAodmFyaWFjbmUpXHJcbiAgICAgICAgICAgICAgICAgICByZXNldGhpZXJhcmNoeUdyb3VwU3RkZXYoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAvLyBkaXNwbGF5IHRoZSB3aG9sZSBuZXR3b3JrXHJcbiAgICAgICAgICAgICAgICAgICBuZXR3b3JrID0gbmV0d29yay5tYXAoZnVuY3Rpb24oaXRlbSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgIGxldCBhbmltYWwxID0gYXJyYXlBbmltYWxzLmZpbHRlcihmdW5jdGlvbihvYmopIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9ialsnYSddID09PSBpdGVtWydzJ107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgbGV0IGFuaW1hbDIgPSBhcnJheUFuaW1hbHMuZmlsdGVyKGZ1bmN0aW9uKG9iaikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2JqWydhJ10gPT09IGl0ZW1bJ2UnXTtcclxuICAgICAgICAgICAgICAgICAgICAgICB9KVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAnbm9kZTEnOiBhbmltYWwxWydhJ10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICdub2RlMic6IGFuaW1hbDJbJ2EnXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3N0YXJ0JzogYW5pbWFsMVsncCddLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAnZW5kJzogYW5pbWFsMlsncCddLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAndmFsJzogaXRlbVsndiddXHJcbiAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgIG5ldHdvcmsuZm9yRWFjaChmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgJCgoJyNtYy0nICsgZFsnbm9kZTEnXSArICctJyArIGRbJ25vZGUyJ10pKS5jc3MoJ2ZpbGwnLCBuZXR3b3JrQ29sb3JTY2FsZShkWyd2YWwnXSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICQoKCcjbWMtJyArIGRbJ25vZGUyJ10gKyAnLScgKyBkWydub2RlMSddKSkuY3NzKCdmaWxsJywgbmV0d29ya0NvbG9yU2NhbGUoZFsndmFsJ10pKTtcclxuICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgIGlmIChuZXR3b3JrQXV0bykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgIGxldCB0bXBBcnJheSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmV0d29yay5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBBcnJheS5wdXNoKG5ldHdvcmtbaV1bJ3ZhbCddKTtcclxuICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgc2V0TmV0d29yTGltaXQocGVyY2VudGlsZXModG1wQXJyYXkpKTtcclxuICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgIG5ldHdvcmsgPSBuZXR3b3JrLmZpbHRlcihmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRbJ3ZhbCddIDw9ICgxIC0gbmV0d29ya0xpbWl0KTtcclxuICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgLy8gREFUQSBKT0lOXHJcbiAgICAgICAgICAgICAgICAgICBuZXR3b3JrVmlzID0gdGhpcy50YW5rLnNlbGVjdCgnI25ldHdvcmstZ3JvdXAnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgIC5zZWxlY3RBbGwoJ2xpbmUubmV0d29yay1lZGdlcycpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgLmRhdGEobmV0d29yayk7XHJcbiAgICAgICAgICAgICAgICAgICAvLyBVUERBVEVcclxuICAgICAgICAgICAgICAgICAgIG5ldHdvcmtWaXNcclxuICAgICAgICAgICAgICAgICAgICAgICAuYXR0cigneDEnLCBmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkWydzdGFydCddWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3kxJywgZnVuY3Rpb24oZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLWRbJ3N0YXJ0J11bMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAuYXR0cigneDInLCBmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkWydlbmQnXVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCd5MicsIGZ1bmN0aW9uKGQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC1kWydlbmQnXVsxXTtcclxuICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdzdHJva2UnLCBmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXR3b3JrQ29sb3JTY2FsZSgoMSAtIGRbJ3ZhbCddKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignc3Ryb2tlLW9wYWNpdHknLCBmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAxIC0gZFsndmFsJ107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAvL0VOVEVSXHJcblxyXG4gICAgICAgICAgICAgICAgICAgbmV0d29ya1Zpc1xyXG4gICAgICAgICAgICAgICAgICAgICAgIC5lbnRlcigpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgnbGluZScpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ25ldHdvcmstZWRnZXMnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCd4MScsIGZ1bmN0aW9uKGQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRbJ3N0YXJ0J11bMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAuYXR0cigneTEnLCBmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAtZFsnc3RhcnQnXVsxXTtcclxuICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCd4MicsIGZ1bmN0aW9uKGQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRbJ2VuZCddWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3kyJywgZnVuY3Rpb24oZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLWRbJ2VuZCddWzFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3N0cm9rZScsIGZ1bmN0aW9uKGQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldHdvcmtDb2xvclNjYWxlKGRbJ3ZhbCddKTtcclxuICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdzdHJva2Utb3BhY2l0eScsIGZ1bmN0aW9uKGQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRbJ3ZhbCddO1xyXG4gICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgIG5ldHdvcmtWaXMgPSB0aGlzLnRhbmsuc2VsZWN0QWxsKCdsaW5lLm5ldHdvcmstZWRnZXMnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgIC5kYXRhKFtdKTtcclxuXHJcbiAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgLy8gRVhJVCAtIG5ldHdvcmtcclxuICAgICAgICAgICAgICAgbmV0d29ya1Zpcy5leGl0KClcclxuICAgICAgICAgICAgICAgICAgIC5yZW1vdmUoKTtcclxuXHJcbiAgICAgICAgICAgICAgIC8vIGRlbGF1bmF5IHRyaWFuZ3VsYXRpb25cclxuICAgICAgICAgICAgICAgLy8gREFUQSBKT0lOICAtIHRyaWFuZ3VsYXRpb25cclxuICAgICAgICAgICAgICAgdmFyIHRyaWFuZ3VsYXRpb247XHJcbiAgICAgICAgICAgICAgIGlmICgkKCcjZHJhdy10cmlhbmd1bGF0aW9uJylcclxuICAgICAgICAgICAgICAgICAgIC5pcygnOmNoZWNrZWQnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgdHJpYW5ndWxhdGlvbiA9IHRoaXMudGFuay5zZWxlY3QoJyNkZWxhdW5heS10cmlhbmd1bGF0aW9uLWdyb3VwJylcclxuICAgICAgICAgICAgICAgICAgICAgICAuc2VsZWN0QWxsKCdwYXRoLmRlbGF1bmF5LXRyaWFuZ3VsYXRpb24nKVxyXG4gICAgICAgICAgICAgICAgICAgICAgIC5kYXRhKFtzd2FybURhdGFbdGhpcy5pbmRleFRpbWVdWyd0cmlhbmd1bGF0aW9uJ11dKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAvLyBVUERBVEUgLSB0cmlhbmd1bGF0aW9uXHJcbiAgICAgICAgICAgICAgICAgICB0cmlhbmd1bGF0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2QnLCBmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgLy9FTlRFUiAtIHRyaWFuZ3VsYXRpb25cclxuICAgICAgICAgICAgICAgICAgIHRyaWFuZ3VsYXRpb24uZW50ZXIoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJ3BhdGgnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsICdkZWxhdW5heS10cmlhbmd1bGF0aW9uJylcclxuICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignZCcsIGZ1bmN0aW9uKGQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICB0cmlhbmd1bGF0aW9uID0gdGhpcy50YW5rLnNlbGVjdEFsbCgncGF0aC5kZWxhdW5heS10cmlhbmd1bGF0aW9uJylcclxuICAgICAgICAgICAgICAgICAgICAgICAuZGF0YShbXSk7XHJcbiAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgLy8gRVhJVCAtIHRyaWFuZ3VsYXRpb25cclxuICAgICAgICAgICAgICAgdHJpYW5ndWxhdGlvbi5leGl0KClcclxuICAgICAgICAgICAgICAgICAgIC5yZW1vdmUoKTtcclxuXHJcbiAgICAgICAgICAgICAgIC8vIFZvcm9ub2lcclxuICAgICAgICAgICAgICAgLy8gREFUQSBKT0lOICAtIHZvcm9ub2lcclxuICAgICAgICAgICAgICAgdmFyIHZvcm9ub2k7XHJcbiAgICAgICAgICAgICAgIGlmICgkKCcjZHJhdy12b3Jvbm9pJylcclxuICAgICAgICAgICAgICAgICAgIC5pcygnOmNoZWNrZWQnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgLy9hcHBlbmQgdGhlIGdyb3VwIGZvciB0aGUgdm9yb25vaSBwYXRoc1xyXG4gICAgICAgICAgICAgICAgICAgdm9yb25vaSA9IHRoaXMudGFua1xyXG4gICAgICAgICAgICAgICAgICAgICAgIC5zZWxlY3QoJyN2b3Jub2ktZ3JvdXAnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgIC5zZWxlY3RBbGwoJ3BhdGgudm9yb25vaScpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgLmRhdGEoc3dhcm1EYXRhW3RoaXMuaW5kZXhUaW1lXVsndm9yb25vaSddLnNwbGl0KCc7JykpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgIC8vIFVQREFURSAtIHZvcm9ub2lcclxuICAgICAgICAgICAgICAgICAgIHZvcm9ub2lcclxuICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignZCcsIGZ1bmN0aW9uKGQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAvL0VOVEVSIC0gdm9yb25vaVxyXG4gICAgICAgICAgICAgICAgICAgdm9yb25vaS5lbnRlcigpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgncGF0aCcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ3Zvcm9ub2knKVxyXG4gICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdkJywgZnVuY3Rpb24oZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZDtcclxuICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgIHZvcm9ub2kgPSB0aGlzLnRhbmsuc2VsZWN0KCcjdm9ybm9pLWdyb3VwJylcclxuICAgICAgICAgICAgICAgICAgICAgICAuc2VsZWN0QWxsKCdwYXRoLnZvcm9ub2knKVxyXG4gICAgICAgICAgICAgICAgICAgICAgIC5kYXRhKFtdKTtcclxuICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAvLyBFWElUIC0gdm9yb25vaVxyXG4gICAgICAgICAgICAgICB2b3Jvbm9pLmV4aXQoKVxyXG4gICAgICAgICAgICAgICAgICAgLnJlbW92ZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgLy9FTlRFUiAtIGFwcGVuZCB0aGUgYW5pbWFsIGdyb3Vwc1xyXG4gICAgICAgICAgICAgICBsZXQgYW5pbWFsR3JvdXBpbmdzID0gc3ZnQW5pbWFsc1xyXG4gICAgICAgICAgICAgICAgICAgLmVudGVyKClcclxuICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJ2cnKVxyXG4gICAgICAgICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2FuaW1hbCcpXHJcbiAgICAgICAgICAgICAgICAgICAuYXR0cignaWQnLCBmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdhbmltYWwtJyArIGRbJ2EnXTtcclxuICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgLy8gQXBwZW5kIHRoZSBjaXJjbGVzIGZvciBlYWNoIGFuaW1hbCB0byB0aGUgYW5pbWFsZ3JvdXBcclxuICAgICAgICAgICAgICAgYW5pbWFsR3JvdXBpbmdzLmFwcGVuZCgnY2lyY2xlJylcclxuICAgICAgICAgICAgICAgICAgIC5hdHRyKCdyJywgMS41ICogYW5pbWFsU2NhbGUpXHJcbiAgICAgICAgICAgICAgICAgICAuYXR0cignY3gnLCBmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRbJ3AnXVswXTtcclxuICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAuYXR0cignY3knLCBmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC1kWydwJ11bMV07XHJcbiAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgLm9uKCdtb3VzZW92ZXInLCBmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgdG9vbHRpcEZ1bmN0aW9uKGQpO1xyXG4gICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgIC5vbignbW91c2VvdXQnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICB0b29sdGlwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIC50cmFuc2l0aW9uKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgLmR1cmF0aW9uKDUwMClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgLnN0eWxlKCdvcGFjaXR5JywgMCk7XHJcbiAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgLy8gYWRkIG9uIGNsaWNrIGZvciB0aGUgYWN0aXZlIGZpc2hzXHJcbiAgICAgICAgICAgICAgICAgICAub24oJ2NsaWNrJywgZnVuY3Rpb24oZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmFjdGl2ZUFuaW1hbHMuaW5jbHVkZXMoZFsnYSddKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFjdGl2ZUFuaW1hbHMgPSB0aGlzLmFjdGl2ZUFuaW1hbHMuZmlsdGVyKGl0ZW0gPT4gaXRlbSAhPT0gZFsnYSddKTtcclxuICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFjdGl2ZUFuaW1hbHMucHVzaChkWydhJ10pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICBpZiAoISQoJyNwbGF5LWJ1dHRvbicpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIC5oYXNDbGFzcygnYWN0aXZlJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9nbyBiYWNrIG9uZSBzZWNvbmQgYW5kIGRyYXcgdGhlIG5leHQgZnJhbWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgLy90aGlzIGFwcGx5cyB0aGUgY2hhbmdlc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmluZGV4VGltZS0tO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRyYXcoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgIC8vIFVQREFURSAtIGFuaW1hbHMgY2lyY2xlc1xyXG4gICAgICAgICAgICAgICBzdmdBbmltYWxzLnNlbGVjdCgnY2lyY2xlJylcclxuICAgICAgICAgICAgICAgICAgIC5hdHRyKCdjeCcsIGZ1bmN0aW9uKGQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZFsncCddWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgIC5hdHRyKCdjeScsIGZ1bmN0aW9uKGQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLWRbJ3AnXVsxXTtcclxuICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAuYXR0cigncicsIGFuaW1hbFNjYWxlKTtcclxuXHJcbiAgICAgICAgICAgICAgIC8vIEFwcGVuZCBmb3IgZWFjaCBncm91cCB0aGUgYXJyb3csIG5lZWRlZCBmb3IgY29sb3JpbmdcclxuICAgICAgICAgICAgICAgYW5pbWFsR3JvdXBpbmdzLmFwcGVuZCgnc3ZnOmRlZnMnKVxyXG4gICAgICAgICAgICAgICAgICAgLmFwcGVuZCgnc3ZnOm1hcmtlcicpXHJcbiAgICAgICAgICAgICAgICAgICAuYXR0cignaWQnLCBmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdhcnJvdy1tYXJrZXItJyArIGRbJ2EnXTtcclxuICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAuYXR0cigncmVmWCcsIDIpXHJcbiAgICAgICAgICAgICAgICAgICAuYXR0cigncmVmWScsIDYpXHJcbiAgICAgICAgICAgICAgICAgICAuYXR0cignbWFya2VyV2lkdGgnLCAxMylcclxuICAgICAgICAgICAgICAgICAgIC5hdHRyKCdtYXJrZXJIZWlnaHQnLCAxMylcclxuICAgICAgICAgICAgICAgICAgIC5hdHRyKCdvcmllbnQnLCAnYXV0bycpXHJcbiAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCdzdmc6cGF0aCcpXHJcbiAgICAgICAgICAgICAgICAgICAuYXR0cignZCcsICdNMiwyIEwyLDExIEwxMCw2IEwyLDInKTtcclxuXHJcbiAgICAgICAgICAgICAgIC8vIEFwcGVuZCB0aGUgbGluZSBmb3IgdGhlIGRpcmVjdGlvbiBhcnJvd1xyXG4gICAgICAgICAgICAgICBhbmltYWxHcm91cGluZ3NcclxuICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJ2xpbmUnKVxyXG4gICAgICAgICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2Fycm93JylcclxuICAgICAgICAgICAgICAgICAgIC5hdHRyKCdtYXJrZXItZW5kJywgZnVuY3Rpb24oZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAndXJsKCNhcnJvdy1tYXJrZXItJyArIGRbJ2EnXSArICcpJztcclxuICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgLy9leGVjdXRlIG9ubHkgd2hlbiBkcmF3IGRpcmVjdGlvbiBidXR0b24gaXMgY2hlY2tlZFxyXG4gICAgICAgICAgICAgICBpZiAoJCgnI2RyYXctZGlyZWN0aW9uJylcclxuICAgICAgICAgICAgICAgICAgIC5pcygnOmNoZWNrZWQnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgLy8gVVBEQVRFIGFuaW1hbCBkaXJlY3Rpb24gYXJyb3dcclxuICAgICAgICAgICAgICAgICAgIHN2Z0FuaW1hbHMuc2VsZWN0KCdsaW5lJylcclxuICAgICAgICAgICAgICAgICAgICAgICAuYXR0cigneDEnLCBmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkWydwJ11bMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAuYXR0cigneTEnLCBmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAtZFsncCddWzFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3gyJywgZnVuY3Rpb24oZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGRbJ3AnXVswXSArIDIgKiBhbmltYWxTY2FsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAuYXR0cigneTInLCBmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoLWRbJ3AnXVsxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgZnVuY3Rpb24oZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3JvdGF0ZSgnICsgLWRbJ2RpcmVjdGlvbiddICsgJyAnICsgZFsncCddWzBdICsgJyAnICsgLWRbJ3AnXVsxXSArICcpJztcclxuICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgIC8vIGhpZGUgdGhlIGFycm93c1xyXG4gICAgICAgICAgICAgICAgICAgJCgnLmFycm93JykuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAvLyBFWElUIC0gdGhlIGdyb3Vwc1xyXG4gICAgICAgICAgICAgICBzdmdBbmltYWxzLmV4aXQoKVxyXG4gICAgICAgICAgICAgICAgICAgLnJlbW92ZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgLy9Db252ZXggaHVsbFxyXG4gICAgICAgICAgICAgICBpZiAoJCgnI2RyYXctY29udmV4LWh1bGwnKVxyXG4gICAgICAgICAgICAgICAgICAgLmlzKCc6Y2hlY2tlZCcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAvLyBEQVRBIEpPSU4gLSBwYXRoc1xyXG4gICAgICAgICAgICAgICAgICAgdmFyIGh1bGxQYXRoID0gdGhpcy50YW5rLnNlbGVjdEFsbCgncGF0aC5odWxsLXBhdGgnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgIC5kYXRhKFtzd2FybURhdGFbdGhpcy5pbmRleFRpbWVdWydjb252ZXhfaHVsbCddXSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgLy8gVVBEQVRFIC0gaHVsbCBwYXRoXHJcbiAgICAgICAgICAgICAgICAgICBodWxsUGF0aFxyXG4gICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdkJywgZnVuY3Rpb24oZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZDtcclxuICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAvLyBFTlRFUiAtIGh1bGwgcGF0aHNcclxuICAgICAgICAgICAgICAgICAgIGh1bGxQYXRoLmVudGVyKClcclxuICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCdwYXRoJylcclxuICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignY2xhc3MnLCAnaHVsbC1wYXRoJylcclxuICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignZCcsIGZ1bmN0aW9uKGQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgLy8gZHJhdyBubyBodWxsXHJcbiAgICAgICAgICAgICAgICAgICBodWxsUGF0aCA9IHRoaXMudGFuay5zZWxlY3QoJ3BhdGguaHVsbC1wYXRoJylcclxuICAgICAgICAgICAgICAgICAgICAgICAuZGF0YShbXSk7XHJcbiAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgLy8gRVhJVCAtIGh1bGwgcGF0aHNcclxuICAgICAgICAgICAgICAgaHVsbFBhdGguZXhpdCgpXHJcbiAgICAgICAgICAgICAgICAgICAucmVtb3ZlKCk7XHJcblxyXG4gICAgICAgICAgICAgICAvL2NoYW5nZSB0aGUgY29sb3JzIG9mIHRoZSBmaXNoXHJcbiAgICAgICAgICAgICAgIGlmICh0aGlzLmFjdGl2ZVNjYWxlICE9PSAnYmxhY2snKSB7XHJcbiAgICAgICAgICAgICAgICAgICAvLyBvbmNlIHRoZSBmaWxsIGZvciB0aGUgaGVhZHMgYW5kIHRoZSBzdHJva2UgZm9yIHRoZSBwYXRoXHJcbiAgICAgICAgICAgICAgICAgICB2YXIgdG1wU2NhbGUgPSByZXR1cm5Db2xvclNjYWxlKCk7XHJcbiAgICAgICAgICAgICAgICAgICBzdmdBbmltYWxzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgLnRyYW5zaXRpb24oKVxyXG4gICAgICAgICAgICAgICAgICAgICAgIC5kdXJhdGlvbigxMClcclxuICAgICAgICAgICAgICAgICAgICAgICAuc3R5bGUoJ2ZpbGwnLCBmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0bXBTY2FsZShkW3RoaXMuYWN0aXZlU2NhbGVdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdzdHJva2UnLCBmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0bXBTY2FsZShkW3RoaXMuYWN0aXZlU2NhbGVdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgIC8vY29sb3IgZXZlcnkgZmlzaCBibGFja1xyXG4gICAgICAgICAgICAgICAgICAgc3ZnQW5pbWFsc1xyXG4gICAgICAgICAgICAgICAgICAgICAgIC5zdHlsZSgnZmlsbCcsICcjMDAwJylcclxuICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignc3Ryb2tlJywgJyMwMDAnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICBpZiAoISQuaXNFbXB0eU9iamVjdChtZXRhZGF0YUNvbG9yKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKG1ldGFkYXRhQ29sb3IpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGQzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc2VsZWN0KCcjYW5pbWFsLScgKyBrZXkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc3R5bGUoJ2ZpbGwnLCBtZXRhZGF0YUNvbG9yW2tleV0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignc3Ryb2tlJywgbWV0YWRhdGFDb2xvcltrZXldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgLy9jaGFuZ2Ugb3BhY3RpeSBpZiB0aGUgZmlzaCBpcyBzZWxlY3RlZFxyXG4gICAgICAgICAgICAgICBpZiAodGhpcy5hY3RpdmVBbmltYWxzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgc3ZnQW5pbWFsc1xyXG4gICAgICAgICAgICAgICAgICAgICAgIC5zdHlsZSgnb3BhY2l0eScsIGZ1bmN0aW9uKGQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuYWN0aXZlQW5pbWFscy5pbmNsdWRlcyhkWydhJ10pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAwLjI1O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICBpZiAoJCgnI3JlbW92ZS1hY3RpdmUtc2VsZWN0ZWQtYnV0dG9uJylcclxuICAgICAgICAgICAgICAgICAgICAgICAuaXMoJzpkaXNhYmxlZCcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgJCgnI3JlbW92ZS1hY3RpdmUtc2VsZWN0ZWQtYnV0dG9uJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgLnByb3AoJ2Rpc2FibGVkJywgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICQoJyN2aXN1YWwtcGFyYW1ldGVyLWJ1dHRvbicpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIC5wcm9wKCdkaXNhYmxlZCcsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgIC8vIGlmIHRyYWNraW5nIGlzIG9uXHJcbiAgICAgICAgICAgICAgICAgICBpZiAodHJhY2tpbmdCb29sZWFuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgYWRkVHJhY2tlZERhdGEoYXJyYXlBbmltYWxzWzBdWyd0J10sIHRoaXMuYWN0aXZlQW5pbWFscyk7XHJcbiAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICBpZiAoISQoJyNyZW1vdmUtYWN0aXZlLXNlbGVjdGVkLWJ1dHRvbicpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgLmlzKCc6ZGlzYWJsZWQnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICQoJyNyZW1vdmUtYWN0aXZlLXNlbGVjdGVkLWJ1dHRvbicpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIC5wcm9wKCdkaXNhYmxlZCcsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICQoJyN2aXN1YWwtcGFyYW1ldGVyLWJ1dHRvbicpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIC5wcm9wKCdkaXNhYmxlZCcsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgLy8gbm9ybWFsIG9wYWNpdHlcclxuICAgICAgICAgICAgICAgICAgIHN2Z0FuaW1hbHNcclxuICAgICAgICAgICAgICAgICAgICAgICAuc3R5bGUoJ29wYWNpdHknLCAxKTtcclxuICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgLy9kcmF3IGNlbnRyb2lkXHJcbiAgICAgICAgICAgICAgIGQzLnNlbGVjdCgnLmNlbnRyb2lkJylcclxuICAgICAgICAgICAgICAgICAgIC5hdHRyKCdjeCcsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgIGlmICgnY2VudHJvaWQnIGluIHN3YXJtRGF0YVswXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3dhcm1EYXRhW3RoaXMuaW5kZXhUaW1lXVsnY2VudHJvaWQnXVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgLmF0dHIoJ2N5JywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgaWYgKCdjZW50cm9pZCcgaW4gc3dhcm1EYXRhWzBdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAtc3dhcm1EYXRhW3RoaXMuaW5kZXhUaW1lXVsnY2VudHJvaWQnXVsxXTtcclxuICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgaWYgKCQoJyNkcmF3LWRpcmVjdGlvbicpLmlzKCc6Y2hlY2tlZCcpICYmXHJcbiAgICAgICAgICAgICAgICAgICBzd2FybURhdGFbdGhpcy5pbmRleFRpbWVdLmNlbnRyb2lkICYmXHJcbiAgICAgICAgICAgICAgICAgICAkKCcjZHJhdy1jZW50cm9pZCcpLmlzKCc6Y2hlY2tlZCcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICBkMy5zZWxlY3QoJyNjZW50cm9pZC1saW5lJylcclxuICAgICAgICAgICAgICAgICAgICAgICAuY2xhc3NlZCgnaGlkZGVuJywgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgLy8gVVBEQVRFIGFuaW1hbCBkaXJlY3Rpb24gYXJyb3dcclxuICAgICAgICAgICAgICAgICAgIGQzLnNlbGVjdCgnI2NlbnRyb2lkLWxpbmUnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCd4MScsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3dhcm1EYXRhW3RoaXMuaW5kZXhUaW1lXVsnY2VudHJvaWQnXVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCd5MScsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLXN3YXJtRGF0YVt0aGlzLmluZGV4VGltZV1bJ2NlbnRyb2lkJ11bMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAuYXR0cigneDInLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChzd2FybURhdGFbdGhpcy5pbmRleFRpbWVdWydjZW50cm9pZCddWzBdICsgMiAqIGFuaW1hbFNjYWxlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCd5MicsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLXN3YXJtRGF0YVt0aGlzLmluZGV4VGltZV1bJ2NlbnRyb2lkJ11bMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAncm90YXRlKCcgKyAtc3dhcm1EYXRhW3RoaXMuaW5kZXhUaW1lXVsnZGlyZWN0aW9uJ10gKyAnICcgKyBzd2FybURhdGFbdGhpcy5pbmRleFRpbWVdWydjZW50cm9pZCddWzBdICsgJyAnICsgLXN3YXJtRGF0YVt0aGlzLmluZGV4VGltZV1bJ2NlbnRyb2lkJ11bMV0gKyAnKSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAvLyBoaWRlIHRoZSBhcnJvd3NcclxuICAgICAgICAgICAgICAgICAgIGQzLnNlbGVjdCgnI2NlbnRyb2lkLWxpbmUnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsICdoaWRkZW4nKTtcclxuICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgLy8gbWVkb2lkXHJcbiAgICAgICAgICAgICAgIGlmICh0aGlzLm1lZG9pZEFuaW1hbCAhPT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgIGQzLnNlbGVjdEFsbCgnI2FuaW1hbC0nICsgdGhpcy5tZWRvaWRBbmltYWwpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgLmNsYXNzZWQoJ21lZG9pZCcsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgIHRoaXMubWVkb2lkQW5pbWFsID0gc3dhcm1EYXRhW3RoaXMuaW5kZXhUaW1lXVsnbWVkb2lkJ107XHJcbiAgICAgICAgICAgICAgICAgICBkMy5zZWxlY3RBbGwoJyNhbmltYWwtJyArIHRoaXMubWVkb2lkQW5pbWFsKVxyXG4gICAgICAgICAgICAgICAgICAgICAgIC5jbGFzc2VkKCdtZWRvaWQnLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgLy9uZXh0IGZyYW1lXHJcbiAgICAgICAgICAgICAgIHRoaXMuaW5kZXhUaW1lKys7XHJcblxyXG4gICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUxpbmVDaGFydCgpO1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgIC8vY2hlY2sgaWYgcGxheSBidXR0b24gaXMgYWN0aXZlIGFuZCBpZiB0aGUgYW5pbWF0aW9uIGlzIG5vdCBmaW5pc2hlZFxyXG4gICAgICAgICAgICAgICBpZiAodGhpcy5pbmRleFRpbWUgPj0gc3dhcm1EYXRhLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgLy9zdGFydCBhZ2FpbiBmcm9tIHRoZSBzdGFydFxyXG4gICAgICAgICAgICAgICAgICAgdGhpcy5pbmRleFRpbWUgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgdGhpcy5kcmF3KCk7XHJcbiAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocGxheUJvb2xlYW4pIHtcclxuICAgICAgICAgICAgICAgICAgIC8vbWVhc3VyZSBleGVjdXRpb24gdGltZVxyXG4gICAgICAgICAgICAgICAgICAgLy8gICBsZXQgdDEgPSBwZXJmb3JtYW5jZS5ub3coKTtcclxuICAgICAgICAgICAgICAgICAgIC8vICAgY29uc29sZS5sb2codDEgLSB0MCk7IC8vIGluIG1pbGxpc2Vjb25kc1xyXG4gICAgICAgICAgICAgICAgICAgdGhpcy5kcmF3KCk7XHJcbiAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICB9LFxyXG4gICAgICAgICAgIHRpbWVUb1dhaXQpO1xyXG4gICB9XHJcbiAgIGRyYXdEZW5kcm9ncmFtKCkge1xyXG4gICAgICAgLy8gZ2V0IHRoZSBhY3RpdmUgZGVuZHJvZ3JhbVxyXG4gICAgICAgLy9pZCA9ICQoJy5zaG93LWRlbmRyb2dyYW0uYnRuLXByaW1hcnknKS5hdHRyKCdkYXRhJyk7XHJcbiAgICAgICAvLyBpZiBkYXRhIGlzIGF2YWlhYmxlIGRyYXcgaGllcmFyY2h5IGNsdXN0ZXJzIGFuZCBhIGJ1dHRvbiBpcyBhY3RpdmUgc2VsY3RlZFxyXG4gICAgICAgaWYgKCEkLmlzRW1wdHlPYmplY3QobmV0d29ya0hpZXJhcmNoeSkgJiYgdGhpcy5pZCkge1xyXG4gICAgICAgICAgIC8vIGdldCB0aGUgZGF0YSBhbmQgdHJhbnNmb3JtIGl0XHJcbiAgICAgICAgICAgbGV0IHRyZWVEYXRhID0gbmV0d29ya0hpZXJhcmNoeVsnaCcgKyB0aGlzLmlkXVt0aGlzLmluZGV4VGltZV07XHJcbiAgICAgICAgICAgbGV0IG5vZGVzID0gZDMuaGllcmFyY2h5KHRyZWVEYXRhLCBmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgICAgIHJldHVybiBkLmNoaWxkcmVuO1xyXG4gICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgIC8vIHNraXAgdGhlIHJvb3Qgbm9kZVxyXG4gICAgICAgICAgIG5vZGVzID0gbm9kZXMuY2hpbGRyZW5bMF07XHJcbiAgICAgICAgICAgLy8gY29sbGFwc2UgdGhlIHRyZWVcclxuICAgICAgICAgICBub2Rlcy5jaGlsZHJlbi5mb3JFYWNoKGNvbGxhcHNlKTtcclxuXHJcbiAgICAgICAgICAgLy8gbWFwcyB0aGUgbm9kZSBkYXRhIHRvIHRoZSB0cmVlIGxheW91dFxyXG4gICAgICAgICAgIG5vZGVzID0gdHJlZW1hcChub2Rlcyk7XHJcbiAgICAgICAgICAgY29uc29sZS5sb2cobm9kZXMpO1xyXG5cclxuICAgICAgICAgICAvLyBoaWRlIGlmIG5vIG5ldHdvcmsgaXMgY2hvb3NlblxyXG4gICAgICAgICAgIGlmICgkKCcuc2hvdy1kZW5kcm9ncmFtLmJ0bi1wcmltYXJ5JykubGVuZ3RoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAvLyBzZXQgdGhlIG5ldyBzbGlkZXIgbWF4XHJcbiAgICAgICAgICAgICAgICQoJyNkZW5kcm9ncmFtLXBhbmVsLWxldmVsLXNsaWRlcicpXHJcbiAgICAgICAgICAgICAgICAgICAuc2xpZGVyKCdvcHRpb24nLCAnbWF4JywgKG5vZGVzWydoZWlnaHQnXSAtIDEpKVxyXG4gICAgICAgICAgICAgICAgICAgLnNsaWRlcigndmFsdWUnLCBoaWVyYXJjaHlMZXZlbHNbJ2gnICsgdGhpcy5pZF0pO1xyXG5cclxuICAgICAgICAgICAgICAgLy8gREFUQSBKT0lOIC0gbGlua3MgKGVkZ2VzKVxyXG4gICAgICAgICAgICAgICBsZXQgbGluayA9IHRoaXMuem9vbUdyb3VwXHJcbiAgICAgICAgICAgICAgICAgICAuc2VsZWN0QWxsKCdwYXRoLmxpbmsnKVxyXG4gICAgICAgICAgICAgICAgICAgLmRhdGEobm9kZXMuZGVzY2VuZGFudHMoKS5zbGljZSgxKSk7XHJcblxyXG4gICAgICAgICAgICAgICAvLyBFTlRFUlxyXG4gICAgICAgICAgICAgICBsaW5rXHJcbiAgICAgICAgICAgICAgICAgICAuZW50ZXIoKVxyXG4gICAgICAgICAgICAgICAgICAgLmFwcGVuZCgncGF0aCcpXHJcbiAgICAgICAgICAgICAgICAgICAuYXR0cignY2xhc3MnLCAnbGluaycpXHJcbiAgICAgICAgICAgICAgICAgICAuYXR0cignZCcsIGRpYWdvbmFsTGluZXMpO1xyXG5cclxuICAgICAgICAgICAgICAgLy8gVHJhbnNpdGlvbiBsaW5rcyB0byB0aGVpciBuZXcgcG9zaXRpb24uXHJcbiAgICAgICAgICAgICAgIGxpbmtcclxuICAgICAgICAgICAgICAgICAgIC5hdHRyKCdkJywgZGlhZ29uYWxMaW5lcyk7XHJcblxyXG4gICAgICAgICAgICAgICAvLyBFWElUXHJcbiAgICAgICAgICAgICAgIGxpbmsuZXhpdCgpXHJcbiAgICAgICAgICAgICAgICAgICAucmVtb3ZlKCk7XHJcblxyXG4gICAgICAgICAgICAgICAvLyBEQVRBIEpPSU4gLSBub2Rlc1xyXG4gICAgICAgICAgICAgICAvLyBhZGRzIGVhY2ggbm9kZSBhcyBhIGdyb3VwXHJcbiAgICAgICAgICAgICAgIGxldCBub2RlID0gdGhpcy56b29tR3JvdXBcclxuICAgICAgICAgICAgICAgICAgIC5zZWxlY3RBbGwoJy5ub2RlJylcclxuICAgICAgICAgICAgICAgICAgIC5kYXRhKG5vZGVzLmRlc2NlbmRhbnRzKCkpO1xyXG5cclxuICAgICAgICAgICAgICAgLy8gYWRkIHRoZSBncm91cHMgdG8gdGhlIGRlbmRncm9ncmFtXHJcbiAgICAgICAgICAgICAgIHZhciBub2RlRW50ZXIgPSBub2RlLmVudGVyKClcclxuICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJ2cnKVxyXG4gICAgICAgICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgZnVuY3Rpb24oZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnbm9kZScgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAoZC5jaGlsZHJlbiA/ICcgbm9kZS0taW50ZXJuYWwnIDogJyBub2RlLS1sZWFmJyk7XHJcbiAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGZ1bmN0aW9uKGQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3RyYW5zbGF0ZSgnICsgZC54ICsgJywnICsgZC55ICsgJyknO1xyXG4gICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAvLyBFTlRFUiAtIGFwcGVuZCBmb3IgZWFjaCBncm91cCBhIG5vZGUgKGNpcmNsZSlcclxuICAgICAgICAgICAgICAgLy8gd2l0aCBoaWdobGlnaHRpbmcgZm9yIHRoZSBhY3RpdmUgY2hvb3NlbiBsZXZlbFxyXG4gICAgICAgICAgICAgICBub2RlRW50ZXIuYXBwZW5kKCdjaXJjbGUnKVxyXG4gICAgICAgICAgICAgICAgICAgLmF0dHIoJ3InLCAoZCk9PntcclxuICAgICAgICAgICAgICAgICAgICAgICBpZiAoZFsnZGVwdGgnXSA9PT0gaGllcmFyY2h5TGV2ZWxzWydoJyArIHRoaXMuaWRdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiA0MCArIGQuZGF0YS5uYW1lLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMjAgKyBkLmRhdGEubmFtZS5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsIChkKT0+e1xyXG4gICAgICAgICAgICAgICAgICAgICAgIGlmIChkWydkZXB0aCddID09PSBoaWVyYXJjaHlMZXZlbHNbJ2gnICsgdGhpcy5pZF0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdhY3RpdmUtbGV2ZWwnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAuYXR0cignaWQnLCAoZCk9PntcclxuICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2gnICsgZFsnZGF0YSddWyduYW1lJ10udG9TdHJpbmcoKS5oYXNoQ29kZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgIC8vIFRPRE8gZmluZCBhIG5pY2UgZnVuY3Rpb24gZm9yIHRoZSBvbiBjbGljayBtZXRob2RcclxuICAgICAgICAgICAgICAgICAgIC5vbignY2xpY2snLCBjbGljaylcclxuICAgICAgICAgICAgICAgICAgIC5vbignbW91c2VvdmVyJywgZnVuY3Rpb24oZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgIC8vIHRvb2x0aXAgcG9zaXRpb24gYW5kIHRleHRcclxuICAgICAgICAgICAgICAgICAgICAgICB0b29sdGlwRGl2XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zdHlsZSgnbGVmdCcsIChkMy5ldmVudC5wYWdlWCArIDUpICsgJ3B4JylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgLnN0eWxlKCd0b3AnLCAoZDMuZXZlbnQucGFnZVkgKyA1KSArICdweCcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zdHlsZSgnb3BhY2l0eScsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgIHRvb2x0aXBEaXYuc2VsZWN0KCcudG9vbHRpcC1zcGFuJykuaHRtbChkWydkYXRhJ11bJ25hbWUnXS50b1N0cmluZygpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAvLyBhZGQgaGlnaGxpZ2h0IGluIHRoZSBzcGF0aWFsIHZpZXdcclxuICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGUgdW5kaW9uIG9mIHRoZSBwYXRocyBtYWtlcyB0aGlzIGNvbXBsaWNhdGVkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgYWRkSGlnaGxpZ2h0U3BhdGlhbFZpZXcoZFsnZGF0YSddWyduYW1lJ10pO1xyXG4gICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgIC5vbignbW91c2VvdXQnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICB0b29sdGlwRGl2LnRyYW5zaXRpb24oKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAuZHVyYXRpb24oNTAwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAuc3R5bGUoJ29wYWNpdHknLCAwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAvLyByZW1vdmUgaGlnaGxpZ2h0IGluIHRoZSBzcGF0aWFsIHZpZXdcclxuICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVIaWdobGlnaHRTcGF0aWFsVmlldygpO1xyXG4gICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAvLyBhZGQgdGhlIHRleHQgLSAjIG51bWJlciBvZiBhbmltYWxzIGluIHRoZSBjbHVzdGVyXHJcbiAgICAgICAgICAgICAgIG5vZGVFbnRlci5hcHBlbmQoJ3RleHQnKVxyXG4gICAgICAgICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2RlbmRyb2dyYW0tdGV4dCcpXHJcbiAgICAgICAgICAgICAgICAgICAuYXR0cigneCcsIDE1MClcclxuICAgICAgICAgICAgICAgICAgIC5hdHRyKCd5JywgLTE1MClcclxuICAgICAgICAgICAgICAgICAgIC50ZXh0KChkKT0+e1xyXG4gICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkLmRhdGEubmFtZS5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgIC8vIFVQREFURSAtLSB1cGRhdGUgdGhlIGdyb3Vwc1xyXG4gICAgICAgICAgICAgICBub2RlRW50ZXJcclxuICAgICAgICAgICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCAoZCk9PntcclxuICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3RyYW5zbGF0ZSgnICsgZC54ICsgJywnICsgZC55ICsgJyknO1xyXG4gICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAvLyB1cGRhZSB0aGUgbm9kZSBhbmQgY2lyY2xlc1xyXG4gICAgICAgICAgICAgICAvLyB3aXRoIGFjdGl2ZS1sZXZlbCBmdW5jdGlvbiB0byBoaWdobGlnaHQgd2hpY2ggbGV2ZWwgaXMgY2hvc2VuXHJcbiAgICAgICAgICAgICAgIG5vZGVcclxuICAgICAgICAgICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCAoZCk9PntcclxuICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3RyYW5zbGF0ZSgnICsgZC54ICsgJywnICsgZC55ICsgJyknO1xyXG4gICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgIC5zZWxlY3QoJ2NpcmNsZScpXHJcbiAgICAgICAgICAgICAgICAgICAuYXR0cigncicsIChkKT0+e1xyXG4gICAgICAgICAgICAgICAgICAgICAgIGlmIChkWydkZXB0aCddID09PSBoaWVyYXJjaHlMZXZlbHNbJ2gnICt0aGlzLmlkXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gNDAgKyBkLmRhdGEubmFtZS5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDIwICsgZC5kYXRhLm5hbWUubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAuYXR0cignY2xhc3MnLCAoZCk9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRbJ2RlcHRoJ10gPT09IGhpZXJhcmNoeUxldmVsc1snaCcgK3RoaXMuaWRdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdhY3RpdmUtbGV2ZWwnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coKCdoJyArIGRbJ2RhdGEnXVsnbmFtZSddLnRvU3RyaW5nKCkuaGFzaENvZGUoKSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2FjdGl2ZS1sZXZlbCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAuYXR0cignaWQnLCAoZCk9PntcclxuICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2gnICsgZFsnZGF0YSddWyduYW1lJ10udG9TdHJpbmcoKS5oYXNoQ29kZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAvLyB1cGRhdGUgdGhlIHRleHQgb2YgbnVtYmVyIG9mIGVudGl0aWVzXHJcbiAgICAgICAgICAgICAgIG5vZGUuc2VsZWN0KCd0ZXh0JylcclxuICAgICAgICAgICAgICAgICAgIC50ZXh0KChkKT0+e1xyXG4gICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkLmRhdGEubmFtZS5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgIC8vIEVYSVRcclxuICAgICAgICAgICAgICAgbm9kZS5leGl0KClcclxuICAgICAgICAgICAgICAgICAgIC5yZW1vdmUoKTtcclxuXHJcbiAgICAgICAgICAgICAgIC8vIGNvbG9yIHRoZSBkZW5kcm9ncmFtIG5vZGVzIHVzaW5nIHRoZSBzdGFuZGFyZERldmlhdGlvbiBpbiB0aGUgY2x1c3RlclxyXG4gICAgICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMoaGllcmFyY2h5R3JvdXBTdGRldikubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAvLyBzaG93IHRoZSBsZWdlbmQgZm9yIHRoZSBjb2xvcmluZ1xyXG4gICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coaGllcmFyY2h5R3JvdXBTdGRldik7XHJcbiAgICAgICAgICAgICAgICAgICAvLyBUT0RPIGxlZ2VuZCBoZXJlXHJcbiAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnSlVNUFMgSEVSRScpO1xyXG4gICAgICAgICAgICAgICAgICAgaWYgKCQoJyNkZW5kcm9ncmFtLWxlZ2VuZCcpLmNzcygnZGlzcGxheScpID09ICdub25lJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICQoJyNkZW5kcm9ncmFtLWxlZ2VuZCcpLnNob3coKTtcclxuICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgIC8vIElNUE9SVEFOVCAtIGFzeW5jIHByb2JsZW1zXHJcbiAgICAgICAgICAgICAgICAgICAvLyBUT0RPIHNvbHZlIHRoaXMgLSB2ZXJ5IHNsb3dcclxuICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCk9PntcclxuICAgICAgICAgICAgICAgICAgICAgICBub2RlLnNlbGVjdCgnY2lyY2xlJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgLnN0eWxlKCdmaWxsJywgZnVuY3Rpb24oZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coaGllcmFyY2h5R3JvdXBTdGRldik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygoJ2gnICsgZFsnZGF0YSddWyduYW1lJ10udG9TdHJpbmcoKS5oYXNoQ29kZSgpKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygoJ2gnICsgZFsnZGF0YSddWyduYW1lJ10udG9TdHJpbmcoKS5oYXNoQ29kZSgpKSBpbiBoaWVyYXJjaHlHcm91cFN0ZGV2KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29sb3IgdGhlIG5vZGVzIGJ5IGNhbGN1bGF0aW5nIHRoZSBzdGFuZGFyZERldmlhdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZm9yIGVhY2ggY2x1c3RlclxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gb25seSBhY3RpdmUgaXMgc2hvdyBpbiBjbHVzdGVyIGlzIGNob29zZW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoJ2gnICsgZFsnZGF0YSddWyduYW1lJ10udG9TdHJpbmcoKS5oYXNoQ29kZSgpKSBpbiBoaWVyYXJjaHlHcm91cFN0ZGV2KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2hlbGxvJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coc3RhbmRhcmREZXZpYXRpb24oaGllcmFyY2h5R3JvdXBTdGRldlsoJ2gnICsgZFsnZGF0YSddWyduYW1lJ10udG9TdHJpbmcoKS5oYXNoQ29kZSgpKV0pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RhbmRhcmREZXZpYXRpb25Db2xvclNjYWxlKHN0YW5kYXJkRGV2aWF0aW9uKGhpZXJhcmNoeUdyb3VwU3RkZXZbKCdoJyArIGRbJ2RhdGEnXVsnbmFtZSddLnRvU3RyaW5nKCkuaGFzaENvZGUoKSldKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRbJ2RlcHRoJ10gIT09IGhpZXJhcmNoeUxldmVsc1snaCcgK3RoaXMuaWRdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJyMwMDAnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgIH0sIDI1MCk7XHJcbiAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoJCgnI2RlbmRyb2dyYW0tbGVnZW5kJykuY3NzKCdkaXNwbGF5JykgIT09ICdub25lJykge1xyXG4gICAgICAgICAgICAgICAgICAgJCgnI2RlbmRyb2dyYW0tbGVnZW5kJykuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgfVxyXG4gICAgICAgfVxyXG4gICAgICAgaWYgKCEkLmlzRW1wdHlPYmplY3QobmV0d29ya0hpZXJhcmNoeSkpIHtcclxuICAgICAgICAgICAvLyBkcmF3IHRoZSBoaWVyYXJjaHkgaW4gc3BhdGlhbCB2aWV3XHJcbiAgICAgICAgICAgZHJhd0hpZXJhcmNoeSgpO1xyXG4gICAgICAgfVxyXG4gICB9XHJcblxyXG4gICBkZWNpbmRleFRpbWUoKSB7XHJcbiAgICAgICB0aGlzLmluZGV4VGltZSA9IHRoaXMuaW5kZXhUaW1lIC0gMTtcclxuICAgfVxyXG4gfVxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBTcGF0aWFsVmlldyBleHRlbmRzIERyYXdlcntcclxuICBjb25zdHJ1Y3RvcihkYXRhKXtcclxuICAgIHN1cGVyKGRhdGEpO1xyXG4gICAgdGhpcy50YW5rV2lkdGggPSAwO1xyXG4gICAgdGhpcy50YW5rSGVpZ2h0PTA7XHJcbiAgICB0aGlzLnNwYXRpYWxWaWV3SW5pdCgpO1xyXG4gIH1cclxuICBzcGF0aWFsVmlld0luaXQoKXtcclxuXHJcbiAgICAgIGxldCBtaW5Qb2ludCA9IHBhcmFtZXRlcnNbJ21pbiddWydnZW9tZXRyeSddWydjb29yZGluYXRlcyddO1xyXG4gICAgICBsZXQgbWF4UG9pbnQgPSBwYXJhbWV0ZXJzWydtYXgnXVsnZ2VvbWV0cnknXVsnY29vcmRpbmF0ZXMnXTtcclxuICAgICAgLy8gbGV0IGNvb3JkaW5hdGVPcmlnaW4gPSBwYXJhbWV0ZXJzWydjb29yZGluYXRlX29yaWdpbiddWydnZW9tZXRyeSddWydjb29yZGluYXRlcyddO1xyXG4gICAgICAvLyB3aWR0aCA9IHdpZHRoICoxLjAyIC0tPiBzbyB0aGVyZSBpcyBhIG1hcmdpbiBpbiB0aGUgc3BhdGlhbCB2aWV3IHdoZXJlIG5vIGFuaW1hbCBpcyBldmVyXHJcbiAgICAgIHRoaXMudGFua1dpZHRoID0gKG1heFBvaW50WzBdIC0gbWluUG9pbnRbMF0pICogMS4wMjtcclxuICAgICAgdGhpcy50YW5rSGVpZ2h0ID0gKG1heFBvaW50WzFdIC0gbWluUG9pbnRbMV0pICogMS4wMjtcclxuICAgICAgLy9YIGFuZCBZIGF4aXNcclxuICAgICAgbGV0IHggPSBkMy5zY2FsZUxpbmVhcigpXHJcbiAgICAgICAgICAuZG9tYWluKFttaW5Qb2ludFswXSwgbWF4UG9pbnRbMF1dKVxyXG4gICAgICAgICAgLnJhbmdlKFttaW5Qb2ludFswXSwgbWF4UG9pbnRbMF1dKTtcclxuXHJcbiAgICAgIGxldCB4QXhpcyA9IGQzLmF4aXNCb3R0b20oeClcclxuICAgICAgICAgIC50aWNrcygxMClcclxuICAgICAgICAgIC50aWNrU2l6ZSgxMClcclxuICAgICAgICAgIC50aWNrUGFkZGluZyg1KTtcclxuXHJcbiAgICAgIGxldCB5ID0gZDMuc2NhbGVMaW5lYXIoKVxyXG4gICAgICAgICAgLmRvbWFpbihbbWluUG9pbnRbMV0sIG1heFBvaW50WzFdXSlcclxuICAgICAgICAgIC5yYW5nZShbbWluUG9pbnRbMV0sIG1heFBvaW50WzFdXSk7XHJcblxyXG4gICAgICBsZXQgeUF4aXMgPSBkMy5heGlzUmlnaHQoeSlcclxuICAgICAgICAgIC50aWNrcyg3KVxyXG4gICAgICAgICAgLnRpY2tTaXplKDEwKVxyXG4gICAgICAgICAgLnRpY2tQYWRkaW5nKDUpO1xyXG5cclxuICAgICAgLy8gWk9PTUlORyBBTkQgUEFOTklORyBTVFVGRlxyXG5cclxuICAgICAgbGV0IHpvb20gPSBkMy56b29tKClcclxuICAgICAgICAgIC5zY2FsZUV4dGVudChbMSwgNl0pXHJcbiAgICAgICAgICAub24oJ3pvb20nLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgLy9jb25zdHJhaW5lZCB6b29taW5nXHJcbiAgICAgICAgICAgICAgLy8gbW9kaWZ5IHRoZSB0cmFuc2xhdGUgc28gdGhhdCBpdCBuZXZlciBleGl0cyB0aGUgdGFua1xyXG4gICAgICAgICAgICAgIGQzLmV2ZW50LnRyYW5zZm9ybS54ID0gTWF0aC5taW4oMCwgdGhpcy50YW5rV2lkdGggKiAoZDMuZXZlbnQudHJhbnNmb3JtLmsgLSAxKSxcclxuICAgICAgICAgICAgICAgICAgTWF0aC5tYXgodGhpcy50YW5rV2lkdGggKiAoMSAtIGQzLmV2ZW50LnRyYW5zZm9ybS5rKSwgZDMuZXZlbnQudHJhbnNmb3JtLngpKTtcclxuXHJcbiAgICAgICAgICAgICAgZDMuZXZlbnQudHJhbnNmb3JtLnkgPSBNYXRoLm1pbigwLCB0aGlzLnRhbmtIZWlnaHQgKiAoZDMuZXZlbnQudHJhbnNmb3JtLmsgLSAxKSxcclxuICAgICAgICAgICAgICAgICAgTWF0aC5tYXgodGhpcy50YW5rSGVpZ2h0ICogKDEgLSBkMy5ldmVudC50cmFuc2Zvcm0uayksIGQzLmV2ZW50LnRyYW5zZm9ybS55KSk7XHJcblxyXG4gICAgICAgICAgICAgIC8vIHRyYW5zbGF0ZSBhbmQgc2NhbGVcclxuICAgICAgICAgICAgICB0aGlzLnpvb21Hcm91cC5hdHRyKCd0cmFuc2Zvcm0nLCBkMy5ldmVudC50cmFuc2Zvcm0pO1xyXG5cclxuICAgICAgICAgICAgICAvLyByZXNjYWxlIHRoZSBheGlzXHJcbiAgICAgICAgICAgICAgZ1hheGlzLmNhbGwoeEF4aXMuc2NhbGUoZDMuZXZlbnQudHJhbnNmb3JtLnJlc2NhbGVYKHgpKSk7XHJcbiAgICAgICAgICAgICAgZ1lheGlzLmNhbGwoeUF4aXMuc2NhbGUoZDMuZXZlbnQudHJhbnNmb3JtLnJlc2NhbGVZKHkpKSk7XHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgIC8vdGhlIHN2ZyBjb250YWluZXJcclxuXHJcblxyXG4gICAgICAvKiBkZXBlbmRzIG9uIHN2ZyByYXRpbywgZm9yIGUuZyAxMjQwLzE5MDAgPSAwLjY1IHNvIHBhZGRpbmctYm90dG9tID0gNjUlICovXHJcbiAgICAgIGxldCBwZXJjZW50YWdlID0gTWF0aC5jZWlsKCh0aGlzLnRhbmtIZWlnaHQgLyB0aGlzLnRhbmtXaWR0aCkgKiAxMDApO1xyXG4gICAgICAkKCcjbWFpbi12aXMnKS5hcHBlbmQoJCgnPHN0eWxlPiNtYWluLXZpczo6YWZ0ZXIge3BhZGRpbmctdG9wOiAnICsgcGVyY2VudGFnZSArICclO2Rpc3BsYXk6IGJsb2NrO2NvbnRlbnQ6IFwiXCI7fTwvc3R5bGU+ICcpKTtcclxuXHJcbiAgICAgIHRoaXMuem9vbUdyb3VwID0gdGhpcy5zdmdDb250YWluZXIuYXBwZW5kKCdzdmc6ZycpO1xyXG5cclxuICAgICAgLy8gVmlzdWFsaXplIHRoZSBiYWNrZ3JvdW5kIGltYWdlIGlmIGl0IGlzIHVwbG9hZGVkXHJcbiAgICAgIGlmIChwYXJhbWV0ZXJzLmJhY2tncm91bmRfaW1hZ2UpIHtcclxuICAgICAgICAgIHRoaXMuem9vbUdyb3VwXHJcbiAgICAgICAgICAgICAgLmFwcGVuZCgnaW1hZ2UnKVxyXG4gICAgICAgICAgICAgIC5hdHRyKCd4bGluazpocmVmJywgJy8nICsgcGFyYW1ldGVycy5iYWNrZ3JvdW5kX2ltYWdlKVxyXG4gICAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsICdiYWNrZ3JvdW5kLWltYWdlJylcclxuICAgICAgICAgICAgICAuYXR0cignaGVpZ2h0JywgdGhpcy50YW5rSGVpZ2h0KVxyXG4gICAgICAgICAgICAgIC5hdHRyKCd3aWR0aCcsIHRoaXMudGFua1dpZHRoKVxyXG4gICAgICAgICAgICAgIC5hdHRyKCd4JywgJzAnKVxyXG4gICAgICAgICAgICAgIC5hdHRyKCd5JywgJzAnKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy9hcHBlbmQgdGhlIHRhbmsgZ3JvdXAgd2l0aCBhIHRyYW5zZm9ybWF0aW9uIHdoaWNoIHJvdGF0ZXMgdGhlIHkgYXhpc1xyXG4gICAgICB0aGlzLnRhbmsgPSB0aGlzLnpvb21Hcm91cC5hcHBlbmQoJ3N2ZzpnJylcclxuICAgICAgICAgIC5hdHRyKCdjbGFzcycsICd0YW5rJylcclxuICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICBsZXQgeCA9IHBhcmFtZXRlcnMuaW52ZXJ0ZWRfeCA/IC0xIDogMTtcclxuICAgICAgICAgICAgICBsZXQgeSA9IHBhcmFtZXRlcnMuaW52ZXJ0ZWRfeSA/IC0xIDogMTtcclxuICAgICAgICAgICAgICByZXR1cm4gJ3NjYWxlKCcgKyB4ICsgJywnICsgeSArICcpJztcclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgLy9hZGQgdGhlIGNlbnRyb2lkXHJcbiAgICAgIHRoaXMudGFuay5hcHBlbmQoJ2cnKVxyXG4gICAgICAgICAgLmF0dHIoJ2lkJywgJ2ctY2VudHJvaWQnKVxyXG4gICAgICAgICAgLmFwcGVuZCgnY2lyY2xlJylcclxuICAgICAgICAgIC5hdHRyKCdjbGFzcycsICdjZW50cm9pZCcpXHJcbiAgICAgICAgICAuYXR0cigncicsIDYpXHJcbiAgICAgICAgICAuYXR0cignY3gnLCAwKVxyXG4gICAgICAgICAgLmF0dHIoJ2N5JywgMCk7XHJcblxyXG4gICAgICAvLyBhcnJvdyBmb3IgdGhlIGNlbnRyb2lkIGRpcmVjdGlvblxyXG4gICAgICB0aGlzLnRhbmsuc2VsZWN0KCcjZy1jZW50cm9pZCcpXHJcbiAgICAgICAgICAuYXBwZW5kKCdzdmc6ZGVmcycpXHJcbiAgICAgICAgICAuYXBwZW5kKCdzdmc6bWFya2VyJylcclxuICAgICAgICAgIC5hdHRyKCdpZCcsICdjZW50cm9pZC1hcnJvdycpXHJcbiAgICAgICAgICAuYXR0cigncmVmWCcsIDIpXHJcbiAgICAgICAgICAuYXR0cigncmVmWScsIDYpXHJcbiAgICAgICAgICAuYXR0cignbWFya2VyV2lkdGgnLCAxMylcclxuICAgICAgICAgIC5hdHRyKCdtYXJrZXJIZWlnaHQnLCAxMylcclxuICAgICAgICAgIC5hdHRyKCdvcmllbnQnLCAnYXV0bycpXHJcbiAgICAgICAgICAuYXBwZW5kKCdzdmc6cGF0aCcpXHJcbiAgICAgICAgICAuYXR0cignZCcsICdNMiwyIEwyLDExIEwxMCw2IEwyLDInKTtcclxuXHJcbiAgICAgIC8vIEFwcGVuZCB0aGUgbGluZSBmb3IgdGhlIGRpcmVjdGlvbiBhcnJvd1xyXG4gICAgICB0aGlzLnRhbmsuc2VsZWN0KCcjZy1jZW50cm9pZCcpXHJcbiAgICAgICAgICAuYXBwZW5kKCdsaW5lJylcclxuICAgICAgICAgIC5hdHRyKCdpZCcsICdjZW50cm9pZC1saW5lJylcclxuICAgICAgICAgIC5hdHRyKCdtYXJrZXItZW5kJywgJ3VybCgjY2VudHJvaWQtYXJyb3cpJyk7XHJcblxyXG4gICAgICAvL2FwcGVuZCBuZXR3b3JrICBncm91cFxyXG4gICAgICB0aGlzLnRhbmsuYXBwZW5kKCdnJylcclxuICAgICAgICAgIC5hdHRyKCdpZCcsICduZXR3b3JrLWdyb3VwJyk7XHJcblxyXG4gICAgICAvL2FwcGVuZCBkZWxhdW5heS10cmlhbmd1bGF0aW9uIGdyb3VwXHJcbiAgICAgIHRoaXMudGFuay5hcHBlbmQoJ2cnKVxyXG4gICAgICAgICAgLmF0dHIoJ2lkJywgJ2RlbGF1bmF5LXRyaWFuZ3VsYXRpb24tZ3JvdXAnKTtcclxuXHJcbiAgICAgIC8vYXBwZW5kIHZvcm9ub2kgZ3JvdXBcclxuICAgICAgdGhpcy50YW5rLmFwcGVuZCgnZycpXHJcbiAgICAgICAgICAuYXR0cignaWQnLCAndm9ybm9pLWdyb3VwJyk7XHJcblxyXG4gICAgICAvL2FwcGVuZCB0aGUgZnJhbWUgdGltZSB0ZXh0XHJcbiAgICAgIHRoaXMuc3ZnQ29udGFpbmVyLmFwcGVuZCgndGV4dCcpXHJcbiAgICAgICAgICAuYXR0cignY2xhc3MnLCAnZnJhbWUtdGV4dCcpXHJcbiAgICAgICAgICAuYXR0cigneCcsIDMwKVxyXG4gICAgICAgICAgLmF0dHIoJ3knLCAzMClcclxuICAgICAgICAgIC50ZXh0KCctLSA6IC0tIDogLS0gJyk7XHJcblxyXG4gICAgICAvLyBhZGQgdGhlIGF4aXNcclxuICAgICAgbGV0IGdYYXhpcyA9IHRoaXMuc3ZnQ29udGFpbmVyLmFwcGVuZCgnZycpXHJcbiAgICAgICAgICAuYXR0cignY2xhc3MnLCAneCBheGlzJylcclxuICAgICAgICAgIC5jYWxsKHhBeGlzKTtcclxuXHJcbiAgICAgIGxldCBnWWF4aXMgPSB0aGlzLnN2Z0NvbnRhaW5lci5hcHBlbmQoJ2cnKVxyXG4gICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ3kgYXhpcycpXHJcbiAgICAgICAgICAuY2FsbCh5QXhpcyk7XHJcblxyXG4gICAgICAvLyBpbml0IHN0dWZmIGZyb20gb3RoZXIgbW9kdWxlc1xyXG4gICAgICBpbml0VG9vbHRpcCgpO1xyXG4gICAgICBpbml0U2xpZGVycygpO1xyXG4gICAgICBhZGRTcGF0aWFsVmlld0dyb3VwKCk7XHJcbiAgICAgIGluaXRDb2xvclBpY2tlcigpO1xyXG4gICAgICB2YXIgbGluZWNoYXJ0ID0gbmV3IExpbmVDaGFydChzd2FybURhdGEpO1xyXG4gICAgICAvL3ZhciBsaXN0ZW5lciA9IG5ldyBMaXN0ZW5lcigpO1xyXG4gICAgICAvL3ZhciBkZW5kcm9ncmFtID0gbmV3IERlbmRyb2dyYW0oKTtcclxuICAgICAgbWFrZVJlc2l6YWJsZSh0aGlzLnRhbmtIZWlnaHQsIHRoaXMudGFua1dpZHRoKTtcclxuICAgICAgZGVmYXVsdENvbmZpZygpO1xyXG4gICAgICAvLyBzdGFydCB0aGUgYW5pbWF0aW9uXHJcbiAgICAgIHRoaXMuZHJhdygpO1xyXG4gIH07XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbn1cclxuXHJcblxyXG5cclxuXHJcbmNsYXNzIENoYXJ0IGV4dGVuZHMgRHJhd2VyIHtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihkYXRhKSB7XHJcbiAgICBzdXBlcigpXHJcbiAgICAgIC8vIGxvYWQgaW4gYXJndW1lbnRzIGZyb20gY29uZmlnIG9iamVjdFxyXG4gICAgdGhpcy5zd2FybURhdGEgPSBkYXRhO1xyXG4gICAgdGhpcy5zd2FybV9mZWF0dXJlcyA9IE9iamVjdC5rZXlzKHRoaXMuc3dhcm1EYXRhWzBdKTtcclxuICAgIHRoaXMubGluZUNoYXJ0V2lkdGggPSA1MDAwO1xyXG4gICAgdGhpcy50cmVuZENoYXJ0c0VsZW0gPSBbJ2xvd2VyLW91dGVyLWFyZWEnLCAnbG93ZXItaW5uZXItYXJlYScsICdtZWRpYW4tbGluZScsICd1cHBlci1pbm5lci1hcmVhJywgJ3VwcGVyLW91dGVyLWFyZWEnXTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICogaW5pdCB0aGUgbGluZSBjaGFydCBhbmQgYWxzbyB0aGUgdHJlbmQgY2hhcnRcclxuICAgICAqL1xyXG5cclxuXHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBMaW5lQ2hhcnQgZXh0ZW5kcyBDaGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvcihkYXRhKXtcclxuICAgIHN1cGVyKGRhdGEpXHJcbiAgICB0aGlzLmxpbmVDaGFydCgpO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBsaW5lQ2hhcnQoKSB7XHJcblxyXG4gICAgICByYXRpbyA9IE1hdGguY2VpbCh0aGlzLnN3YXJtRGF0YS5sZW5ndGggLyB0aGlzLmxpbmVDaGFydFdpZHRoKTtcclxuXHJcbiAgICAgIC8vIFN3YXJtIGZlYXR1cmVzIGxpbmUgY2hhcnRcclxuICAgICAgbGV0IGxpbmVDaGFydEhlaWdodCA9IDUwMDsgLy8gdGhlIGxpbmUgY2hhcnQgaGVpZ2h0XHJcbiAgICAgIGxldCBtYXJnaW4gPSB7XHJcbiAgICAgICAgICB0b3A6IDEwLFxyXG4gICAgICAgICAgcmlnaHQ6IDAsXHJcbiAgICAgICAgICBib3R0b206IDEwMCxcclxuICAgICAgICAgIGxlZnQ6IDEwXHJcbiAgICAgIH07XHJcbiAgICAgIGxldCBtYXJnaW5Ub0xlZ2VuZCA9IDUwO1xyXG5cclxuICAgICAgbGV0IHN3YXJtX2ZlYXR1cmVzID0gdGhpcy5zd2FybV9mZWF0dXJlcztcclxuICAgICAgLy8gcmVtb3ZlIHRoZSB0aW1lIGtleVxyXG4gICAgICBsZXQgaW5kZXggPSBzd2FybV9mZWF0dXJlcy5pbmRleE9mKCd0aW1lJyk7XHJcbiAgICAgIHN3YXJtX2ZlYXR1cmVzLnNwbGljZShpbmRleCwgMSk7XHJcblxyXG4gICAgICBsZXQgbGluZUNoYXJ0RGF0YSA9IFtdO1xyXG4gICAgICAvLyBhZ2dyZWdhdGUgYW5kIGF2ZXJhZ2UgdGhlIHN3YXJtIGRhdGEgdG8gdGhpcy5saW5lQ2hhcnRXaWR0aCBwb2ludHMgaW4gdGhlIGxpbmUgY2hhcnRcclxuICAgICAgaWYgKHRoaXMuc3dhcm1EYXRhLmxlbmd0aCA+IHRoaXMubGluZUNoYXJ0V2lkdGgpIHtcclxuICAgICAgICAgIC8vIHRtcCBhcnJheSBmb3IgdGhlIGFnZ3JlZ2F0ZWQgYW5kIGF2ZXJhZ2VkIGZlYXR1cmVzXHJcbiAgICAgICAgICBsZXQgdG1wID0gbmV3IEFycmF5KHN3YXJtX2ZlYXR1cmVzLmxlbmd0aCkuZmlsbCgwKTtcclxuXHJcbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc3dhcm1EYXRhLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgLy8gYWdncmVnYXRlIHRoZSBmZWF0dXJlcyBpbiB0aGUgdGVtcCBhcnJheVxyXG4gICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgc3dhcm1fZmVhdHVyZXMubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgICAgdG1wW2pdICs9IHRoaXMuc3dhcm1EYXRhW2ldW3N3YXJtX2ZlYXR1cmVzW2pdXTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgLy8gaWYgdGhlIHJhdGlvIGlzIHplcm8gdGhlbiBhdmVyYWdlIGl0IGFuZCBzZXQgaXQgdG8gemVyb1xyXG4gICAgICAgICAgICAgIGlmIChpICUgcmF0aW8gPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgbGV0IHRtcF9vYmplY3QgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAndGltZSc6IGkgLyByYXRpb1xyXG4gICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBzd2FybV9mZWF0dXJlcy5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgdG1wW2pdID0gdG1wW2pdIC8gcmF0aW87XHJcbiAgICAgICAgICAgICAgICAgICAgICB0bXBfb2JqZWN0W3N3YXJtX2ZlYXR1cmVzW2pdXSA9IHRtcFtqXTtcclxuICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgbGluZUNoYXJ0RGF0YS5wdXNoKHRtcF9vYmplY3QpO1xyXG4gICAgICAgICAgICAgICAgICB0bXAgPSBuZXcgQXJyYXkoc3dhcm1fZmVhdHVyZXMubGVuZ3RoKS5maWxsKDApO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGxpbmVDaGFydERhdGEgPSB0aGlzLnN3YXJtRGF0YTtcclxuICAgICAgfVxyXG4gICAgICAvL2NvbnNvbGUubG9nKGxpbmVDaGFydERhdGEpO1xyXG4gICAgICB6b29tRnVuY3Rpb24gPSBkMy5zY2FsZUxpbmVhcigpXHJcbiAgICAgICAgICAuZG9tYWluKFswLCBsaW5lQ2hhcnREYXRhLmxlbmd0aF0pXHJcbiAgICAgICAgICAucmFuZ2UoWzAsIHRoaXMubGluZUNoYXJ0V2lkdGhdKTtcclxuXHJcblxyXG4gICAgICAvLyB4IGF4aXMgc2NhbGUgLSBtaW51cyBtYXJnaW5MaW5lQ2hhcnQgIG5lZWRlZFxyXG4gICAgICB4ID0gZDMuc2NhbGVMaW5lYXIoKVxyXG4gICAgICAgICAgLmRvbWFpbihbMCwgbGluZUNoYXJ0RGF0YS5sZW5ndGhdKVxyXG4gICAgICAgICAgLnJhbmdlKFswLCB0aGlzLmxpbmVDaGFydFdpZHRoXSk7XHJcbiAgICAgIGxldCB4MiA9IGQzLnNjYWxlTGluZWFyKClcclxuICAgICAgICAgIC5kb21haW4oWzAsIGxpbmVDaGFydERhdGEubGVuZ3RoXSlcclxuICAgICAgICAgIC5yYW5nZShbMCwgdGhpcy5saW5lQ2hhcnRXaWR0aF0pO1xyXG4gICAgICAvLyBkZWZpbmUgd2hlcmUgdGhlIGF4aXMgaXMgZXRjXHJcbiAgICAgIGxldCB4QXhpcyA9IGQzLmF4aXNCb3R0b20oeClcclxuICAgICAgICAgIC50aWNrcygxMClcclxuICAgICAgICAgIC50aWNrU2l6ZSgxMClcclxuICAgICAgICAgIC50aWNrUGFkZGluZyg1KVxyXG4gICAgICAgICAgLnRpY2tGb3JtYXQoZnVuY3Rpb24oZCkge1xyXG4gICAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKChkICogcmF0aW8pIC8gMTUwMCkgJSA2MCArICc6JyArIE1hdGguZmxvb3IoKGQgKiByYXRpbykgLyBwYXJhbWV0ZXJzWydmcHMnXSkgJSA2MCArICc6OicgKyAoZCAqIHJhdGlvKSAlIHBhcmFtZXRlcnNbJ2ZwcyddO1xyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICAvLyB5IGF4aXMgc2NhbGUgd2hpY2ggaXMgbm9ybWFsaXplZFxyXG4gICAgICB5ID0gZDMuc2NhbGVMaW5lYXIoKVxyXG4gICAgICAgICAgLmRvbWFpbihbMCwgMTAwXSlcclxuICAgICAgICAgIC5yYW5nZShbbGluZUNoYXJ0SGVpZ2h0LCAwXSk7XHJcbiAgICAgIC8vIGRlZmluZSB3aGVyZSB0aGUgYXhpcyBpcyBldGNcclxuICAgICAgbGV0IHlBeGlzID0gZDMuYXhpc0xlZnQoeSlcclxuICAgICAgICAgIC50aWNrcygwKVxyXG4gICAgICAgICAgLnRpY2tTaXplKDEwKVxyXG4gICAgICAgICAgLnRpY2tQYWRkaW5nKDUpO1xyXG5cclxuICAgICAgbGV0IGRyYWdnZWQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIC8vIGRyYWdnZWQgZnVuY3Rpb24gZ2V0IHRoZSBjb29yZGluYXRlcyBhbmQgY2FsY3VsYXRlIHRoZSB0aW1lIG1vbWVudCBmcm9tIHRoaXNcclxuICAgICAgICAgIGxldCBjb29yZHMgPSBkMy5tb3VzZSh0aGlzKTtcclxuICAgICAgICAgIGlmIChjb29yZHNbMF0gPCBtYXJnaW4ubGVmdCB8fCBjb29yZHNbMF0gPiB0aGlzLmxpbmVDaGFydFdpZHRoIHx8IGNvb3Jkc1sxXSA8IDAgfHwgY29vcmRzWzFdID4gbGluZUNoYXJ0SGVpZ2h0KSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgLy8gdG1wIHNjYWxlIHRvIGluY2x1ZGUgdGhlIHpvb20gZmFjdG9yXHJcbiAgICAgICAgICBsZXQgdG1wU2NhbGUgPSBkMy5zY2FsZUxpbmVhcigpXHJcbiAgICAgICAgICAgICAgLmRvbWFpbih6b29tRnVuY3Rpb24ucmFuZ2UoKSlcclxuICAgICAgICAgICAgICAucmFuZ2Uoem9vbUZ1bmN0aW9uLmRvbWFpbigpKTtcclxuICAgICAgICAgIC8vIHNldCB0aGUgbmV3IHRpbWVcclxuICAgICAgICAgIHRoaXMuc2V0SW5kZXhUaW1lKE1hdGguZmxvb3IoKHRtcFNjYWxlKGNvb3Jkc1swXSAtIG1hcmdpbi5sZWZ0KSkgKiByYXRpbykpO1xyXG4gICAgICB9O1xyXG4gICAgICBsZXQgem9vbSA9IGQzLnpvb20oKVxyXG4gICAgICAgICAgLnNjYWxlRXh0ZW50KFsxLCAyMF0pXHJcbiAgICAgICAgICAudHJhbnNsYXRlRXh0ZW50KFtcclxuICAgICAgICAgICAgICBbMCwgMF0sXHJcbiAgICAgICAgICAgICAgW3RoaXMubGluZUNoYXJ0V2lkdGgsIGxpbmVDaGFydEhlaWdodF1cclxuICAgICAgICAgIF0pXHJcbiAgICAgICAgICAuZXh0ZW50KFtcclxuICAgICAgICAgICAgICBbMCwgMF0sXHJcbiAgICAgICAgICAgICAgW3RoaXMubGluZUNoYXJ0V2lkdGgsIGxpbmVDaGFydEhlaWdodF1cclxuICAgICAgICAgIF0pXHJcbiAgICAgICAgICAub24oJ3pvb20nLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAvLyBnZXQgdGhlIHRyYW5zZm9ybSBmYWN0b3JcclxuICAgICAgICAgICAgICBsZXQgdCA9IGQzLmV2ZW50LnRyYW5zZm9ybTtcclxuICAgICAgICAgICAgICAvLyBjaGFuZ2Ugc2NhbGluZyBmdW5jdGlvblxyXG4gICAgICAgICAgICAgIHpvb21GdW5jdGlvbiA9IHguZG9tYWluKHQucmVzY2FsZVgoeDIpLmRvbWFpbigpKTtcclxuICAgICAgICAgICAgICAvLyB6b29tIGVhY2ggYXZhaWFibGUgbGluZVxyXG4gICAgICAgICAgICAgIGZvciAobGV0IGtleSBpbiBsaW5lcykge1xyXG4gICAgICAgICAgICAgICAgICBpZiAobGluZXMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgem9vbUdyb3VwLnNlbGVjdCgoJyMnICsga2V5ICsgJ0xpbmUnKSkuYXR0cignZCcsIGxpbmVzW2tleV0pO1xyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIC8vIHpvb20gdGhlIHRyZW5kIGNoYXJ0c1xyXG4gICAgICAgICAgICAgIGZvciAobGV0IGtleSBpbiB0cmVuZENoYXJ0c1pvb20pIHtcclxuICAgICAgICAgICAgICAgICAgaWYgKHRyZW5kQ2hhcnRzWm9vbS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMudHJlbmRDaGFydHNFbGVtLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgem9vbUdyb3VwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zZWxlY3QoKCcjJyArIGtleSArICdUcmVuZENoYXJ0IC4nICsgdGhpcy50cmVuZENoYXJ0c0VsZW1baV0pKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignZCcsIHRyZW5kQ2hhcnRzWm9vbVtrZXldW3RoaXMudHJlbmRDaGFydHNFbGVtW2ldXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgLy8gcmVzY2FsZSB0aGUgYXhpc1xyXG4gICAgICAgICAgICAgIGdYYXhpcy5jYWxsKHhBeGlzKTtcclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgLy8gbWFrZSB0aGUgc3ZnIHJlc2l6YWJsZVxyXG4gICAgICBsZXQgc3dhcm1MaW5lQ2hhcnQgPSBkMy5zZWxlY3QoJyNzd2FybS12aXMnKVxyXG4gICAgICAgICAgLmNsYXNzZWQoJ3N2Zy1saW5lLWNoYXJ0LWNvbnRhaW5lcicsIHRydWUpXHJcbiAgICAgICAgICAvLyB0byBtYWtlIGl0IHJlc3BvbnNpdmUgd2l0aCBjc3NcclxuICAgICAgICAgIC5hcHBlbmQoJ3N2ZycpXHJcbiAgICAgICAgICAuYXR0cigncHJlc2VydmVBc3BlY3RSYXRpbycsICd4TWluWU1pbiBtZWV0JylcclxuXHJcbiAgICAgICAgICAuYXR0cigndmlld0JveCcsICcwIDAgJyArIHRoaXMubGluZUNoYXJ0V2lkdGggKyAnICcgKyAobGluZUNoYXJ0SGVpZ2h0ICsgbWFyZ2luLmJvdHRvbSkpXHJcbiAgICAgICAgICAvLyBhZGQgdGhlIGNsYXNzIHN2Zy1jb250ZW50XHJcbiAgICAgICAgICAuY2xhc3NlZCgnc3ZnLWNvbnRlbnQnLCB0cnVlKTtcclxuXHJcbiAgICAgIHpvb21Hcm91cCA9IHN3YXJtTGluZUNoYXJ0XHJcbiAgICAgICAgICAuYXBwZW5kKCdzdmc6ZycpXHJcbiAgICAgICAgICAuYXR0cignaWQnLCAnbGluZUNoYXJ0Wm9vbScpXHJcbiAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgnICsgbWFyZ2luLmxlZnQgKyAnLDApJyk7XHJcblxyXG4gICAgICAvLyBhcHBlbmQgYSBncm91cCBmb3IgdGhlIHggYXhpc1xyXG4gICAgICAvLyBhZGQgdGhlIGF4aXNcclxuICAgICAgbGV0IGdYYXhpcyA9IHpvb21Hcm91cC5hcHBlbmQoJ2cnKVxyXG4gICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ3ggYXhpcy1saW5lLWNoYXJ0JylcclxuICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKDAsJyArIGxpbmVDaGFydEhlaWdodCArICcpJylcclxuICAgICAgICAgIC5jYWxsKHhBeGlzKTtcclxuXHJcbiAgICAgIC8vIGFwcGVuZCBhIGdyb3VwIGZvciB0aGUgeSBheGlzXHJcbiAgICAgIHpvb21Hcm91cC5hcHBlbmQoJ2cnKVxyXG4gICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ3kgYXhpcy1saW5lLWNoYXJ0JylcclxuICAgICAgICAgIC5jYWxsKHlBeGlzKTtcclxuXHJcblxyXG4gICAgICAvLyB0aGUgdGltZSBsaW5lIGFwcGVuZCB0aGUgbGluZVxyXG4gICAgICB6b29tR3JvdXAuYXBwZW5kKCdsaW5lJylcclxuICAgICAgICAgIC5hdHRyKCdjbGFzcycsICd0aW1lLWxpbmUnKVxyXG4gICAgICAgICAgLmF0dHIoJ2lkJywgJ2xpbmVDaGFydFRpbWVMaW5lJylcclxuICAgICAgICAgIC5hdHRyKCd4MScsIDApXHJcbiAgICAgICAgICAuYXR0cigneTEnLCAwKVxyXG4gICAgICAgICAgLmF0dHIoJ3gyJywgMClcclxuICAgICAgICAgIC5hdHRyKCd5MicsIGxpbmVDaGFydEhlaWdodCk7XHJcblxyXG4gICAgICAgICAgLy8gY29sb3JzIGZvciB0aGUgbGluZXNcclxuICAgICAgICAgIGxldCBsaW5lX2NvbG9ycyA9IGQzLnNjYWxlT3JkaW5hbChkMy5zY2hlbWVDYXRlZ29yeTEwKTtcclxuICAgICAgICAgIGxldCBsaW5lcyA9IHt9O1xyXG4gICAgICAgICAgLy8gYWRkIHRoZSBsaW5lcyB0byB0aGUgbGluZSBjaGFydFxyXG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzd2FybV9mZWF0dXJlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgIGxldCBtaW4gPSBkMy5taW4obGluZUNoYXJ0RGF0YSwgZnVuY3Rpb24oZCkge1xyXG4gICAgICAgICAgICAgICAgICByZXR1cm4gZFtzd2FybV9mZWF0dXJlc1tpXV07XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgbGV0IG1heCA9IGQzLm1heChsaW5lQ2hhcnREYXRhLCBmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgICAgICAgIHJldHVybiBkW3N3YXJtX2ZlYXR1cmVzW2ldXTtcclxuICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgbGV0IG5vcm1hbGl6YXRpb25TY2FsZSA9IGQzLnNjYWxlTGluZWFyKCkuZG9tYWluKFttaW4sIG1heF0pLnJhbmdlKFswLCAxMDBdKTtcclxuICAgICAgICAgICAgICBsZXQgbGluZSA9IGQzLmxpbmUoKVxyXG4gICAgICAgICAgICAgICAgICAueChmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geChkWyd0aW1lJ10pO1xyXG4gICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAueShmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geShub3JtYWxpemF0aW9uU2NhbGUoZFtzd2FybV9mZWF0dXJlc1tpXV0pKTtcclxuICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgbGluZXNbc3dhcm1fZmVhdHVyZXNbaV1dID0gbGluZTtcclxuICAgICAgICAgICAgICAvL2FwcGVuZCB0aGUgbGluZSB0byB0aGUgbGluZSBjaGFydFxyXG4gICAgICAgICAgICAgIHpvb21Hcm91cC5hcHBlbmQoJ3BhdGgnKVxyXG4gICAgICAgICAgICAgICAgICAuZGF0YShbbGluZUNoYXJ0RGF0YV0pXHJcbiAgICAgICAgICAgICAgICAgIC5hdHRyKCdpZCcsIChzd2FybV9mZWF0dXJlc1tpXSArICdMaW5lJykpXHJcbiAgICAgICAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsICdsaW5lIGxpbmVDaGFydExpbmUnKVxyXG4gICAgICAgICAgICAgICAgICAuc3R5bGUoJ3N0cm9rZScsIGxpbmVfY29sb3JzKGkpKVxyXG4gICAgICAgICAgICAgICAgICAuYXR0cignZCcsIGxpbmUpXHJcbiAgICAgICAgICAgICAgICAgIC5hdHRyKCduYW1lJywgc3dhcm1fZmVhdHVyZXNbaV0pO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICQoJyNsaW5lQ2hhcnRUaW1lTGluZScpLmFwcGVuZFRvKCcjbGluZUNoYXJ0Wm9vbScpO1xyXG4gICAgICAgICAgLy8gYXBwZW5kIHRoZSB6b29tIHJlY3RhbmdsZVxyXG4gICAgICAgICAgem9vbUdyb3VwLmFwcGVuZCgncmVjdCcpXHJcbiAgICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ3pvb20nKVxyXG4gICAgICAgICAgICAgIC5hdHRyKCd3aWR0aCcsIHRoaXMubGluZUNoYXJ0V2lkdGgpXHJcbiAgICAgICAgICAgICAgLmF0dHIoJ2hlaWdodCcsIGxpbmVDaGFydEhlaWdodClcclxuICAgICAgICAgICAgICAuY2FsbCh6b29tKVxyXG4gICAgICAgICAgICAgIC5vbignY2xpY2snLCBkcmFnZ2VkKVxyXG4gICAgICAgICAgICAgIC5jYWxsKGQzLmRyYWcoKVxyXG4gICAgICAgICAgICAgICAgICAub24oJ2RyYWcnLCBkcmFnZ2VkKVxyXG4gICAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAvLyBhcHBlbmQgdGhlIGxlZ2VuZCBmb3IgdGhlIGxpbmUgY2hhcnRcclxuICAgICAgLy8gdmFycyBmb3IgdGhlIGxlZ2VuZFxyXG4gICAgICBsZXQgbGVnZW5kV2lkdGggPSAxMDA7XHJcbiAgICAgIGxldCBsZWdlbmRIZWlnaHQgPSA1MDtcclxuXHJcbiAgICAgIC8vc2VsZWN0IGFsbCB0aGUgbGluZXNcclxuICAgICAgbGV0IGNoYXJ0TGluZXMgPSBkMy5zZWxlY3RBbGwoJy5saW5lJyk7XHJcblxyXG4gICAgICAvL2FwcGVuZCBhIGdyb3VwIGZvciB0aGUgbGVnZW5kXHJcbiAgICAgIHN3YXJtTGluZUNoYXJ0XHJcbiAgICAgICAgICAuYXBwZW5kKCdnJylcclxuICAgICAgICAgIC5hdHRyKCdpZCcsICdsaW5lQ2hhcnRMZWdlbmQnKVxyXG4gICAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoJyArIG1hcmdpbi5ib3R0b20gKyAnLCcgKyAobGluZUNoYXJ0SGVpZ2h0ICsgbWFyZ2luVG9MZWdlbmQpICsgJyknKVxyXG4gICAgICAgICAgLnNlbGVjdEFsbCgncmVjdC5sZWdlbmQnKVxyXG4gICAgICAgICAgLmRhdGEoY2hhcnRMaW5lcy5fZ3JvdXBzWzBdKVxyXG4gICAgICAgICAgLmVudGVyKClcclxuICAgICAgICAgIC8vYXBwZW5kIHRoZSB3aG9sZSBsZWdlbmQgaW4gYSBlYWNoIGZ1bmN0aW9uXHJcbiAgICAgICAgICAuZWFjaChmdW5jdGlvbihkLCBpKSB7XHJcbiAgICAgICAgICAgICAgbGV0IHNwYWNpbmcgPSA2MDA7XHJcbiAgICAgICAgICAgICAgbGV0IHRleHRTcGFjZSA9IDQwO1xyXG4gICAgICAgICAgICAgIC8vIGFwcGVuZCB0aGUgcmVjdGFuZ2xlcyBmb3IgdGhlIGxlZ2VuZFxyXG4gICAgICAgICAgICAgIGQzLnNlbGVjdCh0aGlzKS5hcHBlbmQoJ3JlY3QnKVxyXG4gICAgICAgICAgICAgICAgICAuYXR0cignY2xhc3MnLCAnbGVnZW5kJylcclxuICAgICAgICAgICAgICAgICAgLmF0dHIoJ3dpZHRoJywgbGVnZW5kV2lkdGgpXHJcbiAgICAgICAgICAgICAgICAgIC5hdHRyKCdoZWlnaHQnLCBsZWdlbmRIZWlnaHQpXHJcbiAgICAgICAgICAgICAgICAgIC5hdHRyKCd4JywgKHNwYWNpbmcgKiBpKSArICdweCcpXHJcbiAgICAgICAgICAgICAgICAgIC5zdHlsZSgnZmlsbCcsIGQuc3R5bGUuc3Ryb2tlKTtcclxuXHJcbiAgICAgICAgICAgICAgLy8gYXBwZW5kIHRoZSB0ZXh0IGZvciB0aGUgbGVnZW5kXHJcbiAgICAgICAgICAgICAgZDMuc2VsZWN0KHRoaXMpLmFwcGVuZCgndGV4dCcpXHJcbiAgICAgICAgICAgICAgICAgIC5hdHRyKCdpZCcsIGQuYXR0cmlidXRlcy5pZC52YWx1ZSArICdMZWdlbmRUaXRsZScpXHJcbiAgICAgICAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsICdsaW5lLWNoYXJ0LWxlZ2VuZC10ZXh0JylcclxuICAgICAgICAgICAgICAgICAgLmF0dHIoJ3knLCB0ZXh0U3BhY2UpXHJcbiAgICAgICAgICAgICAgICAgIC5hdHRyKCd4JywgKHNwYWNpbmcgKiBpICsgbGVnZW5kV2lkdGggKyAxMCkgKyAncHgnKVxyXG4gICAgICAgICAgICAgICAgICAudGV4dChkLmF0dHJpYnV0ZXMubmFtZS52YWx1ZSArICc6ICcpO1xyXG5cclxuICAgICAgICAgICAgICAvL2FwcGVuZCB0aGUgdGV4dCBmb3IgdGhlIHZhbHVlIG9mIHRoZSBsaW5lXHJcbiAgICAgICAgICAgICAgZDMuc2VsZWN0KHRoaXMpLmFwcGVuZCgndGV4dCcpXHJcbiAgICAgICAgICAgICAgICAgIC5hdHRyKCdpZCcsIGQuYXR0cmlidXRlcy5pZC52YWx1ZSArICdWYWx1ZScpXHJcbiAgICAgICAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsICdsaW5lLWNoYXJ0LWxlZ2VuZC10ZXh0JylcclxuICAgICAgICAgICAgICAgICAgLmF0dHIoJ3knLCB0ZXh0U3BhY2UpXHJcbiAgICAgICAgICAgICAgICAgIC5hdHRyKCd4JywgKHNwYWNpbmcgKiBpICsgbGVnZW5kV2lkdGggK1xyXG4gICAgICAgICAgICAgICAgICAgICAgLy90aGUgbmV4dCBleHByZXNzaW9uIGdldHMgdGhlIHRleHQgbGVuZ3RoXHJcbiAgICAgICAgICAgICAgICAgICAgICBkMy5zZWxlY3QoJyMnICsgZC5hdHRyaWJ1dGVzLmlkLnZhbHVlICsgJ0xlZ2VuZFRpdGxlJykubm9kZSgpLmdldENvbXB1dGVkVGV4dExlbmd0aCgpICtcclxuICAgICAgICAgICAgICAgICAgICAgIDEwKSArICdweCcpXHJcbiAgICAgICAgICAgICAgICAgIC50ZXh0KCcwLjAnKTtcclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgLy9hcHBlbmQgYSBsZWdlbmQgZ3JvdXAgZm9yIHRoZSB0cmVuZCBjaGFydHNcclxuICAgICAgc3dhcm1MaW5lQ2hhcnRcclxuICAgICAgICAgIC5hcHBlbmQoJ2cnKVxyXG4gICAgICAgICAgLmF0dHIoJ2lkJywgJ3RyZW5kQ2hhcnRMZWdlbmQnKVxyXG4gICAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoJyArIG1hcmdpbi5ib3R0b20gKyAnLCcgKyAobGluZUNoYXJ0SGVpZ2h0ICsgbWFyZ2luVG9MZWdlbmQpICsgJyknKVxyXG4gICAgICAgICAgLnNlbGVjdEFsbCgncmVjdC5sZWdlbmQnKVxyXG4gICAgICAgICAgLmRhdGEoWyc1JSAtIDk1JScsICcyNSUgLSA3NSUnLCAnTWVkaWFuJ10pXHJcbiAgICAgICAgICAuZW50ZXIoKVxyXG4gICAgICAgICAgLy9hcHBlbmQgdGhlIHdob2xlIGxlZ2VuZCBpbiBhIGVhY2ggZnVuY3Rpb25cclxuICAgICAgICAgIC5lYWNoKGZ1bmN0aW9uKGQsIGkpIHtcclxuICAgICAgICAgICAgICBsZXQgc3BhY2luZyA9IDgwMDtcclxuICAgICAgICAgICAgICBsZXQgdGV4dFNwYWNlID0gNDA7XHJcbiAgICAgICAgICAgICAgLy8gYXBwZW5kIHRoZSByZWN0YW5nbGVzIGZvciB0aGUgbGVnZW5kXHJcbiAgICAgICAgICAgICAgZDMuc2VsZWN0KHRoaXMpLmFwcGVuZCgncmVjdCcpXHJcbiAgICAgICAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsICdsZWdlbmQnKVxyXG4gICAgICAgICAgICAgICAgICAuYXR0cignd2lkdGgnLCBsZWdlbmRXaWR0aClcclxuICAgICAgICAgICAgICAgICAgLmF0dHIoJ2hlaWdodCcsIGxlZ2VuZEhlaWdodClcclxuICAgICAgICAgICAgICAgICAgLmF0dHIoJ3gnLCAoc3BhY2luZyAqIGkpICsgJ3B4JylcclxuICAgICAgICAgICAgICAgICAgLnN0eWxlKCdmaWxsJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnIzc0YTljZic7XHJcbiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGkgPT09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJyMwNDVhOGQnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJyM1MjUyNTInO1xyXG4gICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgLy8gYXBwZW5kIHRoZSB0ZXh0IGZvciB0aGUgbGVnZW5kXHJcbiAgICAgICAgICAgICAgZDMuc2VsZWN0KHRoaXMpLmFwcGVuZCgndGV4dCcpXHJcbiAgICAgICAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsICdsaW5lLWNoYXJ0LWxlZ2VuZC10ZXh0JylcclxuICAgICAgICAgICAgICAgICAgLmF0dHIoJ3knLCB0ZXh0U3BhY2UpXHJcbiAgICAgICAgICAgICAgICAgIC5hdHRyKCd4JywgKHNwYWNpbmcgKiBpICsgbGVnZW5kV2lkdGggKyAxMCkgKyAncHgnKVxyXG4gICAgICAgICAgICAgICAgICAudGV4dChkKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAkKCcjdHJlbmRDaGFydExlZ2VuZCcpLmhpZGUoKTtcclxuXHJcbiAgICAgIHRoaXMuaW5pdExpbmVDaGFydEJ1dHRvbnMoKVxyXG5cclxuXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBJbml0IGxpbmUgY2hhcnQgYnV0dG9uIGxpc3RlbmVyc1xyXG4gICAqL1xyXG4gIGluaXRMaW5lQ2hhcnRCdXR0b25zKCkge1xyXG4gICAgICAvLyBhZGQgdGhlIExpbmUgY2hhcnQgYnV0dG9ucyB0byB0aGUgZmVhdHVyZSBwYW5lbFxyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc3dhcm1fZmVhdHVyZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgIGxldCBjYXBpdGFsaXplZF9mZWF0dXJlX3N0cmluZyA9IHRoaXMuc3dhcm1fZmVhdHVyZXNbaV0uc3BsaXQoJ18nKS5qb2luKCcgJyk7XHJcbiAgICAgICAgICBjYXBpdGFsaXplZF9mZWF0dXJlX3N0cmluZyA9IGNhcGl0YWxpemVkX2ZlYXR1cmVfc3RyaW5nLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgY2FwaXRhbGl6ZWRfZmVhdHVyZV9zdHJpbmcuc2xpY2UoMSk7XHJcblxyXG4gICAgICAgICAgJCgnI2xpbmUtY2hhcnQtZmVhdHVyZS1jaGVja2JveGVzJylcclxuICAgICAgICAgICAgICAuYXBwZW5kKCc8dHI+PHRoPiA8ZGl2IGNsYXNzPVwicHJldHR5IHAtc3dpdGNoIHAtZmlsbCBwLWJpZ2dlclwiPjxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBjbGFzcz1cImxpbmUtY2hhcnQtY2hlY2stYm94XCIgaWQ9XCJkcmF3LScgK1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLnN3YXJtX2ZlYXR1cmVzW2ldICsgJ1wiIGRhdGE9XCIjJyArIHRoaXMuc3dhcm1fZmVhdHVyZXNbaV0gKyAnTGluZVwiIC8+PGRpdiBjbGFzcz1cInN0YXRlXCI+PGxhYmVsPicgK1xyXG4gICAgICAgICAgICAgICAgICBjYXBpdGFsaXplZF9mZWF0dXJlX3N0cmluZyArICc8L2xhYmVsPjwvZGl2PjwvZGl2PjwvdGg+PC90cj4nKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgJCgnLmxpbmUtY2hhcnQtY2hlY2stYm94JykuY2hhbmdlKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgbGV0IGNoZWNrYm94ID0gJCh0aGlzKTtcclxuICAgICAgICAgIGlmIChjaGVja2JveC5wcm9wKCdjaGVja2VkJykpIHtcclxuICAgICAgICAgICAgICAkKGNoZWNrYm94LmF0dHIoJ2RhdGEnKSkuc2hvdygpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAkKGNoZWNrYm94LmF0dHIoJ2RhdGEnKSkuaGlkZSgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICB9XHJcblxyXG5cclxufVxyXG5cclxuLyoqXHJcbiAqIEFkZCBhIHRyZW5kIGNoYXJ0IHNob3dpbmcgbWVkaWFuIGFuZCBwZXJjZW50aWxlc1xyXG4gKiAvLyAtIHdoaWNoIGZlYXR1cmVcclxuICovXHJcbmV4cG9ydCBjbGFzcyBUcmVuZENoYXJ0IGV4dGVuZHMgQ2hhcnR7XHJcbiAgICBjb25zdHJ1Y3RvcihlbGVtLCBzd2FybURhdGEpe1xyXG4gICAgICBzdXBlcihzd2FybURhdGEpO1xyXG4gICAgICB0aGlzLmVsZW0gPSBlbGVtO1xyXG5cclxuICAgICAgdGhpcy50cmVuZGNoYXJ0KCk7XHJcbiAgICAgIC8vdGhpcy5kaXNhYmxlTGluZUNoYXJ0KCk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIGRpc2FibGVMaW5lQ2hhcnQoKSB7XHJcbiAgICAgICAgJCgnLmxpbmVDaGFydEJ1dHRvbicpLnByb3AoJ2NoZWNrZWQnLCBmYWxzZSkucHJvcCgnZGlzYWJsZWQnLCB0cnVlKTtcclxuICAgICAgICAkKCcubGluZS1jaGFydC1jaGVjay1ib3gnKS5hdHRyKCdkaXNhYmxlZCcsIHRydWUpO1xyXG4gICAgICAgICQoJy5saW5lQ2hhcnRMaW5lJykuYXR0cigndmlzaWJpbGl0eScsICdoaWRkZW4nKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgdHJlbmRjaGFydCgpe1xyXG4gICAgLy8gY2hlY2sgd2hpY2ggZmVhdHVyZSB0byBkaXNwbGF5IGluIHRoZSB0cmVuZCBjaGFydFxyXG4gICAgbGV0IGZlYXR1cmUgPSAnJztcclxuICAgIGlmICh0aGlzLmVsZW1bJ2lkJ10udG9Mb3dlckNhc2UoKS5pbmNsdWRlcygnc3BlZWQnKSkge1xyXG4gICAgICAgIGZlYXR1cmUgPSAnc3BlZWQnO1xyXG4gICAgfSBlbHNlIGlmICh0aGlzLmVsZW1bJ2lkJ10udG9Mb3dlckNhc2UoKS5pbmNsdWRlcygnYWNjZWxlcmF0aW9uJykpIHtcclxuICAgICAgICBmZWF0dXJlID0gJ2FjY2VsZXJhdGlvbic7XHJcbiAgICB9IGVsc2UgaWYgKHRoaXMuZWxlbVsnaWQnXS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKCdkaXN0YW5jZV9jZW50cm9pZCcpKSB7XHJcbiAgICAgICAgZmVhdHVyZSA9ICdkaXN0YW5jZV9jZW50cm9pZCc7XHJcbiAgICB9IGVsc2UgaWYgKHRoaXMuZWxlbVsnaWQnXS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKCdtaWRsaW5lX29mZnNldCcpKSB7XHJcbiAgICAgICAgZmVhdHVyZSA9ICdtaWRsaW5lX29mZnNldCc7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIC8vIGRhdGEgaXMgbm90IGxvYWRlZCBmdWxseSAtLSByZXR1cm5cclxuICAgIC8vaWYgKCFkYXRhc2V0WzBdW2ZlYXR1cmVdKSB7XHJcbiAgICAvLyAgICByZXR1cm47XHJcbiAgICAvL31cclxuICAgIC8vIGNoYW5nZSB0byB0aGUgdHJlbmQgY2hhcnQgbGVnZW5kXHJcbiAgICAkKCcjbGluZUNoYXJ0TGVnZW5kJykuaGlkZSgpO1xyXG4gICAgJCgnI3RyZW5kQ2hhcnRMZWdlbmQnKS5zaG93KCk7XHJcbiAgICAvLyBjaGVjayBpZiBhbHJlYWR5IGNvbXB1dGVkIGFuZCBvbmx5IGhpZGRlblxyXG4gICAgaWYgKCEkKCgnIycgKyBmZWF0dXJlICsgJ1RyZW5kQ2hhcnQnKSkubGVuZ3RoKSB7XHJcbiAgICAgICAgLy8gZ2V0IHRoZSBkYXRhIGZvciB0aGUgdHJlbmQgY2hhcnRcclxuICAgICAgICBsZXQgdHJlbmRDaGFydERhdGEgPSBbXTtcclxuICAgICAgICBsZXQgbnVtX2FuaW1hbHMgPSBhbmltYWxJZHMubGVuZ3RoO1xyXG4gICAgICAgIC8vIGNhbGN1bGF0ZSB0aGUgcGVyY2V0aWxlcyBmb3IgZXZlcnkgdGltZSBzdGVwXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzd2FybURhdGEubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgbGV0IHRtcCA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IG51bV9hbmltYWxzOyBqKyspIHtcclxuICAgICAgICAgICAgICAgIGlmIChkYXRhc2V0W2kgKiBudW1fYW5pbWFscyArIGpdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wLnB1c2goZGF0YXNldFtpICogbnVtX2FuaW1hbHMgKyBqXVtmZWF0dXJlXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdHJlbmRDaGFydERhdGEucHVzaChwZXJjZW50aWxlc0xpbmVDaGFydCh0bXApKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy9hZ2dyZWdhdGUgYW5kIGF2ZXJhZ2UgdGhlIHRyZW5kQ2hhcnREYXRhIHRvIHRoaXMubGluZUNoYXJ0V2lkdGggZGF0YSBwb2ludHNcclxuICAgICAgICBpZiAodHJlbmRDaGFydERhdGEubGVuZ3RoID4gdGhpcy5saW5lQ2hhcnRXaWR0aCkge1xyXG4gICAgICAgICAgICBsZXQgdG1wVHJlbmRDaGFydERhdGEgPSBbXTtcclxuXHJcbiAgICAgICAgICAgIC8vIFtwZXJjMDUscGVyYzI1LHBlcmM1MCxwZXJjNzUscGVyYzk1XVxyXG4gICAgICAgICAgICBsZXQgdG1wID0gWzAsIDAsIDAsIDAsIDBdO1xyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0cmVuZENoYXJ0RGF0YS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgLy8gYWdncmVnYXRlXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRtcC5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRtcFtqXSArPSB0cmVuZENoYXJ0RGF0YVtpXVtqXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIGRpdmlkZVxyXG4gICAgICAgICAgICAgICAgaWYgKGkgJSByYXRpbyA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdG1wLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRtcFtqXSArPSB0bXBbal0gLyByYXRpbztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy9hZGQgdG8gdGhlXHJcbiAgICAgICAgICAgICAgICAgICAgdG1wVHJlbmRDaGFydERhdGEucHVzaCh0bXApO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFtwZXJjMDUscGVyYzI1LHBlcmM1MCxwZXJjNzUscGVyYzk1XVxyXG4gICAgICAgICAgICAgICAgICAgIHRtcCA9IFswLCAwLCAwLCAwLCAwXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0cmVuZENoYXJ0RGF0YSA9IHRtcFRyZW5kQ2hhcnREYXRhO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBnZXQgbWluIGFuZCBtYXggZm9yIHRoZSBub3JtYWxpemF0aW9uXHJcbiAgICAgICAgbGV0IG1pbiA9IGQzLm1pbih0cmVuZENoYXJ0RGF0YSwgZnVuY3Rpb24oZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZFswXTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBsZXQgbWF4ID0gZDMubWF4KHRyZW5kQ2hhcnREYXRhLCBmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBkWzRdO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGxldCBub3JtYWxpemF0aW9uU2NhbGUgPSBkMy5zY2FsZUxpbmVhcigpLmRvbWFpbihbbWluLCBtYXhdKS5yYW5nZShbMCwgMTAwXSk7XHJcblxyXG4gICAgICAgIC8vIGFkZCBhIGdyb3VwIGZvciB0aGUgdHJlbmQgY2hhcnRcclxuICAgICAgICBsZXQgdHJlbmRDaGFydCA9IHpvb21Hcm91cC5hcHBlbmQoJ2cnKVxyXG4gICAgICAgICAgICAuYXR0cignaWQnLCAoZmVhdHVyZSArICdUcmVuZENoYXJ0JykpXHJcbiAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsICd0cmVuZENoYXJ0RGF0YScpO1xyXG4gICAgICAgIC8vIGFwcGVuZCB0aGUgem9vbSByZWN0YW5nbGUgYWdhaW4gdG8gdGhlIGVuZCBvZiB0aGUgZ3JvdXBcclxuICAgICAgICAkKCcuem9vbScpLmFwcGVuZFRvKCcjbGluZUNoYXJ0Wm9vbScpO1xyXG4gICAgICAgICQoJyNsaW5lQ2hhcnRUaW1lTGluZScpLmFwcGVuZFRvKCcjbGluZUNoYXJ0Wm9vbScpO1xyXG4gICAgICAgIC8vIHZhciB0byBzYXZlIHRoZSBmdW5jdGlvbnMgZm9yIHRoZSB6b29tXHJcbiAgICAgICAgdHJlbmRDaGFydHNab29tW2ZlYXR1cmVdID0ge307XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy50cmVuZENoYXJ0c0VsZW0ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgLy8gZnVuY3Rpb25zIGZvciB0aGUgdXBwZXIgYW5kIGlubmVyIGFyZWFzIGFuZCB0aGUgbWVkaWFuXHJcbiAgICAgICAgICAgIGxldCB0ZW1wO1xyXG4gICAgICAgICAgICAvLyBsb3dlciBvdXRlciBhcmVhIGFuZCBsb3dlciBpbm5lciBhcmVhXHJcbiAgICAgICAgICAgIGlmIChpIDwgMikge1xyXG4gICAgICAgICAgICAgICAgdGVtcCA9IGQzLmFyZWEoKVxyXG4gICAgICAgICAgICAgICAgICAgIC54KGZ1bmN0aW9uKGQsIGopIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHgoaik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAueTAoZnVuY3Rpb24oZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geShub3JtYWxpemF0aW9uU2NhbGUoZFsoaSArIDEpXSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLnkxKGZ1bmN0aW9uKGQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHkobm9ybWFsaXphdGlvblNjYWxlKGRbaV0pKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBtZWRpYW4gbGluZVxyXG4gICAgICAgICAgICBlbHNlIGlmIChpID09PSAyKSB7XHJcbiAgICAgICAgICAgICAgICB0ZW1wID0gZDMubGluZSgpXHJcbiAgICAgICAgICAgICAgICAgICAgLngoZnVuY3Rpb24oZCwgaikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geChqKTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC55KGZ1bmN0aW9uKGQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHkobm9ybWFsaXphdGlvblNjYWxlKGRbaV0pKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyB1cHBlciBpbm5lciBhcmVhIGFuZCB1cHBlciBvdXRlciBhcmVhXHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGkgPiAyKSB7XHJcbiAgICAgICAgICAgICAgICB0ZW1wID0gZDMuYXJlYSgpXHJcbiAgICAgICAgICAgICAgICAgICAgLngoZnVuY3Rpb24oZCwgaikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geChqKTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC55MChmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB5KG5vcm1hbGl6YXRpb25TY2FsZShkW2ldKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAueTEoZnVuY3Rpb24oZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geShub3JtYWxpemF0aW9uU2NhbGUoZFsoaSAtIDEpXSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIHNhdmUgdGhpcyBmb3IgdGhlIGxhdGVyIHpvb21cclxuICAgICAgICAgICAgdHJlbmRDaGFydHNab29tW2ZlYXR1cmVdW3RoaXMudHJlbmRDaGFydHNFbGVtW2ldXSA9IHRlbXA7XHJcbiAgICAgICAgICAgIC8vIGFwcGVuZCBpdCB0byB0aGUgcGF0aFxyXG4gICAgICAgICAgICB0cmVuZENoYXJ0LmFwcGVuZCgncGF0aCcpXHJcbiAgICAgICAgICAgICAgICAuZGF0YShbdHJlbmRDaGFydERhdGFdKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgdGhpcy50cmVuZENoYXJ0c0VsZW1baV0pXHJcbiAgICAgICAgICAgICAgICAuYXR0cignZCcsIHRlbXApO1xyXG4gICAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gc2hvdyB0aGUgdHJlbmQgY2hhcnRcclxuICAgICAgICAkKCgnIycgKyBmZWF0dXJlICsgJ1RyZW5kQ2hhcnQnKSkuc2hvdygpO1xyXG4gICAgfVxyXG59XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBVcGRhdGUgdGhlIGxpbmUgY2hhcnQgZmllbGRzIGFuZCB0aGUgbGluZSBjaGFydCB0aW1lIGxpbmVcclxuICovXHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBEcmF3aW5nIGZ1bmN0aW9uIC0gaXMgY2FsbGVkIGZvciBlYWNoIHRpbWVzdGVwXHJcbiAqIGluZGV4VGltZSBzYXZlcyB0aGUgY3VycmVudCB0aW1lXHJcbiAqL1xyXG5cclxuXHJcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICAgIFNldHRlclxyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbi8qKlxyXG4gKiBTZXQgdGhlIGluZGV4IHRpbWUgdG8gYSBuZXcgdmFsdWVcclxuICogQHBhcmFtIHtOdW1iZXJ9IHZhbHVlIC0gbmV3IHRpbWUgc3RlcFxyXG4gKi9cclxuXHJcblxyXG4vKipcclxuICogRGVjcmVhc2UgdGltZSBieSAxXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZGVjSW5kZXhUaW1lKCkge1xyXG4gICAgaW5kZXhUaW1lID0gaW5kZXhUaW1lIC0gMTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFNldCB0aGUgdGhlIG5ldyBhY3RpdmUgc2NhbGUgLSBlLmcuIHNwZWVkLCBhY2NlbGVyYXRpb24sIGJsYWNrIGV0Yy5cclxuICogQHBhcmFtIHtTdHJpbmd9IHZhbHVlIC0gYWN0aXZlIHNjYWxlIGZvciB0aGUgaW5kaXZpZHVhbCBhbmltYWxzXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc2V0QWN0aXZlU2NhbGUodmFsdWUpIHtcclxuICAgIGFjdGl2ZVNjYWxlID0gdmFsdWU7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTZXQgdGhlIG5ldyBtZWRvaWQgYW5pbWFsXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB2YWx1ZSAtIFVuaXF1ZXRoaXMuaWQgb2YgdGhlIGFuaW1hbFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNldE1lZG9pZEFuaW1hbCh2YWx1ZSkge1xyXG4gICAgbWVkb2lkQW5pbWFsID0gdmFsdWU7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTZXQgdGhlIHNlbGVjdGVkIGFuZCBoaWdobGlnaHRlZCBhbmltYWxzXHJcbiAqIEBwYXJhbSB7YXJyYXl9IHZhbHVlIC0gYXJyYXkgb2YgdW5xaXVldGhpcy5pZCBvZiB0aGUgYW5pbWFsc1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNldEFjdGl2ZUFuaW1hbHModmFsdWUpIHtcclxuICAgIGFjdGl2ZUFuaW1hbHMgPSB2YWx1ZTtcclxufVxyXG4iLCIvKmVzbGludC1kaXNhYmxlIG5vLXVudXNlZC1sZXRzKi9cclxuLypnbG9iYWwgd2luZG93LCQsIGQzLCBQb2x5Qm9vbCwgcGFyYW1ldGVycywgU2V0Ki9cclxuLy8gaW1wb3J0ICogYXMgc3B2IGZyb20gJy4vc3BhdGlhbF92aWV3LmpzJztcclxuXHJcbmltcG9ydCB7XHJcbiAgICBuZXR3b3JrSGllcmFyY2h5XHJcbn0gZnJvbSAnLi9leHBsb3JlLmpzJztcclxuXHJcbmltcG9ydCB7XHJcbiAgICBpbmRleFRpbWUsXHJcbiAgICBhcnJheUFuaW1hbHMsXHJcbiAgICBzZXRBY3RpdmVBbmltYWxzLFxyXG4gICAgZGVjSW5kZXhUaW1lLFxyXG4gICAgRHJhd2VyXHJcbn0gZnJvbSAnLi9zcGF0aWFsX3ZpZXcvc3BhdGlhbF92aWV3LmpzJztcclxuXHJcbmltcG9ydCB7XHJcbiAgICBzaG93TmV0d29ya0hpZXJhcmNoeSxcclxuICAgIG5ldHdvcmtDb2xvcixcclxuICAgIG5ldHdvcmtDb2xvclNjYWxlLFxyXG4gICAgbmV0d29ya0F1dG8sXHJcbiAgICBzZXROZXR3b3JMaW1pdCxcclxuICAgIG5ldHdvcmtMaW1pdCxcclxufSBmcm9tICcuL25ldHdvcmsuanMnO1xyXG5cclxuaW1wb3J0IHtcclxuICAgIHN0YW5kYXJkRGV2aWF0aW9uXHJcbn0gZnJvbSAnLi9oZWxwZXJzLmpzJztcclxuXHJcbmltcG9ydCB7XHJcbiAgICBzZXRUaW1lU2xpZGVyLFxyXG4gICAgaW5pdFRvb2x0aXAsXHJcbiAgICB0b29sdGlwRnVuY3Rpb24sXHJcbiAgICBpbml0U2xpZGVycyxcclxuICAgIHRvb2x0aXBcclxufSBmcm9tICcuL3NwYXRpYWxfdmlldy9pbnRlcmFjdGlvbi5qcyc7XHJcblxyXG5pbXBvcnQge1xyXG4gICAgLy9saW5lQ2hhcnQsXHJcbiAgICB1cGRhdGVMaW5lQ2hhcnQsXHJcbiAgICBMaW5lQ2hhcnRcclxufSBmcm9tICcuL2xpbmVfY2hhcnQuanMnO1xyXG5cclxubGV0IHpvb21Hcm91cDsgLy8gem9vbSBncm91cCBmb3IgdGhlIHNwZWNpZmljIGRlbmRyb2dyYW1cclxubGV0IHRyZWVtYXA7XHJcbmxldCB0b29sdGlwRGl2O1xyXG5sZXQgc3BhdGlhbFZpZXc7IC8vIGdldCB0aGUgc3BhdGlhbCB2aWV3IHN2ZyBmcm9tIHRoZSBtYWluIHZpc1xyXG5sZXQgc3ZnTGVnZW5kO1xyXG5sZXQgaGllcmFyY2h5TGV2ZWxzID0ge307XHJcbmxldCBzZXRPcGVyYXRpb24gPSAndW5pb24nO1xyXG5sZXQgaWQ7IC8vIG5lZWRlZCBmb3IgdGhlIGNvbGxhcHNlIGZ1bmN0aW9uXHJcbi8vU3RhdGljIGNvbG9yIHNjYWxlIGZvciB0aGUgZGVuZHJvZ3JhbSB2YXJpYWNuZSBjb2xvcmluZ1xyXG5sZXQgc3RhbmRhcmREZXZpYXRpb25Db2xvclNjYWxlID0gZDMuc2NhbGVUaHJlc2hvbGQoKVxyXG4gICAgLmRvbWFpbihcclxuICAgICAgICBbMCwgLjEsIC4yLCAuMywgLjQsIC41LCAuNiwgLjcsIC44LCAuOSwgMV1cclxuICAgIClcclxuICAgIC5yYW5nZShbJyNmN2ZiZmYnLCAnI2RlZWJmNycsICcjYzZkYmVmJywgJyM5ZWNhZTEnLCAnIzZiYWVkNicsICcjNDI5MmM2JywgJyMyMTcxYjUnLCAnIzA4NTE5YycsICcjMDgzMDZiJ10pO1xyXG5cclxuZXhwb3J0IGNvbnN0IG1heE51bWJlckhpZXJhcmNoaWVzID0gNDtcclxuZXhwb3J0IGxldCBuZXR3b3JrSGllcmFyY2h5SWRzID0gW107XHJcbmV4cG9ydCBsZXQgaGllcmFyY2h5Q29sb3JzID0ge307XHJcbmV4cG9ydCBsZXQgaGllcmFyY2h5R3JvdXBTdGRldiA9IHt9O1xyXG4vLyBUT0RPIGFkZCBtb3JlIGNvbG9yc1xyXG5leHBvcnQgbGV0IGNvbG9ycyA9IFsnIzdmYzk3ZicsICcjMzg2Y2IwJywgJyNlNzI5OGEnLCAnI2ZmOTkwMCddO1xyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgRGVuZHJvZ3JhbSBleHRlbmRzIERyYXdlcntcclxuICBjb25zdHJ1Y3Rvcigpe1xyXG4gICAgdGhpcy5pbml0RGVuZHJvZ3JhbSgpXHJcbiAgfVxyXG5cclxuICBpbml0RGVuZHJvZ3JhbSgpIHtcclxuICAgICAgLy8gY29uc3RhbmN0IGZhY3RvcnMgZm9yIHRoZSBkZW5kZ3JvZ3JhbVxyXG4gICAgICBsZXQgbWFyZ2luID0gMjAsXHJcbiAgICAgICAgICB3aWR0aCA9IDUwMDAsXHJcbiAgICAgICAgICBoZWlnaHQgPSA1MDAwO1xyXG5cclxuICAgICAgLy8gem9vbSBmdW5jdGlvbiBmb3IgdGhlIGRlbmRyb2dyYW1cclxuICAgICAgbGV0IHpvb20gPSBkMy56b29tKClcclxuICAgICAgICAgIC5zY2FsZUV4dGVudChbMSwgMTBdKVxyXG4gICAgICAgICAgLm9uKCd6b29tJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgLy9jb25zdHJhaW5lZCB6b29taW5nXHJcbiAgICAgICAgICAgICAgZDMuZXZlbnQudHJhbnNmb3JtLnggPSBNYXRoLm1pbigwLCB3aWR0aCAqIChkMy5ldmVudC50cmFuc2Zvcm0uayAtIDEpLFxyXG4gICAgICAgICAgICAgICAgICBNYXRoLm1heCh3aWR0aCAqICgxIC0gZDMuZXZlbnQudHJhbnNmb3JtLmspLCBkMy5ldmVudC50cmFuc2Zvcm0ueCkpO1xyXG5cclxuICAgICAgICAgICAgICBkMy5ldmVudC50cmFuc2Zvcm0ueSA9IE1hdGgubWluKDAsIGhlaWdodCAqIChkMy5ldmVudC50cmFuc2Zvcm0uayAtIDEpLFxyXG4gICAgICAgICAgICAgICAgICBNYXRoLm1heChoZWlnaHQgKiAoMSAtIGQzLmV2ZW50LnRyYW5zZm9ybS5rKSwgZDMuZXZlbnQudHJhbnNmb3JtLnkpKTtcclxuXHJcbiAgICAgICAgICAgICAgLy8gdHJhbnNsYXRlIGFuZCBzY2FsZVxyXG4gICAgICAgICAgICAgIHpvb21Hcm91cC5hdHRyKCd0cmFuc2Zvcm0nLCBkMy5ldmVudC50cmFuc2Zvcm0pO1xyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICAvLyBzdmcgY29udGFpbmVyIGZvciB0aGUgZGVuZHJvZ3JhbVxyXG4gICAgICBsZXQgc3ZnID0gZDMuc2VsZWN0KCcjZGVuZHJvZ3JhbS1wYW5lbCcpXHJcbiAgICAgICAgICAuY2xhc3NlZCgnc3ZnLWRlbmRyb2dyYW0tY29udGFpbmVyJywgdHJ1ZSlcclxuICAgICAgICAgIC5hcHBlbmQoJ3N2ZycpXHJcbiAgICAgICAgICAuYXR0cigncHJlc2VydmVBc3BlY3RSYXRpbycsICd4TWluWU1pbiBtZWV0JylcclxuICAgICAgICAgIC5hdHRyKCd2aWV3Qm94JywgJzAgMCAnICsgd2lkdGggKyAnICcgKyBoZWlnaHQpXHJcbiAgICAgICAgICAvLyBhZGQgdGhlIGNsYXNzIHN2Zy1jb250ZW50XHJcbiAgICAgICAgICAuY2xhc3NlZCgnc3ZnLWNvbnRlbnQtZGVuZHJvZ3JhbScsIHRydWUpXHJcbiAgICAgICAgICAuY2FsbCh6b29tKTtcclxuXHJcbiAgICAgIGluaXREZW5kcm9ncmFtTGVnZW5kKCk7XHJcblxyXG4gICAgICAvLyBhcHBlbmQgdGhlIHpvb20gZ3JvdXAgdG8gdGhlIHN2Z1xyXG4gICAgICB6b29tR3JvdXAgPSBzdmcuYXBwZW5kKCdnJylcclxuICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKCcgKyBtYXJnaW4gKyAnLCcgKyBtYXJnaW4gKyAnKScpXHJcbiAgICAgICAgICAuYXBwZW5kKCdzdmc6ZycpO1xyXG5cclxuICAgICAgLy8gZDMgdHJlZVxyXG4gICAgICB0cmVlbWFwID0gZDMudHJlZSgpIC8vZDMuY2x1c3RlcigpXHJcbiAgICAgICAgICAuc2l6ZShbKGhlaWdodCAtIDEwICogbWFyZ2luKSwgKHdpZHRoIC0gMTAgKiBtYXJnaW4pXSk7XHJcblxyXG4gICAgICAvLyBzZXQgdGhlIHNwYXRpYWwgdmlldyAtIG5lZWRlZCB0byBhZGQgdGhlIGNsdXN0ZXJpbmcgdG8gdGhlIHNwYXRpYWwgdmlldyB3aW5kb3dcclxuICAgICAgc3BhdGlhbFZpZXcgPSBkMy5zZWxlY3QoJy50YW5rJyk7XHJcblxyXG4gICAgICAvLyBpbml0IGRlbmRyb2dyYW0gc2xpZGVyXHJcbiAgICAgIC8vIGluaXRpYWxpemUgdGhlIE5ldHdvcmsgc2xpZGVyXHJcbiAgICAgICQoJyNkZW5kcm9ncmFtLXBhbmVsLWxldmVsLXNsaWRlcicpXHJcbiAgICAgICAgICAuc2xpZGVyKHtcclxuICAgICAgICAgICAgICByYW5nZTogJ21heCcsXHJcbiAgICAgICAgICAgICAgbWluOiAyLFxyXG4gICAgICAgICAgICAgIG1heDogMixcclxuICAgICAgICAgICAgICBzdGVwOiAxLFxyXG4gICAgICAgICAgICAgIHZhbHVlOiBoaWVyYXJjaHlMZXZlbHNbJ2gwJ10sXHJcbiAgICAgICAgICAgICAgc2xpZGU6IGZ1bmN0aW9uKGV2ZW50LCB1aSkge1xyXG4gICAgICAgICAgICAgICAgICBsZXQgaWQgPSAkKCcuc2hvdy1kZW5kcm9ncmFtLmJ0bi1wcmltYXJ5JykuYXR0cignZGF0YScpO1xyXG4gICAgICAgICAgICAgICAgICBzZXRIaWVyYXJjaHlMZXZlbChpZCwgdWkudmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICB1cGRhdGVEZW5kcm9ncmFtKCk7XHJcbiAgICAgICAgICAgICAgICAgIC8vIGlmIG5vIGFuaW1hdGlvbiBpcyBhY3RpdmUgZHJhdyB0aGUgbmV3IGNsdXN0ZXJpbmcgYW5kIGRlbmRyb2dyYW1cclxuICAgICAgICAgICAgICAgICAgLy8gZHJhd0RlbmRyb2dyYW0oKTtcclxuICAgICAgICAgICAgICAgICAgaWYgKCEkKCcjcGxheS1idXR0b24nKS5oYXNDbGFzcygnYWN0aXZlJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgIC8vZ28gYmFjayBvbmUgc2Vjb25kIGFuZCBkcmF3IHRoZSBuZXh0IGZyYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgICAvL3RoaXMgYXBwbHlzIHRoZSBjaGFuZ2VzXHJcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRlY0luZGV4VGltZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy5kcmF3KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRyYXdEZW5kcm9ncmFtKCk7XHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgIC8vIGluaXQgdGhlIHRvb2x0aXAgZm9yIHRoZSBkZW5kcm9ncmFtXHJcbiAgICAgIHRvb2x0aXBEaXYgPSBkMy5zZWxlY3QoJyNkZW5kcm9ncmFtLXRvb2x0aXAnKVxyXG4gICAgICAgICAgLnN0eWxlKCdsZWZ0JywgMCArICdweCcpXHJcbiAgICAgICAgICAuc3R5bGUoJ3RvcCcsIDAgKyAncHgnKVxyXG4gICAgICAgICAgLm9uKCdtb3VzZW92ZXInLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICB0b29sdGlwRGl2XHJcbiAgICAgICAgICAgICAgICAgIC5zdHlsZSgnb3BhY2l0eScsIDEpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgIC8vIGluaXQgdGhlIGhpZXJhcmNoeSBsZWdlbmRcclxuICAgICAgbGV0IGxlZ2VuZFdpZHRoID0gbWF4TnVtYmVySGllcmFyY2hpZXMgKiAxMDA7XHJcbiAgICAgIGxldCBsZWdlbmRIZWlnaHQgPSA2MDtcclxuXHJcbiAgICAgIHN2Z0xlZ2VuZCA9IGQzLnNlbGVjdCgnI2hpZXJhcmNoeS1sZWdlbmQtZGl2JylcclxuICAgICAgICAgIC5hcHBlbmQoJ3N2ZycpXHJcbiAgICAgICAgICAuYXR0cignaWQnLCAnaGllcmFyY2h5LWxlZ2VuZCcpXHJcbiAgICAgICAgICAuYXR0cignd2lkdGgnLCBsZWdlbmRXaWR0aClcclxuICAgICAgICAgIC5hdHRyKCdoZWlnaHQnLCBsZWdlbmRIZWlnaHQpO1xyXG5cclxuICAgICAgLy8gYWRkIHBhdHRlcm4gZm9yIHN0cmlwZWQgYmFja2dyb3VuZCBvZiBpbnRlcnNlY3Rpb25zIGV0Yy5cclxuICAgICAgc3BhdGlhbFZpZXcuYXBwZW5kKCdkZWZzJylcclxuICAgICAgICAgIC5hcHBlbmQoJ3N2ZzpwYXR0ZXJuJylcclxuICAgICAgICAgIC5hdHRyKCdpZCcsICdzdHJpcGVkJylcclxuICAgICAgICAgIC5hdHRyKCdwYXR0ZXJuVW5pdHMnLCAndXNlclNwYWNlT25Vc2UnKVxyXG4gICAgICAgICAgLmF0dHIoJ3dpZHRoJywgJzIwJylcclxuICAgICAgICAgIC5hdHRyKCdoZWlnaHQnLCAnNScpXHJcbiAgICAgICAgICAuYXR0cigncGF0dGVyblRyYW5zZm9ybScsICdyb3RhdGUoNjApJylcclxuICAgICAgICAgIC5hcHBlbmQoJ3JlY3QnKVxyXG4gICAgICAgICAgLmF0dHIoJ3dpZHRoJywgNSlcclxuICAgICAgICAgIC5hdHRyKCdoZWlnaHQnLCAxMClcclxuICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKDAsMCknKVxyXG4gICAgICAgICAgLnN0eWxlKCdmaWxsJywgJyM2NzAwMGQnKTtcclxuXHJcbiAgfTtcclxuXHJcbn1cclxuXHJcblxyXG4vKipcclxuICogSW5pdGlhbGl6ZSB0aGUgZGVuZHJvZ3JhbVxyXG4gKi9cclxuXHJcblxyXG4vKipcclxuICogRHJhdyB0aGUgZGVuZGdyb2dyYW0gZm9yIG9uZSBzdGVwXHJcbiAqIEZ1cnRoZXIgY2FsbHMgdGhlIGRyYXdIaWVyYXJjaHkgZnVuY3Rpb25cclxuICovXHJcblxyXG5cclxuLyoqXHJcbiAqIENvbGxhcHNlIGZ1bmN0aW9uIC0gb25seSBzaG93IHRoZSBhY3RpdmUgbGV2ZWwgYW5kIG9uZSBzdWIgbGV2ZWxcclxuICovXHJcbmZ1bmN0aW9uIGNvbGxhcHNlKGQpIHtcclxuICAgIGlmIChkLmNoaWxkcmVuICYmIGQuZGVwdGggPD0gaGllcmFyY2h5TGV2ZWxzWydoJyArIGlkXSkge1xyXG4gICAgICAgIGQuX2NoaWxkcmVuID0gZC5jaGlsZHJlbjtcclxuICAgICAgICBkLl9jaGlsZHJlbi5mb3JFYWNoKGNvbGxhcHNlKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgZC5jaGlsZHJlbiA9IG51bGw7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBEcmF3IHRoZSBhbGwgaGllcmFyY2hpZXMgaW4gdGhlIHNwYXRpYWwgdmlld1xyXG4gKiBhZGQgYSBncm91cCB3aXRoIHRoZSBpZHMgb2YgdGhlIGFuaW1hbHMgaW4gaXQgdG8gdGhlIHZpZXdcclxuICogd2l0aCBwYXRoIGNoaWxkIGVsZW1lbnRzXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZHJhd0hpZXJhcmNoeSgpIHtcclxuICAgIC8vIGlkIG9mIHRoZSBoaWVyYXJjaHkgZS5nLiBbMSw1LDNdXHJcbiAgICBsZXQgaGllcmFyY2h5SWRzID0gT2JqZWN0LmtleXMobmV0d29ya0hpZXJhcmNoeSkubWFwKGZ1bmN0aW9uKHgpIHtcclxuICAgICAgICByZXR1cm4geC5yZXBsYWNlKCdoJywgJycpO1xyXG4gICAgfSk7XHJcbiAgICAvLyAgVGhlIGNsdXN0ZXJpbmcgaW4gYW4gMkQgYXJyYXkgd2l0aCB3aGljaCBhbmltYWwgaWQgYmVsb25ncyB0byB3aGljaCBncm91cFxyXG4gICAgbGV0IGhpZXJhcmNoeVZlcnRpY2VzID0gW107XHJcblxyXG4gICAgLy8gaXRlcmF0ZSBvdmVyIHRoZSBoaWVyYXJjaHkgZGF0YSB0byBnZXQgdGhlIGhpZXJhcmNoeSBhbmltYWwgaWRzIHBlciBjbHVzdGVyaW5nIGFuZCBncm91cGluZ1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBoaWVyYXJjaHlJZHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBsZXQgdHJlZURhdGEgPSBuZXR3b3JrSGllcmFyY2h5WydoJyArIGhpZXJhcmNoeUlkc1tpXV1baW5kZXhUaW1lXTtcclxuICAgICAgICBsZXQgbm9kZXMgPSBkMy5oaWVyYXJjaHkodHJlZURhdGEsIGZ1bmN0aW9uKGQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGQuY2hpbGRyZW47XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIG5vZGVzID0gdHJlZW1hcChub2Rlcyk7XHJcbiAgICAgICAgbGV0IHJvb3QgPSBub2Rlc1snY2hpbGRyZW4nXVswXTtcclxuICAgICAgICBpZiAoc2hvd05ldHdvcmtIaWVyYXJjaHkgPT09IGhpZXJhcmNoeUlkc1tpXSkge1xyXG4gICAgICAgICAgICBuZXR3b3JrSGllcmFyY2h5SWRzID0gZ2V0SGllcmFyY2h5TGV2ZWwocm9vdCwgaGllcmFyY2h5SWRzW2ldKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gYWRkIHRoZSB2ZXJ0aWNlcyBpbnRvIHRoZSBhcnJheVxyXG4gICAgICAgIGhpZXJhcmNoeVZlcnRpY2VzLnB1c2goZ2V0SGllcmFyY2h5VmVydGljZXMoZ2V0SGllcmFyY2h5TGV2ZWwocm9vdCwgaGllcmFyY2h5SWRzW2ldKSkpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGlmIG1vcmUgdGhhbiAyIGhpZXJhcmNoaWVzIGFyZSBkcmF3blxyXG4gICAgaWYgKGhpZXJhcmNoeVZlcnRpY2VzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAvLyB1bmlvbiB0aGUgbGlzdCBvZiBwb2x5Z29ucyB0byBvbmUgcG9seWdvblxyXG4gICAgICAgIC8vIGZvciAobGV0IGkgPSAwOyBpIDwgaGllcmFyY2h5SWRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgLy8gICAgIGhpZXJhcmNoeVZlcnRpY2VzW2ldID0gdW5pb25Qb2x5Z29ucyhoaWVyYXJjaHlWZXJ0aWNlc1tpXSk7XHJcbiAgICAgICAgLy8gfVxyXG5cclxuICAgICAgICAvLyB0cmFuc2Zvcm0gYW5kIGNhbGN1bGF0ZSB0aGUgaW50ZXJzZWN0aW9uIHBvbHlnb25zIG9mIHRoZSBuIGhpZXJhcmNoaWVzXHJcbiAgICAgICAgLy8gaWYgKHNldE9wZXJhdGlvbiA9PT0gJ2ludGVyc2VjdGlvbicpIHtcclxuICAgICAgICAvLyAgICAgLy8gdGVtcCBzb2x1dGlvbiBvZiB0d28gaW50ZXJzZWN0aW9uc1xyXG4gICAgICAgIC8vICAgICBsZXQgdG1wSW50ZXJzZWN0aW9uID0gaGllcmFyY2h5VmVydGljZXNbMF07XHJcbiAgICAgICAgLy8gICAgIC8vIGl0ZXJhdGUgb3ZlciB0aGUgaGllcmFyY2hpZXMgYW5kIGludGVyc2VjdCBhbGwgb2YgdGhlbVxyXG4gICAgICAgIC8vICAgICBmb3IgKGxldCBpID0gMTsgaSA8IGhpZXJhcmNoeVZlcnRpY2VzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgLy8gICAgICAgICAvLyBpbnRlcnNlY3Rpb25cclxuICAgICAgICAvLyAgICAgICAgIHRtcEludGVyc2VjdGlvbiA9IFBvbHlCb29sLmludGVyc2VjdCh7XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgcmVnaW9uczogdG1wSW50ZXJzZWN0aW9uLCAvLyBsaXN0IG9mIHJlZ2lvbnNcclxuICAgICAgICAvLyAgICAgICAgICAgICBpbnZlcnRlZDogZmFsc2UgLy8gaXMgdGhpcyBwb2x5Z29uIGludmVydGVkP1xyXG4gICAgICAgIC8vICAgICAgICAgfSwge1xyXG4gICAgICAgIC8vICAgICAgICAgICAgIHJlZ2lvbnM6IGhpZXJhcmNoeVZlcnRpY2VzW2ldLFxyXG4gICAgICAgIC8vICAgICAgICAgICAgIGludmVydGVkOiBmYWxzZVxyXG4gICAgICAgIC8vICAgICAgICAgfSk7XHJcbiAgICAgICAgLy8gICAgICAgICAvLyBjb252ZXJ0IGl0IGFnYWluXHJcbiAgICAgICAgLy8gICAgICAgICB0bXBJbnRlcnNlY3Rpb24gPSB0bXBJbnRlcnNlY3Rpb25bJ3JlZ2lvbnMnXTtcclxuICAgICAgICAvLyAgICAgfVxyXG4gICAgICAgIC8vXHJcbiAgICAgICAgLy8gICAgIC8vIHJlc3VsdFxyXG4gICAgICAgIC8vICAgICBoaWVyYXJjaHlWZXJ0aWNlcyA9IFt0bXBJbnRlcnNlY3Rpb25dO1xyXG4gICAgICAgIC8vIH1cclxuICAgICAgICAvLyAvLyB0cmFuc2Zvcm0gYW5kIGNhbGN1bGF0ZSB0aGUgc3ltbWV0cmljIGRpZmZlcmVuY2UgcG9seWdvbnMgb2YgdGhlIG4gaGllcmFyY2hpZXNcclxuICAgICAgICAvLyBlbHNlIGlmIChzZXRPcGVyYXRpb24gPT09ICdzeW0tZGlmZmVyZW5jZScpIHtcclxuICAgICAgICAvLyAgICAgLy8geG9yID0gVW5pb24gb2YgYWxsIGhpZXJhcmNoaWVzIC0gaW50ZXJzZWN0aW9uIG9mIGFsbCBoaWVyYXJjaGllc1xyXG4gICAgICAgIC8vICAgICAvLyB0ZW1wIHNvbHV0aW9uIG9mIHR3byBpbnRlcnNlY3Rpb25zXHJcbiAgICAgICAgLy8gICAgIGxldCB0bXBJbnRlcnNlY3Rpb24gPSBoaWVyYXJjaHlWZXJ0aWNlc1swXTtcclxuICAgICAgICAvLyAgICAgLy8gaXRlcmF0ZSBvdmVyIHRoZSBoaWVyYXJjaGllcyBhbmQgaW50ZXJzZWN0IGFsbCBvZiB0aGVtXHJcbiAgICAgICAgLy8gICAgIGZvciAobGV0IGkgPSAxOyBpIDwgaGllcmFyY2h5VmVydGljZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAvLyAgICAgICAgIC8vIGludGVyc2VjdGlvblxyXG4gICAgICAgIC8vICAgICAgICAgdG1wSW50ZXJzZWN0aW9uID0gUG9seUJvb2wuaW50ZXJzZWN0KHtcclxuICAgICAgICAvLyAgICAgICAgICAgICByZWdpb25zOiB0bXBJbnRlcnNlY3Rpb24sIC8vIGxpc3Qgb2YgcmVnaW9uc1xyXG4gICAgICAgIC8vICAgICAgICAgICAgIGludmVydGVkOiBmYWxzZSAvLyBpcyB0aGlzIHBvbHlnb24gaW52ZXJ0ZWQ/XHJcbiAgICAgICAgLy8gICAgICAgICB9LCB7XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgcmVnaW9uczogaGllcmFyY2h5VmVydGljZXNbaV0sXHJcbiAgICAgICAgLy8gICAgICAgICAgICAgaW52ZXJ0ZWQ6IGZhbHNlXHJcbiAgICAgICAgLy8gICAgICAgICB9KTtcclxuICAgICAgICAvLyAgICAgICAgIC8vIGNvbnZlcnQgaXQgYWdhaW5cclxuICAgICAgICAvLyAgICAgICAgIHRtcEludGVyc2VjdGlvbiA9IHRtcEludGVyc2VjdGlvblsncmVnaW9ucyddO1xyXG4gICAgICAgIC8vICAgICB9XHJcbiAgICAgICAgLy8gICAgIC8vIGludGVyc2VjdGlvbiByZXN1bHRcclxuICAgICAgICAvLyAgICAgbGV0IGludGVyc2VjdGlvbkhpZXJhcmNoeVBvbHlnb25zID0gdG1wSW50ZXJzZWN0aW9uO1xyXG4gICAgICAgIC8vXHJcbiAgICAgICAgLy8gICAgIC8vIHVuaW9uXHJcbiAgICAgICAgLy8gICAgIGxldCB0bXBVbmlvbiA9IGhpZXJhcmNoeVZlcnRpY2VzWzBdO1xyXG4gICAgICAgIC8vICAgICAvLyBpdGVyYXRlIG92ZXIgdGhlIGhpZXJhcmNoaWVzIGFuZCBpbnRlcnNlY3QgYWxsIG9mIHRoZW1cclxuICAgICAgICAvLyAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCBoaWVyYXJjaHlWZXJ0aWNlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIC8vICAgICAgICAgLy8gaW50ZXJzZWN0aW9uXHJcbiAgICAgICAgLy8gICAgICAgICB0bXBVbmlvbiA9IFBvbHlCb29sLnVuaW9uKHtcclxuICAgICAgICAvLyAgICAgICAgICAgICByZWdpb25zOiB0bXBVbmlvbiwgLy8gbGlzdCBvZiByZWdpb25zXHJcbiAgICAgICAgLy8gICAgICAgICAgICAgaW52ZXJ0ZWQ6IGZhbHNlIC8vIGlzIHRoaXMgcG9seWdvbiBpbnZlcnRlZD9cclxuICAgICAgICAvLyAgICAgICAgIH0sIHtcclxuICAgICAgICAvLyAgICAgICAgICAgICByZWdpb25zOiBoaWVyYXJjaHlWZXJ0aWNlc1tpXSxcclxuICAgICAgICAvLyAgICAgICAgICAgICBpbnZlcnRlZDogZmFsc2VcclxuICAgICAgICAvLyAgICAgICAgIH0pO1xyXG4gICAgICAgIC8vICAgICAgICAgLy8gY29udmVydCBpdCBhZ2FpblxyXG4gICAgICAgIC8vICAgICAgICAgdG1wVW5pb24gPSB0bXBVbmlvblsncmVnaW9ucyddO1xyXG4gICAgICAgIC8vICAgICB9XHJcbiAgICAgICAgLy8gICAgIGxldCB1bmlvbkhpZXJhcmNoeVBvbHlnb25zID0gdG1wVW5pb247XHJcbiAgICAgICAgLy9cclxuICAgICAgICAvL1xyXG4gICAgICAgIC8vICAgICAvLyBzeW1tZXRyaWMgZGlmZmVyZW5jZVxyXG4gICAgICAgIC8vICAgICBsZXQgdG1wRGlmZmVyZW5jZSA9IFBvbHlCb29sLnhvcih7XHJcbiAgICAgICAgLy8gICAgICAgICByZWdpb25zOiB1bmlvbkhpZXJhcmNoeVBvbHlnb25zLCAvLyBsaXN0IG9mIHJlZ2lvbnNcclxuICAgICAgICAvLyAgICAgICAgIGludmVydGVkOiBmYWxzZSAvLyBpcyB0aGlzIHBvbHlnb24gaW52ZXJ0ZWQ/XHJcbiAgICAgICAgLy8gICAgIH0sIHtcclxuICAgICAgICAvLyAgICAgICAgIHJlZ2lvbnM6IGludGVyc2VjdGlvbkhpZXJhcmNoeVBvbHlnb25zLFxyXG4gICAgICAgIC8vICAgICAgICAgaW52ZXJ0ZWQ6IGZhbHNlXHJcbiAgICAgICAgLy8gICAgIH0pO1xyXG4gICAgICAgIC8vICAgICAvLyBjb252ZXJ0IGl0IGFnYWluXHJcbiAgICAgICAgLy8gICAgIHRtcERpZmZlcmVuY2UgPSB0bXBEaWZmZXJlbmNlWydyZWdpb25zJ107XHJcbiAgICAgICAgLy8gICAgIC8vIHJlc3VsdFxyXG4gICAgICAgIC8vICAgICBoaWVyYXJjaHlWZXJ0aWNlcyA9IFt0bXBEaWZmZXJlbmNlXTtcclxuICAgICAgICAvLyB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gREFUQSBKb2luXHJcbiAgICBsZXQgaGllcmFyY2hpZXMgPSBzcGF0aWFsVmlld1xyXG4gICAgICAgIC5zZWxlY3RBbGwoJ2cuaGllcmFyY2h5LWdyb3VwJylcclxuICAgICAgICAuZGF0YShoaWVyYXJjaHlWZXJ0aWNlcyk7XHJcblxyXG4gICAgLy8gRU5URVIgdGhlIGdyb3VwcyAtIGFkZHMgYSBzcGVjaWZpYyBpZCBhbmQgY29sb3JcclxuICAgIGhpZXJhcmNoaWVzXHJcbiAgICAgICAgLmVudGVyKClcclxuICAgICAgICAuYXBwZW5kKCdnJylcclxuICAgICAgICAuYXR0cignY2xhc3MnLCBmdW5jdGlvbihkLCBpKSB7XHJcbiAgICAgICAgICAgIGlmIChzZXRPcGVyYXRpb24gPT09ICdpbnRlcnNlY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2hpZXJhcmNoeS1ncm91cCBpbnRlcnNlY3Rpb24nO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHNldE9wZXJhdGlvbiA9PT0gJ3N5bS1kaWZmZXJlbmNlJykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICdoaWVyYXJjaHktZ3JvdXAgc3ltLWRpZmZlcmVuY2UnO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICdoaWVyYXJjaHktZ3JvdXAgaCcgKyBoaWVyYXJjaHlJZHNbaV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICAgIC5zdHlsZSgnZmlsbCcsIGZ1bmN0aW9uKGQsIGkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGhpZXJhcmNoeUNvbG9yc1snaCcgKyBoaWVyYXJjaHlJZHNbaV1dO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmF0dHIoJ3N0cm9rZScsIGZ1bmN0aW9uKGQsIGkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGhpZXJhcmNoeUNvbG9yc1snaCcgKyBoaWVyYXJjaHlJZHNbaV1dO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLm1vdmVUb0JhY2soKTtcclxuXHJcbiAgICAvLyBVUERBVEUgLSB0aGUgY2xhc3MgbmVlZGVkIGZvciBpbnRlcnNlY3Rpb24gYW5kIHN5bW1ldHJpYyBkaWZmZXJlbmNlXHJcbiAgICBoaWVyYXJjaGllcy5hdHRyKCdjbGFzcycsIGZ1bmN0aW9uKGQsIGkpIHtcclxuICAgICAgICBpZiAoc2V0T3BlcmF0aW9uID09PSAnaW50ZXJzZWN0aW9uJykge1xyXG4gICAgICAgICAgICByZXR1cm4gJ2hpZXJhcmNoeS1ncm91cCBpbnRlcnNlY3Rpb24nO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoc2V0T3BlcmF0aW9uID09PSAnc3ltLWRpZmZlcmVuY2UnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnaGllcmFyY2h5LWdyb3VwIHN5bS1kaWZmZXJlbmNlJztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gJ2hpZXJhcmNoeS1ncm91cCBoJyArIGhpZXJhcmNoeUlkc1tpXTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBFWElUXHJcbiAgICBoaWVyYXJjaGllcy5leGl0KClcclxuICAgICAgICAucmVtb3ZlKCk7XHJcblxyXG4gICAgLy8gSGllcmFjaHkgaHVsbHMgYWRkZWQgdG8gdGhlIHNwYXRpYWwgdmlldyAtIGdldCB0aGUgcG9pbnRzIGZvciBlYWNoIGFuaW1hbCBpbiB0aGVcclxuICAgIC8vIHNwYXRpYWwgdmlldyBzbyB0aGF0IGEgY29udmV4IGh1bGwgY2FuIGJlIGNhbGN1bGF0ZWRcclxuICAgIGxldCBoaWVyYXJ5SHVsbHMgPSBoaWVyYXJjaGllcy5zZWxlY3RBbGwoJ3BhdGguaGllcmFyY2h5LWh1bGwtcGF0aCcpXHJcbiAgICAgICAgLmRhdGEoZnVuY3Rpb24oZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZDtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAvLyBFTlRFUiBhbmQgY2FsY3VsYXRlIHRoZSBjb252ZXggaHVsbFxyXG4gICAgaGllcmFyeUh1bGxzXHJcbiAgICAgICAgLmVudGVyKClcclxuICAgICAgICAuYXBwZW5kKCdwYXRoJylcclxuICAgICAgICAvLyAuYXR0cignaWQnLCBmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgLy8gICAgIHJldHVybiAnaHAnICsgZC5qb2luKCcnKS5yZXBsYWNlKC8sL2csICcnKTtcclxuICAgICAgICAvLyB9KVxyXG4gICAgICAgIC5hdHRyKCdjbGFzcycsICdoaWVyYXJjaHktaHVsbC1wYXRoJylcclxuICAgICAgICAuYXR0cignZCcsIGZ1bmN0aW9uKGQpIHtcclxuICAgICAgICAgICAgLy8gcmV0dXJuIGRyYXdMaW5lKGQpO1xyXG4gICAgICAgICAgICByZXR1cm4gJ00nICsgZC5qb2luKCdMJykgKyAnWic7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgLy8gVVBEQVRFIHRoZSBjb252ZXggaHVsbFxyXG4gICAgaGllcmFyeUh1bGxzXHJcbiAgICAgICAgLmF0dHIoJ2QnLCBmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgIC8vIHJldHVybiBkcmF3TGluZShkKTtcclxuICAgICAgICAgICAgcmV0dXJuICdNJyArIGQuam9pbignTCcpICsgJ1onO1xyXG4gICAgICAgIH0pO1xyXG4gICAgLy8gLmF0dHIoJ2lkJywgZnVuY3Rpb24oZCkge1xyXG4gICAgLy8gcmV0dXJuICdocCcgKyBkLmpvaW4oJycpLnJlcGxhY2UoLywvZywgJycpO1xyXG4gICAgLy8gfSk7XHJcbiAgICAvLyBFWElUXHJcbiAgICBoaWVyYXJ5SHVsbHMuZXhpdCgpXHJcbiAgICAgICAgLnJlbW92ZSgpO1xyXG5cclxufVxyXG5cclxuLyoqXHJcbiAqIFVuaW9uIG11bHRpcGxlIHBvbHlnb25zIHRvZ2V0aGVyIC0gbmVlZGVkIG9yIGVsc2UgdGhlcmUgd2lsbCBiZSBob2xlcyBpbiB0aGUgaW50ZXJzZWN0aW9uc1xyXG4gKiBAcGFyYW0ge2FycmF5fSBwb2x5Z29ucyAtIGFycmF5IG9mIGFycmF5IG9mIHBvaW50c1xyXG4gKi9cclxuLy8gZnVuY3Rpb24gdW5pb25Qb2x5Z29ucyhwb2x5Z29ucykge1xyXG4vLyAgICAgLy8gY29uc29sZS5sb2cocG9seWdvbnMpO1xyXG4vLyAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb2x5Z29ucy5sZW5ndGg7IGkrKykge1xyXG4vLyAgICAgICAgIHBvbHlnb25zW2ldID0ge1xyXG4vLyAgICAgICAgICAgICByZWdpb25zOiBbcG9seWdvbnNbaV1dLFxyXG4vLyAgICAgICAgICAgICBpbnZlcnRlZDogZmFsc2UgLy8gaXMgdGhpcyBwb2x5Z29uIGludmVydGVkP1xyXG4vLyAgICAgICAgIH07XHJcbi8vICAgICB9XHJcbi8vICAgICAvLyB1bmlvbiBhIGxpc3Qgb2YgcG9seWdvbnMgdG9nZXRoZXJcclxuLy8gICAgIGxldCBzZWdtZW50cyA9IFBvbHlCb29sLnNlZ21lbnRzKHBvbHlnb25zWzBdKTtcclxuLy8gICAgIGZvciAobGV0IGkgPSAxOyBpIDwgcG9seWdvbnMubGVuZ3RoOyBpKyspIHtcclxuLy8gICAgICAgICBsZXQgc2VnMiA9IFBvbHlCb29sLnNlZ21lbnRzKHBvbHlnb25zW2ldKTtcclxuLy8gICAgICAgICBsZXQgY29tYiA9IFBvbHlCb29sLmNvbWJpbmUoc2VnbWVudHMsIHNlZzIpO1xyXG4vLyAgICAgICAgIHNlZ21lbnRzID0gUG9seUJvb2wuc2VsZWN0VW5pb24oY29tYik7XHJcbi8vICAgICB9XHJcbi8vICAgICByZXR1cm4gUG9seUJvb2wucG9seWdvbihzZWdtZW50cylbJ3JlZ2lvbnMnXTtcclxuLy8gfVxyXG5cclxuLyoqXHJcbiAqIEVkZ2UgZHJhd2luZyBtZXRob2Qgb2YgdGhlIGRlbmRyb2dyYW1cclxuICogQHBhcmFtIHtvYmplY3R9IGQgLSBUcmVlbWFwIGVsZW1lbnRcclxuICovXHJcbmZ1bmN0aW9uIGRpYWdvbmFsTGluZXMoZCkge1xyXG4gICAgcmV0dXJuICdNJyArIGQueCArICcsJyArIGQueSArXHJcbiAgICAgICAgJ1YnICsgZC5wYXJlbnQueSArICdIJyArIGQucGFyZW50Lng7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBPbiBjbGljayBmdW5jdGlvbiAtIGhpZ2hsaWdodCB0aGUgZWxlbWVudHMgaW4gdGhlIHNwYXRpYWwgdmlld1xyXG4gKiBAcGFyYW0ge29iamVjdH0gZCAtIFRyZWVtYXAgZWxlbWVudFxyXG4gKi9cclxuZnVuY3Rpb24gY2xpY2soZCkge1xyXG4gICAgc2V0QWN0aXZlQW5pbWFscyhkWydkYXRhJ11bJ25hbWUnXSk7XHJcbiAgICAvLyBpZiBubyBhbmltYXRpb24gaXMgYWN0aXZlIGRyYXcgdGhlIGRyYXcgb25lIHN0ZXBcclxuICAgIGlmICghJCgnI3BsYXktYnV0dG9uJykuaGFzQ2xhc3MoJ2FjdGl2ZScpKSB7XHJcbiAgICAgICAgZGVjSW5kZXhUaW1lKCk7XHJcbiAgICAgICAgZHJhdygpO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogR2V0IGFsbCB0aGUgY2x1c3RlcmluZyBvZiBhIHNwZWNpZmljIGxldmVsIGluIHRoZSBkZW5kcm9ncmFtIHRyZWVcclxuICogRm9yIGluc3RhbmNlIGFsbCBjbHVzdGVycyBmcm9tIGxldmVsIDVcclxuICogQHBhcmFtIHtvYmplY3R9IHJvb3QgLSBSb290IG9mIHRoZSB0cmVlbWFwXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBoaWVhcmNoeSAtIE51bWJlciBvZiBoaWVyYXJjaHkgZnJvbSBbMC0zXVxyXG4gKi9cclxuZnVuY3Rpb24gZ2V0SGllcmFyY2h5TGV2ZWwocm9vdCwgaGllcmFyY2h5KSB7XHJcbiAgICBsZXQgcmVzdWx0ID0gW107XHJcbiAgICBsZXQgbGV2ZWwgPSBoaWVyYXJjaHlMZXZlbHNbJ2gnICsgaGllcmFyY2h5XTtcclxuXHJcbiAgICAvLyBzZWNvbmQgbGV2ZWwgb2YgdGhlIGFycmF5XHJcbiAgICBsZXQgdG1wX25vZGVzID0gcm9vdFsnY2hpbGRyZW4nXTtcclxuICAgIC8vIGl0ZXJhdGUgdGhyb3VnaCB0aGUgdHJlZVxyXG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCByb290WydoZWlnaHQnXTsgaSsrKSB7XHJcbiAgICAgICAgLy8gY2hlY2sgaWYgd2UgYXJlIGF0IHRoZSBzZWFyY2hlZCBsZXZlbFxyXG4gICAgICAgIGlmICh0bXBfbm9kZXNbMF0gJiYgdG1wX25vZGVzWzBdWydkZXB0aCddID09PSBsZXZlbCkge1xyXG4gICAgICAgICAgICAvLyBhZGQgZWFjaCBjbHVzdGVyIHRvIHRoZSByZXN1bHQgc2V0XHJcbiAgICAgICAgICAgIHRtcF9ub2Rlcy5mb3JFYWNoKGZ1bmN0aW9uKG5vZGUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygbm9kZVsnZGF0YSddWyduYW1lJ10gIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gobm9kZVsnZGF0YSddWyduYW1lJ10pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGdldCBhbGwgY2hpbGRyZW4gb2YgYSBzcGVjaWZpYyBsZXZlbCBpbiB0aGUgdHJlZVxyXG4gICAgICAgIGxldCB0bXAgPSBbXTtcclxuICAgICAgICB0bXBfbm9kZXMuZm9yRWFjaChmdW5jdGlvbihub2RlKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygbm9kZVsnY2hpbGRyZW4nXSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgIHRtcCA9IHRtcC5jb25jYXQobm9kZVsnY2hpbGRyZW4nXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICB0bXBfbm9kZXMgPSB0bXA7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG4vKipcclxuICogUmV0dXJuIHRoZSBzcGVjaWZpYyB2ZXJ0aWNlcyBvZiBhIGNsdXN0ZXJpbmcgaW4gdGhlIHNwYXRpYWwgdmlld1xyXG4gKiBSZXR1cm4gYW4gYXJyYXkgb2YgcG9pbnRzIFtbeCx5XVt4LHldLi4uXVxyXG4gKiBAcGFyYW0ge0FycmF5fSBoaWVyYXJjaGllcyAtIEFycmF5IG9mIGFycmF5cyB3aXRoIGVhY2ggYXJyYXkgY29udGFpbnMgYWxsIHRoZSBpZHMgZm9yIGEgc3BlY2lmaWMgY2x1c3RlcmluZ1xyXG4gKi9cclxuZnVuY3Rpb24gZ2V0SGllcmFyY2h5VmVydGljZXMoaGllcmFyY2hpZXMpIHtcclxuICAgIGxldCByZXN1bHQgPSBbXTsgLy8gcmVzdWx0IHNldFxyXG4gICAgaGllcmFyY2hpZXMuZm9yRWFjaChmdW5jdGlvbihjbHVzdGVyKSB7XHJcbiAgICAgICAgbGV0IHZlcnRpY2VzID0gW107IC8vIHZlcnRpY2VzIG9mIHRoZSBjbHVzdGVycyBpbiB0aGUgc3BhdGlhbCB2aWV3XHJcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBjbHVzdGVyLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgIGxldCBncm91cE1lbWJlciA9IGFycmF5QW5pbWFscy5maW5kKGQgPT4gZFsnYSddID09PSBjbHVzdGVyW2pdKTtcclxuICAgICAgICAgICAgaWYgKGdyb3VwTWVtYmVyKSB7XHJcbiAgICAgICAgICAgICAgICB2ZXJ0aWNlcy5wdXNoKFtncm91cE1lbWJlclsncCddWzBdLCAtZ3JvdXBNZW1iZXJbJ3AnXVsxXV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIEFuZHJldyBtb250b25lIGNoYWluIGFsZ29yaXRobSByZXV0cm5zIGZvciBwb2ludHMgZmV3ZXIgdGhhbiAzIG51bGxcclxuICAgICAgICBpZiAodmVydGljZXMubGVuZ3RoID49IDMpIHtcclxuICAgICAgICAgICAgcmVzdWx0LnB1c2goZDMucG9seWdvbkh1bGwodmVydGljZXMpKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTZXQgdGhlIGFjdGl2ZSBsZXZlbCBmb3IgYSBzcGVjaWZpYyBkZW5kcm9ncmFtXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBoaWVyYXJjaHkgLSBIaWVyYXJjaHkgY2FuIGJlIGZyb20gWzAtM11cclxuICogQHBhcmFtIHtudW1iZXJ9IGxldmVsIC0gTmV3IGFjdGl2ZSBsZXZlbFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNldEhpZXJhcmNoeUxldmVsKGhpZXJhcmNoeSwgbGV2ZWwpIHtcclxuICAgIC8vIFRPRE8gY2F0Y2ggY2FzZXMgPCAwIGFuZCBiaWdnZXIgdGhhbiBvdmVyYWxsIGhlaWdodFxyXG4gICAgaGllcmFyY2h5TGV2ZWxzWydoJyArIGhpZXJhcmNoeV0gPSBsZXZlbDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJlbW92ZSB0aGUgZW50cnkgZm9yIHRoZSBoaWVyYXJjaCBsZXZlbFxyXG4gKiBAcGFyYW0ge251bWJlcn0gaGllcmFyY2h5IC0gSGllcmFyY2h5XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlSGllcmFyY2h5TGV2ZWwoaGllcmFyY2h5KSB7XHJcbiAgICAvLyBUT0RPIGNhdGNoIGNhc2VzIDwgMCBhbmQgYmlnZ2VyIHRoYW4gb3ZlcmFsbCBoZWlnaHRcclxuICAgIGRlbGV0ZSBoaWVyYXJjaHlMZXZlbHNbJ2gnICsgaGllcmFyY2h5XTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFNldCB0aGUgYWN0aXZlIGNvbG9yIGZvciBhIHNwZWNpZmljIGRlbmRyb2dyYW1cclxuICogQHBhcmFtIHtudW1iZXJ9IGhpZXJhcmNoeSAtIEhpZXJhcmNoeSBjYW4gYmUgZnJvbSBbMC0zXVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNldEhpZXJhcmNoeUNvbG9yKGhpZXJhcmNoeSkge1xyXG4gICAgLy8gY2hlY2sgaWYgdGhlIGhpZXJhcmNoeSBpcyBhbHJlYWR5IHNob3duIGFzIG5ldHdvcmtcclxuICAgIC8vIHRha2UgdGhlIHNhbWUgY29sb3JcclxuICAgIGZvciAobGV0IGtleSBpbiBuZXR3b3JrQ29sb3IpIHtcclxuICAgICAgICBpZiAoa2V5ID09PSAoJ2gnICsgaGllcmFyY2h5KSkge1xyXG4gICAgICAgICAgICBoaWVyYXJjaHlDb2xvcnNbJ2gnICsgaGllcmFyY2h5XSA9IG5ldHdvcmtDb2xvcltrZXldO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gaGllcmFyY2h5IGlzIG5vdCB2aXN1YWxpemVkIGFscmVhZHkgYXMgYSBuZXR3b3JrXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbG9ycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGxldCB0bXBfYm9vbGVhbiA9IHRydWU7XHJcbiAgICAgICAgZm9yIChsZXQga2V5IGluIGhpZXJhcmNoeUNvbG9ycykge1xyXG4gICAgICAgICAgICBpZiAoaGllcmFyY2h5Q29sb3JzLmhhc093blByb3BlcnR5KGtleSkpIHtcclxuICAgICAgICAgICAgICAgIGlmIChoaWVyYXJjaHlDb2xvcnNba2V5XSA9PT0gY29sb3JzW2ldKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wX2Jvb2xlYW4gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodG1wX2Jvb2xlYW4pIHtcclxuICAgICAgICAgICAgLy8gY2hlY2sgaWYgYSBuZXR3b3JrIGlzIGRlcGljdGVkXHJcbiAgICAgICAgICAgIC8vIGlmIHNvIHNraXAgdGhlIGNvbG9yIHdoaWNoIGlzIGFscmVhZHkgY2hvb3NlbiBmb3IgdGhlIG5ldHdvcmtcclxuICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKG5ldHdvcmtDb2xvcikubGVuZ3RoICE9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBrZXkgaW4gbmV0d29ya0NvbG9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5ldHdvcmtDb2xvcltrZXldICE9PSBjb2xvcnNbaV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGllcmFyY2h5Q29sb3JzWydoJyArIGhpZXJhcmNoeV0gPSBjb2xvcnNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBoaWVyYXJjaHlDb2xvcnNbJ2gnICsgaGllcmFyY2h5XSA9IGNvbG9yc1tpXTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZW1vdmUgdGhlIGNvbG9yIGZvciB0aGUgaGllcmFyY2ggbGV2ZWxcclxuICogQHBhcmFtIHtudW1iZXJ9IGhpZXJhcmNoeSAtIEhpZXJhcmNoeVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUhpZXJhcmNoeUNvbG9yKGhpZXJhcmNoeSkge1xyXG4gICAgZGVsZXRlIGhpZXJhcmNoeUNvbG9yc1snaCcgKyBoaWVyYXJjaHldO1xyXG59XHJcblxyXG4vKipcclxuICogQWRkIHRoZSBoaWVyYXJjaHkgYnV0dG9uIHRvIHRoZSBkaXZcclxuICogQHBhcmFtIHtudW1iZXJ9IGlkIC0gSGllcmFyY2h5IG9mIHRoZSBpZFxyXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZSAtIE5ldyBhY3RpdmUgbGV2ZWxcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBhZGRIaWVyYXJjaHlCdXR0b24oaWQsIG5hbWUpIHtcclxuICAgIGlmICgkKCcuc2hvdy1kZW5kcm9ncmFtJykubGVuZ3RoIDwgbWF4TnVtYmVySGllcmFyY2hpZXMpIHtcclxuICAgICAgICAkKCcjZGVuZHJvZ3JhbS1idXR0b25zLWRpdicpLmFwcGVuZCgnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgaWQ9XCJzaG93LWRlbmRyb2dyYW0tJyArIGlkICsgJ1wiIGRhdGE9JyArIGlkICsgJyBuYW1lPScgKyBuYW1lICtcclxuICAgICAgICAgICAgJyBjbGFzcz1cInNob3ctZGVuZHJvZ3JhbSBidG4gYnRuLWJsb2NrXCIgZGF0YS10b2dnbGU9XCJidXR0b25cIiBhcmlhLXByZXNzZWQ9XCJmYWxzZVwiIGF1dG9jb21wbGV0ZT1cIm9mZlwiPicgK1xyXG4gICAgICAgICAgICAnIDxzcGFuIGNsYXNzPVwiYnRuLWxhYmVsXCIgaWQ9XCJidG4tbGVmdFwiPiA8aSBjbGFzcz1cIm1kaSBtZGktYXJyb3ctY29sbGFwc2UtbGVmdFwiPjwvaT4mbmJzcCZuYnNwIFNob3cgJyArIG5hbWUgKyAnPC9zcGFuPicgK1xyXG4gICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJidG4tbGFiZWxcIiBpZD1cImJ0bi1yaWdodFwiPiA8aSBjbGFzcz1cIm1kaSBtZGktYXJyb3ctY29sbGFwc2UtcmlnaHRcIj48L2k+Jm5ic3AmbmJzcCBIaWRlICcgKyBuYW1lICsgJyA8L3NwYW4+PC9idXR0b24+IDxicj4nXHJcbiAgICAgICAgKTtcclxuICAgICAgICAkKCcjc2hvdy1kZW5kcm9ncmFtLScgKyBpZCkuZmluZCgnI2J0bi1yaWdodCcpLmhpZGUoKTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFJlbW92ZSBhIHNwZWNpZmljIGhpZXJhcmNoeSBidXR0b24gdG8gdGhlIGRpdlxyXG4gKiBAcGFyYW0ge251bWJlcn0gaWQgLSBIaWVyYXJjaHkgb2YgdGhlIGlkXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlSGllcmFyY2h5QnV0dG9uKGlkKSB7XHJcbiAgICAvLyByZW1vdmUgdGhlIGZvbGxvd2luZyBsaW5lIGJyZWFrIGFuZCBlbGVtZW50XHJcbiAgICAkKCcjc2hvdy1kZW5kcm9ncmFtLScgKyBpZCkubmV4dCgpLnJlbW92ZSgpO1xyXG4gICAgJCgnI3Nob3ctZGVuZHJvZ3JhbS0nICsgaWQpLnJlbW92ZSgpO1xyXG59XHJcblxyXG4vKipcclxuICogVXBkYXRlIHNsaWRlciBhbmQgdGV4dCBpbiB0aGUgZGVuZHJvZ3JhbSBwYW5lbFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZURlbmRyb2dyYW0oKSB7XHJcbiAgICAvLyBnZXQgdGhlIGltcG9ydGFudCBpbmZvXHJcbiAgICBsZXQgaWQgPSAkKCcuc2hvdy1kZW5kcm9ncmFtLmJ0bi1wcmltYXJ5JykuYXR0cignZGF0YScpO1xyXG4gICAgbGV0IG5hbWUgPSAkKCcuc2hvdy1kZW5kcm9ncmFtLmJ0bi1wcmltYXJ5JykuYXR0cignbmFtZScpO1xyXG4gICAgLy8gc2V0IHRoZSBuYW1lIG9mIHRoZSBkaXNwbGF5ZWQgaGllcmFyY2h5XHJcbiAgICAkKCcjZGVuZHJvZ3JhbS1wYW5lbC1uYW1lJykudGV4dChuYW1lKTtcclxuXHJcbiAgICAvLyBzZXQgc2xpZGVyIGFuZCAgdGV4dCB2YWx1ZVxyXG4gICAgJCgnI2RlbmRyb2dyYW0tcGFuZWwtbGV2ZWwtc2xpZGVyJykudmFsKGhpZXJhcmNoeUxldmVsc1snaCcgKyBpZF0pO1xyXG4gICAgJCgnI2RlbmRyb2dyYW0tcGFuZWwtbGV2ZWwtdGV4dCcpLnRleHQoaGllcmFyY2h5TGV2ZWxzWydoJyArIGlkXSk7XHJcblxyXG59XHJcblxyXG4vKipcclxuICogVXBkYXRlIGhpZXJhcmNoeSBsZWdlbmRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjaGFuZ2VIaWVyYXJjaHlMZWdlbmQoKSB7XHJcbiAgICBsZXQgbGVnZW5kOyAvLyB0aGUgY29sb3IgbGVnZW5kXHJcbiAgICBsZXQgbGVnZW5kVGV4dDsgLy8gY29sb3IgbGVnZW5kIHRleHRcclxuICAgIC8vIHZhcnMgZm9yIHRoZSBsZWdlbmRcclxuICAgIGxldCBsZWdlbmRTd2F0Y2hXaWR0aCA9IDUwO1xyXG4gICAgbGV0IGxlZ2VuZFN3YXRjaEhlaWdodCA9IDIwO1xyXG5cclxuICAgIC8vIFNob3cgb3IgaGlkZSB0aGUgc3ZnIGVsZW1lbnRcclxuICAgIGlmIChPYmplY3Qua2V5cyhoaWVyYXJjaHlDb2xvcnMpLmxlbmd0aCAhPT0gMCB8fCBPYmplY3Qua2V5cyhuZXR3b3JrQ29sb3IpLmxlbmd0aCAhPT0gMCkge1xyXG4gICAgICAgICQoJyNoaWVyYXJjaHktbGVnZW5kLWRpdicpLnNob3coKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgJCgnI2hpZXJhcmNoeS1sZWdlbmQtZGl2JykuaGlkZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBsZWdlbmREYXRhID0gW107XHJcbiAgICBsZXQgbGVnZW5kVGV4dERhdGEgPSBbXTtcclxuICAgIC8vIGdldCB0aGUgcmVxdWlyZWQgZGF0YVxyXG4gICAgJCgnLnNob3ctZGVuZHJvZ3JhbScpLmVhY2goZnVuY3Rpb24oaSwgb2JqKSB7XHJcbiAgICAgICAgLy8gY2hlY2sgaWYgZGF0YSBpcyBub3QgdW5kZWZpbmVkXHJcbiAgICAgICAgaWYgKGhpZXJhcmNoeUNvbG9yc1snaCcgKyAkKG9iaikuYXR0cignZGF0YScpXSAhPSBudWxsICYmICQob2JqKS5hdHRyKCduYW1lJykgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBsZWdlbmREYXRhLnB1c2goaGllcmFyY2h5Q29sb3JzWydoJyArICQob2JqKS5hdHRyKCdkYXRhJyldKTtcclxuICAgICAgICAgICAgbGVnZW5kVGV4dERhdGEucHVzaCgkKG9iaikuYXR0cignbmFtZScpKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIC8vIGFkZCB0aGUgbmV0d29yayBjb2xvclxyXG4gICAgaWYgKE9iamVjdC5rZXlzKG5ldHdvcmtDb2xvcikubGVuZ3RoICE9PSAwKSB7XHJcbiAgICAgICAgZm9yIChsZXQga2V5IGluIG5ldHdvcmtDb2xvcikge1xyXG4gICAgICAgICAgICBpZiAobGVnZW5kRGF0YS5pbmRleE9mKG5ldHdvcmtDb2xvcltrZXldKSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIGxlZ2VuZERhdGEucHVzaChuZXR3b3JrQ29sb3Jba2V5XSk7XHJcbiAgICAgICAgICAgICAgICBsZWdlbmRUZXh0RGF0YS5wdXNoKCdOZXR3b3JrJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBEQVRBIEpPSU5cclxuICAgIGxlZ2VuZCA9IHN2Z0xlZ2VuZC5zZWxlY3RBbGwoJ3JlY3QubGVnZW5kJylcclxuICAgICAgICAuZGF0YShsZWdlbmREYXRhKTtcclxuICAgIGxlZ2VuZFRleHQgPSBzdmdMZWdlbmQuc2VsZWN0QWxsKCd0ZXh0LmxlZ2VuZC10ZXh0JylcclxuICAgICAgICAuZGF0YShsZWdlbmRUZXh0RGF0YSk7XHJcblxyXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tIExlZ2VuZCBzd2F0Y2hlcyAgLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgLy8gVVBEQVRFIC0gbGVnZW5kXHJcbiAgICBsZWdlbmQuc3R5bGUoJ2ZpbGwnLCBmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgcmV0dXJuIGQ7XHJcbiAgICB9KTtcclxuICAgIC8vIEVOVEVSIC0gbGVnZW5kXHJcbiAgICBsZWdlbmRcclxuICAgICAgICAuZW50ZXIoKVxyXG4gICAgICAgIC5hcHBlbmQoJ3JlY3QnKVxyXG4gICAgICAgIC5hdHRyKCdjbGFzcycsICdsZWdlbmQnKVxyXG4gICAgICAgIC5hdHRyKCd3aWR0aCcsIGxlZ2VuZFN3YXRjaFdpZHRoKVxyXG4gICAgICAgIC5hdHRyKCdoZWlnaHQnLCBsZWdlbmRTd2F0Y2hIZWlnaHQpXHJcbiAgICAgICAgLmF0dHIoJ3knLCAwKVxyXG4gICAgICAgIC5hdHRyKCd4JywgZnVuY3Rpb24oZCwgaSkge1xyXG4gICAgICAgICAgICByZXR1cm4gKGxlZ2VuZFN3YXRjaFdpZHRoICsgMi41ICogaSAqIGxlZ2VuZFN3YXRjaFdpZHRoKSArICdweCc7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuc3R5bGUoJ2ZpbGwnLCBmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBkO1xyXG4gICAgICAgIH0pO1xyXG4gICAgLy8gRVhJVCAtIGxlZ2VuZFxyXG4gICAgbGVnZW5kLmV4aXQoKVxyXG4gICAgICAgIC5yZW1vdmUoKTtcclxuXHJcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0gVGV4dCAgLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgLy8gVVBEQVRFIC0gbGVnZW5kIHRleHRcclxuICAgIGxlZ2VuZFRleHQudGV4dChmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgcmV0dXJuIGQ7XHJcbiAgICB9KTtcclxuICAgIC8vIEVOVEVSIC0gbGVnZW5kIHRleHRcclxuICAgIGxlZ2VuZFRleHRcclxuICAgICAgICAuZW50ZXIoKVxyXG4gICAgICAgIC5hcHBlbmQoJ3RleHQnKVxyXG4gICAgICAgIC5hdHRyKCdjbGFzcycsICdsZWdlbmQtdGV4dCcpXHJcbiAgICAgICAgLmF0dHIoJ3knLCAyICogbGVnZW5kU3dhdGNoSGVpZ2h0KVxyXG4gICAgICAgIC5hdHRyKCd4JywgZnVuY3Rpb24oZCwgaSkge1xyXG4gICAgICAgICAgICByZXR1cm4gKGxlZ2VuZFN3YXRjaFdpZHRoICsgMi41ICogaSAqIGxlZ2VuZFN3YXRjaFdpZHRoKSArICdweCc7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAudGV4dChmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBkO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIC8vIEVYSVQgLSBsZWdlbmQgdGV4dFxyXG4gICAgbGVnZW5kVGV4dC5leGl0KClcclxuICAgICAgICAucmVtb3ZlKCk7XHJcblxyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIEluaXRpYWxpemUgdGhlIGRlbmRyb2dyYW0gbGVnZW5kXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaW5pdERlbmRyb2dyYW1MZWdlbmQoKSB7XHJcbiAgICBsZXQgbGVnZW5kV2lkdGggPSA1NTA7XHJcbiAgICBsZXQgbGVnZW5kSGVpZ2h0ID0gNjA7XHJcblxyXG4gICAgbGV0IGRlbmRyb2dyYW1MZWdlbmQgPSBkMy5zZWxlY3QoJyNkZW5kcm9ncmFtLXBhbmVsJylcclxuICAgICAgICAuYXBwZW5kKCdzdmcnKVxyXG4gICAgICAgIC5hdHRyKCdpZCcsICdkZW5kcm9ncmFtLWxlZ2VuZCcpXHJcbiAgICAgICAgLmF0dHIoJ3dpZHRoJywgbGVnZW5kV2lkdGgpXHJcbiAgICAgICAgLmF0dHIoJ2hlaWdodCcsIGxlZ2VuZEhlaWdodCk7XHJcblxyXG4gICAgJCgnI2RlbmRyb2dyYW0tbGVnZW5kJykuaGlkZSgpO1xyXG5cclxuICAgIGxldCBsZWdlbmQ7IC8vIHRoZSBjb2xvciBsZWdlbmRcclxuICAgIGxldCBsZWdlbmRUZXh0OyAvLyBjb2xvciBsZWdlbmQgdGV4dFxyXG4gICAgLy8gdmFycyBmb3IgdGhlIGxlZ2VuZFxyXG4gICAgbGV0IGxlZ2VuZFN3YXRjaFdpZHRoID0gNTA7XHJcbiAgICBsZXQgbGVnZW5kU3dhdGNoSGVpZ2h0ID0gMjA7XHJcblxyXG4gICAgbGV0IGxlZ2VuZERhdGEgPSBzdGFuZGFyZERldmlhdGlvbkNvbG9yU2NhbGUucmFuZ2UoKTtcclxuICAgIC8vVE9ETyBjaGFuZ2UgdGhpcyB0byBiZXR0ZXIgc29sdXRpb25cclxuICAgIGxldCBsZWdlbmRUZXh0RGF0YSA9IFsnbG93JywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICdoaWdoJ107XHJcblxyXG4gICAgbGVnZW5kID0gZGVuZHJvZ3JhbUxlZ2VuZC5zZWxlY3RBbGwoJ3JlY3QubGVnZW5kJylcclxuICAgICAgICAuZGF0YShsZWdlbmREYXRhKTtcclxuICAgIGxlZ2VuZFRleHQgPSBkZW5kcm9ncmFtTGVnZW5kLnNlbGVjdEFsbCgndGV4dC5sZWdlbmQtdGV4dCcpXHJcbiAgICAgICAgLmRhdGEobGVnZW5kVGV4dERhdGEpO1xyXG5cclxuICAgIC8vIEVOVEVSIC0gbGVnZW5kXHJcbiAgICBsZWdlbmRcclxuICAgICAgICAuZW50ZXIoKVxyXG4gICAgICAgIC5hcHBlbmQoJ3JlY3QnKVxyXG4gICAgICAgIC5hdHRyKCdjbGFzcycsICdsZWdlbmQnKVxyXG4gICAgICAgIC5hdHRyKCd3aWR0aCcsIGxlZ2VuZFN3YXRjaFdpZHRoKVxyXG4gICAgICAgIC5hdHRyKCdoZWlnaHQnLCBsZWdlbmRTd2F0Y2hIZWlnaHQpXHJcbiAgICAgICAgLmF0dHIoJ3knLCAwKVxyXG4gICAgICAgIC5hdHRyKCd4JywgZnVuY3Rpb24oZCwgaSkge1xyXG4gICAgICAgICAgICByZXR1cm4gKGkgKiBsZWdlbmRTd2F0Y2hXaWR0aCkgKyAncHgnO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLnN0eWxlKCdmaWxsJywgZnVuY3Rpb24oZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZDtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0gVGV4dCAgLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgLy8gRU5URVIgLSBsZWdlbmQgdGV4dFxyXG4gICAgbGVnZW5kVGV4dFxyXG4gICAgICAgIC5lbnRlcigpXHJcbiAgICAgICAgLmFwcGVuZCgndGV4dCcpXHJcbiAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2xlZ2VuZC10ZXh0JylcclxuICAgICAgICAuYXR0cigneScsIDIgKiBsZWdlbmRTd2F0Y2hIZWlnaHQpXHJcbiAgICAgICAgLmF0dHIoJ3gnLCBmdW5jdGlvbihkLCBpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoaSAqIGxlZ2VuZFN3YXRjaFdpZHRoKSArICdweCc7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAudGV4dChmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBkO1xyXG4gICAgICAgIH0pO1xyXG59XHJcblxyXG4vKipcclxuICogU2V0IHRoZSBzZXQgb3BlcmF0aW9uXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcGVyYXRpb24gLSBlLmcuIFwidW5pb25cIiBcImludGVyc2VjdGlvblwiIFwic3ltLWRpZmZlcmVuY2VcIlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNldFNldE9wZXJhdGlvbih2YWx1ZSkge1xyXG4gICAgc2V0T3BlcmF0aW9uID0gdmFsdWU7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTZXQgdGhlIGhpZXJhcmNoeSBncm91cCBzdGFuZGFyZCBkZXZpYXRpb25cclxuICogQHBhcmFtIHtTdHJpbmd9IGtleSAtIHVuaXF1ZSBoYXNoIGlkIGZvciB0aGUgZ3JvdXBcclxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIC0gdW5pcXVlIGhhc2ggaWQgZm9yIHRoZSBncm91cFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNldGhpZXJhcmNoeUdyb3VwU3RkZXYoa2V5LCB2YWx1ZSkge1xyXG4gICAgaWYgKGtleSBpbiBoaWVyYXJjaHlHcm91cFN0ZGV2KSB7XHJcbiAgICAgICAgaGllcmFyY2h5R3JvdXBTdGRldltrZXldLnB1c2godmFsdWUpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBoaWVyYXJjaHlHcm91cFN0ZGV2W2tleV0gPSBbdmFsdWVdO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogUmVzZXQgaGllcmFyY2h5IGdyb3VwIHN0YW5kYXJkIGRldmlhdGlvblxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHJlc2V0aGllcmFyY2h5R3JvdXBTdGRldigpIHtcclxuICAgIGhpZXJhcmNoeUdyb3VwU3RkZXYgPSB7fTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEhpZ2hsaWdodCBhIHN1YnNldCBvZiBhbmltYWxzIGluIHRoZSBzcGF0aWFsIHZpZXdcclxuICogQHBhcmFtIHthcnJheX0gYW5pbWFscyAtIGFycmF5IG9mIGFuaW1hbCBpZHMgd2hpY2ggaGF2ZSB0byBiZSBoaWdobGlnaHRlZFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGFkZEhpZ2hsaWdodFNwYXRpYWxWaWV3KGFuaW1hbHMpIHtcclxuICAgIC8vIHBvaW50cyB0byBjYWxjdWxhdGUgdGhlIGNvbnZleCBodWxsIG9mIHRoZSBoaWdobGlnaHQgY2x1c3RlclxyXG4gICAgbGV0IHZlcnRpY2VzID0gW107XHJcbiAgICAvLyBpdGVyYXRlIHRocm91Z2ggdGhlIG9iamVjdHMgaW4gdGhlIGNsdXN0ZXJcclxuICAgIC8vIGdldCB0aGUgcG9pbnRzIGFuZCBoaWdobGlnaHQgdGhlIGFuaW1hbHNcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYW5pbWFscy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGxldCB0bXBBbmltYWwgPSBzcGF0aWFsVmlldy5zZWxlY3QoJyNhbmltYWwtJyArIGFuaW1hbHNbaV0pO1xyXG4gICAgICAgIGxldCBwb2ludCA9IHRtcEFuaW1hbC5kYXRhKClbMF1bJ3AnXTtcclxuICAgICAgICB2ZXJ0aWNlcy5wdXNoKFtwb2ludFswXSwgLXBvaW50WzFdXSk7XHJcblxyXG4gICAgICAgIHRtcEFuaW1hbC5jbGFzc2VkKCdhbmltYWwtaGlnaGxpZ2h0JywgdHJ1ZSk7XHJcbiAgICB9XHJcbiAgICAvLyBhZGQgYSBwb2x5Z29uIGh1bGwgaW4gdGhlIHNwYXRpYWwgdmlld1xyXG4gICAgc3BhdGlhbFZpZXcuYXBwZW5kKCdwYXRoJylcclxuICAgICAgICAuYXR0cignY2xhc3MnLCAnaGlnaGxpZ2h0LWhpZXJhcmNoeScpXHJcbiAgICAgICAgLmF0dHIoJ2QnLCAoJ00nICsgZDMucG9seWdvbkh1bGwodmVydGljZXMpLmpvaW4oJ0wnKSArICdaJykpO1xyXG59XHJcblxyXG4vKipcclxuICogUmVtb3ZlIHRoZSBoaWdobGlnaHQgaW4gdGhlIHNwYXRpYWwgdmlld1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUhpZ2hsaWdodFNwYXRpYWxWaWV3KCkge1xyXG4gICAgLy8gcmVtb3ZlIHRoZSBjb2xvcmluZyBhbmQgdGhlIGhpZXJhcmNoeSBoaWdobGlnaHQgaHVsbFxyXG4gICAgZDMuc2VsZWN0QWxsKCcuYW5pbWFsJykuY2xhc3NlZCgnYW5pbWFsLWhpZ2hsaWdodCcsIGZhbHNlKTtcclxuICAgIGQzLnNlbGVjdEFsbCgnLmhpZ2hsaWdodC1oaWVyYXJjaHknKS5yZW1vdmUoKTtcclxufVxyXG4iLCIvKmVzbGludC1kaXNhYmxlIG5vLXVudXNlZC1sZXRzKi9cclxuLypnbG9iYWwgd2luZG93LCAkLCBkMyAqL1xyXG5pbXBvcnQge1xyXG4gICAgaGllcmFyY2h5Q29sb3JzLFxyXG4gICAgY29sb3JzLFxyXG4gICAgY2hhbmdlSGllcmFyY2h5TGVnZW5kXHJcbn0gZnJvbSAnLi9oaWVyYXJjaHkuanMnO1xyXG5cclxuXHJcblxyXG5leHBvcnQgbGV0IG5ldHdvcmtBdXRvID0gZmFsc2U7IC8vIGlmIHRydWUgdGhlIG5ldHdvcmsgZWRnZSBsaW1pdCBpcyBhdXRvbWF0aWNhbGx5IHN1Z2dlc3RlZFxyXG5leHBvcnQgbGV0IG5ldHdvcmtMaW1pdCA9IDAuNTtcclxuZXhwb3J0IGxldCBzaG93TmV0d29ya0hpZXJhcmNoeTtcclxuZXhwb3J0IGxldCBuZXR3b3JrQ29sb3IgPSB7fTtcclxuZXhwb3J0IGxldCBuZXR3b3JrSUQ7XHJcbmV4cG9ydCBsZXQgbmV0d29ya0JhY2tncm91bmQgPSB0cnVlO1xyXG5leHBvcnQgbGV0IG5ldHdvcmtCYWNrZ3JvdW5kTGltaXQgPSAxOyAvL2RyYXcgYmFja2dyb3VuZCBsaW5lIGlmIGxpbWl0IGlzIGV4Y2VlZGVkXHJcbi8vIGZpeGVkIGNvbG9yIHNjYWxlIGZvciB0aGUgbmV0d29ya1xyXG5cclxuLyoqXHJcbiAqIGNvbG9yIHNjYWxlIGZvciBuZXR3b3JrIC0gcmFuZ2UgaXMgZGVmaW5lZCBkeW5hbWljIGJhc2VkIG9uIHRoZSBoaWVyYXJoY3kgY29sb3JcclxuICovXHJcbmV4cG9ydCBsZXQgbmV0d29ya0NvbG9yU2NhbGUgPSBkMy5zY2FsZVRocmVzaG9sZCgpXHJcbiAgICAuZG9tYWluKFxyXG4gICAgICAgIFswLCAuMSwgLjIsIC4zLCAuNCwgLjUsIC42LCAuNywgLjgsIC45LCAxXVxyXG4gICAgKS5yYW5nZShbJyNmN2ZiZmYnLCAnI2RlZWJmNycsICcjYzZkYmVmJywgJyM5ZWNhZTEnLCAnIzZiYWVkNicsICcjNDI5MmM2JywgJyMyMTcxYjUnLCAnIzA4NTE5YycsICcjMDgzMDZiJ10pO1xyXG5cclxuXHJcbi8qKlxyXG4gKiBBZGQgdGhlIG5ldHdvcmsgIHNlbGVjdCBidXR0b25zIGFuZCBoaWVyYXJjaHkgY2hlY2tib3hlcyB0byB0aGUgbmV0d29yayBtb2RhbFxyXG4gKiBAcGFyYW0ge2FycmF5fSBkYXRhIC0gQXJyYXkgb2YgbmV0d29yayBkYXRhXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gYWRkTmV0d29ya0J1dHRvbnMoZGF0YSkge1xyXG4gICAgaWYgKGRhdGEubGVuZ3RoKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChkYXRhW2ldWydmaW5pc2hlZCddKSB7XHJcbiAgICAgICAgICAgICAgICAkKCcjbmV0d29ya3MtaGllcmFyY2hpZXMtdGFibGUgdGJvZHknKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJzx0cj48dGQ+JyArIGRhdGFbaV1bJ25hbWUnXSArICc8L3RkPiAnICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzx0ZD4gPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLWRlZmF1bHRcIiBkYXRhPScgKyBkYXRhW2ldWyduZXR3b3JrX2lkJ10gKyAnIG5hbWU9JyArIGRhdGFbaV1bJ25hbWUnXSArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc+PHNwYW4gY2xhc3M9XCJtZGkgbWRpLWdyYXBocWxcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L3NwYW4+PC9idXR0b24+PC90ZD4gJyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8dGQ+PGRpdiBjbGFzcz1cInByZXR0eSBwLXN3aXRjaCBwLWZpbGxcIj48aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgY2xhc3M9XCJoaWVhcmNoeS1jaGVja2JveFwiIGRhdGE9XCInICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVtpXVsnbmV0d29ya19pZCddICsgJ1wiIG5hbWU9XCInICsgZGF0YVtpXVsnbmFtZSddICsgJ1wiPjxkaXYgY2xhc3M9XCJzdGF0ZSBwLXN1Y2Nlc3NcIj48bGFiZWw+PC9sYWJlbD48L2Rpdj48L2Rpdj48L3RkPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHRkPi0tLTwvdGQ+J1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAnPHRkPjxkaXYgY2xhc3M9XCJwcmV0dHkgcC1zd2l0Y2ggcC1maWxsXCI+PGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGNsYXNzPVwibmV0d29yay1oaWVyYXJjaHktY2hlY2tib3hcIiBkYXRhPVwiJyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRhdGFbaV1bJ25ldHdvcmtfaWQnXSArICdcIj48ZGl2IGNsYXNzPVwic3RhdGUgcC1zdWNjZXNzXCI+PGxhYmVsPjwvbGFiZWw+PC9kaXY+PC9kaXY+PC90ZD4nXHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgJCgnI25ldHdvcmtzLWhpZXJhcmNoaWVzLXRhYmxlJylcclxuICAgICAgICAgICAgLmFwcGVuZCgnVGhlcmUgaXMgbm8gbmV0d29yayBkYXRhIGZvciB0aGlzIGRhdGFzZXQnKTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gICBTZXR0ZXJcclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG4vKipcclxuICogU2V0IHRoZSBuZXR3b3JrIGF1dG8gdmFsdWUgLSBpZiB0cnVlIHRoYW4gdGhlIG5ldHdvcmsgbGltaXQgaXMgc2V0IHRvIHRoZSAwLjk1IHBlcmNlbnRpbGUgb2YgYWxsIHZhbHVlc1xyXG4gKiBAcGFyYW0ge0Jvb2xlYW59IHZhbHVlXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc2V0TmV0d29ya0F1dG8odmFsdWUpIHtcclxuICAgIG5ldHdvcmtBdXRvID0gdmFsdWU7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTZXQgdGhlIG5ldHdvcmsgbGltaXQgd2l0aCB0aGUgc3BlY2lmaWMgbmV0d29yayBzbGlkZXIgLSBjdXN0b21cclxuICogMCA9IHNpbWlsYXIgYW5kIDEgdW5zaW1pbGFyIGZvciB0aGUgc3BlY2lmaWMgdGltZSBtb21lbnRcclxuICogQHBhcmFtIHtOdW1iZXJ9IHZhbHVlIC0gYmV0d2VlbiAwIGFuZCAxXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc2V0TmV0d29yTGltaXQodmFsdWUpIHtcclxuICAgIG5ldHdvcmtMaW1pdCA9IHZhbHVlO1xyXG59XHJcblxyXG4vKipcclxuICogU2V0IHRoZSBuZXR3b3JrIGluIGhpZXJhcmNoeSAoZS5nLiBoMCkgZmlsdGVyXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBoaWVyYXJjaHkgLSBlLmcuIDAtblxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNldE5ldHdvcmtIaWVyYXJjaHkodmFsdWUpIHtcclxuICAgIHNob3dOZXR3b3JrSGllcmFyY2h5ID0gdmFsdWU7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTZXQgdGhlIG5ldHdvcmsgbmV0d29yayBpZCAtIG5lZWRlZCBmb3IgaGllcmFyY2h5IHN0YW5kYXJkIGRldmlhdGlvbiBjb2xvcmluZ1xyXG4gKiBAcGFyYW0ge051bWJlcn0gdmFsdWUgLSBlLmcuIDAtblxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNldE5ldHdvcmtJRCh2YWx1ZSkge1xyXG4gICAgbmV0d29ya0lEID0gdmFsdWU7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTZXQgbmV0d29yayBjb2xvciBzY2FsZSByYW5nZVxyXG4gKiBAcGFyYW0ge051bWJlcn0gaWQgLSBpZCBvZiB0aGUgbmV0d29ya1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNldG5ldHdvcmtDb2xvcihuZXR3b3JrX2lkKSB7XHJcbiAgICAvLyBpZiBpZCA9IC0xIHNldCB0aGUgY29sb3IgdG8gbm90aGluZ1xyXG4gICAgaWYgKG5ldHdvcmtfaWQgPj0gMCkge1xyXG4gICAgICAgIG5ldHdvcmtDb2xvclsnaCcgKyBuZXR3b3JrX2lkXSA9ICcjMDgzMDZiJztcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbmV0d29ya0NvbG9yID0ge307XHJcbiAgICB9XHJcbiAgICBjaGFuZ2VIaWVyYXJjaHlMZWdlbmQoKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFNldCB0aGUgYm9vbGVhbiB2YWx1ZSBmb3IgdGhlIG5ldHdvcmsgYmFja2dyb3VuZCBjb2xvclxyXG4gKiBAcGFyYW0ge0Jvb2xlYW59IHZhbHVlIC0gdHJ1ZSBvciBmYWxzZVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNldE5ldHdvcmtCYWNrZ3JvdW5kKHZhbHVlKSB7XHJcbiAgICBuZXR3b3JrQmFja2dyb3VuZCA9IHZhbHVlO1xyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIFNldCB0aGUgbmV0d29yayBiYWNrZ3JvdW5kIGNvbG9yIGxpbWl0IC0gZHJhdyBiYWNrZ3JvdW5kIGxpbmUgaWYgbGltaXQgaXMgZXhjZWVkZWRcclxuICogQHBhcmFtIHtJbnRlZ2VyfSB2YWx1ZSAtIG5ldyBsaW1pdFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNldE5ldHdvcmtCYWNrZ3JvdW5kTGltaXQodmFsdWUpIHtcclxuICAgIG5ldHdvcmtCYWNrZ3JvdW5kTGltaXQgPSB2YWx1ZTtcclxufSIsIi8qZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLWxldHMqL1xyXG4vKmdsb2JhbCB3aW5kb3csICQsIHBhcmFtZXRlcnMgKi9cclxuXHJcbmxldCBKU09OQVBJX01JTUVUWVBFID0gJ2FwcGxpY2F0aW9uL3ZuZC5hcGkranNvbic7XHJcbnZhciBzb3VyY2U7XHJcblxyXG5pbXBvcnQge1xyXG4gICAgYWRkVG9EYXRhc2V0LFxyXG4gICAgc2V0RGF0YVNldFBlcmNlbnRpbGUsXHJcbiAgICBzZXRTd2FybURhdGEsXHJcbiAgICBzZXRNZXRhRGF0YSxcclxuICAgIHNldERhdGFzZXRGZWF0dXJlLFxyXG4gICAgc2V0TmV0d29ya0RhdGEsXHJcbiAgICBzZXRIaWVyYXJjaHlEYXRhLFxyXG4gICAgc2V0QW5pbWFsSWRzXHJcbn0gZnJvbSAnLi9leHBsb3JlLmpzJztcclxuXHJcbmltcG9ydCB7XHJcbiAgICBhZGROZXR3b3JrQnV0dG9ucyxcclxuICAgIHNldE5ldHdvcmtJRFxyXG59IGZyb20gJy4vbmV0d29yay5qcyc7XHJcblxyXG5pbXBvcnQge1xyXG4gICAgZW5hYmxlUGxheUJ1dHRvbixcclxuICAgIGRpc2FibGVQbGF5QnV0dG9uLFxyXG4gICAgYWRkQWJzb2x1dGVGZWF0dXJlQnV0dG9uc1xyXG59IGZyb20gJy4vaGVscGVycy5qcyc7XHJcblxyXG5pbXBvcnQge1xyXG4gICAgU3BhdGlhbFZpZXdcclxufSBmcm9tICcuL3NwYXRpYWxfdmlldy9zcGF0aWFsX3ZpZXcuanMnO1xyXG5cclxuLy8gaW1wb3J0IHtcclxuLy8gICAgIHJlc3BvbnNlUGFyYW1ldGVyc1xyXG4vLyB9IGZyb20gJy4vdmlzdWFsX3BhcmFtZXRlci5qcyc7XHJcblxyXG5cclxuLyoqXHJcbiAqIFN0cmVhbSB0aGUgbW92ZW1lbnQgZGF0YSBmcm9tIHRoZSBBUElcclxuICogTG9hZHMgb25seSB0aGUgZXhwbGljaXQgbW92ZW1lbnQgZGF0YVxyXG4gKi9cclxuLy9jb25zb2xlLmxvZyhkYXRhKTtcclxuZXhwb3J0IGZ1bmN0aW9uIHN0cmVhbU1vdmVtZW50RGF0YSgpIHtcclxuICAgIGlmICh3aW5kb3cuRXZlbnRTb3VyY2UpIHtcclxuICAgICAgICBzb3VyY2UgPSBuZXcgRXZlbnRTb3VyY2UoJy9hcGkvbW92ZW1lbnRfb25seS8nICsgcGFyYW1ldGVyc1snaWQnXSk7XHJcbiAgICAgICAgc291cmNlLm9ubWVzc2FnZSA9IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgaWYgKGUuZGF0YSA9PT0gJ2Nsb3NlJykge1xyXG4gICAgICAgICAgICAgICAgc291cmNlLmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAvLyBpZiBhbGwgYWpheCBxdWVyaWVzIGFyZSBjb21wZWx0ZSBpbml0aWFsaXplXHJcbiAgICAgICAgICAgICAgICAoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gY2hlY2tQZW5kaW5nUmVxdWVzdCgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCQuYWN0aXZlID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoY2hlY2tQZW5kaW5nUmVxdWVzdCwgMTAwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmlldyA9IG5ldyBTcGF0aWFsVmlldygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGNoZWNrUGVuZGluZ1JlcXVlc3QsIDEwMCk7XHJcbiAgICAgICAgICAgICAgICB9KSgpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYWRkVG9EYXRhc2V0KEpTT04ucGFyc2UoZS5kYXRhKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBzb3VyY2UuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgIGlmIChlLnJlYWR5U3RhdGUgPT0gRXZlbnRTb3VyY2UuQ0xPU0VEKSB7XHJcbiAgICAgICAgICAgICAgICBhbGVydCgnU3RyZWFtaW5nIGVycm9yJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCBmYWxzZSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGFsZXJ0KCdXZWJicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgc3RyZWFtaW5nJyk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBHZXQgdGhlIHBlcmNlbnRpbGUgZGF0YSBmcm9tIHRoZSBhcGkgZXhwb3J0IHRvIGV4cGxvcmUuanNcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRQZXJjZW50aWxlKCkge1xyXG4gICAgbGV0IGRhdGFTZXRQZXJjZW50aWxlID0gW107XHJcbiAgICAkLmFqYXgoe1xyXG4gICAgICAgIHVybDogJy9hcGkvcGVyY2VudGlsZS8nICsgcGFyYW1ldGVyc1snaWQnXSxcclxuICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxyXG4gICAgICAgIHR5cGU6ICdHRVQnLFxyXG4gICAgICAgIGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD11dGYtOCcsXHJcbiAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAnQWNjZXB0JzogSlNPTkFQSV9NSU1FVFlQRVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICAgICAgICAvLyBjb252ZXJ0IHRoZSBkYXRhU2V0UGVyY2VudGlsZSBpbnRvIGFuIGFycmF5XHJcbiAgICAgICAgICAgIC8vIFttaW4sIHBlcmNlbnRpbGVfMSwuLi4scGVyY2VudGlsZV85LG1heF1cclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBkYXRhU2V0UGVyY2VudGlsZVtkYXRhW2ldWydmZWF0dXJlJ11dID0gW2RhdGFbaV1bJ21pbiddLCBkYXRhW2ldWydwMSddLCBkYXRhW2ldWydwMiddLCBkYXRhW2ldWydwMyddLCBkYXRhW2ldWydwNSddLCBkYXRhW2ldWydwNyddLCBkYXRhW2ldWydwOCddLCBkYXRhW2ldWydwOSddLCBkYXRhW2ldWydtYXgnXV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc2V0RGF0YVNldFBlcmNlbnRpbGUoZGF0YVNldFBlcmNlbnRpbGUpO1xyXG4gICAgICAgICAgICBhZGRBYnNvbHV0ZUZlYXR1cmVCdXR0b25zKGRhdGFTZXRQZXJjZW50aWxlKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEdldCB0aGUgc3dhcm0gZmVhdHVyZXMgZm9yIHRoZSBsaW5lIGNoYXJ0IGZyb20gdGhlIGFwaVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFN3YXJtRmVhdHVyZXMoKSB7XHJcbiAgICBjb25zdCBzd2FybV9mZWF0dXJlcyA9IFsnc3dhcm1fdGltZScsICdzd2FybV9zcGVlZCcsICdzd2FybV9hY2NlbGVyYXRpb24nLCAnc3dhcm1fY29udmV4X2h1bGxfYXJlYScsXHJcbiAgICAgICAgJ3N3YXJtX2Rpc3RhbmNlX2NlbnRyb2lkJywgJ3N3YXJtX2RpcmVjdGlvbicsICdzd2FybV9wb2xhcmlzYXRpb24nXHJcbiAgICBdO1xyXG5cclxuICAgIC8vIGdldCBhbGwgdGhlIG90aGVyIHN3YXJtIGZlYXR1cmVzIGZvciB0aGUgbGluZSBjaGFydFxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzd2FybV9mZWF0dXJlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICQuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogJy9hcGkvZGF0YXNldC8nICsgcGFyYW1ldGVyc1snaWQnXSArICcvJyArIHN3YXJtX2ZlYXR1cmVzW2ldLFxyXG4gICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxyXG4gICAgICAgICAgICB0eXBlOiAnR0VUJyxcclxuICAgICAgICAgICAgY29udGVudFR5cGU6ICdhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PXV0Zi04JyxcclxuICAgICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICAgJ0FjY2VwdCc6IEpTT05BUElfTUlNRVRZUEVcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGZlYXR1cmUgPSBzd2FybV9mZWF0dXJlc1tpXS5yZXBsYWNlKCdzd2FybV8nLCAnJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgc2V0U3dhcm1EYXRhKGRhdGEsIGZlYXR1cmUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBHZXQgdGhlIG1lYWRhdGEgaW5mb3JtYXRpb25cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRNZXRhRGF0YSgpIHtcclxuICAgICQuYWpheCh7XHJcbiAgICAgICAgdXJsOiAnL2FwaS9tZXRhZGF0YS8nICsgcGFyYW1ldGVyc1snaWQnXSxcclxuICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxyXG4gICAgICAgIHR5cGU6ICdHRVQnLFxyXG4gICAgICAgIGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD11dGYtOCcsXHJcbiAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAnQWNjZXB0JzogSlNPTkFQSV9NSU1FVFlQRVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICAgICAgICBzZXRNZXRhRGF0YShkYXRhKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEdldCB0aGUgbmV0d29yayBkYXRhc2V0cyBmb3IgdGhlIGJ1dHRvbnNcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXROZXR3b3JrRGF0YUJ1dHRvbigpIHtcclxuICAgICQuYWpheCh7XHJcbiAgICAgICAgdXJsOiAnL2FwaS9kYXRhc2V0L25ldHdvcmtzLycgKyBwYXJhbWV0ZXJzWydpZCddLFxyXG4gICAgICAgIGRhdGFUeXBlOiAnanNvbicsXHJcbiAgICAgICAgdHlwZTogJ0dFVCcsXHJcbiAgICAgICAgY29udGVudFR5cGU6ICdhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PXV0Zi04JyxcclxuICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICdBY2NlcHQnOiBKU09OQVBJX01JTUVUWVBFXHJcbiAgICAgICAgfSxcclxuICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgICAgIGFkZE5ldHdvcmtCdXR0b25zKGRhdGEpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59XHJcblxyXG4vKipcclxuICogR2V0IHRoZSBzcGVjaWZjIGZlYXR1cmVcclxuICogQHBhcmFtIHtTdHJpbmd9IGZlYXR1cmUgLSBmb3IgaW5zdGFuY2Ugc3BlZWQsIGFjY2VsZXJhdGlvbiBldGMuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGF0YXNldEZlYXR1cmUoZmVhdHVyZSkge1xyXG4gICAgJC5hamF4KHtcclxuICAgICAgICB1cmw6ICcvYXBpL2RhdGFzZXQvJyArIHBhcmFtZXRlcnNbJ2lkJ10gKyAnLycgKyBmZWF0dXJlLFxyXG4gICAgICAgIGRhdGFUeXBlOiAnanNvbicsXHJcbiAgICAgICAgdHlwZTogJ0dFVCcsXHJcbiAgICAgICAgY29udGVudFR5cGU6ICdhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PXV0Zi04JyxcclxuICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICdBY2NlcHQnOiBKU09OQVBJX01JTUVUWVBFXHJcbiAgICAgICAgfSxcclxuICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgICAgIC8vIGFkZCB0aGUgc3BlZWQgZmVhdHVyZSB0byB0aGUgZGF0YXNldFxyXG4gICAgICAgICAgICBzZXREYXRhc2V0RmVhdHVyZShkYXRhLCBmZWF0dXJlKTtcclxuICAgICAgICAgICAgZW5hYmxlUGxheUJ1dHRvbigpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59XHJcblxyXG4vKipcclxuICogR2V0IHRoZSBzcGVjaWZjIHN3YXJtIGZlYXR1cmVcclxuICogQHBhcmFtIHtTdHJpbmd9IGZlYXR1cmUgLSBmb3IgaW5zdGFuY2UgY2VudHJvaWQsIG1lZG9pZCBldGMuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0U3dhcm1EYXRhc2V0RmVhdHVyZShmZWF0dXJlKSB7XHJcbiAgICBkaXNhYmxlUGxheUJ1dHRvbigpO1xyXG4gICAgJC5hamF4KHtcclxuICAgICAgICB1cmw6ICcvYXBpL2RhdGFzZXQvJyArIHBhcmFtZXRlcnNbJ2lkJ10gKyAnLycgKyBmZWF0dXJlLFxyXG4gICAgICAgIGRhdGFUeXBlOiAnanNvbicsXHJcbiAgICAgICAgdHlwZTogJ0dFVCcsXHJcbiAgICAgICAgY29udGVudFR5cGU6ICdhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PXV0Zi04JyxcclxuICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICdBY2NlcHQnOiBKU09OQVBJX01JTUVUWVBFXHJcbiAgICAgICAgfSxcclxuICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgICAgIC8vIGFkZCB0aGUgc3BlZWQgZmVhdHVyZSB0byB0aGUgZGF0YXNldFxyXG4gICAgICAgICAgICBzZXRTd2FybURhdGEoZGF0YSwgZmVhdHVyZSk7XHJcbiAgICAgICAgICAgIGVuYWJsZVBsYXlCdXR0b24oKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEdldCB0aGUgbmV0d29yayBmb3IgdGhlIHNwZWNpZmljIG5ldHdvcmtfaWRcclxuICogQHBhcmFtIHtTdHJpbmd9IG5ldHdvcmtfaWQgLSB1bmlxdWUgbmV0d29yayBpZCBvZiBhIGRhdGFzZXQuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0TmV0d29ya0RhdGEobmV0d29ya19pZCkge1xyXG4gICAgJC5hamF4KHtcclxuICAgICAgICB1cmw6ICcvYXBpL2RhdGFzZXQvbmV0d29yay8nICsgcGFyYW1ldGVyc1snaWQnXSArICcvJyArIG5ldHdvcmtfaWQsXHJcbiAgICAgICAgZGF0YVR5cGU6ICdqc29uJyxcclxuICAgICAgICB0eXBlOiAnR0VUJyxcclxuICAgICAgICBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9dXRmLTgnLFxyXG4gICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgJ0FjY2VwdCc6IEpTT05BUElfTUlNRVRZUEVcclxuICAgICAgICB9LFxyXG4gICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICAgICAgaWYgKGRhdGEubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICBzZXROZXR3b3JrRGF0YShKU09OLnBhcnNlKGRhdGFbMF1bJ2RhdGEnXSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVuYWJsZVBsYXlCdXR0b24oKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIC8vIG5lZWRlZCBmb3Igc3RhbmRhcmQgRGV2aWF0aW9uIGluIGRlbmRyb2dyYW1cclxuICAgIHNldE5ldHdvcmtJRChuZXR3b3JrX2lkKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEdldCB0aGUgbmV0d29yayBoaWVyYXJjaHkgZm9yIHRoZSBzcGVjaWZpYyBuZXR3b3JrX2lkXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBuZXR3b3JrX2lkIC0gdW5pcXVlIG5ldHdvcmsgaWQgb2YgYSBkYXRhc2V0LlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldE5ldHdvcmtIaWVyYXJjaHlEYXRhKG5ldHdvcmtfaWQpIHtcclxuICAgICQuYWpheCh7XHJcbiAgICAgICAgdXJsOiAnL2FwaS9kYXRhc2V0L25ldHdvcmsvaGllcmFyY2h5LycgKyBwYXJhbWV0ZXJzWydpZCddICsgJy8nICsgbmV0d29ya19pZCxcclxuICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxyXG4gICAgICAgIHR5cGU6ICdHRVQnLFxyXG4gICAgICAgIGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD11dGYtOCcsXHJcbiAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAnQWNjZXB0JzogSlNPTkFQSV9NSU1FVFlQRVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICAgICAgICBpZiAoZGF0YS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHNldEhpZXJhcmNoeURhdGEoSlNPTi5wYXJzZShkYXRhWzBdWydoaWVyYXJjaHknXSksIG5ldHdvcmtfaWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVuYWJsZVBsYXlCdXR0b24oKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEdldCB0aGUgZGlzdGluY3QgYW5pbWFsIGlkcyBmb3IgYSBzcGVjaWZjIGRhdGFzZXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRBbmltYWxJZHMoKSB7XHJcbiAgICAkLmFqYXgoe1xyXG4gICAgICAgIHVybDogJy9hcGkvZGF0YXNldC8nICsgcGFyYW1ldGVyc1snaWQnXSArICcvYW5pbWFsX2lkcycsXHJcbiAgICAgICAgZGF0YVR5cGU6ICdqc29uJyxcclxuICAgICAgICB0eXBlOiAnR0VUJyxcclxuICAgICAgICBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9dXRmLTgnLFxyXG4gICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgJ0FjY2VwdCc6IEpTT05BUElfTUlNRVRZUEVcclxuICAgICAgICB9LFxyXG4gICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICAgICAgc2V0QW5pbWFsSWRzKGRhdGEpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59XHJcblxyXG4vLyAvKipcclxuLy8gICogVmlzdWFsIHBhcmFtZXRlciBzdWdnZXN0aW9uIGFqYXggcXVlcnlcclxuLy8gICogQHBhcmFtIHtBcnJheX0gdHJhY2tlZERhdGEgLSB0cmFja2VkIGRhdGEgd2l0aCAuXHJcbi8vICAqL1xyXG4vLyBleHBvcnQgZnVuY3Rpb24gZ2V0U3VnZ2VzdGVkUGFyYW1ldGVycyh0cmFja2VkRGF0YSkge1xyXG4vLyAgICAgJC5hamF4KHtcclxuLy8gICAgICAgICB1cmw6ICcvYXBpL2RhdGFzZXQvdmlzdWFsX3BhcmFtZXRlci8nICsgcGFyYW1ldGVyc1snaWQnXSxcclxuLy8gICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxyXG4vLyAgICAgICAgIHR5cGU6ICdQT1NUJyxcclxuLy8gICAgICAgICBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9dXRmLTgnLFxyXG4vLyAgICAgICAgIGhlYWRlcnM6IHtcclxuLy8gICAgICAgICAgICAgJ0FjY2VwdCc6IEpTT05BUElfTUlNRVRZUEVcclxuLy8gICAgICAgICB9LFxyXG4vLyAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHtcclxuLy8gICAgICAgICAgICAgcmVzcG9uc2VQYXJhbWV0ZXJzKGRhdGEpO1xyXG4vLyAgICAgICAgIH0sXHJcbi8vICAgICAgICAgZGF0YTogdHJhY2tlZERhdGFcclxuLy8gICAgIH0pO1xyXG4vL1xyXG4vLyB9XHJcbiIsIi8qZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLWxldHMqL1xyXG4vKmdsb2JhbCB3aW5kb3csICQgKi9cclxuLy8gaW1wb3J0IGFsbCBqc1xyXG5pbXBvcnQgKiBhcyBxdWVyaWVzIGZyb20gJy4vYWpheF9xdWVyaWVzLmpzJztcclxuXHJcbmltcG9ydCB7XHJcbiAgICBpbml0aWFsaXplTWV0YWRkYXRhXHJcbn0gZnJvbSAnLi9tZXRhZGF0YS5qcyc7XHJcblxyXG5pbXBvcnQge1xyXG4gICAgc2V0SGllcmFyY2h5TGV2ZWwsXHJcbiAgICByZW1vdmVIaWVyYXJjaHlMZXZlbCxcclxuICAgIHNldEhpZXJhcmNoeUNvbG9yLFxyXG4gICAgcmVtb3ZlSGllcmFyY2h5Q29sb3IsXHJcbiAgICBjaGFuZ2VIaWVyYXJjaHlMZWdlbmRcclxufSBmcm9tICcuL2hpZXJhcmNoeS5qcyc7XHJcblxyXG4vLyBpbXBvcnQgY3NzXHJcbmltcG9ydCAnLi9leHBsb3JlLmNzcyc7XHJcblxyXG5pbXBvcnQgQ2hhcnQgZnJvbSAnLi9saW5lX2NoYXJ0LmpzJztcclxuXHJcbmV4cG9ydCBsZXQgZGF0YXNldCA9IFtdOyAvLyBtYWluIGRhdGFzZXQgd2l0aCB2YWx1ZXMgZm9yIGVhY2ggaW5kaXZpZHVhbCBhbmltYWxcclxuZXhwb3J0IGxldCBkYXRhc2V0TWV0YWRhdGEgPSBbXTsgLy8gbWV0YWRhdGFzZXQgZm9yIGVhY2ggaW5kaXZpZHVhbCBmaXNoXHJcbmV4cG9ydCBsZXQgc3dhcm1EYXRhID0gW107IC8vIHN3YXJtZGF0YSBmb3IgbGluZWNoYXJ0IGFuZCBhbHNvIG90aGVyIHN3YXJtIGZlYXR1cmVzXHJcbmV4cG9ydCBsZXQgZGF0YVNldFBlcmNlbnRpbGUgPSB7fTsgLy8gcGVjZW50aWxlcyBuZWVkZWQgZm9yIHRoZSBjb2xvciBtYXBwaW5nXHJcbmV4cG9ydCBsZXQgbmV0d29ya0RhdGEgPSB7fTsgLy8gbmV0d29yayBkYXRhXHJcbmV4cG9ydCBsZXQgbmV0d29ya0hpZXJhcmNoeSA9IHt9OyAvLyBuZXR3b3JrIGhpZXJhcmNoeSBkYXRhXHJcbmV4cG9ydCBsZXQgYW5pbWFsSWRzID0ge307IC8vIGRpc3RpbmN0IGFuaW1hbCBpZHNcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIEdldCB0aGUgYmFzaWMgZGF0YSB0byBnZXQgdGhlIHRvb2wgcnVubmluZy5cclxuICogYWZ0ZXIgdGhlIHBlbmRpbmcgYWpheCBxdWVyaWVzIGFyZSBmaW5pc2hlZFxyXG4gKiB0aGUgdG9vbCBpcyBkcmF3blxyXG4gKi9cclxuJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhwYXJhbWV0ZXJzKTtcclxuXHJcbiAgICAvLyBnZXQgdGhlIG1vdmVtZW50IGRhdGFcclxuICAgIHF1ZXJpZXMuc3RyZWFtTW92ZW1lbnREYXRhKCk7XHJcblxyXG4gICAgLy8gZ2V0IHRoZSBkYXRhU2V0UGVyY2VudGlsZVxyXG4gICAgcXVlcmllcy5nZXRQZXJjZW50aWxlKCk7XHJcblxyXG4gICAgLy8gZ2V0IHRoZSBkaXN0aW5jdCBhbmltYWwgaWRzIGZvciB0aGUgd2hvbGUgZGF0YXNldFxyXG4gICAgcXVlcmllcy5nZXRBbmltYWxJZHMoKTtcclxuXHJcbiAgICAvLyBnZXQgdGhlIHN3YXJtIGZlYXR1cmVzIGZvciB0aGUgbGluZSBjaGFydFxyXG4gICAgcXVlcmllcy5nZXRTd2FybUZlYXR1cmVzKCk7XHJcblxyXG4gICAgLy8gZ2V0IHRoZSBtZXRhZGF0YSBhbmQgaW5pdGlhbGl6ZSB0aGUgbWV0YWRhIHdpbmRvd1xyXG4gICAgcXVlcmllcy5nZXRNZXRhRGF0YSgpO1xyXG5cclxuICAgIC8vIGdldCB0aGUgaW5mb3JtYXRpb24gaWYgdGhlcmUgYXJlIGFscmVhZHkgbmV0d29ya3MgY3JlYXRlZCBmb3IgdGhpcyBkYXN0YXNldFxyXG4gICAgcXVlcmllcy5nZXROZXR3b3JrRGF0YUJ1dHRvbigpO1xyXG59KTtcclxuXHJcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICAgIEdldHRlciBhbmQgc2V0dGVyXHJcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuLyoqXHJcbiAqIENvbmNhY3QgdG8gdGhlIG1haW4gZGF0YXNldFxyXG4gKiB0aGUgaWRlYSBpcyB0byB1c2UgdGhpcyBvbmUgZGF5IGZvciBsYXp5IGxvYWRpbmdcclxuICogQHBhcmFtIHthcnJheX0gdmFsdWUgLSBhcnJheSBvZiBtb3ZlbWVudCBkYXRhc2V0c1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGFkZFRvRGF0YXNldCh2YWx1ZSkge1xyXG4gICAgZGF0YXNldCA9IGRhdGFzZXQuY29uY2F0KHZhbHVlKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFNldCBkYXRhc2V0IHBlcmNlbnRpbGVcclxuICogQHBhcmFtIHthcnJheX0gdmFsdWUgLSBhcnJheSBvZiBhcnJhcnlzXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc2V0RGF0YVNldFBlcmNlbnRpbGUodmFsdWUpIHtcclxuICAgIGRhdGFTZXRQZXJjZW50aWxlID0gdmFsdWU7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTZXQgZGF0YXNldCBtZXRhZGF0YVxyXG4gKiBAcGFyYW0ge2FycmF5fSB2YWx1ZSAtIGFycmF5XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc2V0TWV0YURhdGEodmFsdWUpIHtcclxuICAgIGRhdGFzZXRNZXRhZGF0YSA9IHZhbHVlO1xyXG4gICAgLy8gaW5pdGlhbGl6ZSB0aGUgbWV0YWRhdGEgbW9kYWxcclxuICAgIGluaXRpYWxpemVNZXRhZGRhdGEoKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEFkZCBhIG5ldyBmZWF0dXJlIGRpbWVuc2lvbiB0byB0aGUgc3dhcm0gZGF0YXNldFxyXG4gKiBAcGFyYW0ge2FycmF5fSBkYXRhIC0gQXJyYXkgb2Ygc3dhcm0gdmFsdWVzIGNvbnNpc3Rpbmcgb2YgW2ZlYXR1cmVfMCxmZWF0dXJlXzEsLi4uXVxyXG4gKiBAcGFyYW0ge3N0cmluZ30gZmVhdHVyZSAtIHN0cmluZyBhcnJheSBvZiB0aGUgZmVhdHVyZVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNldFN3YXJtRGF0YShkYXRhLCBmZWF0dXJlKSB7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAvLyBhZGQgdGhlIHRoZSBvYmplY3QgdG8gdGhlIGFycmF5IGlmIHRoZXJlIGlzIG5vIGVsZW1lbnQgeWV0XHJcbiAgICAgICAgaWYgKHR5cGVvZiBzd2FybURhdGFbaV0gPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgIHN3YXJtRGF0YS5wdXNoKHt9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGNoZWNrIGlmIGludGVnZXIgb3IgZmxvYXRcclxuICAgICAgICBpZiAoZGF0YVtpXSAmJiAhKGlzTmFOKGRhdGFbaV0pKSkge1xyXG4gICAgICAgICAgICBzd2FybURhdGFbaV1bZmVhdHVyZV0gPSArZGF0YVtpXTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBpcyBzdHJpbmdcclxuICAgICAgICAgICAgc3dhcm1EYXRhW2ldW2ZlYXR1cmVdID0gZGF0YVtpXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogQWRkIGEgbmV3IGZlYXR1cmUgZGltZW5zaW9uIHRvIHRoZSBkYXRhc2V0XHJcbiAqIEBwYXJhbSB7YXJyYXl9IGRhdGEgLSBBcnJheSBvZiBmZWF0dXJlcyB2YWx1ZXMgY29uc2lzdGluZyBvZiBbZmVhdHVyZV8wLCBmZWF0dXJlXzEsLi4uXVxyXG4gKiBAcGFyYW0ge3N0cmluZ30gZmVhdHVyZSAtIHN0cmluZyBhcnJheSBvZiB0aGUgZmVhdHVyZVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNldERhdGFzZXRGZWF0dXJlKGRhdGEsIGZlYXR1cmUpIHtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIC8vIGFkZCB0aGUgdGhlIG9iamVjdCB0byB0aGUgYXJyYXkgaWYgdGhlcmUgaXMgbm8gZWxlbWVudCB5ZXRcclxuICAgICAgICBpZiAodHlwZW9mIGRhdGFzZXRbaV0gPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgIGRhdGFzZXQucHVzaCh7fSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHBhcnNlIHRoZSBpbnRcclxuICAgICAgICBkYXRhc2V0W2ldW2ZlYXR1cmVdID0gK2RhdGFbaV07XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTZXQgdGhlIG5ldHdvcmsgdmFsdWVcclxuICogQHBhcmFtIHthcnJheX0gdmFsdWUgLSBBcnJheSBvZiBvZiBhcnJheXMgd2l0aCBhbGwgdmFsdWVzXHJcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSB0aGUgY2FsY3VsYXRlZCBhZGphY2VuY3kgbWF0cml4XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc2V0TmV0d29ya0RhdGEodmFsdWUpIHtcclxuICAgIG5ldHdvcmtEYXRhID0gdmFsdWU7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTZXQgdGhlIG5ldHdvcmsgaGllYXJoY3kgdmFsdWVcclxuICogQHBhcmFtIHthcnJheX0gdmFsdWUgLSBBcnJheSBvZiBvZiBhcnJheXMgd2l0aCBhbGwgdmFsdWVzXHJcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgd2l0aCBoaWVyYXJjaHlcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXRIaWVyYXJjaHlEYXRhKHZhbHVlLCBuZXR3b3JrX2lkKSB7XHJcbiAgICAvLyBpZiB0aGUgZWxlbWVudCBpcyBlbXB0eSByZW1vdmUgdGhlIGVsZW1lbnQgZnJvbSB0aGUgbmV0d3Jva0hpZXJhcmNoeSBvYmplY3RcclxuICAgIGlmIChPYmplY3Qua2V5cyh2YWx1ZSkubGVuZ3RoID09PSAwICYmIHZhbHVlLmNvbnN0cnVjdG9yID09PSBPYmplY3QpIHtcclxuICAgICAgICBkZWxldGUgbmV0d29ya0hpZXJhcmNoeVsnaCcgKyBuZXR3b3JrX2lkXTtcclxuICAgICAgICByZW1vdmVIaWVyYXJjaHlMZXZlbChuZXR3b3JrX2lkKTtcclxuICAgICAgICByZW1vdmVIaWVyYXJjaHlDb2xvcihuZXR3b3JrX2lkKTtcclxuICAgIH0gLy8gYWRkIGl0IHRvIHRoZSBuZXR3b3JrIGhpZXJhcmNoeVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgbmV0d29ya0hpZXJhcmNoeVsnaCcgKyBuZXR3b3JrX2lkXSA9IHZhbHVlO1xyXG4gICAgICAgIHNldEhpZXJhcmNoeUxldmVsKG5ldHdvcmtfaWQsIDIpO1xyXG4gICAgICAgIHNldEhpZXJhcmNoeUNvbG9yKG5ldHdvcmtfaWQpO1xyXG4gICAgfSAvLyB0b28gbWFueSBlbGVtZW50cyBjYW50IGJlIGFkZGVkXHJcblxyXG4gICAgY2hhbmdlSGllcmFyY2h5TGVnZW5kKCk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTZXQgYW5pbWFsIGlkcyBkYXRhc2V0XHJcbiAqIEBwYXJhbSB7YXJyYXl9IGlkcyAtIEFycmF5IG9mIGFsbCBkaXN0aW5jdCBhbmltYWwgaWRzXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc2V0QW5pbWFsSWRzKHZhbHVlKSB7XHJcbiAgICBhbmltYWxJZHMgPSB2YWx1ZTtcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9